{"version":3,"sources":["webpack:///./js/bibliotheek.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","codeveld","codeknop","getAuteur","datarow","authors","join","getPublishedDate","publishedDate","substring","getIsbn","isbn","industryIdentifiers","type","identifier","getLanguage","lang","nl","en","fr","de","bg","es","cs","da","et","el","ga","it","lv","lt","hu","mt","pl","pt","ro","sk","sl","fi","sv","language","on","event","preventDefault","categorieId","val","auteur","toLowerCase","trigger","after","boekenSource","datumTokenizer","tokenizers","whitespace","queryTokenizer","remote","url","wildcard","transform","response","rows","data","items","volumeInfo","index","transport","options","onSuccess","onError","a","request","params","fields","key","then","catch","initialize","typeahead","autoselect","hint","highlight","minLength","name","displayKey","source","ttAdapter","templates","header","suggestion","row","title","pageCount","publisher","inputlen","css","value","forEach","bestaandeBoekenSource","id"],"mappings":"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","file":"js/34.2f515300d6c88d5824e0.js","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport axios from 'axios';\nimport Bloodhound from 'corejs-typeahead';\nimport $ from 'jquery';\n$(function () {\n    function biebCodeVakvuller() {\n        var codeveld = $('input[name=code]');\n        var codeknop = $('<a class=\"btn genereer\" title=\"Biebcode invullen\">Genereer</a>');\n        codeknop.on('mousedown', function (event) {\n            event.preventDefault();\n            var categorieId = $('select[name=categorie_id]').val();\n            var auteur = $('input[name=auteur]').val().substring(0, 3).toLowerCase();\n            codeveld.val(categorieId + '.' + auteur).trigger('focus');\n        });\n        codeveld.after(codeknop);\n    }\n    biebCodeVakvuller();\n    function getAuteur(datarow) {\n        return datarow.authors ? datarow.authors.join(', ') : '';\n    }\n    function getPublishedDate(datarow) {\n        return datarow.publishedDate ? datarow.publishedDate.substring(0, 4) : '';\n    }\n    function getIsbn(datarow) {\n        var isbn = '';\n        if (datarow.industryIdentifiers\n            && datarow.industryIdentifiers[1]\n            && datarow.industryIdentifiers[1].type === 'ISBN_13') {\n            isbn = datarow.industryIdentifiers[1].identifier;\n        }\n        return isbn;\n    }\n    function getLanguage(datarow) {\n        var lang = {\n            nl: 'Nederlands', en: 'Engels', fr: 'Frans',\n            de: 'Duits', bg: 'Bulgaars', es: 'Spaans',\n            cs: 'Tsjechisch', da: 'Deens', et: 'Ests',\n            el: 'Grieks', ga: 'Iers', it: 'Italiaans',\n            lv: 'Lets', lt: 'Litouws', hu: 'Hongaars',\n            mt: 'Maltees', pl: 'Pools', pt: 'Portugees',\n            ro: 'Roemeens', sk: 'Slowaaks', sl: 'Sloveens',\n            fi: 'Fins', sv: 'Zweeds',\n        };\n        return lang[datarow.language] ? lang[datarow.language] : datarow.language;\n    }\n    var boekenSource = new Bloodhound({\n        datumTokenizer: Bloodhound.tokenizers.whitespace,\n        queryTokenizer: Bloodhound.tokenizers.whitespace,\n        remote: {\n            url: 'https://www.googleapis.com/books/v1/volumes?q=%QUERY',\n            wildcard: '%QUERY',\n            transform: function (response) {\n                var rows = [];\n                var data = response.data.items;\n                for (var i = 0; i < data.length; i++) {\n                    var datarow = data[i].volumeInfo;\n                    datarow.index = i;\n                    rows[i] = datarow;\n                }\n                return rows;\n            },\n            transport: function (options, onSuccess, onError) {\n                axios.request(__assign({ params: {\n                        fields: 'items(volumeInfo(authors,industryIdentifiers,language,pageCount,publishedDate,publisher,title))',\n                        key: 'AIzaSyC7zu4-25xbizddFWuIbn107WTTPr37jos',\n                    } }, options)).then(onSuccess).catch(onError);\n            },\n        },\n    });\n    boekenSource.initialize();\n    $('#boekzoeker').typeahead({\n        autoselect: true,\n        hint: true,\n        highlight: true,\n        minLength: 4,\n    }, {\n        name: 'boekenSource',\n        displayKey: 'title',\n        source: boekenSource.ttAdapter(),\n        templates: {\n            header: '<h3>Boeken</h3>',\n            suggestion: function (row) {\n                var title = \"Titel: \" + row.title + \"\\n\\t\\t\\t\\t| Auteur: \" + getAuteur(row) + \"\\n\\t\\t\\t\\t| Pagina's: \" + row.pageCount + \"\\n\\t\\t\\t\\t| Taal: \" + getLanguage(row) + \"\\n\\t\\t\\t\\t| ISBN: \" + getIsbn(row) + \"\\n\\t\\t\\t\\t| Uitgeverij: \" + row.publisher + \"\\n\\t\\t\\t\\t| Uitgavejaar: \" + getPublishedDate(row);\n                return \"\\n<div style=\\\"margin: 5px 10px\\\" title=\\\"\" + title + \"\\\">\\n\\t<span class=\\\"dikgedrukt\\\">\" + row.title + \"</span><br /><span class=\\\"cursief\\\">\" + getAuteur(row) + \"</span>\\n</div>\";\n            },\n        },\n    }).on('keyup', function () {\n        var inputlen = $(this).val().length;\n        if (inputlen > 0 && inputlen < 7) {\n            $(this).css('background-color', '#ffcc96');\n        }\n        else {\n            $(this).css('background-color', 'white');\n        }\n    }).on('typeahead:selected', function (event, row) {\n        var values = [\n            { key: 'titel', value: row.title },\n            { key: 'auteur', value: getAuteur(row) },\n            { key: 'paginas', value: row.pageCount },\n            { key: 'taal', value: getLanguage(row) },\n            { key: 'isbn', value: getIsbn(row) },\n            { key: 'uitgeverij', value: row.publisher },\n            { key: 'uitgavejaar', value: getPublishedDate(row) },\n        ];\n        values.forEach(function (el) {\n            $(\"input[name=\" + el.key + \"]\").val(el.value);\n        });\n    });\n    var bestaandeBoekenSource = new Bloodhound({\n        datumTokenizer: Bloodhound.tokenizers.whitespace,\n        queryTokenizer: Bloodhound.tokenizers.whitespace,\n        remote: {\n            url: '/bibliotheek/autocomplete/titel?q=%QUERY',\n            wildcard: '%QUERY',\n        },\n    });\n    bestaandeBoekenSource.initialize();\n    $('form.Formulier input.TitelField').typeahead({\n        hint: true,\n        highlight: true,\n        minLength: 1,\n    }, {\n        name: 'bestaandeBoekenSource',\n        displayKey: 'value',\n        source: bestaandeBoekenSource.ttAdapter(),\n        templates: {\n            header: '<h3>Bestaande Boeken</h3>',\n            suggestion: function (row) {\n                return \"<div style=\\\"margin: 5px 10px\\\">Ga naar:\\n <a href=\\\"/bibliotheek/boek/\" + row.id + \"\\\" target=\\\"_blank\\\">\" + row.value + \"</a></div>\";\n            },\n        },\n    });\n});\n"],"sourceRoot":""}