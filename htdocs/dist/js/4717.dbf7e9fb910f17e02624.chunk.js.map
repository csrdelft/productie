{"version":3,"file":"js/4717.dbf7e9fb910f17e02624.chunk.js","mappings":"qLAIO,MAAMA,EAAgBC,IACzB,MAAM,KAAEC,EAAI,OAAEC,EAAM,UAAEC,EAAS,QAAEC,EAAO,SAAEC,EAAQ,YAAEC,GAAgBN,EAAGO,QACjEC,EAAe,IAAI,IAAJ,CAAaR,EAAI,CAClCS,UAAWR,EACXS,IAAKV,EAAGW,OACRC,cAAeV,EACfW,gBAAgB,EAChBC,YAAaC,eAAgBC,GACzB,UACU,SAAWb,EAAW,QAAUa,EAAKC,MAC3CD,EAAKE,eAAeC,SAExB,MAAOC,GACH,MAAM,IAAIC,MAAMD,KAGxBE,YAAaC,OAAOnB,GACpBoB,SAAU,IACVC,mBAAoB,sCACpBC,oBAAqB,wDACrBC,iBAAkB,kFAClBC,eAAgB,oEAChBC,oBAAqB,+CACrBC,kBAAmB,6CACnBC,iBAAkB,YAClBC,6BAA8B,yCAC9BC,eAAgB,IAChBC,2BAA4B,yCAC5BC,qBAAsB,qCACtBC,KAAM,WACFC,KAAKC,GAAG,aAAa,SAAUtB,GAC3B,MAAMuB,EAAW,kBAAuB,iFACxCvB,EAAKE,eAAesB,YAAYD,GAChCA,EAASE,iBAAiB,SAAS1B,eAAgBK,GAE/CA,EAAEsB,iBACFtB,EAAEuB,kBACF,UACU,SAAWtC,EAAU,QAAUW,EAAKC,MAC1CsB,EAASK,YAAY,IAAK;;WAI9B,MAAOxB,GACH,MAAM,IAAIC,MAAMD,QAGxB,QAAU,cAAcyB,SAAS7C,GAAQA,EAAG8C,UAAY,cAI9DC,EAAe,IAAK;;;IAI1B/C,EAAGwC,YAAYO,GACfA,EAAaN,iBAAiB,SAAS1B,eAAgBK,GACnDA,EAAEsB,iBACFK,EAAa5B,SACb,MAAM6B,QAAiB,SAAW1C,GAClC,IAAK,MAAM2C,KAASC,OAAOC,OAAOH,EAASI,MAAO,CAC9C,MAAMC,EAAW,CAAEpC,KAAMgC,EAAMhC,KAAMqC,KAAML,EAAMK,KAAMC,KAAMN,EAAMM,MACnE/C,EAAagD,KAAK,YAAaH,QACA,IAApBJ,EAAMQ,WACbjD,EAAagD,KAAK,YAAaH,EAAUJ,EAAMQ,WAEnDjD,EAAagD,KAAK,WAAYH","sources":["webpack:///./js/lib/dropzone.ts"],"sourcesContent":["import axios from 'axios';\nimport Dropzone from 'dropzone';\nimport { selectAll } from './dom';\nimport { html } from './util';\nexport const initDropzone = (el) => {\n    const { naam, accept, deleteUrl, maxsize, coverUrl, existingUrl } = el.dataset;\n    const thisDropzone = new Dropzone(el, {\n        paramName: naam,\n        url: el.action,\n        acceptedFiles: accept,\n        addRemoveLinks: true,\n        removedfile: async function (file) {\n            try {\n                await axios.post(deleteUrl, 'foto=' + file.name);\n                file.previewElement.remove();\n            }\n            catch (e) {\n                throw new Error(e);\n            }\n        },\n        maxFilesize: Number(maxsize),\n        maxFiles: 500,\n        dictDefaultMessage: 'Sleep hier bestanden om te uploaden',\n        dictFallbackMessage: 'Je browser ondersteund niet het slepen van bestanden.',\n        dictFallbackText: 'Please use the fallback form below to upload your files like in the olden days.',\n        dictFileTooBig: 'Te groot bestand: ({{filesize}}MiB). Maximum: {{maxFilesize}}MiB.',\n        dictInvalidFileType: 'Bestanden van dit type zijn niet toegestaan.',\n        dictResponseError: 'Server responded with {{statusCode}} code.',\n        dictCancelUpload: 'Annuleren',\n        dictCancelUploadConfirmation: 'Toevoegen annuleren. Weet u het zeker?',\n        dictRemoveFile: 'X',\n        dictRemoveFileConfirmation: 'Bestand verwijderen. Weet u het zeker?',\n        dictMaxFilesExceeded: 'You can not upload any more files.',\n        init: function () {\n            this.on('addedfile', function (file) {\n                const coverBtn = Dropzone.createElement('<a class=\"btn\" title=\"Stel deze foto in als omslag voor het album\">Omslag</a>');\n                file.previewElement.appendChild(coverBtn);\n                coverBtn.addEventListener('click', async function (e) {\n                    // Make sure the button click doesn't submit the form\n                    e.preventDefault();\n                    e.stopPropagation();\n                    try {\n                        await axios.post(coverUrl, 'foto=' + file.name);\n                        coverBtn.replaceWith(html `<span\n\t\t\t\t\t\t\t\t><i class=\"fas fa-check\" aria-hidden=\"true\"></i>Omslag</span\n\t\t\t\t\t\t\t>`);\n                    }\n                    catch (e) {\n                        throw new Error(e);\n                    }\n                });\n                selectAll('.dz-remove').forEach((el) => (el.className = 'btn'));\n            });\n        },\n    });\n    const showExisting = html `<a href=\"#\"\n\t\t><i class=\"fas fa-images\" aria-hidden=\"true\"></i> Toon bestaande foto's in\n\t\tdit album</a\n\t>`;\n    el.appendChild(showExisting);\n    showExisting.addEventListener('click', async function (e) {\n        e.preventDefault();\n        showExisting.remove();\n        const response = await axios.post(existingUrl);\n        for (const value of Object.values(response.data)) {\n            const mockFile = { name: value.name, size: value.size, type: value.type };\n            thisDropzone.emit('addedfile', mockFile);\n            if (typeof value.thumbnail !== 'undefined') {\n                thisDropzone.emit('thumbnail', mockFile, value.thumbnail);\n            }\n            thisDropzone.emit('complete', mockFile);\n        }\n    });\n};\n"],"names":["initDropzone","el","naam","accept","deleteUrl","maxsize","coverUrl","existingUrl","dataset","thisDropzone","paramName","url","action","acceptedFiles","addRemoveLinks","removedfile","async","file","name","previewElement","remove","e","Error","maxFilesize","Number","maxFiles","dictDefaultMessage","dictFallbackMessage","dictFallbackText","dictFileTooBig","dictInvalidFileType","dictResponseError","dictCancelUpload","dictCancelUploadConfirmation","dictRemoveFile","dictRemoveFileConfirmation","dictMaxFilesExceeded","init","this","on","coverBtn","appendChild","addEventListener","preventDefault","stopPropagation","replaceWith","forEach","className","showExisting","response","value","Object","values","data","mockFile","size","type","emit","thumbnail"],"sourceRoot":""}