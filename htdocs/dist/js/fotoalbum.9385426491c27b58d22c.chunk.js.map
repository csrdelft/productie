{"version":3,"sources":["webpack:///./js/lib/fotoalbum/with-download-button.ts","webpack:///./js/lib/fotoalbum/with-full-size-preview.ts","webpack:///./js/lib/fotoalbum/with-fullscreen-button.ts","webpack:///./js/lib/fotoalbum/with-hotkeys.ts","webpack:///./js/lib/fotoalbum/with-preload.ts","webpack:///./js/lib/fotoalbum/main.ts","webpack:///./js/page/fotoalbum.ts","webpack:///./js/lib/dropzone.ts"],"names":["constructor","albums","params","super","downloadIcon","style","color","backgroundColor","background","textColor","transform","content","addEventListener","window","location","href","this","getFullUrl","appendControlsElements","item","currentItem","goToItem","fullUrl","setSize","preview","bind","size","updateImage","getElement","querySelector","Error","auto","load","img","Image","src","backgroundImage","backgroundSize","Math","min","width","url","fullscreenIcon","fullscreenButton","children","toggleFullscreen","document","fullscreenElement","classList","replace","exitFullscreen","previewElement","requestFullscreen","e","key","prev","next","items","album","indexOf","first","last","length","async","querySelectorAll","isLoggedIn","magAanpassen","root","fotos","dataset","decorators","withTags","push","default","withAdminButtons","appendChild","create","JSON","parse","previewSize","contain","tooltipThumbnailsToggle","tooltipChangeSize","tooltipSeeAllItems","tooltipSeeOtherAlbums","tooltipSlideShowPause","tooltipSlideShowStart","loadFotoAlbum","ctx","addHandler","el","naam","accept","deleteUrl","maxsize","coverUrl","existingUrl","thisDropzone","paramName","action","acceptedFiles","addRemoveLinks","removedfile","file","a","post","name","remove","maxFilesize","Number","maxFiles","dictDefaultMessage","dictFallbackMessage","dictFallbackText","dictFileTooBig","dictInvalidFileType","dictResponseError","dictCancelUpload","dictCancelUploadConfirmation","dictRemoveFile","dictRemoveFileConfirmation","dictMaxFilesExceeded","init","on","coverBtn","createElement","preventDefault","stopPropagation","replaceWith","forEach","className","showExisting","response","value","Object","values","data","mockFile","type","emit","thumbnail"],"mappings":"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","file":"js/fotoalbum.9385426491c27b58d22c.chunk.js","sourcesContent":["import createElement from 'jgallery/src/utils/create-element';\nimport withTooltip from 'jgallery/src/utils/with-tooltip';\nconst withDownloadButton = (constructor) => class extends constructor {\n    constructor(albums, params) {\n        super(albums, params);\n        const downloadIcon = withTooltip(createElement(`<span class=\"j-gallery-icon\"><i class=\"fa fa-download\"></i></span>`), {\n            style: {\n                color: params.backgroundColor,\n                background: params.textColor,\n                transform: 'translateY(-8px)',\n            },\n            content: 'Downloaden',\n        });\n        downloadIcon.addEventListener('click', () => window.location.href = `${this.getFullUrl()}?download`);\n        this.appendControlsElements([downloadIcon]);\n    }\n    goToItem(item) {\n        this.currentItem = item;\n        return super.goToItem(item);\n    }\n    getFullUrl() {\n        return this.currentItem.fullUrl;\n    }\n};\nexport default withDownloadButton;\n","import { Size } from 'jgallery/src/preview';\nimport load from 'jgallery/src/utils/load';\nconst withFullSizePreview = (constructor) => class extends constructor {\n    constructor(albums, params) {\n        super(albums, params);\n        const setSize = this.preview.setSize.bind(this.preview);\n        this.preview.setSize = (size) => {\n            this.updateImage(size);\n            return setSize(size);\n        };\n    }\n    async updateImage(size) {\n        const content = this.preview.getElement().querySelector('.j-gallery-preview-content');\n        if (!content) {\n            throw new Error(\"Geen content gevonden\");\n        }\n        if (size === Size.auto) {\n            await load(this.currentItem.fullUrl);\n            const img = new Image();\n            img.src = this.currentItem.fullUrl;\n            content.style.backgroundImage = `url(${this.currentItem.fullUrl})`;\n            content.style.backgroundSize = `${Math.min(3000, img.width)}px`;\n        }\n        else {\n            content.style.backgroundImage = `url(${this.currentItem.url})`;\n        }\n    }\n};\nexport default withFullSizePreview;\n","import createElement from 'jgallery/src/utils/create-element';\nimport withTooltip from 'jgallery/src/utils/with-tooltip';\nconst withFullscreenButton = (constructor) => class extends constructor {\n    constructor(albums, params) {\n        super(albums, params);\n        const fullscreenIcon = createElement(`<i class=\"fa fa-expand\"></i>`);\n        const fullscreenButton = withTooltip(createElement(`<span class=\"j-gallery-icon change-mode\"></span>`, {\n            children: [fullscreenIcon],\n        }), {\n            style: {\n                color: params.backgroundColor,\n                background: params.textColor,\n                transform: 'translateY(-8px)',\n            },\n            content: 'Volledig scherm',\n        });\n        fullscreenButton.addEventListener('click', () => this.toggleFullscreen());\n        this.appendControlsElements([fullscreenButton]);\n        document.addEventListener('fullscreenchange', () => {\n            if (document.fullscreenElement) {\n                fullscreenIcon.classList.replace('fa-expand', 'fa-compress');\n            }\n            else {\n                fullscreenIcon.classList.replace('fa-compress', 'fa-expand');\n            }\n        });\n    }\n    async toggleFullscreen() {\n        if (document.fullscreenElement) {\n            await document.exitFullscreen();\n        }\n        else {\n            await this.previewElement.requestFullscreen();\n        }\n    }\n};\nexport default withFullscreenButton;\n","const withHotkeys = (constructor) => class extends constructor {\n    constructor(albums, params) {\n        super(albums, params);\n        document.addEventListener('keydown', (e) => {\n            switch (e.key) {\n                case 'ArrowLeft':\n                    this.prev();\n                    break;\n                case 'ArrowRight':\n                    this.next();\n                    break;\n            }\n        });\n    }\n};\nexport default withHotkeys;\n","import load from 'jgallery/src/utils/load';\nconst withPreload = (constructor) => class extends constructor {\n    goToItem(item) {\n        const { items } = this.album;\n        const next = items[items.indexOf(item) + 1];\n        if (next) {\n            next.url && load(next.url);\n        }\n        else {\n            const first = items[0];\n            first.url && load(first.url);\n        }\n        const prev = items[items.indexOf(item) + 1];\n        if (prev) {\n            prev.url && load(prev.url);\n        }\n        else {\n            const last = items[items.length - 1];\n            last.url && load(last.url);\n        }\n        return super.goToItem(item);\n    }\n};\nexport default withPreload;\n","import JGallery from 'jgallery';\nimport { Size } from 'jgallery/src/preview';\nimport withDownloadButton from './with-download-button';\nimport withFullSizePreview from './with-full-size-preview';\nimport withFullscreenButton from './with-fullscreen-button';\nimport withHotkeys from './with-hotkeys';\nimport withPreload from './with-preload';\nexport const loadFotoAlbum = async () => {\n    const albums = document.querySelectorAll('.fotoalbum');\n    for (const album of albums) {\n        const { isLoggedIn, magAanpassen, root, fotos } = album.dataset;\n        if (!fotos || !root) {\n            throw new Error(\"Album heeft geen foto's of geen root\");\n        }\n        const decorators = [withFullscreenButton, withDownloadButton, withHotkeys, withPreload, withFullSizePreview];\n        if (isLoggedIn === 'true') {\n            const withTags = await import(/*webpackChunkName: \"fotoalbum-with-tags\"*/ './with-tags');\n            decorators.push(withTags.default);\n        }\n        if (magAanpassen === 'true') {\n            const withAdminButtons = await import(/*webpackChunkName: \"fotoalbum-with-admin-buttons\"*/ './with-admin-buttons');\n            decorators.push(withAdminButtons.default);\n        }\n        album.appendChild(JGallery.create(JSON.parse(fotos), {\n            decorators,\n            root,\n            previewSize: Size.contain,\n            tooltipThumbnailsToggle: 'Thumbnails weergeven',\n            tooltipChangeSize: 'Grootte veranderen',\n            tooltipSeeAllItems: 'Alle foto\\'s weergeven',\n            tooltipSeeOtherAlbums: 'Andere albums weergeven',\n            tooltipSlideShowPause: 'Voorstelling pauzeren',\n            tooltipSlideShowStart: 'Voorstelling starten',\n        }).getElement());\n    }\n};\n","import { loadFotoAlbum } from '../lib/fotoalbum/main';\nimport ctx from \"../ctx\";\nimport { initDropzone } from \"../lib/dropzone\";\n// loadFotoAlbum moet async zijn.\n// noinspection JSIgnoredPromiseFromCall\nloadFotoAlbum();\nctx.addHandler('form.dropzone', initDropzone);\n","import axios from 'axios';\nimport Dropzone from \"dropzone\";\nimport { selectAll } from \"./dom\";\nimport { html } from \"./util\";\nexport const initDropzone = (el) => {\n    const { naam, accept, deleteUrl, maxsize, coverUrl, existingUrl } = el.dataset;\n    const thisDropzone = new Dropzone(el, {\n        paramName: naam,\n        url: el.action,\n        acceptedFiles: accept,\n        addRemoveLinks: true,\n        removedfile: async function (file) {\n            try {\n                await axios.post(deleteUrl, \"foto=\" + file.name);\n                file.previewElement.remove();\n            }\n            catch (e) {\n                throw new Error(e);\n            }\n        },\n        maxFilesize: Number(maxsize),\n        maxFiles: 500,\n        dictDefaultMessage: \"Sleep hier bestanden om te uploaden\",\n        dictFallbackMessage: \"Je browser ondersteund niet het slepen van bestanden.\",\n        dictFallbackText: \"Please use the fallback form below to upload your files like in the olden days.\",\n        dictFileTooBig: \"Te groot bestand: ({{filesize}}MiB). Maximum: {{maxFilesize}}MiB.\",\n        dictInvalidFileType: \"Bestanden van dit type zijn niet toegestaan.\",\n        dictResponseError: \"Server responded with {{statusCode}} code.\",\n        dictCancelUpload: \"Annuleren\",\n        dictCancelUploadConfirmation: \"Toevoegen annuleren. Weet u het zeker?\",\n        dictRemoveFile: \"X\",\n        dictRemoveFileConfirmation: \"Bestand verwijderen. Weet u het zeker?\",\n        dictMaxFilesExceeded: \"You can not upload any more files.\",\n        init: function () {\n            this.on('addedfile', function (file) {\n                const coverBtn = Dropzone.createElement('<a class=\"btn\" title=\"Stel deze foto in als omslag voor het album\">Omslag</a>');\n                file.previewElement.appendChild(coverBtn);\n                coverBtn.addEventListener('click', async function (e) {\n                    // Make sure the button click doesn't submit the form\n                    e.preventDefault();\n                    e.stopPropagation();\n                    try {\n                        await axios.post(coverUrl, 'foto=' + file.name);\n                        coverBtn.replaceWith(html `<span><span class=\"fa fa-check\"></span> Omslag</span>`);\n                    }\n                    catch (e) {\n                        throw new Error(e);\n                    }\n                });\n                selectAll('.dz-remove').forEach(el => el.className = 'btn');\n            });\n        }\n    });\n    const showExisting = html `<a href=\"#\"><span class=\"ico photos\"></span> Toon bestaande foto's in dit album</a>`;\n    el.appendChild(showExisting);\n    showExisting.addEventListener('click', async function (e) {\n        e.preventDefault();\n        showExisting.remove();\n        const response = await axios.post(existingUrl);\n        for (const value of Object.values(response.data)) {\n            const mockFile = { name: value.name, size: value.size, type: value.type };\n            thisDropzone.emit('addedfile', mockFile);\n            if (typeof value.thumbnail !== 'undefined') {\n                thisDropzone.emit('thumbnail', mockFile, value.thumbnail);\n            }\n            thisDropzone.emit('complete', mockFile);\n        }\n    });\n};\n"],"sourceRoot":""}