{"version":3,"sources":["webpack:///./js/bibliotheek.ts"],"names":["getAuteur","datarow","authors","join","getPublishedDate","publishedDate","substring","getIsbn","isbn","industryIdentifiers","type","identifier","getLanguage","lang","nl","en","fr","de","bg","es","cs","da","et","el","ga","it","lv","lt","hu","mt","pl","pt","ro","sk","sl","fi","sv","language","codeveld","codeknop","on","event","preventDefault","categorieId","val","auteur","toLowerCase","trigger","after","biebCodeVakvuller","boekenSource","datumTokenizer","tokenizers","whitespace","queryTokenizer","remote","url","wildcard","transform","response","rows","data","items","i","length","volumeInfo","index","transport","options","onSuccess","onError","a","request","Object","assign","params","fields","key","then","catch","initialize","typeahead","autoselect","hint","highlight","minLength","name","displayKey","source","ttAdapter","templates","header","suggestion","row","title","pageCount","publisher","inputlen","this","css","value","forEach","bestaandeBoekenSource","id"],"mappings":"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","file":"js/bibliotheek.11b78f6784cc2a5569f7.js","sourcesContent":["import axios from 'axios';\nimport Bloodhound from 'corejs-typeahead';\nimport $ from 'jquery';\n/*\n *\tBibliotheekjavascriptcode.\n */\n$(() => {\n    /************************************************\n     * Boekpagina\n     ************************************************/\n    // boekpagina: vult code-veld\n    // voeg 'genereer'-knop toe aan codefield, die een biebcode geneert met waardes uit andere velden\n    function biebCodeVakvuller() {\n        const codeveld = $('input[name=code]');\n        const codeknop = $('<a class=\"btn genereer\" title=\"Biebcode invullen\">Genereer</a>');\n        codeknop.on('mousedown', (event) => {\n            event.preventDefault();\n            const categorieId = $('select[name=categorie_id]').val();\n            const auteur = $('input[name=auteur]').val().substring(0, 3).toLowerCase();\n            codeveld.val(categorieId + '.' + auteur).trigger('focus');\n        });\n        codeveld.after(codeknop);\n    }\n    biebCodeVakvuller();\n    // boekpagina:\n    //   Suggesties uit Google books.\n    //   Kiezen van een suggestie plaatst in alle velden de juiste info.\n    function getAuteur(datarow) {\n        return datarow.authors ? datarow.authors.join(', ') : '';\n    }\n    function getPublishedDate(datarow) {\n        return datarow.publishedDate ? datarow.publishedDate.substring(0, 4) : '';\n    }\n    function getIsbn(datarow) {\n        let isbn = '';\n        if (datarow.industryIdentifiers\n            && datarow.industryIdentifiers[1]\n            && datarow.industryIdentifiers[1].type === 'ISBN_13') {\n            isbn = datarow.industryIdentifiers[1].identifier;\n        }\n        return isbn;\n    }\n    function getLanguage(datarow) {\n        const lang = {\n            nl: 'Nederlands', en: 'Engels', fr: 'Frans',\n            de: 'Duits', bg: 'Bulgaars', es: 'Spaans',\n            cs: 'Tsjechisch', da: 'Deens', et: 'Ests',\n            el: 'Grieks', ga: 'Iers', it: 'Italiaans',\n            lv: 'Lets', lt: 'Litouws', hu: 'Hongaars',\n            mt: 'Maltees', pl: 'Pools', pt: 'Portugees',\n            ro: 'Roemeens', sk: 'Slowaaks', sl: 'Sloveens',\n            fi: 'Fins', sv: 'Zweeds',\n        };\n        return lang[datarow.language] ? lang[datarow.language] : datarow.language;\n    }\n    // suggestiemenu configureren\n    const boekenSource = new Bloodhound({\n        datumTokenizer: Bloodhound.tokenizers.whitespace,\n        queryTokenizer: Bloodhound.tokenizers.whitespace,\n        remote: {\n            url: 'https://www.googleapis.com/books/v1/volumes?q=%QUERY',\n            wildcard: '%QUERY',\n            transform: (response) => {\n                const rows = [];\n                const data = response.data.items;\n                for (let i = 0; i < data.length; i++) {\n                    const datarow = data[i].volumeInfo;\n                    datarow.index = i;\n                    rows[i] = datarow;\n                }\n                return rows;\n            },\n            transport: (options, onSuccess, onError) => {\n                axios.request(Object.assign({ params: {\n                        fields: 'items(volumeInfo(authors,industryIdentifiers,language,pageCount,publishedDate,publisher,title))',\n                        key: 'AIzaSyC7zu4-25xbizddFWuIbn107WTTPr37jos',\n                    } }, options)).then(onSuccess).catch(onError);\n            },\n        },\n    });\n    boekenSource.initialize();\n    $('#boekzoeker').typeahead({\n        autoselect: true,\n        hint: true,\n        highlight: true,\n        minLength: 4,\n    }, {\n        name: 'boekenSource',\n        displayKey: 'title',\n        source: boekenSource.ttAdapter(),\n        templates: {\n            header: '<h3>Boeken</h3>',\n            suggestion: (row) => {\n                const title = `Titel: ${row.title}\n\t\t\t\t| Auteur: ${getAuteur(row)}\n\t\t\t\t| Pagina's: ${row.pageCount}\n\t\t\t\t| Taal: ${getLanguage(row)}\n\t\t\t\t| ISBN: ${getIsbn(row)}\n\t\t\t\t| Uitgeverij: ${row.publisher}\n\t\t\t\t| Uitgavejaar: ${getPublishedDate(row)}`;\n                return `\n<div style=\"margin: 5px 10px\" title=\"${title}\">\n\t<span class=\"dikgedrukt\">${row.title}</span><br /><span class=\"cursief\">${getAuteur(row)}</span>\n</div>`;\n            },\n        },\n    }).on('keyup', function () {\n        const inputlen = $(this).val().length;\n        if (inputlen > 0 && inputlen < 7) {\n            $(this).css('background-color', '#ffcc96');\n        }\n        else {\n            $(this).css('background-color', 'white');\n        }\n    }).on('typeahead:selected', (event, row) => {\n        // gegevens in invulvelden plaatsen\n        const values = [\n            { key: 'titel', value: row.title },\n            { key: 'auteur', value: getAuteur(row) },\n            { key: 'paginas', value: row.pageCount },\n            { key: 'taal', value: getLanguage(row) },\n            { key: 'isbn', value: getIsbn(row) },\n            { key: 'uitgeverij', value: row.publisher },\n            { key: 'uitgavejaar', value: getPublishedDate(row) },\n        ];\n        values.forEach((el) => {\n            $(`input[name=${el.key}]`).val(el.value);\n        });\n    });\n    // boekpagina: autocomplete voor bewerkvelden uit C.S.R.-database.\n    const bestaandeBoekenSource = new Bloodhound({\n        datumTokenizer: Bloodhound.tokenizers.whitespace,\n        queryTokenizer: Bloodhound.tokenizers.whitespace,\n        remote: {\n            url: '/bibliotheek/autocomplete/titel?q=%QUERY',\n            wildcard: '%QUERY',\n        },\n    });\n    bestaandeBoekenSource.initialize();\n    $('form.Formulier input.TitelField').typeahead({\n        hint: true,\n        highlight: true,\n        minLength: 1,\n    }, {\n        name: 'bestaandeBoekenSource',\n        displayKey: 'value',\n        source: bestaandeBoekenSource.ttAdapter(),\n        templates: {\n            header: '<h3>Bestaande Boeken</h3>',\n            suggestion(row) {\n                return `<div style=\"margin: 5px 10px\">Ga naar:\n <a href=\"/bibliotheek/boek/${row.id}\" target=\"_blank\">${row.value}</a></div>`;\n            },\n        },\n    });\n});\n"],"sourceRoot":""}