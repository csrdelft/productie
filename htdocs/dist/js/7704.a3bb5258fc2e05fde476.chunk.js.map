{"version":3,"sources":["webpack:///./js/page/agenda.ts"],"names":["fmt","date","format","calendarEl","document","getElementById","Error","jaar","maand","weergave","creator","dataset","defaultView","week","dag","agenda","editable","options","plugins","height","nowIndicator","locale","customButtons","nieuw","text","click","datum","calendar","getDate","begin_moment","eind_moment","bewerken","setOption","refetchEvents","setTimeout","button","querySelector","classList","toggle","eventDataTransform","event","header","left","center","right","defaultDate","Date","Number","firstDay","events","selectable","select","selectionInfo","start","end","eventClick","info","id","getFullYear","then","response","card","data","style","zIndex","position","closeButton","addEventListener","remove","body","append","el","placement","clickListener","e","contains","target","removeEventListener","eventDrop","async","dropInfo","eventResize","resizeInfo","render"],"mappings":"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","file":"js/7704.a3bb5258fc2e05fde476.chunk.js","sourcesContent":["import { Calendar } from '@fullcalendar/core';\nimport nlLocale from '@fullcalendar/core/locales/nl';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interaction from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport axios from 'axios';\nimport moment from 'moment';\nimport ctx from '../ctx';\nimport { ajaxRequest } from '../lib/ajax';\nimport { domUpdate } from '../lib/domUpdate';\nimport { docReady, htmlParse } from '../lib/util';\nimport { createPopper } from \"@popperjs/core\";\ndocReady(() => {\n    const dateTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n    const fmt = (date) => moment(date).format(dateTimeFormat);\n    const calendarEl = document.getElementById('agenda');\n    if (calendarEl == null) {\n        throw new Error('Agenda element niet gevonden');\n    }\n    const { jaar, maand, weergave, creator } = calendarEl.dataset;\n    if (jaar == null || maand == null || weergave == null || creator == null) {\n        throw new Error('Agenda opties niet gezet');\n    }\n    const defaultView = {\n        maand: 'dayGridMonth',\n        week: 'timeGridWeek',\n        dag: 'timeGridDay',\n        agenda: 'listMonth',\n    }[weergave];\n    let editable = false;\n    const options = {\n        plugins: [dayGridPlugin, timeGridPlugin, listPlugin, interaction],\n        height: 'auto',\n        nowIndicator: true,\n        defaultView,\n        locale: nlLocale,\n        customButtons: {\n            nieuw: {\n                text: 'Nieuw',\n                click: () => {\n                    const datum = fmt(calendar.getDate());\n                    ajaxRequest('POST', '/agenda/toevoegen', {\n                        begin_moment: datum,\n                        eind_moment: datum,\n                    }, null, domUpdate);\n                },\n            },\n            bewerken: {\n                text: 'Bewerken',\n                click() {\n                    editable = !editable;\n                    calendar.setOption('editable', editable);\n                    calendar.setOption('selectable', editable);\n                    calendar.refetchEvents();\n                    // De button wordt ververst door fullcalendar, zorg ervoor dat de laatste wordt gepakt.\n                    setTimeout(() => {\n                        const button = calendarEl.querySelector('.fc-bewerken-button');\n                        if (!button) {\n                            throw new Error(\"Geen bewerken knop gevonden\");\n                        }\n                        button.classList.toggle('fc-button-active', editable);\n                    });\n                },\n            },\n        },\n        eventDataTransform: (event) => {\n            if (event.editable === true) {\n                event.editable = editable;\n            }\n            return event;\n        },\n        header: {\n            left: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth',\n            center: 'title',\n            right: 'today prevYear,prev,next,nextYear',\n        },\n        defaultDate: new Date(Number(jaar), Number(maand) - 1),\n        firstDay: 0,\n        events: '/agenda/feed',\n        selectable: editable && creator === 'true',\n        select: (selectionInfo) => {\n            ajaxRequest('POST', '/agenda/toevoegen', {\n                begin_moment: fmt(selectionInfo.start),\n                eind_moment: fmt(selectionInfo.end),\n            }, null, domUpdate);\n        },\n        eventClick: (info) => {\n            const start = info.event.start;\n            if (!start) {\n                return;\n            }\n            axios.get(`/agenda/details/${info.event.id}?jaar=${(start.getFullYear())}`).then((response) => {\n                const card = htmlParse(response.data)[0];\n                card.style.zIndex = '100';\n                card.style.position = 'absolute';\n                const closeButton = card.querySelector('.close');\n                if (closeButton) {\n                    closeButton.addEventListener('click', () => {\n                        card.remove();\n                        return false;\n                    });\n                }\n                document.body.append(card);\n                ctx.init(card);\n                createPopper(info.el, card, { placement: 'bottom' });\n                // Na deze klik een event listener\n                setTimeout(() => {\n                    const clickListener = (e) => {\n                        if (!card.contains(e.target)) {\n                            card.remove();\n                            document.body.removeEventListener('click', clickListener);\n                        }\n                    };\n                    document.body.addEventListener('click', clickListener);\n                });\n            });\n        },\n        eventDrop: async (dropInfo) => {\n            const start = dropInfo.event.start;\n            const end = dropInfo.event.end;\n            if (!start || !end) {\n                throw new Error(\"Drop heeft geen start of end\");\n            }\n            await axios.post(`/agenda/verplaatsen/${dropInfo.event.id}`, {\n                begin_moment: fmt(start),\n                eind_moment: fmt(end),\n            });\n            calendar.refetchEvents();\n        },\n        eventResize: async (resizeInfo) => {\n            const start = resizeInfo.event.start;\n            const end = resizeInfo.event.end;\n            if (!start || !end) {\n                throw new Error(\"Resize heeft geen start of end\");\n            }\n            await axios.post(`/agenda/verplaatsen/${resizeInfo.event.id}`, {\n                begin_moment: fmt(start),\n                eind_moment: fmt(end),\n            });\n            calendar.refetchEvents();\n        },\n    };\n    ctx.addHandler('.ReloadAgenda', (el) => el.addEventListener('click', () => setTimeout(() => calendar.refetchEvents())));\n    // Creator krijgt nieuw knoppen\n    if (creator === 'true') {\n        const header = options.header;\n        header.right = 'bewerken,nieuw ' + header.right;\n    }\n    const calendar = new Calendar(calendarEl, options);\n    calendar.render();\n    document.addEventListener('modalClose', () => calendar.refetchEvents());\n});\n"],"sourceRoot":""}