{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/fxclouds.js","webpack:////home/travis/build/csrdelft/csrdelft.nl/node_modules/three/three.js","webpack:///./js/lib/three.detector.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","THREE","Detector","webgl","addGetWebGLMessage","container","camera","scene","renderer","mesh","geometry","material","mouseX","mouseY","start_time","Date","now","windowHalfX","window","innerWidth","windowHalfY","innerHeight","onDocumentMouseMoveClouds","event","clientX","clientY","onWindowResizeClouds","aspect","updateProjectionMatrix","setSize","animateClouds","requestAnimationFrame","style","visibility","position","x","y","z","render","document","getElementById","canvas","createElement","width","height","context","getContext","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","background","toDataURL","PerspectiveCamera","Scene","Geometry","texture","ImageUtils","loadTexture","magFilter","LinearMipMapLinearFilter","minFilter","fog","Fog","ShaderMaterial","uniforms","map","type","fogColor","color","fogNear","near","fogFar","far","vertexShader","textContent","fragmentShader","depthWrite","depthTest","transparent","plane","Mesh","PlaneGeometry","Math","random","rotation","PI","scale","GeometryUtils","merge","add","WebGLRenderer","antialias","append","domElement","addEventListener","initClouds","self","REVISION","console","info","log","debug","warn","error","Int32Array","Array","Float32Array","String","startsWith","str","this","slice","length","endsWith","index","lastIndexOf","trim","replace","lastTime","vendors","cancelAnimationFrame","undefined","callback","element","currTime","timeToCall","max","id","setTimeout","clearTimeout","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","NoShading","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","MultiplyOperation","MixOperation","AddOperation","UVMapping","CubeReflectionMapping","CubeRefractionMapping","SphericalReflectionMapping","SphericalRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","Color","set","constructor","g","b","setHex","setStyle","hex","floor","setRGB","setHSV","h","v","f","q","test","exec","min","parseInt","ColorKeywords","copy","copyGammaToLinear","copyLinearToGamma","sqrt","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","toString","getStyle","getHSV","hsv","hue","saturation","delta","addColors","color1","color2","addScalar","multiply","multiplyScalar","lerp","alpha","clone","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","w","setFromEuler","order","c1","cos","c2","c3","s1","sin","s2","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","inverse","conjugate","normalize","lengthSq","multiplyQuaternions","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","multiplyVector3","vector","applyQuaternion","slerp","qb","cosHalfTheta","halfTheta","acos","sinHalfTheta","abs","ratioA","ratioB","equals","qa","qm","Vector2","setX","setY","setComponent","Error","getComponent","addVectors","sub","subVectors","divideScalar","clamp","negate","dot","distanceTo","distanceToSquared","dx","dy","setLength","oldLength","Vector3","setZ","multiplyVectors","applyMatrix3","e","applyMatrix4","applyProjection","qx","qy","qz","qw","ix","iy","iz","iw","applyEuler","eulerOrder","quaternion","__q1","applyAxisAngle","divide","lengthManhattan","cross","crossVectors","angleTo","dz","getPositionFromMatrix","setEulerFromRotationMatrix","asin","atan2","setEulerFromQuaternion","sqx","sqy","sqz","sqw","getScaleFromMatrix","sx","sy","sz","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","xx","yy","zz","xy","xz","yz","Box2","Infinity","setFromPoints","points","point","il","makeEmpty","setFromCenterAndSize","center","size","halfSize","__v1","box","empty","optionalTarget","expandByPoint","expandByVector","expandByScalar","scalar","containsPoint","containsBox","getParameter","isIntersectionBox","clampPoint","distanceToPoint","intersect","union","translate","offset","Box3","getBoundingSphere","result","Sphere","radius","__v0","transform","matrix","newPoints","__v2","__v3","__v4","__v5","__v6","__v7","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","multiplyVector3Array","tmp","determinant","getInverse","throwOnInvertible","det","msg","transpose","transposeIntoArray","Matrix4","n14","n24","n34","n41","n42","n43","n44","setRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","setRotationFromQuaternion","x2","y2","z2","wx","wy","wz","lookAt","eye","target","up","multiplyMatrices","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","multiplyVector4","rotateAxis","vx","vy","vz","crossVector","flattenToArray","flat","flattenToArrayOffset","getPosition","setPosition","getColumnX","getColumnY","getColumnZ","compose","translation","mRotation","__m1","mScale","__m2","makeScale","decompose","extractPosition","extractRotation","scaleX","scaleY","scaleZ","rotateX","m42","m43","rotateY","m41","rotateZ","rotateByAxis","oneMinusCosine","xs","ys","zs","r11","r21","r31","r12","r22","r32","r13","r23","r33","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","theta","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeFrustum","left","right","bottom","top","makePerspective","fov","ymax","degToRad","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","isIntersectionSphere","sphere","isIntersectionPlane","normal","distanceToPlane","denominator","constant","intersectPlane","matrix4","setFromCenterAndPoints","maxRadiusSq","radiusSq","intersectsSphere","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p1","p2","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","matrixWorld","negRadius","boundingSphere","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","isIntersectionLine","startPoint","endPoint","startSign","endSign","intersectLine","coplanarPoint","optionalNormalMatrix","newNormal","newCoplanarPoint","__vZero","clampBottom","mapLinear","a1","a2","b1","b2","random16","randInt","low","high","randFloat","randFloatSpread","range","sign","degrees","__d2r","radToDeg","radians","__r2d","Spline","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","interpolate","t2","t3","v0","v1","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","j","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","push","ceil","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","Vertex","UV","Clock","autoStart","startTime","oldTime","elapsedTime","running","start","stop","getElapsedTime","getDelta","diff","newTime","EventDispatcher","listeners","listener","indexOf","removeEventListener","splice","dispatchEvent","listenerArray","Raycaster","localRay","facePlane","intersectPoint","inverseMatrix","descSort","distance","intersectObject","raycaster","intersects","Particle","face","vertices","isFaceMaterial","MeshFaceMaterial","objectMaterials","materials","side","precision","matrixRotationWorld","fl","faces","materialIndex","planeDistance","planeSign","Face3","Face4","faceIndex","intersectDescendants","descendants","getDescendants","recursive","sort","intersectObjects","objects","Object3D","Object3DIdCount","properties","parent","children","defaultEulerOrder","renderDepth","rotationAutoUpdate","matrixAutoUpdate","matrixWorldNeedsUpdate","useQuaternion","visible","castShadow","receiveShadow","frustumCulled","_vector","applyMatrix","mat","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","__addObject","__removeObject","traverse","getChildByName","child","array","apply","updateMatrix","updateMatrixWorld","force","Projector","_object","_objectCount","_vertex","_vertexCount","_face","_face3Count","_face4Count","_line","_lineCount","_particle","_particleCount","_modelMatrix","_objectPool","_objectPoolLength","_vertexPool","_vertexPoolLength","_face3Pool","_face3PoolLength","_face4Pool","_face4PoolLength","_linePool","_linePoolLength","_particlePool","_particlePoolLength","_renderData","sprites","lights","_vector3","_vector4","_clipBox","_boundingBox","_points3","_points4","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","_normalViewMatrix","_centroid","_frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","matrixWorldInverse","projectionMatrix","unprojectVector","projectionMatrixInverse","pickingRay","end","getNextObjectInPool","RenderableObject","getNextVertexInPool","vertex","RenderableVertex","getNextFace3InPool","RenderableFace3","getNextFace4InPool","RenderableFace4","getNextLineInPool","line","RenderableLine","getNextParticleInPool","particle","RenderableParticle","painterSort","clipLine","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","projectScene","sortObjects","sortElements","ol","vl","nl","cl","ul","faceVertexNormals","faceVertexUvs","uvs","v2","v4","root","projectObject","Light","Line","Sprite","projectGraph","positionWorld","positionScreen","normalModel","normalModelView","centroidModel","centroid","vertexNormals","vertexNormalsModel","vertexNormalsModelView","vertexNormalsLength","step","LinePieces","vertexColors","vertexTangents","GeometryIdCount","colors","normals","faceUvs","morphTargets","morphColors","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","hasTangents","dynamic","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","tangentsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","buffersNeedUpdate","normalMatrix","jl","computeCentroids","computeFaceNormals","vA","vB","vC","cb","ab","computeVertexNormals","areaWeighted","__tmpVertices","vD","db","dc","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","computeTangents","vertexIndex","uv","uvA","uvB","uvC","x1","y1","z1","t1","tan1","tan2","sdir","tdir","tmp2","handleTriangle","ua","ub","uc","computeLineDistances","computeBoundingBox","computeBoundingSphere","mergeVertices","indices","verticesMap","unique","changes","pow","round","join","faceIndicesToRemove","dupIndex","newFace","uvCopy","dispose","BufferGeometry","attributes","offsets","positionArray","normalArray","normalizeNormals","positions","bb","nVertexElements","itemSize","numItems","pA","pB","pC","count","nVertices","nTangentElements","xA","yA","zA","xB","yB","zB","xC","yC","zC","uA","uB","uC","tangents","iA","iB","iC","n2","handleVertex","Camera","OrthographicCamera","setLens","focalLength","frameHeight","atan","setViewOffset","fullWidth","fullHeight","AmbientLight","AreaLight","intensity","constantAttenuation","linearAttenuation","quadraticAttenuation","DirectionalLight","onlyShadow","shadowCameraNear","shadowCameraFar","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowBias","shadowDarkness","shadowMapWidth","shadowMapHeight","shadowCascade","shadowCascadeOffset","shadowCascadeCount","shadowCascadeBias","shadowCascadeWidth","shadowCascadeHeight","shadowCascadeNearZ","shadowCascadeFarZ","shadowCascadeArray","shadowMap","shadowMapSize","shadowCamera","shadowMatrix","HemisphereLight","skyColorHex","groundColorHex","groundColor","PointLight","SpotLight","exponent","shadowCameraFov","Loader","showStatus","statusDomElement","addStatusElement","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","fontSize","textAlign","padding","zIndex","innerHTML","updateProgress","progress","message","loaded","toFixed","extractUrlBase","url","parts","split","pop","initMaterials","texturePath","createMaterial","needsTangents","_this","is_pow2","LN2","nearest_pow2","create_texture","where","sourceFile","repeat","wrap","anisotropy","isCompressed","toLowerCase","fullPath","loadCompressedTexture","Texture","wrapS","wrapT","wrapMap","mirror","image","Image","onload","drawImage","needsUpdate","src","load_image","rgb2hex","rgb","mtype","mpars","opacity","lightMap","normalMap","bumpMap","wireframe","shading","blending","flipSided","doubleSided","colorDiffuse","DbgColor","colorSpecular","specular","colorAmbient","ambient","transparency","specularCoef","shininess","mapDiffuse","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapLight","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapBump","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormal","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecular","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapBumpScale","bumpScale","shader","ShaderLib","UniformsUtils","mapNormalFactor","specularMap","parameters","DbgName","ImageLoader","load","scope","content","JSONLoader","withCredentials","loadAjaxJSON","callbackProgress","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","responseText","json","JSON","parse","createModel","LOADING","getResponseHeader","HEADERS_RECEIVED","open","send","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","uvLayer","nUvLayers","parseModel","bones","animation","parseSkin","dstVertices","srcVertices","dstColors","srcColors","parseMorphing","LoadingMonitor","onLoad","loader","SceneLoader","callbackSync","geometryHandlerMap","hierarchyHandlerMap","addGeometryHandler","callbackFinished","typeID","loaderClass","addHierarchyHandler","light","counter_models","counter_textures","total_models","total_textures","urlBase","target_array","data","geometries","face_materials","textures","cameras","fogs","empties","groups","get_url","source_url","url_type","handle_objects","handle_children","dst","pos","rot","scl","quat","objID","objJSON","loading","reservedTypes","skin","morph","mirroredLoop","duration","loaderParameters","parType","options","urlBaseType","create_callback_hierachy","SkinnedMesh","MorphAnimMesh","time","targetName","groupID","handle_hierarchy","node","obj","create_callback_geometry","geo","handle_mesh","async_callback_gate","dae","create_callback_embed","totalModels","totalTextures","loadedModels","loadedTextures","ta","targetInverse","finalize","fogID","fogJSON","geoID","geoJSON","textureID","textureJSON","matID","matJSON","parID","generateTextureCallback","callbackTexture","FogExp2","density","CubeGeometry","depth","widthSegments","heightSegments","depthSegments","SphereGeometry","CylinderGeometry","topRad","botRad","radSegs","heightSegs","TorusGeometry","tube","segmentsR","segmentsT","IcosahedronGeometry","subdivisions","modelJson","embeds","metadata","mapping","url_array","loadCompressedTextureCube","loadTextureCube","fullUrl","textureCallback","diffuse","normalScale","envMap","reflectivity","displacementMap","displacementBias","displacementScale","materialArray","label","defaults","currentCamera","TextureLoader","Material","MaterialIdCount","blendSrc","blendDst","blendEquation","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","alphaTest","overdraw","setValues","values","newValue","currentValue","LineBasicMaterial","linewidth","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","combine","refractionRatio","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","MeshLambertMaterial","emissive","wrapAround","wrapRGB","MeshPhongMaterial","metal","perPixel","MeshDepthMaterial","MeshNormalMaterial","ParticleBasicMaterial","sizeAttenuation","ParticleCanvasMaterial","program","defines","SpriteMaterial","useScreenCoordinates","scaleByViewport","alignment","SpriteAlignment","uvOffset","uvScale","topLeft","topCenter","topRight","centerLeft","centerRight","bottomLeft","bottomCenter","bottomRight","format","TextureIdCount","mipmaps","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","onUpdate","CompressedTexture","DataTexture","ParticleSystem","sortParticles","LineStrip","updateMorphTargets","morphTargetBase","morphTargetForcedOrder","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","Bone","belongsToSkin","skinMatrix","update","parentSkinMatrix","forceUpdate","useVertexTexture","bone","gbone","identityMatrix","boneMatrices","rotq","addBone","nBones","boneTextureWidth","boneTextureHeight","boneTexture","pose","boneInverses","bl","offsetMatrix","sw","lastKeyframe","currentKeyframe","directionBackwards","setFrameRange","startKeyframe","endKeyframe","setDirectionForward","setDirectionBackward","parseAnimations","animations","firstAnimation","pattern","match","setAnimationLabel","playAnimation","fps","updateAnimation","frameTime","keyframe","mix","Ribbon","LOD","LODs","addLevel","object3D","visibleAtDistance","rotation3d","overrideMaterial","__objects","__lights","__objectsAdded","__objectsRemoved","ai","CanvasRenderer","_elements","_lights","_canvasWidth","_canvasHeight","_canvasWidthHalf","_canvasHeightHalf","_v1","_v2","_v3","_v4","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_near","_far","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_pixelMap","_pixelMapContext","_pixelMapImage","_pixelMapData","_gradientMap","_gradientMapContext","_projector","_canvas","_context","_clearColor","_clearOpacity","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_v5","_v6","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_imagedatas","_clearBox","_elemBox","_enableLighting","_ambientLight","_directionalLights","_pointLights","_gradientMapQuality","setOpacity","globalAlpha","setBlending","globalCompositeOperation","setLineWidth","lineWidth","setLineCap","lineCap","setLineJoin","lineJoin","setStrokeStyle","strokeStyle","setFillStyle","getImageData","devicePixelRatio","autoClear","supportsVertexTextures","setFaceCulling","setClearColor","setClearColorHex","getMaxAnisotropy","clear","setTransform","clearRect","ll","lightColor","calculateLights","el","renderParticle","renderLine","expand","renderFace3","renderFace4","calculateLight","lightPosition","amount","bitmap","bitmapWidth","bitmapHeight","save","rotate","restore","beginPath","moveTo","lineTo","stroke","uv1","uv2","uv3","drawTriangle","getGradientTexture","clipImage","strokePath","fillPath","patternPath","smoothstep","v5","v6","drawQuad","x0","y0","closePath","x3","y3","fill","u0","u1","u2","repeatX","repeatY","createPattern","idet","offsetX","offsetY","clip","color3","color4","putImageData","ShaderChunk","fog_pars_fragment","fog_fragment","envmap_pars_fragment","envmap_fragment","envmap_pars_vertex","worldpos_vertex","envmap_vertex","map_particle_pars_fragment","map_particle_fragment","map_pars_vertex","map_pars_fragment","map_vertex","map_fragment","lightmap_pars_fragment","lightmap_pars_vertex","lightmap_fragment","lightmap_vertex","bumpmap_pars_fragment","normalmap_pars_fragment","specularmap_pars_fragment","specularmap_fragment","lights_lambert_pars_vertex","lights_lambert_vertex","lights_phong_pars_vertex","lights_phong_vertex","lights_phong_pars_fragment","lights_phong_fragment","color_pars_fragment","color_fragment","color_pars_vertex","color_vertex","skinning_pars_vertex","skinbase_vertex","skinning_vertex","morphtarget_pars_vertex","morphtarget_vertex","default_vertex","morphnormal_vertex","skinnormal_vertex","defaultnormal_vertex","shadowmap_pars_fragment","shadowmap_fragment","shadowmap_pars_vertex","shadowmap_vertex","alphatest_fragment","linear_to_gamma_fragment","merged","uniforms_src","parameter_src","uniforms_dst","UniformsLib","common","offsetRepeat","flipEnvMap","useRefract","bump","normalmap","fogDensity","ambientLightColor","directionalLightDirection","directionalLightColor","hemisphereLightDirection","hemisphereLightSkyColor","hemisphereLightGroundColor","pointLightColor","pointLightPosition","pointLightDistance","spotLightColor","spotLightPosition","spotLightDirection","spotLightDistance","spotLightAngleCos","spotLightExponent","psColor","shadowmap","basic","lambert","phong","particle_basic","dashed","totalSize","mNear","mFar","enableAO","enableDiffuse","enableSpecular","enableReflection","enableDisplacement","tDisplacement","tDiffuse","tCube","tNormal","tSpecular","tAO","uNormalScale","uDisplacementBias","uDisplacementScale","uDiffuseColor","uSpecularColor","uAmbientColor","uShininess","uOpacity","uRefractionRatio","uReflectivity","uOffset","uRepeat","cube","tFlip","depthRGBA","_precision","_alpha","_premultipliedAlpha","premultipliedAlpha","_antialias","_stencil","stencil","_preserveDrawingBuffer","preserveDrawingBuffer","clearColor","_clearAlpha","clearAlpha","autoClearColor","autoClearDepth","autoClearStencil","autoUpdateObjects","autoUpdateScene","gammaInput","gammaOutput","physicallyBasedShading","shadowMapEnabled","shadowMapAutoUpdate","shadowMapType","shadowMapCullFace","shadowMapDebug","shadowMapCascade","maxMorphTargets","maxMorphNormals","autoScaleCubemaps","renderPluginsPre","renderPluginsPost","memory","programs","calls","_gl","_glExtensionTextureFloat","_glExtensionStandardDerivatives","_glExtensionTextureFilterAnisotropic","_glExtensionCompressedTextureS3TC","_programs","_programs_counter","_currentProgram","_currentFramebuffer","_currentMaterialId","_currentGeometryGroupHash","_currentCamera","_geometryGroupCounter","_usedTextureUnits","_oldDoubleSided","_oldFlipSided","_oldBlending","_oldBlendEquation","_oldBlendSrc","_oldBlendDst","_oldDepthTest","_oldDepthWrite","_oldPolygonOffset","_oldPolygonOffsetFactor","_oldPolygonOffsetUnits","_oldLineWidth","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_currentWidth","_currentHeight","_enabledAttributes","_projScreenMatrix","_projScreenMatrixPS","_direction","_lightsNeedUpdate","directional","distances","spot","directions","anglesCos","exponents","hemi","skyColors","groundColors","getExtension","initGL","clearDepth","clearStencil","enable","DEPTH_TEST","depthFunc","LEQUAL","frontFace","CCW","cullFace","BACK","CULL_FACE","BLEND","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","_maxTextures","MAX_TEXTURE_IMAGE_UNITS","_maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","_maxCubemapSize","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","_maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","_supportsVertexTextures","_supportsBoneTextures","_vertexShaderPrecisionHighpFloat","COMPRESSED_TEXTURE_FORMATS","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","_vertexShaderPrecisionMediumpFloat","MEDIUM_FLOAT","_fragmentShaderPrecisionHighpFloat","LOW_FLOAT","FRAGMENT_SHADER","_fragmentShaderPrecisionMediumpFloat","highpAvailable","HIGH_INT","MEDIUM_INT","LOW_INT","mediumpAvailable","createMeshBuffers","geometryGroup","__webglVertexBuffer","createBuffer","__webglNormalBuffer","__webglTangentBuffer","__webglColorBuffer","__webglUVBuffer","__webglUV2Buffer","__webglSkinIndicesBuffer","__webglSkinWeightsBuffer","__webglFaceBuffer","__webglLineBuffer","numMorphTargets","__webglMorphTargetsBuffers","numMorphNormals","__webglMorphNormalsBuffers","supportsFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","getPrecision","setViewport","viewport","setScissor","scissor","enableScissorTest","SCISSOR_TEST","disable","getClearColor","getClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","renderTarget","setRenderTarget","addPostPlugin","plugin","init","addPrePlugin","updateShadowMap","shadowMapPlugin","onGeometryDispose","deallocateGeometry","onTextureDispose","deallocateTexture","onRenderTargetDispose","deallocateRenderTarget","onMaterialDispose","deallocateMaterial","__webglInit","deleteBuffer","__webglLineDistanceBuffer","geometryGroups","deleteCustomAttributesBuffers","__webglTextureCube","deleteTexture","__webglTexture","WebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","deleteRenderbuffer","__webglRenderbuffer","programInfo","deleteProgram","usedTimes","newPrograms","__webglCustomAttributesList","buffer","initCustomAttributes","nvertices","attribute","__webglInitialized","createUniqueBuffers","belongsToAttribute","initMeshBuffers","faces3","faces4","ntris","nlines","getBufferMaterial","uvType","bufferGuessUVType","normalType","bufferGuessNormalType","vertexColorType","bufferGuessVertexColorType","__vertexArray","__normalArray","__tangentArray","__colorArray","__uvArray","__uv2Array","__skinIndexArray","__skinWeightArray","__faceArray","Uint16Array","__lineArray","__morphTargetsArrays","__morphNormalsArrays","__webglFaceCount","__webglLineCount","originalAttribute","__original","__inittedArrays","materialNeedsSmoothNormals","initDirectBuffers","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","bindBuffer","bufferData","STATIC_DRAW","setMeshBuffers","hint","faceColor","t4","n1","n3","n4","c4","sw1","sw2","sw3","sw4","si1","si2","si3","si4","vn","uvi","uv2i","vk","vkl","vka","nka","chf","customAttribute","needsSmoothNormals","offset_uv","offset_uv2","offset_face","offset_normal","offset_tangent","offset_line","offset_color","offset_skin","offset_morphTarget","offset_custom","vertexArray","uvArray","uv2Array","tangentArray","colorArray","skinIndexArray","skinWeightArray","morphTargetsArrays","morphNormalsArrays","customAttributes","faceArray","lineArray","dirtyVertices","dirtyElements","dirtyUvs","dirtyNormals","dirtyTangents","dirtyColors","dirtyMorphTargets","morphTargetsNeedUpdate","chunk_faces3","chunk_faces4","obj_faces","obj_uvs","obj_uvs2","obj_skinIndices","obj_skinWeights","boundTo","pp","setDirectBuffers","tangent","enableAttribute","enableVertexAttribArray","disableAttributes","disableVertexAttribArray","painterSortStable","numericalSort","renderPlugins","plugins","renderObjects","renderList","reverse","materialType","useBlending","webglObject","setDepthTest","setDepthWrite","setPolygonOffset","setMaterialFaces","renderBufferDirect","renderBuffer","renderObjectsImmediate","renderImmediateObject","unrollImmediateBufferMaterial","globject","opaque","unrollBufferMaterial","meshMaterial","addObject","_modelViewMatrix","groupHash","hash_map","usesFaceMaterial","hash","counter","geometryGroupsList","sortFacesByMaterial","createRibbonBuffers","__webglVertexCount","initRibbonBuffers","createLineBuffers","__lineDistanceArray","initLineBuffers","createParticleBuffers","__sortArray","__webglParticleCount","initParticleBuffers","__webglActive","addBuffer","__webglObjects","ImmediateRenderObject","immediateRenderCallback","objlist","addBufferImmediate","__webglObjectsImmediate","__webglSprites","LensFlare","__webglFlares","updateObject","customAttributesDirty","DYNAMIC_DRAW","areCustomAttributesDirty","clearCustomAttributes","ca","cal","setRibbonBuffers","dl","lineDistanceArray","dirtyLineDistances","setLineBuffers","sortArray","setParticleBuffers","removeObject","removeInstances","removeInstancesDirect","setProgram","initMaterial","__webglMorphTargetInfluences","refreshMaterial","p_uniforms","m_uniforms","useProgram","uniformMatrix4fv","textureUnit","getTextureUnit","uniform1i","setTexture","boneGlobalMatrices","refreshUniformsFog","skyColor","intensitySq","zlights","dirColors","dirPositions","pointColors","pointPositions","pointDistances","spotColors","spotPositions","spotDistances","spotDirections","spotAnglesCos","spotExponents","hemiSkyColors","hemiGroundColors","hemiPositions","dirLength","pointLength","spotLength","hemiLength","dirCount","pointCount","spotCount","hemiCount","dirOffset","pointOffset","spotOffset","hemiOffset","setColorGamma","setColorLinear","setupLights","refreshUniformsLights","uvScaleMap","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","refreshUniformsParticle","refreshUniformsPhong","refreshUniformsLambert","_shadowPass","refreshUniformsShadow","uniform","location","uniform1f","uniform2f","uniform3f","uniform4f","uniform1iv","uniform3iv","uniform1fv","uniform3fv","_array","uniform2fv","uniform4fv","setCubeTexture","setCubeTextureDynamic","loadUniformsGeneric","uniformsList","cameraPosition","viewMatrix","modelViewMatrix","uniformMatrix3fv","loadUniformsMatrices","modelMatrix","setupMatrices","polygonoffset","factor","units","POLYGON_OFFSET_FILL","getShader","string","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","isPowerOfTwo","setTextureParameters","textureType","isImagePowerOfTwo","texParameteri","TEXTURE_WRAP_S","paramThreeToGL","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","filterFallback","__oldAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","clampToMaxSize","maxSize","maxDimension","newWidth","newHeight","slot","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","cubeImage","glFormat","glType","mipmap","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","texImage2D","generateMipmap","setupFrameBuffer","framebuffer","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","setupRenderBuffer","renderbuffer","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","NEAREST","LINEAR","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","renderBufferImmediate","hasPositions","hasNormals","hasUvs","__webglUvBuffer","hasColors","vertexAttribPointer","nx","ny","nz","nax","nbx","nay","nby","naz","nbz","drawArrays","TRIANGLES","updateBuffers","wireframeBit","geometryHash","startIndex","positionSize","normalSize","uvSize","colorSize","tangentSize","drawElements","POINTS","LINE_STRIP","primitives","geometryGroupHash","influences","numSupportedMorphTargets","influence","activeInfluenceIndices","numSupportedMorphNormals","influenceIndex","setupMorphTargets","skinIndex","skinWeight","lineDistance","LINES","TRIANGLE_STRIP","forceClear","initWebGLObjects","TEXTURE_2D","updateRenderTargetMipmap","maxLightCount","maxBones","maxShadows","shaderID","shaders","setMaterialShaders","dirLights","pointLights","spotLights","hemiLights","allocateLights","allocateShadows","nVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","nVertexMatrices","allocateBones","useFog","fogExp","maxDirLights","maxPointLights","maxSpotLights","maxHemiLights","pl","code","shadowMapTypeDefine","customDefines","chunk","generateDefines","createProgram","identifiers","prefix_vertex","glFragmentShader","glVertexShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","VALIDATE_STATUS","getError","deleteShader","getUniformLocation","cacheUniformLocations","getAttribLocation","cacheAttributeLocations","buildProgram","base","frontFaceDirection","CW","FRONT","FRONT_AND_BACK","depthMask","blendEquationSeparate","blendFuncSeparate","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isCube","isTargetPowerOfTwo","createFramebuffer","createRenderbuffer","shareDepthFrom","activeCubeFace","ShadowMapPlugin","SpritePlugin","LensFlarePlugin","WebGLRenderTarget","ColorUtils","adjustHSV","__hsv","geometry1","object2","vertexOffset","geometry2","vertices1","vertices2","faces1","faces2","uvs1","uvs2","vertexCopy","faceCopy","faceVertexColors","removeMaterials","materialIndexArray","materialIndexMap","newFaces","randomPointInTriangle","vectorA","vectorB","vectorC","randomPointInFace","useCachedAreas","area1","area2","_area1","_area2","triangleArea","randomPointsInGeometry","totalArea","cumulativeAreas","_area","binarySearchIndices","binarySearch","mid","stats","tmp1","normalizeUVs","uvSet","triangulateQuads","triA","triB","uvD","uvsTriA","uvsTriB","faceUv","setMaterialIndex","startFace","endFace","onError","request","response","dds","parseDDS","onerror","responseType","images","loadCount","generateCubeFaceCallback","rq","img","isCubemap","mipmapCount","loadMipmaps","fourCCToInt32","charCodeAt","blockBytes","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","header","fourCC","fromCharCode","int32ToFourCC","dataOffset","dataLength","Uint8Array","getNormalMap","subtract","imageData","createImageData","output","ly","uy","lx","ux","num_points","idx","generateDataTexture","SceneUtils","createMultiMaterialObject","group","detach","attach","FontUtils","divisions","getFace","loadFace","family","familyName","cssFontWeight","cssFontStyle","drawText","text","resolution","chars","fontPaths","path","Path","ret","extractGlyphPoints","paths","outline","cpx","cpy","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","pts","glyph","glyphs","_cachedOutline","quadraticCurveTo","Shape","Utils","bezierCurveTo","b3","ha","generateShapes","curveSegments","font","shapes","toShapes","namespace","contour","snip","verts","ax","ay","bx","by","cx","cy","px","py","aX","aY","bX","bY","cX","cY","Triangulate","vertIndices","nv","_typeface_js","Curve","getPointAt","getUtoTmapping","getPoints","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","cache","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","LineCurve","QuadraticBezierCurve","tangentQuadraticBezier","CubicBezierCurve","tangentCubicBezier","SplineCurve","EllipseCurve","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","deltaAngle","ArcCurve","aRadius","tangentSpline","getPointFunc","LineCurve3","QuadraticBezierCurve3","tz","CubicBezierCurve3","SplineCurve3","pt0","pt2","pt3","ClosedSplineCurve3","CurvePath","curves","bends","autoClose","curve","checkConnection","curveLengths","getCurveLengths","lens","cacheLengths","sums","maxX","maxY","maxZ","minX","minY","minZ","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","createPointsGeometry","createGeometry","createSpacedPointsGeometry","addWrapPath","bendpath","getTransformedPoints","segments","oldPts","getWrapPoints","getTransformedSpacedPoints","oldX","oldY","xNorm","bounds","pathPt","getNormalVector","Gyroscope","translationWorld","rotationWorld","scaleWorld","translationObject","rotationObject","scaleObject","actions","fromPoints","PathActions","MOVE_TO","LINE_TO","QUADRATIC_CURVE_TO","BEZIER_CURVE_TO","CSPLINE_THRU","ARC","ELLIPSE","vectors","vlen","args","arguments","action","lastargs","aCPx","aCPy","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","arc","absarc","absellipse","ellipse","lastPoint","closedPath","useSpacedPoints","item","spts","concat","spline","tdivisions","subPaths","lastPath","tmpPath","tmpShape","holesFirst","isClockWise","holes","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","getSpacedPointsHoles","extractAllPoints","shape","extractPoints","extractAllSpacedPoints","removeHoles","prevShapeVert","prevHoleVert","holeIndex","shapeIndex","h2","hole","shortest","pts1","pts2","tmpShape1","tmpShape2","tmpHole1","tmpHole2","allpoints","dist","areaapts","areaa","areabpts","areab","oldShapeIndex","oldHoleIndex","areaa2","trianglea","triangleb","isolatedPts","triangulateShape","shapeWithoutHoles","triangles","allPointsMap","b2p0","b2p1","b2p2","b3p0","b3p1","b3p2","b3p3","AnimationHandler","playing","library","that","deltaTimeMS","addToUpdate","removeFromUpdate","initData","hierarchy","parseRecurseHierarchy","initialized","keys","usedMorphTargets","morphTargetName","morphTargetsInfluences","lengthInFrames","JIT","CATMULLROM","CATMULLROM_FORWARD","Animation","interpolationType","currentTime","timeScale","isPlaying","isPaused","loop","play","startTimeMS","hl","animationCache","prevKey","nextKey","originalMatrix","getNextKeyWith","pause","prevXYZ","nextXYZ","unloopedCurrentTime","currentPoint","forwardPoint","types","getPrevKeyWith","interpolateCatmullRom","KeyFrameAnimation","JITCompile","sids","sid","next","startTimeMs","endTime","original","frame","looped","JIThierarchy","lastIndex","prev","hasTarget","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","CombinedCamera","orthoNear","orthoFar","cameraO","cameraP","zoom","toPerspective","inPerspectiveMode","inOrthographicMode","toOrthographic","hyperfocus","halfHeight","halfWidth","setFov","setZoom","toFrontView","toBackView","toLeftView","toRightView","toTopView","toBottomView","AsteriskGeometry","innerRadius","outerRadius","sd2","ed2","rays","CircleGeometry","thetaStart","thetaLength","centerUV","width_half","height_half","depth_half","buildPlane","udir","vdir","gridX","gridY","gridX1","gridY1","segment_width","segment_height","radiusTop","radiusBottom","radiusSegments","openEnded","heightHalf","segmentsX","segmentsY","verticesRow","uvsRow","na","nb","tanTheta","uv4","shapebb","addShapeList","addShape","extrudePts","splineTube","binormal","position2","ahole","bevelThickness","bevelSize","bevelSegments","bevelEnabled","steps","extrudePath","extrudeByPath","extrudeMaterial","uvgen","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapesOffset","shapePoints","scalePt2","pt","vec","bs","vert","flen","getBevelVec","pt_i","pt_j","pt_k","v_dot_w_hat","q_sub_p_dot_w_hat","v_hat","w_hat","anglea","angleb","anglec","getBevelVec1","getBevelVec2","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","sidewalls","layeroffset","slen1","slen2","f4","f3","isBottom","generateBottomUV","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","layer","buildLidFaces","buildSideFaces","extrudedShape","extrudeOptions","indexA","indexB","indexC","indexD","az","bz","cz","LatheGeometry","phiStart","phiLength","inversePointLength","inverseSegments","phi","np","gridZ","gridZ1","TextGeometry","textShapes","radialSegments","tubularSegments","TorusKnotGeometry","heightScale","grid","tang","bitan","getPos","ip","jp","uva","uvb","uvc","uvd","in_q","in_p","cu","su","quOverP","cs","closed","numpoints","pos2","ArrowHelper","smallest","epsilon","MAX_VALUE","initialNormal3","PolyhedronGeometry","detail","prepare","midpoints","make","azimuth","inclination","azi","correctUV","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","func","slices","stacks","useTris","sliceCount","ConvexGeometry","addPoint","vertexId","mag","randomOffset","edge","boundary","equalEdge","va","vb","vc","ea","eb","vertexUv","newId","AxisHelper","dir","lineGeometry","coneGeometry","cone","setDirection","setColor","CameraHelper","pointMap","addLine","setPoint","__v","__projector","__c","DirectionalLightHelper","sphereSize","hexColor","bulbGeometry","raysGeometry","bulbMaterial","raysMaterial","lightSphere","lightRays","isGizmo","gizmoSubject","gizmoRoot","targetSphere","targetGeo","targetMaterial","lineMaterial","targetLine","HemisphereLightHelper","arrowLength","domeSize","hexColorGround","bulbGroundGeometry","bulbSkyMaterial","bulbGroundMaterial","lightArrow","lightArrowGround","joint","PointLightHelper","distanceGeometry","distanceMaterial","lightDistance","SpotLightHelper","coneMatrix","coneMaterial","lightCone","coneLength","coneWidth","gyroscope","renderCallback","lensFlares","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","MorphBlendMesh","animationsMap","animationsList","numFrames","endFrame","createAnimation","setAnimationWeight","startFrame","lastFrame","currentFrame","active","autoCreateAnimations","frameRanges","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","stopAnimation","_renderer","_lensFlare","prefix","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","hasVertexTexture","ShaderFlares","renderType","occlusionMap","screenPosition","viewportWidth","viewportHeight","flares","nFlares","sprite","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","TEXTURE1","copyTexImage2D","_depthMaterial","_depthMaterialMorph","_depthMaterialSkin","_depthMaterialMorphSkin","_min","_max","createVirtualLight","cascade","virtualLight","isVirtual","pointsWorld","pointsFrustum","nearZ","farZ","updateVirtualLight","updateShadowCamera","getObjectMaterial","depthShader","depthUniforms","originalCamera","gyro","shadowFilter","pars","cameraHelper","objectMaterial","useMorphing","useSkinning","customDepthMaterial","_sprite","ShaderSprite","fogType","nSprites","oldFogType","sceneFogType","DepthPassPlugin","enabled","lensFlareVertexTexture","lensFlare","CanvasRenderingContext2D","WebGLRenderingContext","workers","Worker","fileapi","File","FileReader","FileList","Blob","getWebGLErrorMessage","fontFamily","margin","body","appendChild"],"mappings":"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BACApwD,EAAAowD,YAAA,qBACApwD,EAAAowD,YAAA,mBACApwD,EAAAowD,YAAA,yBACApwD,EAAAowD,YAAA,kBACApwD,EAAAowD,YAAA,wBACApwD,EAAAowD,YAAA,qBACApwD,EAAAowD,YAAA,sBAEA,gBAEApwD,EAAAowD,YAAA,WACApwD,EAAAowD,YAAA,gBACApwD,EAAAowD,YAAA,aAEApwD,EAAAowD,YAAA,mBACApwD,EAAAowD,YAAA,gBACApwD,EAAAowD,YAAA,kBACApwD,EAAAowD,YAAA,qBAEA,4CAEApwD,EAAAowD,YAAA,mBACApwD,EAAAowD,YAAA,gBACApwD,EAAAowD,YAAA,eAEA,mCAEApwD,EAAAowD,YAAA,gBACApwD,EAAAowD,YAAA,cACApwD,EAAAowD,YAAA,oBACApwD,EAAAowD,YAAA,iBAEA,KAEA1oB,KAAA,MAEA9iC,gBAEA,wBACA,yBAEA,wBACA,yBACA,yBACA,2BAEA5E,EAAAowD,YAAA,oBACApwD,EAAAowD,YAAA,kBACApwD,EAAAowD,YAAA,uBACApwD,EAAAowD,YAAA,qBACApwD,EAAAowD,YAAA,kBACApwD,EAAAowD,YAAA,2BACApwD,EAAAowD,YAAA,wBACApwD,EAAAowD,YAAA,sBACApwD,EAAAowD,YAAA,wBACApwD,EAAAowD,YAAA,0BAEA,gBAEA,gDAEApwD,EAAAowD,YAAA,aACApwD,EAAAowD,YAAA,mBACApwD,EAAAowD,YAAA,qBAEApwD,EAAAowD,YAAA,sBAEApwD,EAAAowD,YAAA,kBACApwD,EAAAowD,YAAA,eACApwD,EAAAowD,YAAA,gBACApwD,EAAAowD,YAAA,mBAEApwD,EAAAowD,YAAA,yBAEApwD,EAAAowD,YAAA,aAEA,KAEA1oB,KAAA,OAIAytB,gBAEAlxD,SAAAjE,EAAA4zC,cAAAnuC,OAEAzF,EAAAuzD,YAAA,SACAvzD,EAAAuzD,YAAA,YAIA7uD,cAEA,sBACA,uBAEA1E,EAAAowD,YAAA,kBACApwD,EAAAowD,YAAA,sBAEA,gBAEApwD,EAAAowD,YAAA,aAEA,6DAEA,6BACA,8DACA,Q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","file":"js/fxclouds.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 337);\n","import * as THREE from 'three';\nimport Detector from './lib/three.detector';\n\nif (!Detector.webgl) {\n\tDetector.addGetWebGLMessage();\n}\n\nlet container;\nlet camera, scene, renderer;\nlet mesh, geometry, material;\n\nlet mouseX = 0, mouseY = 0;\nconst start_time = Date.now();\n\nconst windowHalfX = window.innerWidth / 2;\nconst windowHalfY = window.innerHeight / 2;\n\ninitClouds();\n\nfunction initClouds() {\n\n\tcontainer = document.getElementById('cd-main-overlay');\n\n\t// Bg gradient\n\n\tconst canvas = document.createElement('canvas');\n\tcanvas.width = 32;\n\tcanvas.height = window.innerHeight;\n\n\tconst context = canvas.getContext('2d');\n\n\tconst gradient = context.createLinearGradient(0, 0, 0, canvas.height);\n\tgradient.addColorStop(0, '#1e4877');\n\tgradient.addColorStop(0.5, '#4584b4');\n\n\tcontext.fillStyle = gradient;\n\tcontext.fillRect(0, 0, canvas.width, canvas.height);\n\n\tcontainer.style.background = `url(\"${canvas.toDataURL('image/png')}\")`;\n\n\t//\n\n\tcamera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 1, 3000);\n\tcamera.position.z = 3000;\n\n\tscene = new THREE.Scene();\n\n\tgeometry = new THREE.Geometry();\n\n\tconst texture = THREE.ImageUtils.loadTexture('/images/cloud10.png', null, animateClouds);\n\ttexture.magFilter = THREE.LinearMipMapLinearFilter;\n\ttexture.minFilter = THREE.LinearMipMapLinearFilter;\n\n\tconst fog = new THREE.Fog(0x4584b4, -100, 3000);\n\n\tmaterial = new THREE.ShaderMaterial({\n\t\tuniforms: {\n\t\t\tmap: {\n\t\t\t\ttype: 't',\n\t\t\t\tvalue: texture\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\ttype: 'c',\n\t\t\t\tvalue: fog.color\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\ttype: 'f',\n\t\t\t\tvalue: fog.near\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\ttype: 'f',\n\t\t\t\tvalue: fog.far\n\t\t\t}\n\t\t},\n\t\tvertexShader: document.getElementById('vs').textContent,\n\t\tfragmentShader: document.getElementById('fs').textContent,\n\t\tdepthWrite: false,\n\t\tdepthTest: false,\n\t\ttransparent: true\n\n\t});\n\n\tconst plane = new THREE.Mesh(new THREE.PlaneGeometry(64, 64));\n\n\tfor (let i = 0; i < 8000; i++) {\n\n\t\tplane.position.x = Math.random() * 1000 - 500;\n\t\tplane.position.y = -Math.random() * Math.random() * 200 - 15;\n\t\tplane.position.z = i;\n\t\tplane.rotation.z = Math.random() * Math.PI;\n\t\tplane.scale.x = plane.scale.y = Math.random() * Math.random() * 1.5 + 0.5;\n\n\t\tTHREE.GeometryUtils.merge(geometry, plane);\n\n\t}\n\n\tmesh = new THREE.Mesh(geometry, material);\n\tscene.add(mesh);\n\n\tmesh = new THREE.Mesh(geometry, material);\n\tmesh.position.z = -8000;\n\tscene.add(mesh);\n\n\trenderer = new THREE.WebGLRenderer({\n\t\tantialias: false\n\t});\n\trenderer.setSize(window.innerWidth, window.innerHeight);\n\tcontainer.append(renderer.domElement);\n\n\tdocument.addEventListener('mousemove', onDocumentMouseMoveClouds, false);\n\twindow.addEventListener('resize', onWindowResizeClouds, false);\n\n}\n\nfunction onDocumentMouseMoveClouds(event) {\n\n\tmouseX = (event.clientX - windowHalfX) * 0.25;\n\tmouseY = (event.clientY - windowHalfY) * 0.15;\n\n}\n\nfunction onWindowResizeClouds() {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\n\trenderer.setSize(window.innerWidth, window.innerHeight);\n\n}\n\nfunction animateClouds() {\n\n\trequestAnimationFrame(animateClouds);\n\n\tif (container.style.visibility !== 'hidden') {\n\n\t\tlet position = ((Date.now() - start_time) * 0.03) % 8000;\n\n\t\tcamera.position.x += (mouseX - camera.position.x) * 0.005;\n\t\tcamera.position.y += (-mouseY - 70 - camera.position.y) * 0.01;\n\t\tcamera.position.z = -position + 8000;\n\n\t\trenderer.render(scene, camera);\n\t}\n}\n","\r\nvar window = window || {};\r\nvar self = self || {};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author Larry Battle / http://bateru.com/news\r\n */\r\n\r\nvar THREE = THREE || { REVISION: '55' };\r\n\r\nself.console = self.console || {\r\n\r\n\tinfo: function () {},\r\n\tlog: function () {},\r\n\tdebug: function () {},\r\n\twarn: function () {},\r\n\terror: function () {}\r\n\r\n};\r\n\r\nself.Int32Array = self.Int32Array || Array;\r\nself.Float32Array = self.Float32Array || Array;\r\n\r\n// Shims for \"startsWith\", \"endsWith\", and \"trim\" for browsers where this is not yet implemented\r\n// not sure we should have this, or at least not have it here\r\n\r\n// http://stackoverflow.com/questions/646628/javascript-startswith\r\n// http://stackoverflow.com/questions/498970/how-do-i-trim-a-string-in-javascript\r\n// http://wiki.ecmascript.org/doku.php?id=harmony%3astring_extras\r\n\r\nString.prototype.startsWith = String.prototype.startsWith || function ( str ) {\r\n\r\n\treturn this.slice( 0, str.length ) === str;\r\n\r\n};\r\n\r\nString.prototype.endsWith = String.prototype.endsWith || function ( str ) {\r\n\r\n\tvar t = String( str );\r\n\tvar index = this.lastIndexOf( t );\r\n\treturn ( -1 < index && index ) === (this.length - t.length);\r\n\r\n};\r\n\r\nString.prototype.trim = String.prototype.trim || function () {\r\n\r\n\treturn this.replace( /^\\s+|\\s+$/g, '' );\r\n\r\n};\r\n\r\n\r\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\r\n\r\n// requestAnimationFrame polyfill by Erik Möller\r\n// fixes from Paul Irish and Tino Zijdel\r\n\r\n( function () {\r\n\r\n\tvar lastTime = 0;\r\n\tvar vendors = [ 'ms', 'moz', 'webkit', 'o' ];\r\n\r\n\tfor ( var x = 0; x < vendors.length && !window.requestAnimationFrame; ++ x ) {\r\n\r\n\t\twindow.requestAnimationFrame = window[ vendors[ x ] + 'RequestAnimationFrame' ];\r\n\t\twindow.cancelAnimationFrame = window[ vendors[ x ] + 'CancelAnimationFrame' ] || window[ vendors[ x ] + 'CancelRequestAnimationFrame' ];\r\n\r\n\t}\r\n\r\n\tif ( window.requestAnimationFrame === undefined ) {\r\n\r\n\t\twindow.requestAnimationFrame = function ( callback, element ) {\r\n\r\n\t\t\tvar currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );\r\n\t\t\tvar id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\r\n\t\t\tlastTime = currTime + timeToCall;\r\n\t\t\treturn id;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\twindow.cancelAnimationFrame = window.cancelAnimationFrame || function ( id ) { window.clearTimeout( id ) };\r\n\r\n}() );\r\n\r\n// GL STATE CONSTANTS\r\n\r\nTHREE.CullFaceNone = 0;\r\nTHREE.CullFaceBack = 1;\r\nTHREE.CullFaceFront = 2;\r\nTHREE.CullFaceFrontBack = 3;\r\n\r\nTHREE.FrontFaceDirectionCW = 0;\r\nTHREE.FrontFaceDirectionCCW = 1;\r\n\r\n// SHADOWING TYPES\r\n\r\nTHREE.BasicShadowMap = 0;\r\nTHREE.PCFShadowMap = 1;\r\nTHREE.PCFSoftShadowMap = 2;\r\n\r\n// MATERIAL CONSTANTS\r\n\r\n// side\r\n\r\nTHREE.FrontSide = 0;\r\nTHREE.BackSide = 1;\r\nTHREE.DoubleSide = 2;\r\n\r\n// shading\r\n\r\nTHREE.NoShading = 0;\r\nTHREE.FlatShading = 1;\r\nTHREE.SmoothShading = 2;\r\n\r\n// colors\r\n\r\nTHREE.NoColors = 0;\r\nTHREE.FaceColors = 1;\r\nTHREE.VertexColors = 2;\r\n\r\n// blending modes\r\n\r\nTHREE.NoBlending = 0;\r\nTHREE.NormalBlending = 1;\r\nTHREE.AdditiveBlending = 2;\r\nTHREE.SubtractiveBlending = 3;\r\nTHREE.MultiplyBlending = 4;\r\nTHREE.CustomBlending = 5;\r\n\r\n// custom blending equations\r\n// (numbers start from 100 not to clash with other\r\n//  mappings to OpenGL constants defined in Texture.js)\r\n\r\nTHREE.AddEquation = 100;\r\nTHREE.SubtractEquation = 101;\r\nTHREE.ReverseSubtractEquation = 102;\r\n\r\n// custom blending destination factors\r\n\r\nTHREE.ZeroFactor = 200;\r\nTHREE.OneFactor = 201;\r\nTHREE.SrcColorFactor = 202;\r\nTHREE.OneMinusSrcColorFactor = 203;\r\nTHREE.SrcAlphaFactor = 204;\r\nTHREE.OneMinusSrcAlphaFactor = 205;\r\nTHREE.DstAlphaFactor = 206;\r\nTHREE.OneMinusDstAlphaFactor = 207;\r\n\r\n// custom blending source factors\r\n\r\n//THREE.ZeroFactor = 200;\r\n//THREE.OneFactor = 201;\r\n//THREE.SrcAlphaFactor = 204;\r\n//THREE.OneMinusSrcAlphaFactor = 205;\r\n//THREE.DstAlphaFactor = 206;\r\n//THREE.OneMinusDstAlphaFactor = 207;\r\nTHREE.DstColorFactor = 208;\r\nTHREE.OneMinusDstColorFactor = 209;\r\nTHREE.SrcAlphaSaturateFactor = 210;\r\n\r\n\r\n// TEXTURE CONSTANTS\r\n\r\nTHREE.MultiplyOperation = 0;\r\nTHREE.MixOperation = 1;\r\nTHREE.AddOperation = 2;\r\n\r\n// Mapping modes\r\n\r\nTHREE.UVMapping = function () {};\r\n\r\nTHREE.CubeReflectionMapping = function () {};\r\nTHREE.CubeRefractionMapping = function () {};\r\n\r\nTHREE.SphericalReflectionMapping = function () {};\r\nTHREE.SphericalRefractionMapping = function () {};\r\n\r\n// Wrapping modes\r\n\r\nTHREE.RepeatWrapping = 1000;\r\nTHREE.ClampToEdgeWrapping = 1001;\r\nTHREE.MirroredRepeatWrapping = 1002;\r\n\r\n// Filters\r\n\r\nTHREE.NearestFilter = 1003;\r\nTHREE.NearestMipMapNearestFilter = 1004;\r\nTHREE.NearestMipMapLinearFilter = 1005;\r\nTHREE.LinearFilter = 1006;\r\nTHREE.LinearMipMapNearestFilter = 1007;\r\nTHREE.LinearMipMapLinearFilter = 1008;\r\n\r\n// Data types\r\n\r\nTHREE.UnsignedByteType = 1009;\r\nTHREE.ByteType = 1010;\r\nTHREE.ShortType = 1011;\r\nTHREE.UnsignedShortType = 1012;\r\nTHREE.IntType = 1013;\r\nTHREE.UnsignedIntType = 1014;\r\nTHREE.FloatType = 1015;\r\n\r\n// Pixel types\r\n\r\n//THREE.UnsignedByteType = 1009;\r\nTHREE.UnsignedShort4444Type = 1016;\r\nTHREE.UnsignedShort5551Type = 1017;\r\nTHREE.UnsignedShort565Type = 1018;\r\n\r\n// Pixel formats\r\n\r\nTHREE.AlphaFormat = 1019;\r\nTHREE.RGBFormat = 1020;\r\nTHREE.RGBAFormat = 1021;\r\nTHREE.LuminanceFormat = 1022;\r\nTHREE.LuminanceAlphaFormat = 1023;\r\n\r\n// Compressed texture formats\r\n\r\nTHREE.RGB_S3TC_DXT1_Format = 2001;\r\nTHREE.RGBA_S3TC_DXT1_Format = 2002;\r\nTHREE.RGBA_S3TC_DXT3_Format = 2003;\r\nTHREE.RGBA_S3TC_DXT5_Format = 2004;\r\n\r\n/*\r\n// Potential future PVRTC compressed texture formats\r\nTHREE.RGB_PVRTC_4BPPV1_Format = 2100;\r\nTHREE.RGB_PVRTC_2BPPV1_Format = 2101;\r\nTHREE.RGBA_PVRTC_4BPPV1_Format = 2102;\r\nTHREE.RGBA_PVRTC_2BPPV1_Format = 2103;\r\n*/\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Color = function ( value ) {\r\n\r\n\tif ( value !== undefined ) this.set( value );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Color.prototype = {\r\n\r\n\tconstructor: THREE.Color,\r\n\r\n\tr: 1, g: 1, b: 1,\r\n\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tswitch ( typeof value ) {\r\n\r\n\t\t\tcase \"number\":\r\n\t\t\t\tthis.setHex( value );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"string\":\r\n\t\t\t\tthis.setStyle( value );\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tsetHex: function ( hex ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetHSV: function ( h, s, v ) {\r\n\r\n\t\t// based on MochiKit implementation by Bob Ippolito\r\n\t\t// h,s,v ranges are < 0.0 - 1.0 >\r\n\r\n\t\tvar i, f, p, q, t;\r\n\r\n\t\tif ( v === 0 ) {\r\n\r\n\t\t\tthis.r = this.g = this.b = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ti = Math.floor( h * 6 );\r\n\t\t\tf = ( h * 6 ) - i;\r\n\t\t\tp = v * ( 1 - s );\r\n\t\t\tq = v * ( 1 - ( s * f ) );\r\n\t\t\tt = v * ( 1 - ( s * ( 1 - f ) ) );\r\n\r\n\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\tthis.r = v;\r\n\t\t\t\tthis.g = t;\r\n\t\t\t\tthis.b = p;\r\n\r\n\t\t\t} else if ( i === 1 ) {\r\n\r\n\t\t\t\tthis.r = q;\r\n\t\t\t\tthis.g = v;\r\n\t\t\t\tthis.b = p;\r\n\r\n\t\t\t} else if ( i === 2 ) {\r\n\r\n\t\t\t\tthis.r = p;\r\n\t\t\t\tthis.g = v;\r\n\t\t\t\tthis.b = t;\r\n\r\n\t\t\t} else if ( i === 3 ) {\r\n\r\n\t\t\t\tthis.r = p;\r\n\t\t\t\tthis.g = q;\r\n\t\t\t\tthis.b = v;\r\n\r\n\t\t\t} else if ( i === 4 ) {\r\n\r\n\t\t\t\tthis.r = t;\r\n\t\t\t\tthis.g = p;\r\n\t\t\t\tthis.b = v;\r\n\r\n\t\t\t} else if ( i === 5 ) {\r\n\r\n\t\t\t\tthis.r = v;\r\n\t\t\t\tthis.g = p;\r\n\t\t\t\tthis.b = q;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetStyle: function ( style ) {\r\n\r\n\t\t// rgb(255,0,0)\r\n\r\n\t\tif ( /^rgb\\((\\d+),(\\d+),(\\d+)\\)$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^rgb\\((\\d+),(\\d+),(\\d+)\\)$/i.exec( style );\r\n\r\n\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// rgb(100%,0%,0%)\r\n\r\n\t\tif ( /^rgb\\((\\d+)\\%,(\\d+)\\%,(\\d+)\\%\\)$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^rgb\\((\\d+)\\%,(\\d+)\\%,(\\d+)\\%\\)$/i.exec( style );\r\n\r\n\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// #ff0000\r\n\r\n\t\tif ( /^\\#([0-9a-f]{6})$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^\\#([0-9a-f]{6})$/i.exec( style );\r\n\r\n\t\t\tthis.setHex( parseInt( color[ 1 ], 16 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// #f00\r\n\r\n\t\tif ( /^\\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^\\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec( style );\r\n\r\n\t\t\tthis.setHex( parseInt( color[ 1 ] + color[ 1 ] + color[ 2 ] + color[ 2 ] + color[ 3 ] + color[ 3 ], 16 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// red\r\n\r\n\t\tif ( /^(\\w+)$/i.test( style ) ) {\r\n\r\n\t\t\tthis.setHex( THREE.ColorKeywords[ style ] );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\r\n\t},\r\n\r\n\tcopy: function ( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyGammaToLinear: function ( color ) {\r\n\r\n\t\tthis.r = color.r * color.r;\r\n\t\tthis.g = color.g * color.g;\r\n\t\tthis.b = color.b * color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyLinearToGamma: function ( color ) {\r\n\r\n\t\tthis.r = Math.sqrt( color.r );\r\n\t\tthis.g = Math.sqrt( color.g );\r\n\t\tthis.b = Math.sqrt( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertGammaToLinear: function () {\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tthis.r = r * r;\r\n\t\tthis.g = g * g;\r\n\t\tthis.b = b * b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertLinearToGamma: function () {\r\n\r\n\t\tthis.r = Math.sqrt( this.r );\r\n\t\tthis.g = Math.sqrt( this.g );\r\n\t\tthis.b = Math.sqrt( this.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetHex: function () {\r\n\r\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t},\r\n\r\n\tgetHexString: function () {\r\n\r\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t},\r\n\r\n\tgetStyle: function () {\r\n\r\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 )  + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t},\r\n\r\n\tgetHSV: function ( hsv ) {\r\n\r\n\t\t// based on MochiKit implementation by Bob Ippolito\r\n\t\t// h,s,v ranges are < 0.0 - 1.0 >\r\n\r\n\t\tvar r = this.r;\r\n\t\tvar g = this.g;\r\n\t\tvar b = this.b;\r\n\r\n\t\tvar max = Math.max( Math.max( r, g ), b );\r\n\t\tvar min = Math.min( Math.min( r, g ), b );\r\n\r\n\t\tvar hue;\r\n\t\tvar saturation;\r\n\t\tvar value = max;\r\n\r\n\t\tif ( min === max )\t{\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar delta = ( max - min );\r\n\t\t\tsaturation = delta / max;\r\n\r\n\t\t\tif ( r === max ) {\r\n\r\n\t\t\t\thue = ( g - b ) / delta;\r\n\r\n\t\t\t} else if ( g === max ) {\r\n\r\n\t\t\t\thue = 2 + ( ( b - r ) / delta );\r\n\r\n\t\t\t} else\t{\r\n\r\n\t\t\t\thue = 4 + ( ( r - g ) / delta );\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t\tif ( hue < 0 ) {\r\n\r\n\t\t\t\thue += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hue > 1 ) {\r\n\r\n\t\t\t\thue -= 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( hsv === undefined ) {\r\n\r\n\t\t\thsv = { h: 0, s: 0, v: 0 };\r\n\r\n\t\t}\r\n\r\n\t\thsv.h = hue;\r\n\t\thsv.s = saturation;\r\n\t\thsv.v = value;\r\n\r\n\t\treturn hsv;\r\n\r\n\t},\r\n\r\n\tadd: function ( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddColors: function ( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Color().setRGB( this.r, this.g, this.b );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ColorKeywords = { \"aliceblue\": 0xF0F8FF, \"antiquewhite\": 0xFAEBD7, \"aqua\": 0x00FFFF, \"aquamarine\": 0x7FFFD4, \"azure\": 0xF0FFFF,\r\n\"beige\": 0xF5F5DC, \"bisque\": 0xFFE4C4, \"black\": 0x000000, \"blanchedalmond\": 0xFFEBCD, \"blue\": 0x0000FF, \"blueviolet\": 0x8A2BE2,\r\n\"brown\": 0xA52A2A, \"burlywood\": 0xDEB887, \"cadetblue\": 0x5F9EA0, \"chartreuse\": 0x7FFF00, \"chocolate\": 0xD2691E, \"coral\": 0xFF7F50,\r\n\"cornflowerblue\": 0x6495ED, \"cornsilk\": 0xFFF8DC, \"crimson\": 0xDC143C, \"cyan\": 0x00FFFF, \"darkblue\": 0x00008B, \"darkcyan\": 0x008B8B,\r\n\"darkgoldenrod\": 0xB8860B, \"darkgray\": 0xA9A9A9, \"darkgreen\": 0x006400, \"darkgrey\": 0xA9A9A9, \"darkkhaki\": 0xBDB76B, \"darkmagenta\": 0x8B008B,\r\n\"darkolivegreen\": 0x556B2F, \"darkorange\": 0xFF8C00, \"darkorchid\": 0x9932CC, \"darkred\": 0x8B0000, \"darksalmon\": 0xE9967A, \"darkseagreen\": 0x8FBC8F,\r\n\"darkslateblue\": 0x483D8B, \"darkslategray\": 0x2F4F4F, \"darkslategrey\": 0x2F4F4F, \"darkturquoise\": 0x00CED1, \"darkviolet\": 0x9400D3,\r\n\"deeppink\": 0xFF1493, \"deepskyblue\": 0x00BFFF, \"dimgray\": 0x696969, \"dimgrey\": 0x696969, \"dodgerblue\": 0x1E90FF, \"firebrick\": 0xB22222,\r\n\"floralwhite\": 0xFFFAF0, \"forestgreen\": 0x228B22, \"fuchsia\": 0xFF00FF, \"gainsboro\": 0xDCDCDC, \"ghostwhite\": 0xF8F8FF, \"gold\": 0xFFD700,\r\n\"goldenrod\": 0xDAA520, \"gray\": 0x808080, \"green\": 0x008000, \"greenyellow\": 0xADFF2F, \"grey\": 0x808080, \"honeydew\": 0xF0FFF0, \"hotpink\": 0xFF69B4,\r\n\"indianred\": 0xCD5C5C, \"indigo\": 0x4B0082, \"ivory\": 0xFFFFF0, \"khaki\": 0xF0E68C, \"lavender\": 0xE6E6FA, \"lavenderblush\": 0xFFF0F5, \"lawngreen\": 0x7CFC00,\r\n\"lemonchiffon\": 0xFFFACD, \"lightblue\": 0xADD8E6, \"lightcoral\": 0xF08080, \"lightcyan\": 0xE0FFFF, \"lightgoldenrodyellow\": 0xFAFAD2, \"lightgray\": 0xD3D3D3,\r\n\"lightgreen\": 0x90EE90, \"lightgrey\": 0xD3D3D3, \"lightpink\": 0xFFB6C1, \"lightsalmon\": 0xFFA07A, \"lightseagreen\": 0x20B2AA, \"lightskyblue\": 0x87CEFA,\r\n\"lightslategray\": 0x778899, \"lightslategrey\": 0x778899, \"lightsteelblue\": 0xB0C4DE, \"lightyellow\": 0xFFFFE0, \"lime\": 0x00FF00, \"limegreen\": 0x32CD32,\r\n\"linen\": 0xFAF0E6, \"magenta\": 0xFF00FF, \"maroon\": 0x800000, \"mediumaquamarine\": 0x66CDAA, \"mediumblue\": 0x0000CD, \"mediumorchid\": 0xBA55D3,\r\n\"mediumpurple\": 0x9370DB, \"mediumseagreen\": 0x3CB371, \"mediumslateblue\": 0x7B68EE, \"mediumspringgreen\": 0x00FA9A, \"mediumturquoise\": 0x48D1CC,\r\n\"mediumvioletred\": 0xC71585, \"midnightblue\": 0x191970, \"mintcream\": 0xF5FFFA, \"mistyrose\": 0xFFE4E1, \"moccasin\": 0xFFE4B5, \"navajowhite\": 0xFFDEAD,\r\n\"navy\": 0x000080, \"oldlace\": 0xFDF5E6, \"olive\": 0x808000, \"olivedrab\": 0x6B8E23, \"orange\": 0xFFA500, \"orangered\": 0xFF4500, \"orchid\": 0xDA70D6,\r\n\"palegoldenrod\": 0xEEE8AA, \"palegreen\": 0x98FB98, \"paleturquoise\": 0xAFEEEE, \"palevioletred\": 0xDB7093, \"papayawhip\": 0xFFEFD5, \"peachpuff\": 0xFFDAB9,\r\n\"peru\": 0xCD853F, \"pink\": 0xFFC0CB, \"plum\": 0xDDA0DD, \"powderblue\": 0xB0E0E6, \"purple\": 0x800080, \"red\": 0xFF0000, \"rosybrown\": 0xBC8F8F,\r\n\"royalblue\": 0x4169E1, \"saddlebrown\": 0x8B4513, \"salmon\": 0xFA8072, \"sandybrown\": 0xF4A460, \"seagreen\": 0x2E8B57, \"seashell\": 0xFFF5EE,\r\n\"sienna\": 0xA0522D, \"silver\": 0xC0C0C0, \"skyblue\": 0x87CEEB, \"slateblue\": 0x6A5ACD, \"slategray\": 0x708090, \"slategrey\": 0x708090, \"snow\": 0xFFFAFA,\r\n\"springgreen\": 0x00FF7F, \"steelblue\": 0x4682B4, \"tan\": 0xD2B48C, \"teal\": 0x008080, \"thistle\": 0xD8BFD8, \"tomato\": 0xFF6347, \"turquoise\": 0x40E0D0,\r\n\"violet\": 0xEE82EE, \"wheat\": 0xF5DEB3, \"white\": 0xFFFFFF, \"whitesmoke\": 0xF5F5F5, \"yellow\": 0xFFFF00, \"yellowgreen\": 0x9ACD32 };\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Quaternion = function( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Quaternion.prototype = {\r\n\r\n\tconstructor: THREE.Quaternion,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( q ) {\r\n\r\n\t\tthis.x = q.x;\r\n\t\tthis.y = q.y;\r\n\t\tthis.z = q.z;\r\n\t\tthis.w = q.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromEuler: function ( v, order ) {\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tvar c1 = Math.cos( v.x / 2 );\r\n\t\tvar c2 = Math.cos( v.y / 2 );\r\n\t\tvar c3 = Math.cos( v.z / 2 );\r\n\t\tvar s1 = Math.sin( v.x / 2 );\r\n\t\tvar s2 = Math.sin( v.y / 2 );\r\n\t\tvar s3 = Math.sin( v.z / 2 );\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\t\t// axis have to be normalized\r\n\r\n\t\tvar halfAngle = angle / 2,\r\n\t\t\ts = Math.sin( halfAngle );\r\n\r\n\t\tthis.x = axis.x * s;\r\n\t\tthis.y = axis.y * s;\r\n\t\tthis.z = axis.z * s;\r\n\t\tthis.w = Math.cos( halfAngle );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements,\r\n\r\n\t\t\tm11 = te[0], m12 = te[4], m13 = te[8],\r\n\t\t\tm21 = te[1], m22 = te[5], m23 = te[9],\r\n\t\t\tm31 = te[2], m32 = te[6], m33 = te[10],\r\n\r\n\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\ts;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis.w = 0.25 / s;\r\n\t\t\tthis.x = ( m32 - m23 ) * s;\r\n\t\t\tthis.y = ( m13 - m31 ) * s;\r\n\t\t\tthis.z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis.w = (m32 - m23 ) / s;\r\n\t\t\tthis.x = 0.25 * s;\r\n\t\t\tthis.y = (m12 + m21 ) / s;\r\n\t\t\tthis.z = (m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis.w = (m13 - m31 ) / s;\r\n\t\t\tthis.x = (m12 + m21 ) / s;\r\n\t\t\tthis.y = 0.25 * s;\r\n\t\t\tthis.z = (m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis.w = ( m21 - m12 ) / s;\r\n\t\t\tthis.x = ( m13 + m31 ) / s;\r\n\t\t\tthis.y = ( m23 + m32 ) / s;\r\n\t\t\tthis.z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tinverse: function () {\r\n\r\n\t\tthis.conjugate().normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconjugate: function () {\r\n\r\n\t\tthis.x *= -1;\r\n\t\tthis.y *= -1;\r\n\t\tthis.z *= -1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tvar l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis.x = this.x * l;\r\n\t\t\tthis.y = this.y * l;\r\n\t\t\tthis.z = this.z * l;\r\n\t\t\tthis.w = this.w * l;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( q, p ) {\r\n\r\n\t\tif ( p !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Quaternion\\'s .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t},\r\n\r\n\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tvar qax = a.x, qay = a.y, qaz = a.z, qaw = a.w;\r\n\t\tvar qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;\r\n\r\n\t\tthis.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Quaternion\\'s .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\treturn vector.applyQuaternion( this );\r\n\r\n\t},\r\n\r\n\tslerp: function ( qb, t ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tvar cosHalfTheta = w * qb.w + x * qb.x + y * qb.y + z * qb.z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis.w = -qb.w;\r\n\t\t\tthis.x = -qb.x;\r\n\t\t\tthis.y = -qb.y;\r\n\t\t\tthis.z = -qb.z;\r\n\r\n\t\t\tcosHalfTheta = -cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis.w = w;\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar halfTheta = Math.acos( cosHalfTheta );\r\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\r\n\r\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\r\n\r\n\t\t\tthis.w = 0.5 * ( w + this.w );\r\n\t\t\tthis.x = 0.5 * ( x + this.x );\r\n\t\t\tthis.y = 0.5 * ( y + this.y );\r\n\t\t\tthis.z = 0.5 * ( z + this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis.w = ( w * ratioA + this.w * ratioB );\r\n\t\tthis.x = ( x * ratioA + this.x * ratioB );\r\n\t\tthis.y = ( y * ratioA + this.y * ratioB );\r\n\t\tthis.z = ( z * ratioA + this.z * ratioB );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Quaternion( this.x, this.y, this.z, this.w );\r\n\r\n\t}\r\n\r\n}\r\n\r\nTHREE.Quaternion.slerp = function ( qa, qb, qm, t ) {\r\n\r\n\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n}\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author egraether / http://egraether.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.Vector2 = function ( x, y ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\r\n};\r\n\r\nTHREE.Vector2.prototype = {\r\n\r\n\tconstructor: THREE.Vector2,\r\n\r\n\tset: function ( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector2\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector2\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.x *= s;\r\n\t\tthis.y *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( s ) {\r\n\r\n\t\tif ( s !== 0 ) {\r\n\r\n\t\t\tthis.x /= s;\r\n\t\t\tthis.y /= s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.set( 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tif ( this.x > v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y > v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tif ( this.x < v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tif ( this.x < min.x ) {\r\n\r\n\t\t\tthis.x = min.x;\r\n\r\n\t\t} else if ( this.x > max.x ) {\r\n\r\n\t\t\tthis.x = max.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < min.y ) {\r\n\r\n\t\t\tthis.y = min.y;\r\n\r\n\t\t} else if ( this.y > max.y ) {\r\n\r\n\t\t\tthis.y = max.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function() {\r\n\r\n\t\treturn this.multiplyScalar( - 1 );\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t},\r\n\r\n\tsetLength: function ( l ) {\r\n\r\n\t\tvar oldLength = this.length();\r\n\r\n\t\tif ( oldLength !== 0 && l !== oldLength ) {\r\n\r\n\t\t\tthis.multiplyScalar( l / oldLength );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Vector2( this.x, this.y );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author *kile / http://kile.stravaganza.org/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector3 = function ( x, y, z ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\r\n};\r\n\r\n\r\nTHREE.Vector3.prototype = {\r\n\r\n\tconstructor: THREE.Vector3,\r\n\r\n\tset: function ( x, y, z ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.x *= s;\r\n\t\tthis.y *= s;\r\n\t\tthis.z *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\r\n\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\r\n\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[0] * x + e[4] * y + e[8]  * z + e[12];\r\n\t\tthis.y = e[1] * x + e[5] * y + e[9]  * z + e[13];\r\n\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyProjection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 projection matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\t\tvar d = 1 / ( e[3] * x + e[7] * y + e[11] * z + e[15] ); // perspective divide\r\n\r\n\t\tthis.x = ( e[0] * x + e[4] * y + e[8]  * z + e[12] ) * d;\r\n\t\tthis.y = ( e[1] * x + e[5] * y + e[9]  * z + e[13] ) * d;\r\n\t\tthis.z = ( e[2] * x + e[6] * y + e[10] * z + e[14] ) * d;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyQuaternion: function ( q ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\r\n\t\tvar qx = q.x;\r\n\t\tvar qy = q.y;\r\n\t\tvar qz = q.z;\r\n\t\tvar qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tvar ix =  qw * x + qy * z - qz * y;\r\n\t\tvar iy =  qw * y + qz * x - qx * z;\r\n\t\tvar iz =  qw * z + qx * y - qy * x;\r\n\t\tvar iw = -qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyEuler: function ( v, eulerOrder ) {\r\n\r\n\t\tvar quaternion = THREE.Vector3.__q1.setFromEuler( v, eulerOrder );\r\n\r\n\t\tthis.applyQuaternion( quaternion );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyAxisAngle: function ( axis, angle ) {\r\n\r\n\t\tvar quaternion = THREE.Vector3.__q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.applyQuaternion( quaternion );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( s ) {\r\n\r\n\t\tif ( s !== 0 ) {\r\n\r\n\t\t\tthis.x /= s;\r\n\t\t\tthis.y /= s;\r\n\t\t\tthis.z /= s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tif ( this.x > v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y > v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z > v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tif ( this.x < v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tif ( this.x < min.x ) {\r\n\r\n\t\t\tthis.x = min.x;\r\n\r\n\t\t} else if ( this.x > max.x ) {\r\n\r\n\t\t\tthis.x = max.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < min.y ) {\r\n\r\n\t\t\tthis.y = min.y;\r\n\r\n\t\t} else if ( this.y > max.y ) {\r\n\r\n\t\t\tthis.y = max.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < min.z ) {\r\n\r\n\t\t\tthis.z = min.z;\r\n\r\n\t\t} else if ( this.z > max.z ) {\r\n\r\n\t\t\tthis.z = max.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function() {\r\n\r\n\t\treturn this.multiplyScalar( - 1 );\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( l ) {\r\n\r\n\t\tvar oldLength = this.length();\r\n\r\n\t\tif ( oldLength !== 0 && l !== oldLength  ) {\r\n\r\n\t\t\tthis.multiplyScalar( l / oldLength );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcross: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tthis.x = y * v.z - z * v.y;\r\n\t\tthis.y = z * v.x - x * v.z;\r\n\t\tthis.z = x * v.y - y * v.x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.y * b.z - a.z * b.y;\r\n\t\tthis.y = a.z * b.x - a.x * b.z;\r\n\t\tthis.z = a.x * b.y - a.y * b.x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tangleTo: function ( v ) {\r\n\r\n\t\treturn Math.acos( this.dot( v ) / this.length() / v.length() );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x;\r\n\t\tvar dy = this.y - v.y;\r\n\t\tvar dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t},\r\n\r\n\tgetPositionFromMatrix: function ( m ) {\r\n\r\n\t\tthis.x = m.elements[12];\r\n\t\tthis.y = m.elements[13];\r\n\t\tthis.z = m.elements[14];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetEulerFromRotationMatrix: function ( m, order ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\tfunction clamp( x ) {\r\n\r\n\t\t\treturn Math.min( Math.max( x, -1 ), 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = m.elements;\r\n\t\tvar m11 = te[0], m12 = te[4], m13 = te[8];\r\n\t\tvar m21 = te[1], m22 = te[5], m23 = te[9];\r\n\t\tvar m31 = te[2], m32 = te[6], m33 = te[10];\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tthis.y = Math.asin( clamp( m13 ) );\r\n\r\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis.z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis.x = Math.asin( - clamp( m23 ) );\r\n\r\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.y = Math.atan2( m13, m33 );\r\n\t\t\t\tthis.z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.y = Math.atan2( - m31, m11 );\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis.x = Math.asin( clamp( m32 ) );\r\n\r\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.y = Math.atan2( - m31, m33 );\r\n\t\t\t\tthis.z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis.y = Math.asin( - clamp( m31 ) );\r\n\r\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( m32, m33 );\r\n\t\t\t\tthis.z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis.z = Math.asin( clamp( m21 ) );\r\n\r\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( - m23, m22 );\r\n\t\t\t\tthis.y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis.z = Math.asin( - clamp( m12 ) );\r\n\r\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis.y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis.y = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetEulerFromQuaternion: function ( q, order ) {\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\tfunction clamp( x ) {\r\n\r\n\t\t\treturn Math.min( Math.max( x, -1 ), 1 );\r\n\r\n\t\t}\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\r\n\r\n\t\tvar sqx = q.x * q.x;\r\n\t\tvar sqy = q.y * q.y;\r\n\t\tvar sqz = q.z * q.z;\r\n\t\tvar sqw = q.w * q.w;\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.y = Math.asin(  clamp( 2 * ( q.x * q.z + q.y * q.w ) ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );\r\n\r\n\t\t} else if ( order ===  'YXZ' ) {\r\n\r\n\t\t\tthis.x = Math.asin(  clamp( 2 * ( q.x * q.w - q.y * q.z ) ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis.x = Math.asin(  clamp( 2 * ( q.x * q.w + q.y * q.z ) ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.y = Math.asin(  clamp( 2 * ( q.y * q.w - q.x * q.z ) ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );\r\n\t\t\tthis.z = Math.asin(  clamp( 2 * ( q.x * q.y + q.z * q.w ) ) );\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );\r\n\t\t\tthis.z = Math.asin(  clamp( 2 * ( q.z * q.w - q.x * q.y ) ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetScaleFromMatrix: function ( m ) {\r\n\r\n\t\tvar sx = this.set( m.elements[0], m.elements[1], m.elements[2] ).length();\r\n\t\tvar sy = this.set( m.elements[4], m.elements[5], m.elements[6] ).length();\r\n\t\tvar sz = this.set( m.elements[8], m.elements[9], m.elements[10] ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Vector3( this.x, this.y, this.z );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Vector3.__q1 = new THREE.Quaternion();\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector4 = function ( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Vector4.prototype = {\r\n\r\n\tconstructor: THREE.Vector4,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector4\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector4\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.x *= s;\r\n\t\tthis.y *= s;\r\n\t\tthis.z *= s;\r\n\t\tthis.w *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\t\tvar w = this.w;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\r\n\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\r\n\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\r\n\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( s ) {\r\n\r\n\t\tif ( s !== 0 ) {\r\n\r\n\t\t\tthis.x /= s;\r\n\t\t\tthis.y /= s;\r\n\t\t\tthis.z /= s;\r\n\t\t\tthis.w /= s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 1;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tif ( this.x > v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y > v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z > v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.w > v.w ) {\r\n\r\n\t\t\tthis.w = v.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tif ( this.x < v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.w < v.w ) {\r\n\r\n\t\t\tthis.w = v.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tif ( this.x < min.x ) {\r\n\r\n\t\t\tthis.x = min.x;\r\n\r\n\t\t} else if ( this.x > max.x ) {\r\n\r\n\t\t\tthis.x = max.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < min.y ) {\r\n\r\n\t\t\tthis.y = min.y;\r\n\r\n\t\t} else if ( this.y > max.y ) {\r\n\r\n\t\t\tthis.y = max.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < min.z ) {\r\n\r\n\t\t\tthis.z = min.z;\r\n\r\n\t\t} else if ( this.z > max.z ) {\r\n\r\n\t\t\tthis.z = max.z;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.w < min.w ) {\r\n\r\n\t\t\tthis.w = min.w;\r\n\r\n\t\t} else if ( this.w > max.w ) {\r\n\r\n\t\t\tthis.w = max.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function() {\r\n\r\n\t\treturn this.multiplyScalar( -1 );\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( l ) {\r\n\r\n\t\tvar oldLength = this.length();\r\n\r\n\t\tif ( oldLength !== 0 && l !== oldLength ) {\r\n\r\n\t\t\tthis.multiplyScalar( l / oldLength );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Vector4( this.x, this.y, this.z, this.w );\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t this.x = 1;\r\n\t\t\t this.y = 0;\r\n\t\t\t this.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t this.x = q.x / s;\r\n\t\t\t this.y = q.y / s;\r\n\t\t\t this.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[0], m12 = te[4], m13 = te[8],\r\n\t\t\tm21 = te[1], m22 = te[5], m23 = te[9],\r\n\t\t\tm31 = te[2], m32 = te[6], m33 = te[10];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon )\r\n\t\t  && ( Math.abs( m13 - m31 ) < epsilon )\r\n\t\t  && ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 )\r\n\t\t\t  && ( Math.abs( m13 + m31 ) < epsilon2 )\r\n\t\t\t  && ( Math.abs( m23 + m32 ) < epsilon2 )\r\n\t\t\t  && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) { // m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) { // m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else { // m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )\r\n\t\t\t\t\t\t + ( m13 - m31 ) * ( m13 - m31 )\r\n\t\t\t\t\t\t + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Box2 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( -Infinity, -Infinity );\r\n\r\n};\r\n\r\nTHREE.Box2.prototype = {\r\n\r\n\tconstructor: THREE.Box2,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\tvar point = points[ 0 ];\r\n\r\n\t\t\tthis.min.copy( point );\r\n\t\t\tthis.max.copy( point );\r\n\r\n\t\t\tfor ( var i = 1, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tpoint = points[ i ];\r\n\r\n\t\t\t\tif ( point.x < this.min.x ) {\r\n\r\n\t\t\t\t\tthis.min.x = point.x;\r\n\r\n\t\t\t\t} else if ( point.x > this.max.x ) {\r\n\r\n\t\t\t\t\tthis.max.x = point.x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( point.y < this.min.y ) {\r\n\r\n\t\t\t\t\tthis.min.y = point.y;\r\n\r\n\t\t\t\t} else if ( point.y > this.max.y ) {\r\n\r\n\t\t\t\t\tthis.max.y = point.y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\tvar halfSize = THREE.Box2.__v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = Infinity;\r\n\t\tthis.max.x = this.max.y = -Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( -scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn new THREE.Vector2(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\tvar clampedPoint = THREE.Box2.__v1.copy( point ).clamp( this.min, this.max );\r\n\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t},\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Box2().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Box2.__v1 = new THREE.Vector2();\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Box3 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( -Infinity, -Infinity, -Infinity );\r\n\r\n};\r\n\r\nTHREE.Box3.prototype = {\r\n\r\n\tconstructor: THREE.Box3,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\tvar point = points[ 0 ];\r\n\r\n\t\t\tthis.min.copy( point );\r\n\t\t\tthis.max.copy( point );\r\n\r\n\t\t\tfor ( var i = 1, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tpoint = points[ i ];\r\n\r\n\t\t\t\tif ( point.x < this.min.x ) {\r\n\r\n\t\t\t\t\tthis.min.x = point.x;\r\n\r\n\t\t\t\t} else if ( point.x > this.max.x ) {\r\n\r\n\t\t\t\t\tthis.max.x = point.x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( point.y < this.min.y ) {\r\n\r\n\t\t\t\t\tthis.min.y = point.y;\r\n\r\n\t\t\t\t} else if ( point.y > this.max.y ) {\r\n\r\n\t\t\t\t\tthis.max.y = point.y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( point.z < this.min.z ) {\r\n\r\n\t\t\t\t\tthis.min.z = point.z;\r\n\r\n\t\t\t\t} else if ( point.z > this.max.z ) {\r\n\r\n\t\t\t\t\tthis.max.z = point.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\tvar halfSize = THREE.Box3.__v1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( -scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ||\r\n\t\t     point.z < this.min.z || point.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\r\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t     box.max.z < this.min.z || box.min.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn new THREE.Vector3().copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\tvar clampedPoint = THREE.Box3.__v1.copy( point ).clamp( this.min, this.max );\r\n\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t},\r\n\r\n\tgetBoundingSphere: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Sphere();\r\n\r\n\t\tresult.center = this.center();\r\n\t\tresult.radius = this.size( THREE.Box3.__v0 ).length() * 0.5;\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix ) {\r\n\r\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\tvar newPoints = [\r\n\t\t\tTHREE.Box3.__v0.set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ),\r\n\t\t\tTHREE.Box3.__v0.set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ), // 000\r\n\t\t\tTHREE.Box3.__v1.set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ), // 001\r\n\t\t\tTHREE.Box3.__v2.set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ), // 010\r\n\t\t\tTHREE.Box3.__v3.set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ), // 011\r\n\t\t\tTHREE.Box3.__v4.set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ), // 100\r\n\t\t\tTHREE.Box3.__v5.set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ), // 101\r\n\t\t\tTHREE.Box3.__v6.set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ), // 110\r\n\t\t\tTHREE.Box3.__v7.set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix )  // 111\r\n\t\t];\r\n\r\n\t\tthis.makeEmpty();\r\n\t\tthis.setFromPoints( newPoints );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Box3().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Box3.__v0 = new THREE.Vector3();\r\nTHREE.Box3.__v1 = new THREE.Vector3();\r\nTHREE.Box3.__v2 = new THREE.Vector3();\r\nTHREE.Box3.__v3 = new THREE.Vector3();\r\nTHREE.Box3.__v4 = new THREE.Vector3();\r\nTHREE.Box3.__v5 = new THREE.Vector3();\r\nTHREE.Box3.__v6 = new THREE.Vector3();\r\nTHREE.Box3.__v7 = new THREE.Vector3();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Matrix3 = function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\tthis.elements = new Float32Array(9);\r\n\r\n\tthis.set(\r\n\r\n\t\t( n11 !== undefined ) ? n11 : 1, n12 || 0, n13 || 0,\r\n\t\tn21 || 0, ( n22 !== undefined ) ? n22 : 1, n23 || 0,\r\n\t\tn31 || 0, n32 || 0, ( n33 !== undefined ) ? n33 : 1\r\n\r\n\t);\r\n};\r\n\r\nTHREE.Matrix3.prototype = {\r\n\r\n\tconstructor: THREE.Matrix3,\r\n\r\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] = n11; te[3] = n12; te[6] = n13;\r\n\t\tte[1] = n21; te[4] = n22; te[7] = n23;\r\n\t\tte[2] = n31; te[5] = n32; te[8] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[0], me[3], me[6],\r\n\t\t\tme[1], me[4], me[7],\r\n\t\t\tme[2], me[5], me[8]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Matrix3\\'s .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix3( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector3Array: function ( a ) {\r\n\r\n\t\tvar tmp = THREE.Matrix3.__v1;\r\n\r\n\t\tfor ( var i = 0, il = a.length; i < il; i += 3 ) {\r\n\r\n\t\t\ttmp.x = a[ i ];\r\n\t\t\ttmp.y = a[ i + 1 ];\r\n\t\t\ttmp.z = a[ i + 2 ];\r\n\r\n\t\t\ttmp.applyMatrix3(this);\r\n\r\n\t\t\ta[ i ]     = tmp.x;\r\n\t\t\ta[ i + 1 ] = tmp.y;\r\n\t\t\ta[ i + 2 ] = tmp.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] *= s; te[3] *= s; te[6] *= s;\r\n\t\tte[1] *= s; te[4] *= s; te[7] *= s;\r\n\t\tte[2] *= s; te[5] *= s; te[8] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a = te[0], b = te[1], c = te[2],\r\n\t\t\td = te[3], e = te[4], f = te[5],\r\n\t\t\tg = te[6], h = te[7], i = te[8];\r\n\r\n\t\treturn a*e*i - a*f*h - b*d*i + b*f*g + c*d*h - c*e*g;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( matrix, throwOnInvertible ) {\r\n\r\n\t\t// input: THREE.Matrix4\r\n\t\t// ( based on http://code.google.com/p/webgl-mjs/ )\r\n\r\n\t\tvar me = matrix.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] =   me[10] * me[5] - me[6] * me[9];\r\n\t\tte[ 1 ] = - me[10] * me[1] + me[2] * me[9];\r\n\t\tte[ 2 ] =   me[6] * me[1] - me[2] * me[5];\r\n\t\tte[ 3 ] = - me[10] * me[4] + me[6] * me[8];\r\n\t\tte[ 4 ] =   me[10] * me[0] - me[2] * me[8];\r\n\t\tte[ 5 ] = - me[6] * me[0] + me[2] * me[4];\r\n\t\tte[ 6 ] =   me[9] * me[4] - me[5] * me[8];\r\n\t\tte[ 7 ] = - me[9] * me[0] + me[1] * me[8];\r\n\t\tte[ 8 ] =   me[5] * me[0] - me[1] * me[4];\r\n\r\n\t\tvar det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];\r\n\r\n\t\t// no inverse\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"Matrix3.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnInvertible || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg ); \r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.identity();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tthis.multiplyScalar( 1.0 / det );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar tmp, m = this.elements;\r\n\r\n\t\ttmp = m[1]; m[1] = m[3]; m[3] = tmp;\r\n\t\ttmp = m[2]; m[2] = m[6]; m[6] = tmp;\r\n\t\ttmp = m[5]; m[5] = m[7]; m[7] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\r\n\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\tvar m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\treturn new THREE.Matrix3(\r\n\r\n\t\t\tte[0], te[3], te[6],\r\n\t\t\tte[1], te[4], te[7],\r\n\t\t\tte[2], te[5], te[8]\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix3.__v1 = new THREE.Vector3();\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author jordi_ros / http://plattsoft.com\r\n * @author D1plo1d / http://github.com/D1plo1d\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author timknip / http://www.floorplanner.com/\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\n\r\nTHREE.Matrix4 = function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\tthis.elements = new Float32Array( 16 );\r\n\r\n\tthis.set(\r\n\r\n\t\t( n11 !== undefined ) ? n11 : 1, n12 || 0, n13 || 0, n14 || 0,\r\n\t\tn21 || 0, ( n22 !== undefined ) ? n22 : 1, n23 || 0, n24 || 0,\r\n\t\tn31 || 0, n32 || 0, ( n33 !== undefined ) ? n33 : 1, n34 || 0,\r\n\t\tn41 || 0, n42 || 0, n43 || 0, ( n44 !== undefined ) ? n44 : 1\r\n\r\n\t);\r\n\r\n};\r\n\r\nTHREE.Matrix4.prototype = {\r\n\r\n\tconstructor: THREE.Matrix4,\r\n\r\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;\r\n\t\tte[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;\r\n\t\tte[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;\r\n\t\tte[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[0], me[4], me[8], me[12],\r\n\t\t\tme[1], me[5], me[9], me[13],\r\n\t\t\tme[2], me[6], me[10], me[14],\r\n\t\t\tme[3], me[7], me[11], me[15]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRotationFromEuler: function ( v, order ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = - c * f;\r\n\t\t\tte[8] = d;\r\n\r\n\t\t\tte[1] = af + be * d;\r\n\t\t\tte[5] = ae - bf * d;\r\n\t\t\tte[9] = - b * c;\r\n\r\n\t\t\tte[2] = bf - ae * d;\r\n\t\t\tte[6] = be + af * d;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[0] = ce + df * b;\r\n\t\t\tte[4] = de * b - cf;\r\n\t\t\tte[8] = a * d;\r\n\r\n\t\t\tte[1] = a * f;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = - b;\r\n\r\n\t\t\tte[2] = cf * b - de;\r\n\t\t\tte[6] = df + ce * b;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[0] = ce - df * b;\r\n\t\t\tte[4] = - a * f;\r\n\t\t\tte[8] = de + cf * b;\r\n\r\n\t\t\tte[1] = cf + de * b;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = df - ce * b;\r\n\r\n\t\t\tte[2] = - a * d;\r\n\t\t\tte[6] = b;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = be * d - af;\r\n\t\t\tte[8] = ae * d + bf;\r\n\r\n\t\t\tte[1] = c * f;\r\n\t\t\tte[5] = bf * d + ae;\r\n\t\t\tte[9] = af * d - be;\r\n\r\n\t\t\tte[2] = - d;\r\n\t\t\tte[6] = b * c;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = bd - ac * f;\r\n\t\t\tte[8] = bc * f + ad;\r\n\r\n\t\t\tte[1] = f;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = - b * e;\r\n\r\n\t\t\tte[2] = - d * e;\r\n\t\t\tte[6] = ad * f + bc;\r\n\t\t\tte[10] = ac - bd * f;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = - f;\r\n\t\t\tte[8] = d * e;\r\n\r\n\t\t\tte[1] = ac * f + bd;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = ad * f - bc;\r\n\r\n\t\t\tte[2] = bc * f - ad;\r\n\t\t\tte[6] = b * e;\r\n\t\t\tte[10] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\r\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\r\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tte[0] = 1 - ( yy + zz );\r\n\t\tte[4] = xy - wz;\r\n\t\tte[8] = xz + wy;\r\n\r\n\t\tte[1] = xy + wz;\r\n\t\tte[5] = 1 - ( xx + zz );\r\n\t\tte[9] = yz - wx;\r\n\r\n\t\tte[2] = xz - wy;\r\n\t\tte[6] = yz + wx;\r\n\t\tte[10] = 1 - ( xx + yy );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlookAt: function ( eye, target, up ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = THREE.Matrix4.__v1;\r\n\t\tvar y = THREE.Matrix4.__v2;\r\n\t\tvar z = THREE.Matrix4.__v3;\r\n\r\n\t\tz.subVectors( eye, target ).normalize();\r\n\r\n\t\tif ( z.length() === 0 ) {\r\n\r\n\t\t\tz.z = 1;\r\n\r\n\t\t}\r\n\r\n\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\tif ( x.length() === 0 ) {\r\n\r\n\t\t\tz.x += 0.0001;\r\n\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t}\r\n\r\n\t\ty.crossVectors( z, x );\r\n\r\n\r\n\t\tte[0] = x.x; te[4] = y.x; te[8] = z.x;\r\n\t\tte[1] = x.y; te[5] = y.y; te[9] = z.y;\r\n\t\tte[2] = x.z; te[6] = y.z; te[10] = z.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( m, n ) {\r\n\r\n\t\tif ( n !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Matrix4\\'s .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t},\r\n\r\n\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\tvar ae = a.elements;\r\n\t\tvar be = b.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];\r\n\t\tvar a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];\r\n\t\tvar a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];\r\n\t\tvar a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];\r\n\r\n\t\tvar b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];\r\n\t\tvar b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];\r\n\t\tvar b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];\r\n\t\tvar b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];\r\n\r\n\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyToArray: function ( a, b, r ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tthis.multiplyMatrices( a, b );\r\n\r\n\t\tr[ 0 ] = te[0]; r[ 1 ] = te[1]; r[ 2 ] = te[2]; r[ 3 ] = te[3];\r\n\t\tr[ 4 ] = te[4]; r[ 5 ] = te[5]; r[ 6 ] = te[6]; r[ 7 ] = te[7];\r\n\t\tr[ 8 ]  = te[8]; r[ 9 ]  = te[9]; r[ 10 ] = te[10]; r[ 11 ] = te[11];\r\n\t\tr[ 12 ] = te[12]; r[ 13 ] = te[13]; r[ 14 ] = te[14]; r[ 15 ] = te[15];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] *= s; te[4] *= s; te[8] *= s; te[12] *= s;\r\n\t\tte[1] *= s; te[5] *= s; te[9] *= s; te[13] *= s;\r\n\t\tte[2] *= s; te[6] *= s; te[10] *= s; te[14] *= s;\r\n\t\tte[3] *= s; te[7] *= s; te[11] *= s; te[15] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Matrix4\\'s .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\r\n\t\treturn vector.applyProjection( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector4: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Matrix4\\'s .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix4( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector3Array: function ( a ) {\r\n\r\n\t\tvar tmp = THREE.Matrix4.__v1;\r\n\r\n\t\tfor ( var i = 0, il = a.length; i < il; i += 3 ) {\r\n\r\n\t\t\ttmp.x = a[ i ];\r\n\t\t\ttmp.y = a[ i + 1 ];\r\n\t\t\ttmp.z = a[ i + 2 ];\r\n\r\n\t\t\ttmp.applyProjection( this );\r\n\r\n\t\t\ta[ i ]     = tmp.x;\r\n\t\t\ta[ i + 1 ] = tmp.y;\r\n\t\t\ta[ i + 2 ] = tmp.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t},\r\n\r\n\trotateAxis: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar vx = v.x, vy = v.y, vz = v.z;\r\n\r\n\t\tv.x = vx * te[0] + vy * te[4] + vz * te[8];\r\n\t\tv.y = vx * te[1] + vy * te[5] + vz * te[9];\r\n\t\tv.z = vx * te[2] + vy * te[6] + vz * te[10];\r\n\r\n\t\tv.normalize();\r\n\r\n\t\treturn v;\r\n\r\n\t},\r\n\r\n\tcrossVector: function ( a ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar v = new THREE.Vector4();\r\n\r\n\t\tv.x = te[0] * a.x + te[4] * a.y + te[8] * a.z + te[12] * a.w;\r\n\t\tv.y = te[1] * a.x + te[5] * a.y + te[9] * a.z + te[13] * a.w;\r\n\t\tv.z = te[2] * a.x + te[6] * a.y + te[10] * a.z + te[14] * a.w;\r\n\r\n\t\tv.w = ( a.w ) ? te[3] * a.x + te[7] * a.y + te[11] * a.z + te[15] * a.w : 1;\r\n\r\n\t\treturn v;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];\r\n\t\tvar n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];\r\n\t\tvar n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];\r\n\t\tvar n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+n14 * n23 * n32\r\n\t\t\t\t-n13 * n24 * n32\r\n\t\t\t\t-n14 * n22 * n33\r\n\t\t\t\t+n12 * n24 * n33\r\n\t\t\t\t+n13 * n22 * n34\r\n\t\t\t\t-n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+n11 * n23 * n34\r\n\t\t\t\t-n11 * n24 * n33\r\n\t\t\t\t+n14 * n21 * n33\r\n\t\t\t\t-n13 * n21 * n34\r\n\t\t\t\t+n13 * n24 * n31\r\n\t\t\t\t-n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+n11 * n24 * n32\r\n\t\t\t\t-n11 * n22 * n34\r\n\t\t\t\t-n14 * n21 * n32\r\n\t\t\t\t+n12 * n21 * n34\r\n\t\t\t\t+n14 * n22 * n31\r\n\t\t\t\t-n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t-n13 * n22 * n31\r\n\t\t\t\t-n11 * n23 * n32\r\n\t\t\t\t+n11 * n22 * n33\r\n\t\t\t\t+n13 * n21 * n32\r\n\t\t\t\t-n12 * n21 * n33\r\n\t\t\t\t+n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar tmp;\r\n\r\n\t\ttmp = te[1]; te[1] = te[4]; te[4] = tmp;\r\n\t\ttmp = te[2]; te[2] = te[8]; te[8] = tmp;\r\n\t\ttmp = te[6]; te[6] = te[9]; te[9] = tmp;\r\n\r\n\t\ttmp = te[3]; te[3] = te[12]; te[12] = tmp;\r\n\t\ttmp = te[7]; te[7] = te[13]; te[13] = tmp;\r\n\t\ttmp = te[11]; te[11] = te[14]; te[14] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArray: function ( flat ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tflat[ 0 ] = te[0]; flat[ 1 ] = te[1]; flat[ 2 ] = te[2]; flat[ 3 ] = te[3];\r\n\t\tflat[ 4 ] = te[4]; flat[ 5 ] = te[5]; flat[ 6 ] = te[6]; flat[ 7 ] = te[7];\r\n\t\tflat[ 8 ] = te[8]; flat[ 9 ] = te[9]; flat[ 10 ] = te[10]; flat[ 11 ] = te[11];\r\n\t\tflat[ 12 ] = te[12]; flat[ 13 ] = te[13]; flat[ 14 ] = te[14]; flat[ 15 ] = te[15];\r\n\r\n\t\treturn flat;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function( flat, offset ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tflat[ offset ] = te[0];\r\n\t\tflat[ offset + 1 ] = te[1];\r\n\t\tflat[ offset + 2 ] = te[2];\r\n\t\tflat[ offset + 3 ] = te[3];\r\n\r\n\t\tflat[ offset + 4 ] = te[4];\r\n\t\tflat[ offset + 5 ] = te[5];\r\n\t\tflat[ offset + 6 ] = te[6];\r\n\t\tflat[ offset + 7 ] = te[7];\r\n\r\n\t\tflat[ offset + 8 ]  = te[8];\r\n\t\tflat[ offset + 9 ]  = te[9];\r\n\t\tflat[ offset + 10 ] = te[10];\r\n\t\tflat[ offset + 11 ] = te[11];\r\n\r\n\t\tflat[ offset + 12 ] = te[12];\r\n\t\tflat[ offset + 13 ] = te[13];\r\n\t\tflat[ offset + 14 ] = te[14];\r\n\t\tflat[ offset + 15 ] = te[15];\r\n\r\n\t\treturn flat;\r\n\r\n\t},\r\n\r\n\tgetPosition: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[12], te[13], te[14] );\r\n\r\n\t},\r\n\r\n\tsetPosition: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[12] = v.x;\r\n\t\tte[13] = v.y;\r\n\t\tte[14] = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetColumnX: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[0], te[1], te[2] );\r\n\r\n\t},\r\n\r\n\tgetColumnY: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[4], te[5], te[6] );\r\n\r\n\t},\r\n\r\n\tgetColumnZ: function() {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[8], te[9], te[10] );\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( m, throwOnInvertible ) {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tvar n11 = me[0], n12 = me[4], n13 = me[8], n14 = me[12];\r\n\t\tvar n21 = me[1], n22 = me[5], n23 = me[9], n24 = me[13];\r\n\t\tvar n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];\r\n\t\tvar n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];\r\n\r\n\t\tte[0] = n23*n34*n42 - n24*n33*n42 + n24*n32*n43 - n22*n34*n43 - n23*n32*n44 + n22*n33*n44;\r\n\t\tte[4] = n14*n33*n42 - n13*n34*n42 - n14*n32*n43 + n12*n34*n43 + n13*n32*n44 - n12*n33*n44;\r\n\t\tte[8] = n13*n24*n42 - n14*n23*n42 + n14*n22*n43 - n12*n24*n43 - n13*n22*n44 + n12*n23*n44;\r\n\t\tte[12] = n14*n23*n32 - n13*n24*n32 - n14*n22*n33 + n12*n24*n33 + n13*n22*n34 - n12*n23*n34;\r\n\t\tte[1] = n24*n33*n41 - n23*n34*n41 - n24*n31*n43 + n21*n34*n43 + n23*n31*n44 - n21*n33*n44;\r\n\t\tte[5] = n13*n34*n41 - n14*n33*n41 + n14*n31*n43 - n11*n34*n43 - n13*n31*n44 + n11*n33*n44;\r\n\t\tte[9] = n14*n23*n41 - n13*n24*n41 - n14*n21*n43 + n11*n24*n43 + n13*n21*n44 - n11*n23*n44;\r\n\t\tte[13] = n13*n24*n31 - n14*n23*n31 + n14*n21*n33 - n11*n24*n33 - n13*n21*n34 + n11*n23*n34;\r\n\t\tte[2] = n22*n34*n41 - n24*n32*n41 + n24*n31*n42 - n21*n34*n42 - n22*n31*n44 + n21*n32*n44;\r\n\t\tte[6] = n14*n32*n41 - n12*n34*n41 - n14*n31*n42 + n11*n34*n42 + n12*n31*n44 - n11*n32*n44;\r\n\t\tte[10] = n12*n24*n41 - n14*n22*n41 + n14*n21*n42 - n11*n24*n42 - n12*n21*n44 + n11*n22*n44;\r\n\t\tte[14] = n14*n22*n31 - n12*n24*n31 - n14*n21*n32 + n11*n24*n32 + n12*n21*n34 - n11*n22*n34;\r\n\t\tte[3] = n23*n32*n41 - n22*n33*n41 - n23*n31*n42 + n21*n33*n42 + n22*n31*n43 - n21*n32*n43;\r\n\t\tte[7] = n12*n33*n41 - n13*n32*n41 + n13*n31*n42 - n11*n33*n42 - n12*n31*n43 + n11*n32*n43;\r\n\t\tte[11] = n13*n22*n41 - n12*n23*n41 - n13*n21*n42 + n11*n23*n42 + n12*n21*n43 - n11*n22*n43;\r\n\t\tte[15] = n12*n23*n31 - n13*n22*n31 + n13*n21*n32 - n11*n23*n32 - n12*n21*n33 + n11*n22*n33;\r\n\r\n\t\tvar det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 4 ] + me[ 2 ] * te[ 8 ] + me[ 3 ] * te[ 12 ];\r\n\r\n\t\tif ( det == 0 ) {\r\n\r\n\t\t\tvar msg = \"Matrix4.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnInvertible || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg ); \r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.identity();\r\n\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tthis.multiplyScalar( 1 / det );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcompose: function ( translation, rotation, scale ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar mRotation = THREE.Matrix4.__m1;\r\n\t\tvar mScale = THREE.Matrix4.__m2;\r\n\r\n\t\tmRotation.identity();\r\n\t\tmRotation.setRotationFromQuaternion( rotation );\r\n\r\n\t\tmScale.makeScale( scale.x, scale.y, scale.z );\r\n\r\n\t\tthis.multiplyMatrices( mRotation, mScale );\r\n\r\n\t\tte[12] = translation.x;\r\n\t\tte[13] = translation.y;\r\n\t\tte[14] = translation.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdecompose: function ( translation, rotation, scale ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\t// grab the axis vectors\r\n\t\tvar x = THREE.Matrix4.__v1;\r\n\t\tvar y = THREE.Matrix4.__v2;\r\n\t\tvar z = THREE.Matrix4.__v3;\r\n\r\n\t\tx.set( te[0], te[1], te[2] );\r\n\t\ty.set( te[4], te[5], te[6] );\r\n\t\tz.set( te[8], te[9], te[10] );\r\n\r\n\t\ttranslation = ( translation instanceof THREE.Vector3 ) ? translation : new THREE.Vector3();\r\n\t\trotation = ( rotation instanceof THREE.Quaternion ) ? rotation : new THREE.Quaternion();\r\n\t\tscale = ( scale instanceof THREE.Vector3 ) ? scale : new THREE.Vector3();\r\n\r\n\t\tscale.x = x.length();\r\n\t\tscale.y = y.length();\r\n\t\tscale.z = z.length();\r\n\r\n\t\ttranslation.x = te[12];\r\n\t\ttranslation.y = te[13];\r\n\t\ttranslation.z = te[14];\r\n\r\n\t\t// scale the rotation part\r\n\r\n\t\tvar matrix = THREE.Matrix4.__m1;\r\n\r\n\t\tmatrix.copy( this );\r\n\r\n\t\tmatrix.elements[0] /= scale.x;\r\n\t\tmatrix.elements[1] /= scale.x;\r\n\t\tmatrix.elements[2] /= scale.x;\r\n\r\n\t\tmatrix.elements[4] /= scale.y;\r\n\t\tmatrix.elements[5] /= scale.y;\r\n\t\tmatrix.elements[6] /= scale.y;\r\n\r\n\t\tmatrix.elements[8] /= scale.z;\r\n\t\tmatrix.elements[9] /= scale.z;\r\n\t\tmatrix.elements[10] /= scale.z;\r\n\r\n\t\trotation.setFromRotationMatrix( matrix );\r\n\r\n\t\treturn [ translation, rotation, scale ];\r\n\r\n\t},\r\n\r\n\textractPosition: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tte[12] = me[12];\r\n\t\tte[13] = me[13];\r\n\t\tte[14] = me[14];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractRotation: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tvar vector = THREE.Matrix4.__v1;\r\n\r\n\t\tvar scaleX = 1 / vector.set( me[0], me[1], me[2] ).length();\r\n\t\tvar scaleY = 1 / vector.set( me[4], me[5], me[6] ).length();\r\n\t\tvar scaleZ = 1 / vector.set( me[8], me[9], me[10] ).length();\r\n\r\n\t\tte[0] = me[0] * scaleX;\r\n\t\tte[1] = me[1] * scaleX;\r\n\t\tte[2] = me[2] * scaleX;\r\n\r\n\t\tte[4] = me[4] * scaleY;\r\n\t\tte[5] = me[5] * scaleY;\r\n\t\tte[6] = me[6] * scaleY;\r\n\r\n\t\tte[8] = me[8] * scaleZ;\r\n\t\tte[9] = me[9] * scaleZ;\r\n\t\tte[10] = me[10] * scaleZ;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\ttranslate: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[12] = te[0] * x + te[4] * y + te[8] * z + te[12];\r\n\t\tte[13] = te[1] * x + te[5] * y + te[9] * z + te[13];\r\n\t\tte[14] = te[2] * x + te[6] * y + te[10] * z + te[14];\r\n\t\tte[15] = te[3] * x + te[7] * y + te[11] * z + te[15];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function ( angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar m12 = te[4];\r\n\t\tvar m22 = te[5];\r\n\t\tvar m32 = te[6];\r\n\t\tvar m42 = te[7];\r\n\t\tvar m13 = te[8];\r\n\t\tvar m23 = te[9];\r\n\t\tvar m33 = te[10];\r\n\t\tvar m43 = te[11];\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\r\n\t\tte[4] = c * m12 + s * m13;\r\n\t\tte[5] = c * m22 + s * m23;\r\n\t\tte[6] = c * m32 + s * m33;\r\n\t\tte[7] = c * m42 + s * m43;\r\n\r\n\t\tte[8] = c * m13 - s * m12;\r\n\t\tte[9] = c * m23 - s * m22;\r\n\t\tte[10] = c * m33 - s * m32;\r\n\t\tte[11] = c * m43 - s * m42;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateY: function ( angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar m11 = te[0];\r\n\t\tvar m21 = te[1];\r\n\t\tvar m31 = te[2];\r\n\t\tvar m41 = te[3];\r\n\t\tvar m13 = te[8];\r\n\t\tvar m23 = te[9];\r\n\t\tvar m33 = te[10];\r\n\t\tvar m43 = te[11];\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\r\n\t\tte[0] = c * m11 - s * m13;\r\n\t\tte[1] = c * m21 - s * m23;\r\n\t\tte[2] = c * m31 - s * m33;\r\n\t\tte[3] = c * m41 - s * m43;\r\n\r\n\t\tte[8] = c * m13 + s * m11;\r\n\t\tte[9] = c * m23 + s * m21;\r\n\t\tte[10] = c * m33 + s * m31;\r\n\t\tte[11] = c * m43 + s * m41;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateZ: function ( angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar m11 = te[0];\r\n\t\tvar m21 = te[1];\r\n\t\tvar m31 = te[2];\r\n\t\tvar m41 = te[3];\r\n\t\tvar m12 = te[4];\r\n\t\tvar m22 = te[5];\r\n\t\tvar m32 = te[6];\r\n\t\tvar m42 = te[7];\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\r\n\t\tte[0] = c * m11 + s * m12;\r\n\t\tte[1] = c * m21 + s * m22;\r\n\t\tte[2] = c * m31 + s * m32;\r\n\t\tte[3] = c * m41 + s * m42;\r\n\r\n\t\tte[4] = c * m12 - s * m11;\r\n\t\tte[5] = c * m22 - s * m21;\r\n\t\tte[6] = c * m32 - s * m31;\r\n\t\tte[7] = c * m42 - s * m41;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateByAxis: function ( axis, angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\t// optimize by checking axis\r\n\r\n\t\tif ( axis.x === 1 && axis.y === 0 && axis.z === 0 ) {\r\n\r\n\t\t\treturn this.rotateX( angle );\r\n\r\n\t\t} else if ( axis.x === 0 && axis.y === 1 && axis.z === 0 ) {\r\n\r\n\t\t\treturn this.rotateY( angle );\r\n\r\n\t\t} else if ( axis.x === 0 && axis.y === 0 && axis.z === 1 ) {\r\n\r\n\t\t\treturn this.rotateZ( angle );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar n = Math.sqrt(x * x + y * y + z * z);\r\n\r\n\t\tx /= n;\r\n\t\ty /= n;\r\n\t\tz /= n;\r\n\r\n\t\tvar xx = x * x, yy = y * y, zz = z * z;\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar oneMinusCosine = 1 - c;\r\n\t\tvar xy = x * y * oneMinusCosine;\r\n\t\tvar xz = x * z * oneMinusCosine;\r\n\t\tvar yz = y * z * oneMinusCosine;\r\n\t\tvar xs = x * s;\r\n\t\tvar ys = y * s;\r\n\t\tvar zs = z * s;\r\n\r\n\t\tvar r11 = xx + (1 - xx) * c;\r\n\t\tvar r21 = xy + zs;\r\n\t\tvar r31 = xz - ys;\r\n\t\tvar r12 = xy - zs;\r\n\t\tvar r22 = yy + (1 - yy) * c;\r\n\t\tvar r32 = yz + xs;\r\n\t\tvar r13 = xz + ys;\r\n\t\tvar r23 = yz - xs;\r\n\t\tvar r33 = zz + (1 - zz) * c;\r\n\r\n\t\tvar m11 = te[0], m21 = te[1], m31 = te[2], m41 = te[3];\r\n\t\tvar m12 = te[4], m22 = te[5], m32 = te[6], m42 = te[7];\r\n\t\tvar m13 = te[8], m23 = te[9], m33 = te[10], m43 = te[11];\r\n\t\tvar m14 = te[12], m24 = te[13], m34 = te[14], m44 = te[15];\r\n\r\n\t\tte[0] = r11 * m11 + r21 * m12 + r31 * m13;\r\n\t\tte[1] = r11 * m21 + r21 * m22 + r31 * m23;\r\n\t\tte[2] = r11 * m31 + r21 * m32 + r31 * m33;\r\n\t\tte[3] = r11 * m41 + r21 * m42 + r31 * m43;\r\n\r\n\t\tte[4] = r12 * m11 + r22 * m12 + r32 * m13;\r\n\t\tte[5] = r12 * m21 + r22 * m22 + r32 * m23;\r\n\t\tte[6] = r12 * m31 + r22 * m32 + r32 * m33;\r\n\t\tte[7] = r12 * m41 + r22 * m42 + r32 * m43;\r\n\r\n\t\tte[8] = r13 * m11 + r23 * m12 + r33 * m13;\r\n\t\tte[9] = r13 * m21 + r23 * m22 + r33 * m23;\r\n\t\tte[10] = r13 * m31 + r23 * m32 + r33 * m33;\r\n\t\tte[11] = r13 * m41 + r23 * m42 + r33 * m43;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tscale: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[0] *= x; te[4] *= y; te[8] *= z;\r\n\t\tte[1] *= x; te[5] *= y; te[9] *= z;\r\n\t\tte[2] *= x; te[6] *= y; te[10] *= z;\r\n\t\tte[3] *= x; te[7] *= y; te[11] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\r\n\t\tvar scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\r\n\t\tvar scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, Math.max( scaleYSq, scaleZSq ) ) );\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, x,\r\n\t\t\t0, 1, 0, y,\r\n\t\t\t0, 0, 1, z,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationX: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0,  0, 0,\r\n\t\t\t0, c, -s, 0,\r\n\t\t\t0, s,  c, 0,\r\n\t\t\t0, 0,  0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationY: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t-s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, -s, 0, 0,\r\n\t\t\ts,  c, 0, 0,\r\n\t\t\t0,  0, 1, 0,\r\n\t\t\t0,  0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar t = 1 - c;\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\t return this;\r\n\r\n\t},\r\n\r\n\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = 2 * near / ( right - left );\r\n\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\tvar a = ( right + left ) / ( right - left );\r\n\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\tte[0] = x;\tte[4] = 0;\tte[8] = a;\tte[12] = 0;\r\n\t\tte[1] = 0;\tte[5] = y;\tte[9] = b;\tte[13] = 0;\r\n\t\tte[2] = 0;\tte[6] = 0;\tte[10] = c;\tte[14] = d;\r\n\t\tte[3] = 0;\tte[7] = 0;\tte[11] = - 1;\tte[15] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakePerspective: function ( fov, aspect, near, far ) {\r\n\r\n\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\r\n\t\tvar ymin = - ymax;\r\n\t\tvar xmin = ymin * aspect;\r\n\t\tvar xmax = ymax * aspect;\r\n\r\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\r\n\r\n\t},\r\n\r\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar w = right - left;\r\n\t\tvar h = top - bottom;\r\n\t\tvar p = far - near;\r\n\r\n\t\tvar x = ( right + left ) / w;\r\n\t\tvar y = ( top + bottom ) / h;\r\n\t\tvar z = ( far + near ) / p;\r\n\r\n\t\tte[0] = 2 / w;\tte[4] = 0;\tte[8] = 0;\tte[12] = -x;\r\n\t\tte[1] = 0;\tte[5] = 2 / h;\tte[9] = 0;\tte[13] = -y;\r\n\t\tte[2] = 0;\tte[6] = 0;\tte[10] = -2/p;\tte[14] = -z;\r\n\t\tte[3] = 0;\tte[7] = 0;\tte[11] = 0;\tte[15] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\treturn new THREE.Matrix4(\r\n\r\n\t\t\tte[0], te[4], te[8], te[12],\r\n\t\t\tte[1], te[5], te[9], te[13],\r\n\t\t\tte[2], te[6], te[10], te[14],\r\n\t\t\tte[3], te[7], te[11], te[15]\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix4.__v1 = new THREE.Vector3();\r\nTHREE.Matrix4.__v2 = new THREE.Vector3();\r\nTHREE.Matrix4.__v3 = new THREE.Vector3();\r\n\r\nTHREE.Matrix4.__m1 = new THREE.Matrix4();\r\nTHREE.Matrix4.__m2 = new THREE.Matrix4();\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Ray = function ( origin, direction ) {\r\n\r\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\r\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Ray.prototype = {\r\n\r\n\tconstructor: THREE.Ray,\r\n\r\n\tset: function ( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tat: function( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t},\r\n\r\n\trecast: function ( t ) {\r\n\r\n\t\tthis.origin.copy( this.at( t, THREE.Ray.__v1 ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclosestPointToPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.subVectors( point, this.origin );\r\n\t\tvar directionDistance = result.dot( this.direction );\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\tvar directionDistance = THREE.Ray.__v1.subVectors( point, this.origin ).dot( this.direction );\r\n\t\tTHREE.Ray.__v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\treturn THREE.Ray.__v1.distanceTo( point );\r\n\r\n\t},\r\n\r\n\tisIntersectionSphere: function( sphere ) {\r\n\r\n\t\treturn ( this.distanceToPoint( sphere.center ) <= sphere.radius );\r\n\r\n\t},\r\n\r\n\tisIntersectionPlane: function ( plane ) {\r\n\r\n\t\t// check if the line and plane are non-perpendicular, if they\r\n\t\t// eventually they will intersect.\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\tif ( denominator != 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// line is coplanar, return origin\r\n\t\tif( plane.distanceToPoint( this.origin ) == 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\tif ( denominator == 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif( plane.distanceToPoint( this.origin ) == 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\treturn t;\r\n\r\n\t},\r\n\r\n\tintersectPlane: function ( plane, optionalTarget ) {\r\n\r\n\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\tif( t === undefined ) {\r\n\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn this.at( t, optionalTarget );\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix4 ) {\r\n\r\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.sub( this.origin );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tequals: function ( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Ray().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Ray.__v1 = new THREE.Vector3();\r\nTHREE.Ray.__v2 = new THREE.Vector3();\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Sphere = function ( center, radius ) {\r\n\r\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\r\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n};\r\n\r\nTHREE.Sphere.prototype = {\r\n\r\n\tconstructor: THREE.Sphere,\r\n\r\n\tset: function ( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tsetFromCenterAndPoints: function ( center, points ) {\r\n\r\n\t\tvar maxRadiusSq = 0;\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar radiusSq = center.distanceToSquared( points[ i ] );\r\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, radiusSq );\r\n\r\n\t\t}\r\n\r\n\t\tthis.center = center;\r\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\treturn ( this.radius <= 0 );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\tresult.sub( this.center ).normalize();\r\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tgetBoundingBox: function ( optionalTarget ) {\r\n\r\n\t\tvar box = optionalTarget || new THREE.Box3();\r\n\r\n\t\tbox.set( this.center, this.center );\r\n\t\tbox.expandByScalar( this.radius );\r\n\r\n\t\treturn box;\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Sphere().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\tthis.planes = [\r\n\r\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\r\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\r\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\r\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\r\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\r\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\r\n\r\n\t];\r\n\r\n};\r\n\r\nTHREE.Frustum.prototype = {\r\n\r\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tplanes[0].copy( p0 );\r\n\t\tplanes[1].copy( p1 );\r\n\t\tplanes[2].copy( p2 );\r\n\t\tplanes[3].copy( p3 );\r\n\t\tplanes[4].copy( p4 );\r\n\t\tplanes[5].copy( p5 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( frustum ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tplanes[i].copy( frustum.planes[i] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix: function ( m ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar me = m.elements;\r\n\t\tvar me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];\r\n\t\tvar me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];\r\n\t\tvar me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];\r\n\t\tvar me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];\r\n\r\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tintersectsObject: function ( object ) {\r\n\r\n\t\t// this method is expanded inlined for performance reasons.\r\n\t\tvar matrix = object.matrixWorld;\r\n\t\tvar planes = this.planes;\r\n\t\tvar center = matrix.getPosition();\r\n\t\tvar negRadius = - object.geometry.boundingSphere.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar center = sphere.center;\r\n\t\tvar negRadius = -sphere.radius;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tif( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Frustum().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Plane = function ( normal, constant ) {\r\n\r\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\r\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n};\r\n\r\nTHREE.Plane.prototype = {\r\n\r\n\tconstructor: THREE.Plane,\r\n\r\n\tset: function ( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCoplanarPoints: function ( a, b, c ) {\r\n\r\n\t\tvar normal = THREE.Plane.__v1.subVectors( c, b ).cross( THREE.Plane.__v2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.constant *= -1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t},\r\n\r\n\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t},\r\n\r\n\tprojectPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\r\n\r\n\t},\r\n\r\n\torthoPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\r\n\r\n\t},\r\n\r\n\tisIntersectionLine: function ( startPoint, endPoint ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tvar startSign = this.distanceToPoint( startPoint );\r\n\t\tvar endSign = this.distanceToPoint( endPoint );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t},\r\n\r\n\tintersectLine: function ( startPoint, endPoint, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tvar direction = THREE.Plane.__v1.subVectors( endPoint, startPoint );\r\n\r\n\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\tif ( denominator == 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif( this.distanceToPoint( startPoint ) == 0 ) {\r\n\r\n\t\t\t\treturn result.copy( startPoint );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( startPoint.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\tif( t < 0 || t > 1 ) {\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t\treturn result.copy( direction ).multiplyScalar( t ).add( startPoint );\r\n\r\n\t},\r\n\r\n\tcoplanarPoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t// compute new normal based on theory here:\r\n\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\r\n\t\toptionalNormalMatrix = optionalNormalMatrix || new THREE.Matrix3().getInverse( matrix ).transpose();\r\n\t\tvar newNormal = THREE.Plane.__v1.copy( this.normal ).applyMatrix3( optionalNormalMatrix );\r\n\r\n\t\tvar newCoplanarPoint = this.coplanarPoint( THREE.Plane.__v2 );\r\n\t\tnewCoplanarPoint.applyMatrix4( matrix );\r\n\r\n\t\tthis.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.constant = this.constant - offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant == this.constant );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Plane().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Plane.__vZero = new THREE.Vector3( 0, 0, 0 );\r\nTHREE.Plane.__v1 = new THREE.Vector3();\r\nTHREE.Plane.__v2 = new THREE.Vector3();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Math = {\r\n\r\n\t// Clamp value to range <a, b>\r\n\r\n\tclamp: function ( x, a, b ) {\r\n\r\n\t\treturn ( x < a ) ? a : ( ( x > b ) ? b : x );\r\n\r\n\t},\r\n\r\n\t// Clamp value to range <a, inf)\r\n\r\n\tclampBottom: function ( x, a ) {\r\n\r\n\t\treturn x < a ? a : x;\r\n\r\n\t},\r\n\r\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t},\r\n\r\n\t// Random float from <0, 1> with 16 bits of randomness\r\n\t// (standard Math.random() creates repetitive patterns when applied over larger space)\r\n\r\n\trandom16: function () {\r\n\r\n\t\treturn ( 65280 * Math.random() + 255 * Math.random() ) / 65535;\r\n\r\n\t},\r\n\r\n\t// Random integer from <low, high> interval\r\n\r\n\trandInt: function ( low, high ) {\r\n\r\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t},\r\n\r\n\t// Random float from <low, high> interval\r\n\r\n\trandFloat: function ( low, high ) {\r\n\r\n\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t},\r\n\r\n\t// Random float from <-range/2, range/2> interval\r\n\r\n\trandFloatSpread: function ( range ) {\r\n\r\n\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t},\r\n\r\n\tsign: function ( x ) {\r\n\r\n\t\treturn ( x < 0 ) ? -1 : ( ( x > 0 ) ? 1 : 0 );\r\n\r\n\t},\r\n\r\n\tdegToRad: function ( degrees ) {\r\n\r\n\t\treturn degrees * THREE.Math.__d2r;\r\n\r\n\t},\r\n\r\n\tradToDeg: function ( radians ) {\r\n\r\n\t\treturn radians * THREE.Math.__r2d;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Math.__d2r =  Math.PI / 180;\r\nTHREE.Math.__r2d =  180 / Math.PI;\r\n/**\r\n * Spline from Tween.js, slightly optimized (and trashed)\r\n * http://sole.github.com/tween.js/examples/05_spline.html\r\n *\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Spline = function ( points ) {\r\n\r\n\tthis.points = points;\r\n\r\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\r\n\tpoint, intPoint, weight, w2, w3,\r\n\tpa, pb, pc, pd;\r\n\r\n\tthis.initFromArray = function( a ) {\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0; i < a.length; i++ ) {\r\n\r\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getPoint = function ( k ) {\r\n\r\n\t\tpoint = ( this.points.length - 1 ) * k;\r\n\t\tintPoint = Math.floor( point );\r\n\t\tweight = point - intPoint;\r\n\r\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\t\tc[ 1 ] = intPoint;\r\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\r\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\r\n\r\n\t\tpa = this.points[ c[ 0 ] ];\r\n\t\tpb = this.points[ c[ 1 ] ];\r\n\t\tpc = this.points[ c[ 2 ] ];\r\n\t\tpd = this.points[ c[ 3 ] ];\r\n\r\n\t\tw2 = weight * weight;\r\n\t\tw3 = weight * w2;\r\n\r\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\r\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\r\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\r\n\r\n\t\treturn v3;\r\n\r\n\t};\r\n\r\n\tthis.getControlPointsArray = function () {\r\n\r\n\t\tvar i, p, l = this.points.length,\r\n\t\t\tcoords = [];\r\n\r\n\t\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\t\tp = this.points[ i ];\r\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\r\n\r\n\t\t}\r\n\r\n\t\treturn coords;\r\n\r\n\t};\r\n\r\n\t// approximate length by summing linear segments\r\n\r\n\tthis.getLength = function ( nSubDivisions ) {\r\n\r\n\t\tvar i, index, nSamples, position,\r\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\r\n\t\t\toldPosition = new THREE.Vector3(),\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tchunkLengths = [],\r\n\t\t\ttotalLength = 0;\r\n\r\n\t\t// first point has 0 length\r\n\r\n\t\tchunkLengths[ 0 ] = 0;\r\n\r\n\t\tif ( !nSubDivisions ) nSubDivisions = 100;\r\n\r\n\t\tnSamples = this.points.length * nSubDivisions;\r\n\r\n\t\toldPosition.copy( this.points[ 0 ] );\r\n\r\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\r\n\r\n\t\t\tindex = i / nSamples;\r\n\r\n\t\t\tposition = this.getPoint( index );\r\n\t\t\ttmpVec.copy( position );\r\n\r\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\r\n\r\n\t\t\toldPosition.copy( position );\r\n\r\n\t\t\tpoint = ( this.points.length - 1 ) * index;\r\n\t\t\tintPoint = Math.floor( point );\r\n\r\n\t\t\tif ( intPoint != oldIntPoint ) {\r\n\r\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\r\n\t\t\t\toldIntPoint = intPoint;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// last point ends with total length\r\n\r\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\r\n\r\n\t\treturn { chunks: chunkLengths, total: totalLength };\r\n\r\n\t};\r\n\r\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\r\n\r\n\t\tvar i, j,\r\n\t\t\tindex, indexCurrent, indexNext,\r\n\t\t\tlinearDistance, realDistance,\r\n\t\t\tsampling, position,\r\n\t\t\tnewpoints = [],\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tsl = this.getLength();\r\n\r\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\r\n\r\n\t\tfor ( i = 1; i < this.points.length; i++ ) {\r\n\r\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\r\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\r\n\r\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\r\n\r\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\r\n\r\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\r\n\t\t\tindexNext = i / ( this.points.length - 1 );\r\n\r\n\t\t\tfor ( j = 1; j < sampling - 1; j++ ) {\r\n\r\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\r\n\r\n\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.points = newpoints;\r\n\r\n\t};\r\n\r\n\t// Catmull-Rom\r\n\r\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\r\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Triangle = function ( a, b, c ) {\r\n\r\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\r\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\r\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Triangle.normal = function( a, b, c, optionalTarget ) {\r\n\r\n\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\tresult.subVectors( c, b );\r\n\tTHREE.Triangle.__v0.subVectors( a, b );\r\n\tresult.cross( THREE.Triangle.__v0 );\r\n\r\n\tvar resultLengthSq = result.lengthSq();\r\n\tif( resultLengthSq > 0 ) {\r\n\r\n\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\r\n\r\n\t}\r\n\r\n\treturn result.set( 0, 0, 0 );\r\n\r\n};\r\n\r\n// static/instance method to calculate barycoordinates\r\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\nTHREE.Triangle.barycoordFromPoint = function ( point, a, b, c, optionalTarget ) {\r\n\r\n\tTHREE.Triangle.__v0.subVectors( c, a );\r\n\tTHREE.Triangle.__v1.subVectors( b, a );\r\n\tTHREE.Triangle.__v2.subVectors( point, a );\r\n\r\n\tvar dot00 = THREE.Triangle.__v0.dot( THREE.Triangle.__v0 );\r\n\tvar dot01 = THREE.Triangle.__v0.dot( THREE.Triangle.__v1 );\r\n\tvar dot02 = THREE.Triangle.__v0.dot( THREE.Triangle.__v2 );\r\n\tvar dot11 = THREE.Triangle.__v1.dot( THREE.Triangle.__v1 );\r\n\tvar dot12 = THREE.Triangle.__v1.dot( THREE.Triangle.__v2 );\r\n\r\n\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t// colinear or singular triangle\r\n\tif( denom == 0 ) {\r\n\t\t// arbitrary location outside of triangle?\r\n\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\treturn result.set( -2, -1, -1 );\r\n\t}\r\n\r\n\tvar invDenom = 1 / denom;\r\n\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t// barycoordinates must always sum to 1\r\n\treturn result.set( 1 - u - v, v, u );\r\n\r\n};\r\n\r\nTHREE.Triangle.containsPoint = function ( point, a, b, c ) {\r\n\r\n\t// NOTE: need to use __v3 here because __v0, __v1 and __v2 are used in barycoordFromPoint.\r\n\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, THREE.Triangle.__v3 );\r\n\r\n\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\r\n\r\n};\r\n\r\nTHREE.Triangle.prototype = {\r\n\r\n\tconstructor: THREE.Triangle,\r\n\r\n\tset: function ( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[i0] );\r\n\t\tthis.b.copy( points[i1] );\r\n\t\tthis.c.copy( points[i2] );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tarea: function () {\r\n\r\n\t\tTHREE.Triangle.__v0.subVectors( this.c, this.b );\r\n\t\tTHREE.Triangle.__v1.subVectors( this.a, this.b );\r\n\r\n\t\treturn THREE.Triangle.__v0.cross( THREE.Triangle.__v1 ).length() * 0.5;\r\n\r\n\t},\r\n\r\n\tmidpoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t},\r\n\r\n\tnormal: function ( optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tplane: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Plane();\r\n\r\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tequals: function ( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Triangle().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Triangle.__v0 = new THREE.Vector3();\r\nTHREE.Triangle.__v1 = new THREE.Vector3();\r\nTHREE.Triangle.__v2 = new THREE.Vector3();\r\nTHREE.Triangle.__v3 = new THREE.Vector3();\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Vertex = function ( v ) {\r\n\r\n\tconsole.warn( 'THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.')\r\n\treturn v;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.UV = function ( u, v ) {\r\n\r\n\tconsole.warn( 'THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.')\r\n\treturn new THREE.Vector2( u, v );\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Clock = function ( autoStart ) {\r\n\r\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.oldTime = 0;\r\n\tthis.elapsedTime = 0;\r\n\r\n\tthis.running = false;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype.start = function () {\r\n\r\n\tthis.startTime = Date.now();\r\n\tthis.oldTime = this.startTime;\r\n\r\n\tthis.running = true;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype.stop = function () {\r\n\r\n\tthis.getElapsedTime();\r\n\r\n\tthis.running = false;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype.getElapsedTime = function () {\r\n\r\n\tthis.getDelta();\r\n\r\n\treturn this.elapsedTime;\r\n\r\n};\r\n\r\n\r\nTHREE.Clock.prototype.getDelta = function () {\r\n\r\n\tvar diff = 0;\r\n\r\n\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\tthis.start();\r\n\r\n\t}\r\n\r\n\tif ( this.running ) {\r\n\r\n\t\tvar newTime = Date.now();\r\n\t\tdiff = 0.001 * ( newTime - this.oldTime );\r\n\t\tthis.oldTime = newTime;\r\n\r\n\t\tthis.elapsedTime += diff;\r\n\r\n\t}\r\n\r\n\treturn diff;\r\n\r\n};/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\r\n\r\nTHREE.EventDispatcher = function () {\r\n\r\n\tvar listeners = {};\r\n\r\n\tthis.addEventListener = function ( type, listener ) {\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.removeEventListener = function ( type, listener ) {\r\n\r\n\t\tvar index = listeners[ type ].indexOf( listener );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.dispatchEvent = function ( event ) {\r\n\r\n\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\tfor ( var i = 0, l = listenerArray.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tlistenerArray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author bhouston / http://exocortex.com/\r\n */\r\n\r\n( function ( THREE ) {\r\n\r\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new THREE.Ray( origin, direction );\r\n\t\t\r\n\t\t// normalized ray.direction required for accurate distance calculations\r\n\t\tif( this.ray.direction.length() > 0 ) {\r\n\r\n\t\t\tthis.ray.direction.normalize();\r\n\r\n\t\t}\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\r\n\t};\r\n\r\n\tvar sphere = new THREE.Sphere();\r\n\tvar localRay = new THREE.Ray();\r\n\tvar facePlane = new THREE.Plane();\r\n\tvar intersectPoint = new THREE.Vector3();\r\n\r\n\tvar inverseMatrix = new THREE.Matrix4();\r\n\r\n\tvar descSort = function ( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t};\r\n\r\n\tvar intersectObject = function ( object, raycaster, intersects ) {\r\n\r\n\t\tif ( object instanceof THREE.Particle ) {\r\n\r\n\t\t\tvar distance = raycaster.ray.distanceToPoint( object.matrixWorld.getPosition() );\r\n\r\n\t\t\tif ( distance > object.scale.x ) {\r\n\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tpoint: object.position,\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: object\r\n\r\n\t\t\t} );\r\n\r\n\t\t} else if ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\t\t\tsphere.set(\r\n\t\t\t\tobject.matrixWorld.getPosition(),\r\n\t\t\t\tobject.geometry.boundingSphere.radius* object.matrixWorld.getMaxScaleOnAxis() );\r\n\r\n\t\t\tif ( ! raycaster.ray.isIntersectionSphere( sphere ) ) {\r\n\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Checking faces\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\tvar isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;\r\n\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material.materials : null;\r\n\r\n\t\t\tvar side = object.material.side;\r\n\r\n\t\t\tvar a, b, c, d;\r\n\t\t\tvar precision = raycaster.precision;\r\n\r\n\t\t\tobject.matrixRotationWorld.extractRotation( object.matrixWorld );\r\n\r\n\t\t\tinverseMatrix.getInverse( object.matrixWorld );\r\n\r\n\t\t\tlocalRay.copy( raycaster.ray ).transform( inverseMatrix );\r\n\t\r\n\t\t\tfor ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tvar face = geometry.faces[ f ];\r\n\r\n\t\t\t\tvar material = isFaceMaterial === true ? objectMaterials[ face.materialIndex ] : object.material;\r\n\r\n\t\t\t\tif ( material === undefined ) continue;\r\n\t\t\t\t\r\n\t\t\t\tfacePlane.setFromNormalAndCoplanarPoint( face.normal, vertices[face.a] );\r\n\r\n\t\t\t\tvar planeDistance = localRay.distanceToPlane( facePlane );\r\n\t\r\n\t\t\t\t// bail if raycaster and plane are parallel\r\n\t\t\t\tif ( Math.abs( planeDistance ) < precision ) continue;\r\n\t\r\n\t\t\t\t// if negative distance, then plane is behind raycaster\r\n\t\t\t\tif ( planeDistance < 0 ) continue;\r\n\r\n\t\t\t\t// check if we hit the wrong side of a single sided face\r\n\t\t\t\tside = material.side;\r\n\t\t\t\tif( side !== THREE.DoubleSide ) {\r\n\r\n\t\t\t\t\tvar planeSign = localRay.direction.dot( facePlane.normal );\r\n\r\n\t\t\t\t\tif( ! ( side === THREE.FrontSide ? planeSign < 0 : planeSign > 0 ) ) continue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// this can be done using the planeDistance from localRay because localRay wasn't normalized, but ray was\r\n\t\t\t\tif ( planeDistance < raycaster.near || planeDistance > raycaster.far ) continue;\r\n\t\t\t\t\r\n\t\t\t\tintersectPoint = localRay.at( planeDistance, intersectPoint ); // passing in intersectPoint avoids a copy\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\ta = vertices[ face.a ];\r\n\t\t\t\t\tb = vertices[ face.b ];\r\n\t\t\t\t\tc = vertices[ face.c ];\r\n\r\n\t\t\t\t\tif ( ! THREE.Triangle.containsPoint( intersectPoint, a, b, c ) ) continue;\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\ta = vertices[ face.a ];\r\n\t\t\t\t\tb = vertices[ face.b ];\r\n\t\t\t\t\tc = vertices[ face.c ];\r\n\t\t\t\t\td = vertices[ face.d ];\r\n\r\n\t\t\t\t\tif ( ( ! THREE.Triangle.containsPoint( intersectPoint, a, b, d ) ) &&\r\n\t\t\t\t\t\t ( ! THREE.Triangle.containsPoint( intersectPoint, b, c, d ) ) ) continue;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// This is added because if we call out of this if/else group when none of the cases\r\n\t\t\t\t\t//    match it will add a point to the intersection list erroneously.\r\n\t\t\t\t\tthrow Error( \"face type not supported\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\tdistance: planeDistance,\t// this works because the original ray was normalized, and the transformed localRay wasn't\r\n\t\t\t\t\tpoint: raycaster.ray.at( planeDistance ),\r\n\t\t\t\t\tface: face,\r\n\t\t\t\t\tfaceIndex: f,\r\n\t\t\t\t\tobject: object\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar intersectDescendants = function ( object, raycaster, intersects ) {\r\n\r\n\t\tvar descendants = object.getDescendants();\r\n\r\n\t\tfor ( var i = 0, l = descendants.length; i < l; i ++ ) {\r\n\r\n\t\t\tintersectObject( descendants[ i ], raycaster, intersects );\r\n\r\n\t\t}\r\n\t};\r\n\r\n\t//\r\n\r\n\tTHREE.Raycaster.prototype.precision = 0.0001;\r\n\r\n\tTHREE.Raycaster.prototype.set = function ( origin, direction ) {\r\n\r\n\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t// normalized ray.direction required for accurate distance calculations\r\n\t\tif( this.ray.direction.length() > 0 ) {\r\n\r\n\t\t\tthis.ray.direction.normalize();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tTHREE.Raycaster.prototype.intersectObject = function ( object, recursive ) {\r\n\r\n\t\tvar intersects = [];\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tintersectDescendants( object, this, intersects );\r\n\r\n\t\t}\r\n\r\n\t\tintersectObject( object, this, intersects );\r\n\r\n\t\tintersects.sort( descSort );\r\n\r\n\t\treturn intersects;\r\n\r\n\t};\r\n\r\n\tTHREE.Raycaster.prototype.intersectObjects = function ( objects, recursive ) {\r\n\r\n\t\tvar intersects = [];\r\n\r\n\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\tintersectObject( objects[ i ], this, intersects );\r\n\r\n\t\t\tif ( recursive === true ) {\r\n\r\n\t\t\t\tintersectDescendants( objects[ i ], this, intersects );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tintersects.sort( descSort );\r\n\r\n\t\treturn intersects;\r\n\r\n\t};\r\n\r\n}( THREE ) );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Object3D = function () {\r\n\r\n\tthis.id = THREE.Object3DIdCount ++;\r\n\r\n\tthis.name = '';\r\n\tthis.properties = {};\r\n\r\n\tthis.parent = undefined;\r\n\tthis.children = [];\r\n\r\n\tthis.up = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\tthis.position = new THREE.Vector3();\r\n\tthis.rotation = new THREE.Vector3();\r\n\tthis.eulerOrder = THREE.Object3D.defaultEulerOrder;\r\n\tthis.scale = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tthis.renderDepth = null;\r\n\r\n\tthis.rotationAutoUpdate = true;\r\n\r\n\tthis.matrix = new THREE.Matrix4();\r\n\tthis.matrixWorld = new THREE.Matrix4();\r\n\tthis.matrixRotationWorld = new THREE.Matrix4();\r\n\r\n\tthis.matrixAutoUpdate = true;\r\n\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\tthis.quaternion = new THREE.Quaternion();\r\n\tthis.useQuaternion = false;\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.receiveShadow = false;\r\n\r\n\tthis.frustumCulled = true;\r\n\r\n\tthis._vector = new THREE.Vector3();\r\n\r\n};\r\n\r\n\r\nTHREE.Object3D.prototype = {\r\n\r\n\tconstructor: THREE.Object3D,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\r\n\t\tthis.scale.getScaleFromMatrix( this.matrix );\r\n\r\n\t\tvar mat = new THREE.Matrix4().extractRotation( this.matrix );\r\n\t\tthis.rotation.setEulerFromRotationMatrix( mat, this.eulerOrder );\r\n\r\n\t\tthis.position.getPositionFromMatrix( this.matrix );\r\n\r\n\t},\r\n\r\n\ttranslate: function ( distance, axis ) {\r\n\r\n\t\tthis.matrix.rotateAxis( axis );\r\n\t\tthis.position.add( axis.multiplyScalar( distance ) );\r\n\r\n\t},\r\n\r\n\ttranslateX: function ( distance ) {\r\n\r\n\t\tthis.translate( distance, this._vector.set( 1, 0, 0 ) );\r\n\r\n\t},\r\n\r\n\ttranslateY: function ( distance ) {\r\n\r\n\t\tthis.translate( distance, this._vector.set( 0, 1, 0 ) );\r\n\r\n\t},\r\n\r\n\ttranslateZ: function ( distance ) {\r\n\r\n\t\tthis.translate( distance, this._vector.set( 0, 0, 1 ) );\r\n\r\n\t},\r\n\r\n\tlocalToWorld: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tworldToLocal: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( THREE.Object3D.__m1.getInverse( this.matrixWorld ) );\r\n\r\n\t},\r\n\r\n\tlookAt: function ( vector ) {\r\n\r\n\t\t// TODO: Add hierarchy support.\r\n\r\n\t\tthis.matrix.lookAt( vector, this.position, this.up );\r\n\r\n\t\tif ( this.rotationAutoUpdate ) {\r\n\r\n\t\t\tif ( this.useQuaternion === false )  {\r\n\r\n\t\t\t\tthis.rotation.setEulerFromRotationMatrix( this.matrix, this.eulerOrder );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.quaternion.copy( this.matrix.decompose()[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tadd: function ( object ) {\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D.add: An object can\\'t be added as a child of itself.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object instanceof THREE.Object3D ) {\r\n\r\n\t\t\tif ( object.parent !== undefined ) {\r\n\r\n\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.parent = this;\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t\t// add to scene\r\n\r\n\t\t\tvar scene = this;\r\n\r\n\t\t\twhile ( scene.parent !== undefined ) {\r\n\r\n\t\t\t\tscene = scene.parent;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( scene !== undefined && scene instanceof THREE.Scene )  {\r\n\r\n\t\t\t\tscene.__addObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tremove: function ( object ) {\r\n\r\n\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = undefined;\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\t// remove from scene\r\n\r\n\t\t\tvar scene = this;\r\n\r\n\t\t\twhile ( scene.parent !== undefined ) {\r\n\r\n\t\t\t\tscene = scene.parent;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( scene !== undefined && scene instanceof THREE.Scene ) {\r\n\r\n\t\t\t\tscene.__removeObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverse: function ( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetChildByName: function ( name, recursive ) {\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\r\n\t\t\tif ( child.name === name ) {\r\n\r\n\t\t\t\treturn child;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( recursive === true ) {\r\n\r\n\t\t\t\tchild = child.getChildByName( name, recursive );\r\n\r\n\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\treturn child;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t},\r\n\r\n\tgetDescendants: function ( array ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\r\n\t\tArray.prototype.push.apply( array, this.children );\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].getDescendants( array );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tupdateMatrix: function () {\r\n\r\n\t\tthis.matrix.setPosition( this.position );\r\n\r\n\t\tif ( this.useQuaternion === false )  {\r\n\r\n\t\t\tthis.matrix.setRotationFromEuler( this.rotation, this.eulerOrder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrix.setRotationFromQuaternion( this.quaternion );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.scale.x !== 1 || this.scale.y !== 1 || this.scale.z !== 1 ) {\r\n\r\n\t\t\tthis.matrix.scale( this.scale );\r\n\r\n\t\t}\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\r\n\r\n\t\t\tif ( this.parent === undefined ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function ( object ) {\r\n\r\n\t\tif ( object === undefined ) object = new THREE.Object3D();\r\n\r\n\t\tobject.name = this.name;\r\n\r\n\t\tobject.up.copy( this.up );\r\n\r\n\t\tobject.position.copy( this.position );\r\n\t\tif ( object.rotation instanceof THREE.Vector3 ) object.rotation.copy( this.rotation ); // because of Sprite madness\r\n\t\tobject.eulerOrder = this.eulerOrder;\r\n\t\tobject.scale.copy( this.scale );\r\n\r\n\t\tobject.renderDepth = this.renderDepth;\r\n\r\n\t\tobject.rotationAutoUpdate = this.rotationAutoUpdate;\r\n\r\n\t\tobject.matrix.copy( this.matrix );\r\n\t\tobject.matrixWorld.copy( this.matrixWorld );\r\n\t\tobject.matrixRotationWorld.copy( this.matrixRotationWorld );\r\n\r\n\t\tobject.matrixAutoUpdate = this.matrixAutoUpdate;\r\n\t\tobject.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;\r\n\r\n\t\tobject.quaternion.copy( this.quaternion );\r\n\t\tobject.useQuaternion = this.useQuaternion;\r\n\r\n\t\tobject.visible = this.visible;\r\n\r\n\t\tobject.castShadow = this.castShadow;\r\n\t\tobject.receiveShadow = this.receiveShadow;\r\n\r\n\t\tobject.frustumCulled = this.frustumCulled;\r\n\r\n\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\t\t\tobject.add( child.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Object3D.__m1 = new THREE.Matrix4();\r\nTHREE.Object3D.defaultEulerOrder = 'XYZ',\r\n\r\nTHREE.Object3DIdCount = 0;\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author julianwa / https://github.com/julianwa\r\n */\r\n\r\nTHREE.Projector = function() {\r\n\r\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\r\n\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\r\n\t_face, _face3Count, _face3Pool = [], _face3PoolLength = 0,\r\n\t_face4Count, _face4Pool = [], _face4PoolLength = 0,\r\n\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\r\n\t_particle, _particleCount, _particlePool = [], _particlePoolLength = 0,\r\n\r\n\t_renderData = { objects: [], sprites: [], lights: [], elements: [] },\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\t_vector4 = new THREE.Vector4(),\r\n\r\n\t_clipBox = new THREE.Box3( new THREE.Vector3( -1, -1, -1 ), new THREE.Vector3( 1, 1, 1 ) ),\r\n\t_boundingBox = new THREE.Box3(),\r\n\t_points3 = new Array( 3 ),\r\n\t_points4 = new Array( 4 ),\r\n\r\n\t_viewMatrix = new THREE.Matrix4(),\r\n\t_viewProjectionMatrix = new THREE.Matrix4(),\r\n\r\n\t_modelMatrix,\r\n\t_modelViewProjectionMatrix = new THREE.Matrix4(),\r\n\r\n\t_normalMatrix = new THREE.Matrix3(),\r\n\t_normalViewMatrix = new THREE.Matrix3(),\r\n\r\n\t_centroid = new THREE.Vector3(),\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t_clippedVertex1PositionScreen = new THREE.Vector4(),\r\n\t_clippedVertex2PositionScreen = new THREE.Vector4(),\r\n\r\n\t_face3VertexNormals;\r\n\r\n\tthis.projectVector = function ( vector, camera ) {\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\r\n\t\treturn vector.applyProjection( _viewProjectionMatrix );\r\n\r\n\t};\r\n\r\n\tthis.unprojectVector = function ( vector, camera ) {\r\n\r\n\t\tcamera.projectionMatrixInverse.getInverse( camera.projectionMatrix );\r\n\r\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.matrixWorld, camera.projectionMatrixInverse );\r\n\r\n\t\treturn vector.applyProjection( _viewProjectionMatrix );\r\n\r\n\t};\r\n\r\n\tthis.pickingRay = function ( vector, camera ) {\r\n\r\n\t\t// set two vectors with opposing z values\r\n\t\tvector.z = -1.0;\r\n\t\tvar end = new THREE.Vector3( vector.x, vector.y, 1.0 );\r\n\r\n\t\tthis.unprojectVector( vector, camera );\r\n\t\tthis.unprojectVector( end, camera );\r\n\r\n\t\t// find direction from vector to end\r\n\t\tend.sub( vector ).normalize();\r\n\r\n\t\treturn new THREE.Raycaster( vector, end );\r\n\r\n\t};\r\n\r\n\tvar projectGraph = function ( root, sortObjects ) {\r\n\r\n\t\t_objectCount = 0;\r\n\r\n\t\t_renderData.objects.length = 0;\r\n\t\t_renderData.sprites.length = 0;\r\n\t\t_renderData.lights.length = 0;\r\n\r\n\t\tvar projectObject = function ( parent ) {\r\n\r\n\t\t\tfor ( var c = 0, cl = parent.children.length; c < cl; c ++ ) {\r\n\r\n\t\t\t\tvar object = parent.children[ c ];\r\n\r\n\t\t\t\tif ( object.visible === false ) continue;\r\n\r\n\t\t\t\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\t\t\t\t_renderData.lights.push( object );\r\n\r\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\r\n\r\n\t\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\r\n\t\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t\t_object.object = object;\r\n\r\n\t\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t\t_object.z = object.renderDepth;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t\t\t_object.z = _vector3.z;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_renderData.objects.push( _object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object instanceof THREE.Sprite || object instanceof THREE.Particle ) {\r\n\r\n\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t_object.object = object;\r\n\r\n\t\t\t\t\t// TODO: Find an elegant and performant solution and remove this dupe code.\r\n\r\n\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t_object.z = object.renderDepth;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t\t_object.z = _vector3.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_renderData.sprites.push( _object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t_object.object = object;\r\n\r\n\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t_object.z = object.renderDepth;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t\t_object.z = _vector3.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_renderData.objects.push( _object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprojectObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tprojectObject( root );\r\n\r\n\t\tif ( sortObjects === true ) _renderData.objects.sort( painterSort );\r\n\r\n\t\treturn _renderData;\r\n\r\n\t};\r\n\r\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\r\n\r\n\t\tvar visible = false,\r\n\t\to, ol, v, vl, f, fl, n, nl, c, cl, u, ul, object,\r\n\t\tgeometry, vertices, vertex, vertexPositionScreen,\r\n\t\tfaces, face, faceVertexNormals, faceVertexUvs, uvs,\r\n\t\tv1, v2, v3, v4, isFaceMaterial, objectMaterials;\r\n\r\n\t\t_face3Count = 0;\r\n\t\t_face4Count = 0;\r\n\t\t_lineCount = 0;\r\n\t\t_particleCount = 0;\r\n\r\n\t\t_renderData.elements.length = 0;\r\n\r\n\t\tscene.updateMatrixWorld();\r\n\r\n\t\tif ( camera.parent === undefined ) camera.updateMatrixWorld();\r\n\r\n\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\r\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\r\n\r\n\t\t_normalViewMatrix.getInverse( _viewMatrix );\r\n\t\t_normalViewMatrix.transpose();\r\n\r\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\r\n\r\n\t\t_renderData = projectGraph( scene, sortObjects );\r\n\r\n\t\tfor ( o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\r\n\r\n\t\t\tobject = _renderData.objects[ o ].object;\r\n\r\n\t\t\t_modelMatrix = object.matrixWorld;\r\n\r\n\t\t\t_vertexCount = 0;\r\n\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tvertices = geometry.vertices;\r\n\t\t\t\tfaces = geometry.faces;\r\n\t\t\t\tfaceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\t\t\t_normalMatrix.getInverse( _modelMatrix );\r\n\t\t\t\t_normalMatrix.transpose();\r\n\r\n\t\t\t\tisFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;\r\n\t\t\t\tobjectMaterials = isFaceMaterial === true ? object.material : null;\r\n\r\n\t\t\t\tfor ( v = 0, vl = vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\t_vertex = getNextVertexInPool();\r\n\r\n\t\t\t\t\t_vertex.positionWorld.copy( vertices[ v ] ).applyMatrix4( _modelMatrix );\r\n\t\t\t\t\t_vertex.positionScreen.copy( _vertex.positionWorld ).applyMatrix4( _viewProjectionMatrix );\r\n\r\n\t\t\t\t\t_vertex.positionScreen.x /= _vertex.positionScreen.w;\r\n\t\t\t\t\t_vertex.positionScreen.y /= _vertex.positionScreen.w;\r\n\t\t\t\t\t_vertex.positionScreen.z /= _vertex.positionScreen.w;\r\n\r\n\t\t\t\t\t_vertex.visible = ! ( _vertex.positionScreen.x < -1 || _vertex.positionScreen.x > 1 ||\r\n\t\t\t\t\t\t\t      _vertex.positionScreen.y < -1 || _vertex.positionScreen.y > 1 ||\r\n\t\t\t\t\t\t\t      _vertex.positionScreen.z < -1 || _vertex.positionScreen.z > 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = faces[ f ];\r\n\r\n\t\t\t\t\tvar material = isFaceMaterial === true\r\n\t\t\t\t\t\t? objectMaterials.materials[ face.materialIndex ]\r\n\t\t\t\t\t\t: object.material;\r\n\r\n\t\t\t\t\tif ( material === undefined ) continue;\r\n\r\n\t\t\t\t\tvar side = material.side;\r\n\r\n\t\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\t\tv1 = _vertexPool[ face.a ];\r\n\t\t\t\t\t\tv2 = _vertexPool[ face.b ];\r\n\t\t\t\t\t\tv3 = _vertexPool[ face.c ];\r\n\r\n\t\t\t\t\t\t_points3[ 0 ] = v1.positionScreen;\r\n\t\t\t\t\t\t_points3[ 1 ] = v2.positionScreen;\r\n\t\t\t\t\t\t_points3[ 2 ] = v3.positionScreen;\r\n\r\n\t\t\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ||\r\n\t\t\t\t\t\t\t_clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points3 ) ) ) {\r\n\r\n\t\t\t\t\t\t\tvisible = ( ( v3.positionScreen.x - v1.positionScreen.x ) * ( v2.positionScreen.y - v1.positionScreen.y ) -\r\n\t\t\t\t\t\t\t\t( v3.positionScreen.y - v1.positionScreen.y ) * ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\r\n\r\n\t\t\t\t\t\t\tif ( side === THREE.DoubleSide || visible === ( side === THREE.FrontSide ) ) {\r\n\r\n\t\t\t\t\t\t\t\t_face = getNextFace3InPool();\r\n\r\n\t\t\t\t\t\t\t\t_face.v1.copy( v1 );\r\n\t\t\t\t\t\t\t\t_face.v2.copy( v2 );\r\n\t\t\t\t\t\t\t\t_face.v3.copy( v3 );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\t\tv1 = _vertexPool[ face.a ];\r\n\t\t\t\t\t\tv2 = _vertexPool[ face.b ];\r\n\t\t\t\t\t\tv3 = _vertexPool[ face.c ];\r\n\t\t\t\t\t\tv4 = _vertexPool[ face.d ];\r\n\r\n\t\t\t\t\t\t_points4[ 0 ] = v1.positionScreen;\r\n\t\t\t\t\t\t_points4[ 1 ] = v2.positionScreen;\r\n\t\t\t\t\t\t_points4[ 2 ] = v3.positionScreen;\r\n\t\t\t\t\t\t_points4[ 3 ] = v4.positionScreen;\r\n\r\n\t\t\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true || v4.visible === true ||\r\n\t\t\t\t\t\t\t_clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points4 ) ) ) {\r\n\r\n\t\t\t\t\t\t\tvisible = ( v4.positionScreen.x - v1.positionScreen.x ) * ( v2.positionScreen.y - v1.positionScreen.y ) -\r\n\t\t\t\t\t\t\t\t( v4.positionScreen.y - v1.positionScreen.y ) * ( v2.positionScreen.x - v1.positionScreen.x ) < 0 ||\r\n\t\t\t\t\t\t\t\t( v2.positionScreen.x - v3.positionScreen.x ) * ( v4.positionScreen.y - v3.positionScreen.y ) -\r\n\t\t\t\t\t\t\t\t( v2.positionScreen.y - v3.positionScreen.y ) * ( v4.positionScreen.x - v3.positionScreen.x ) < 0;\r\n\r\n\r\n\t\t\t\t\t\t\tif ( side === THREE.DoubleSide || visible === ( side === THREE.FrontSide ) ) {\r\n\r\n\t\t\t\t\t\t\t\t_face = getNextFace4InPool();\r\n\r\n\t\t\t\t\t\t\t\t_face.v1.copy( v1 );\r\n\t\t\t\t\t\t\t\t_face.v2.copy( v2 );\r\n\t\t\t\t\t\t\t\t_face.v3.copy( v3 );\r\n\t\t\t\t\t\t\t\t_face.v4.copy( v4 );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.normalModel.copy( face.normal );\r\n\r\n\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\r\n\t\t\t\t\t\t_face.normalModel.negate();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t_face.normalModelView.copy( _face.normalModel ).applyMatrix3( _normalViewMatrix );\r\n\r\n\t\t\t\t\t_face.centroidModel.copy( face.centroid ).applyMatrix4( _modelMatrix );\r\n\r\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\t\tfor ( n = 0, nl = faceVertexNormals.length; n < nl; n ++ ) {\r\n\r\n\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\r\n\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\r\n\r\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\r\n\t\t\t\t\t\t\tnormalModel.negate();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t\tvar normalModelView = _face.vertexNormalsModelView[ n ];\r\n\t\t\t\t\t\tnormalModelView.copy( normalModel ).applyMatrix3( _normalViewMatrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\r\n\r\n\t\t\t\t\tfor ( c = 0, cl = faceVertexUvs.length; c < cl; c ++ ) {\r\n\r\n\t\t\t\t\t\tuvs = faceVertexUvs[ c ][ f ];\r\n\r\n\t\t\t\t\t\tif ( uvs === undefined ) continue;\r\n\r\n\t\t\t\t\t\tfor ( u = 0, ul = uvs.length; u < ul; u ++ ) {\r\n\r\n\t\t\t\t\t\t\t_face.uvs[ c ][ u ] = uvs[ u ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.color = face.color;\r\n\t\t\t\t\t_face.material = material;\r\n\r\n\t\t\t\t\t_centroid.copy( _face.centroidModel ).applyProjection( _viewProjectionMatrix );\r\n\r\n\t\t\t\t\t_face.z = _centroid.z;\r\n\r\n\t\t\t\t\t_renderData.elements.push( _face );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\r\n\r\n\t\t\t\tvertices = object.geometry.vertices;\r\n\r\n\t\t\t\tv1 = getNextVertexInPool();\r\n\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\r\n\t\t\t\t// Handle LineStrip and LinePieces\r\n\t\t\t\tvar step = object.type === THREE.LinePieces ? 2 : 1;\r\n\r\n\t\t\t\tfor ( v = 1, vl = vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\tv1 = getNextVertexInPool();\r\n\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\r\n\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\r\n\r\n\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\r\n\r\n\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\r\n\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\r\n\r\n\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\r\n\r\n\t\t\t\t\t\t// Perform the perspective divide\r\n\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\r\n\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\r\n\r\n\t\t\t\t\t\t_line = getNextLineInPool();\r\n\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\r\n\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\r\n\r\n\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\r\n\r\n\t\t\t\t\t\t_line.material = object.material;\r\n\r\n\t\t\t\t\t\t_renderData.elements.push( _line );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( o = 0, ol = _renderData.sprites.length; o < ol; o++ ) {\r\n\r\n\t\t\tobject = _renderData.sprites[ o ].object;\r\n\r\n\t\t\t_modelMatrix = object.matrixWorld;\r\n\r\n\t\t\tif ( object instanceof THREE.Particle ) {\r\n\r\n\t\t\t\t_vector4.set( _modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1 );\r\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\r\n\r\n\t\t\t\t_vector4.z /= _vector4.w;\r\n\r\n\t\t\t\tif ( _vector4.z > 0 && _vector4.z < 1 ) {\r\n\r\n\t\t\t\t\t_particle = getNextParticleInPool();\r\n\t\t\t\t\t_particle.object = object;\r\n\t\t\t\t\t_particle.x = _vector4.x / _vector4.w;\r\n\t\t\t\t\t_particle.y = _vector4.y / _vector4.w;\r\n\t\t\t\t\t_particle.z = _vector4.z;\r\n\r\n\t\t\t\t\t_particle.rotation = object.rotation.z;\r\n\r\n\t\t\t\t\t_particle.scale.x = object.scale.x * Math.abs( _particle.x - ( _vector4.x + camera.projectionMatrix.elements[0] ) / ( _vector4.w + camera.projectionMatrix.elements[12] ) );\r\n\t\t\t\t\t_particle.scale.y = object.scale.y * Math.abs( _particle.y - ( _vector4.y + camera.projectionMatrix.elements[5] ) / ( _vector4.w + camera.projectionMatrix.elements[13] ) );\r\n\r\n\t\t\t\t\t_particle.material = object.material;\r\n\r\n\t\t\t\t\t_renderData.elements.push( _particle );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( sortElements === true ) _renderData.elements.sort( painterSort );\r\n\r\n\t\treturn _renderData;\r\n\r\n\t};\r\n\r\n\t// Pools\r\n\r\n\tfunction getNextObjectInPool() {\r\n\r\n\t\tif ( _objectCount === _objectPoolLength ) {\r\n\r\n\t\t\tvar object = new THREE.RenderableObject();\r\n\t\t\t_objectPool.push( object );\r\n\t\t\t_objectPoolLength ++;\r\n\t\t\t_objectCount ++;\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t\treturn _objectPool[ _objectCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextVertexInPool() {\r\n\r\n\t\tif ( _vertexCount === _vertexPoolLength ) {\r\n\r\n\t\t\tvar vertex = new THREE.RenderableVertex();\r\n\t\t\t_vertexPool.push( vertex );\r\n\t\t\t_vertexPoolLength ++;\r\n\t\t\t_vertexCount ++;\r\n\t\t\treturn vertex;\r\n\r\n\t\t}\r\n\r\n\t\treturn _vertexPool[ _vertexCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextFace3InPool() {\r\n\r\n\t\tif ( _face3Count === _face3PoolLength ) {\r\n\r\n\t\t\tvar face = new THREE.RenderableFace3();\r\n\t\t\t_face3Pool.push( face );\r\n\t\t\t_face3PoolLength ++;\r\n\t\t\t_face3Count ++;\r\n\t\t\treturn face;\r\n\r\n\t\t}\r\n\r\n\t\treturn _face3Pool[ _face3Count ++ ];\r\n\r\n\r\n\t}\r\n\r\n\tfunction getNextFace4InPool() {\r\n\r\n\t\tif ( _face4Count === _face4PoolLength ) {\r\n\r\n\t\t\tvar face = new THREE.RenderableFace4();\r\n\t\t\t_face4Pool.push( face );\r\n\t\t\t_face4PoolLength ++;\r\n\t\t\t_face4Count ++;\r\n\t\t\treturn face;\r\n\r\n\t\t}\r\n\r\n\t\treturn _face4Pool[ _face4Count ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextLineInPool() {\r\n\r\n\t\tif ( _lineCount === _linePoolLength ) {\r\n\r\n\t\t\tvar line = new THREE.RenderableLine();\r\n\t\t\t_linePool.push( line );\r\n\t\t\t_linePoolLength ++;\r\n\t\t\t_lineCount ++\r\n\t\t\treturn line;\r\n\r\n\t\t}\r\n\r\n\t\treturn _linePool[ _lineCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextParticleInPool() {\r\n\r\n\t\tif ( _particleCount === _particlePoolLength ) {\r\n\r\n\t\t\tvar particle = new THREE.RenderableParticle();\r\n\t\t\t_particlePool.push( particle );\r\n\t\t\t_particlePoolLength ++;\r\n\t\t\t_particleCount ++\r\n\t\t\treturn particle;\r\n\r\n\t\t}\r\n\r\n\t\treturn _particlePool[ _particleCount ++ ];\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction painterSort( a, b ) {\r\n\r\n\t\treturn b.z - a.z;\r\n\r\n\t}\r\n\r\n\tfunction clipLine( s1, s2 ) {\r\n\r\n\t\tvar alpha1 = 0, alpha2 = 1,\r\n\r\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\r\n\t\t// Z = -1 and Z = +1, respectively.\r\n\t\tbc1near =  s1.z + s1.w,\r\n\t\tbc2near =  s2.z + s2.w,\r\n\t\tbc1far =  - s1.z + s1.w,\r\n\t\tbc2far =  - s2.z + s2.w;\r\n\r\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\r\n\r\n\t\t\t// Both vertices lie entirely within all clip planes.\r\n\t\t\treturn true;\r\n\r\n\t\t} else if ( ( bc1near < 0 && bc2near < 0) || (bc1far < 0 && bc2far < 0 ) ) {\r\n\r\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\r\n\t\t\treturn false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// The line segment spans at least one clip plane.\r\n\r\n\t\t\tif ( bc1near < 0 ) {\r\n\r\n\t\t\t\t// v1 lies outside the near plane, v2 inside\r\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\r\n\r\n\t\t\t} else if ( bc2near < 0 ) {\r\n\r\n\t\t\t\t// v2 lies outside the near plane, v1 inside\r\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( bc1far < 0 ) {\r\n\r\n\t\t\t\t// v1 lies outside the far plane, v2 inside\r\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\r\n\r\n\t\t\t} else if ( bc2far < 0 ) {\r\n\r\n\t\t\t\t// v2 lies outside the far plane, v2 inside\r\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( alpha2 < alpha1 ) {\r\n\r\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\r\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\r\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\r\n\t\t\t\ts1.lerp( s2, alpha1 );\r\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\r\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\tthis.vertexNormals = normal instanceof Array ? normal : [ ];\r\n\r\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\tthis.vertexColors = color instanceof Array ? color : [];\r\n\r\n\tthis.vertexTangents = [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n\tthis.centroid = new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Face3.prototype = {\r\n\r\n\tconstructor: THREE.Face3,\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar face = new THREE.Face3( this.a, this.b, this.c );\r\n\r\n\t\tface.normal.copy( this.normal );\r\n\t\tface.color.copy( this.color );\r\n\t\tface.centroid.copy( this.centroid );\r\n\r\n\t\tface.materialIndex = this.materialIndex;\r\n\r\n\t\tvar i, il;\r\n\t\tfor ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();\r\n\r\n\t\treturn face;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\tthis.d = d;\r\n\r\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\tthis.vertexNormals = normal instanceof Array ? normal : [ ];\r\n\r\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\tthis.vertexColors = color instanceof Array ? color : [];\r\n\r\n\tthis.vertexTangents = [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n\tthis.centroid = new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Face4.prototype = {\r\n\r\n\tconstructor: THREE.Face4,\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar face = new THREE.Face4( this.a, this.b, this.c, this.d );\r\n\r\n\t\tface.normal.copy( this.normal );\r\n\t\tface.color.copy( this.color );\r\n\t\tface.centroid.copy( this.centroid );\r\n\r\n\t\tface.materialIndex = this.materialIndex;\r\n\r\n\t\tvar i, il;\r\n\t\tfor ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();\r\n\r\n\t\treturn face;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Geometry = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.GeometryIdCount ++;\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.vertices = [];\r\n\tthis.colors = [];  // one-to-one vertex colors, used in ParticleSystem, Line and Ribbon\r\n\tthis.normals = []; // one-to-one vertex normals, used in Ribbon\r\n\r\n\tthis.faces = [];\r\n\r\n\tthis.faceUvs = [[]];\r\n\tthis.faceVertexUvs = [[]];\r\n\r\n\tthis.morphTargets = [];\r\n\tthis.morphColors = [];\r\n\tthis.morphNormals = [];\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\tthis.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.hasTangents = false;\r\n\r\n\tthis.dynamic = true; // the intermediate typed arrays will be deleted when set to false\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.elementsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.tangentsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.lineDistancesNeedUpdate = false;\r\n\r\n\tthis.buffersNeedUpdate = false;\r\n\r\n};\r\n\r\nTHREE.Geometry.prototype = {\r\n\r\n\tconstructor: THREE.Geometry,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar normalMatrix = new THREE.Matrix3().getInverse( matrix ).transpose();\r\n\r\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tface.centroid.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeCentroids: function () {\r\n\r\n\t\tvar f, fl, face;\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\t\t\tface.centroid.set( 0, 0, 0 );\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tface.centroid.add( this.vertices[ face.a ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.b ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.c ] );\r\n\t\t\t\tface.centroid.divideScalar( 3 );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tface.centroid.add( this.vertices[ face.a ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.b ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.c ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.d ] );\r\n\t\t\t\tface.centroid.divideScalar( 4 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tvar n, nl, v, vl, vertex, f, fl, face, vA, vB, vC,\r\n\t\tcb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\tcb.subVectors( vC, vB );\r\n\t\t\tab.subVectors( vA, vB );\r\n\t\t\tcb.cross( ab );\r\n\r\n\t\t\tcb.normalize();\r\n\r\n\t\t\tface.normal.copy( cb );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\t// create internal buffers for reuse when calling this method repeatedly\r\n\t\t// (otherwise memory allocation / deallocation every frame is big resource hog)\r\n\r\n\t\tif ( this.__tmpVertices === undefined ) {\r\n\r\n\t\t\tthis.__tmpVertices = new Array( this.vertices.length );\r\n\t\t\tvertices = this.__tmpVertices;\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ] = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tface.vertexNormals = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\tface.vertexNormals = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvertices = this.__tmpVertices;\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ].set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\tvar vA, vB, vC, vD;\r\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3(),\r\n\t\t\t\tdb = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\t\t\t\t\tvD = this.vertices[ face.d ];\r\n\r\n\t\t\t\t\t// abd\r\n\r\n\t\t\t\t\tdb.subVectors( vD, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tdb.cross( ab );\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( db );\r\n\t\t\t\t\tvertices[ face.b ].add( db );\r\n\t\t\t\t\tvertices[ face.d ].add( db );\r\n\r\n\t\t\t\t\t// bcd\r\n\r\n\t\t\t\t\tdc.subVectors( vD, vC );\r\n\t\t\t\t\tbc.subVectors( vB, vC );\r\n\t\t\t\t\tdc.cross( bc );\r\n\r\n\t\t\t\t\tvertices[ face.b ].add( dc );\r\n\t\t\t\t\tvertices[ face.c ].add( dc );\r\n\t\t\t\t\tvertices[ face.d ].add( dc );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.d ].add( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tface.vertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tface.vertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tface.vertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tface.vertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tface.vertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tface.vertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\t\t\t\tface.vertexNormals[ 3 ].copy( vertices[ face.d ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeMorphNormals: function () {\r\n\r\n\t\tvar i, il, f, fl, face;\r\n\r\n\t\t// save original normals\r\n\t\t// - create temp variables on first access\r\n\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\r\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\tvar tmpGeo = new THREE.Geometry();\r\n\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t// create on first access\r\n\r\n\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\r\n\r\n\t\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3(), d: new THREE.Vector3() };\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t// set vertices to morph target\r\n\r\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t// compute morph normals\r\n\r\n\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t// store morph normals\r\n\r\n\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\t\t\t\t\tvertexNormals.d.copy( face.vertexNormals[ 3 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore original normals\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\t// based on http://www.terathon.com/code/tangent.html\r\n\t\t// tangents go to vertices\r\n\r\n\t\tvar f, fl, v, vl, i, il, vertexIndex,\r\n\t\t\tface, uv, vA, vB, vC, uvA, uvB, uvC,\r\n\t\t\tx1, x2, y1, y2, z1, z2,\r\n\t\t\ts1, s2, t1, t2, r, t, test,\r\n\t\t\ttan1 = [], tan2 = [],\r\n\t\t\tsdir = new THREE.Vector3(), tdir = new THREE.Vector3(),\r\n\t\t\ttmp = new THREE.Vector3(), tmp2 = new THREE.Vector3(),\r\n\t\t\tn = new THREE.Vector3(), w;\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\ttan1[ v ] = new THREE.Vector3();\r\n\t\t\ttan2[ v ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tfunction handleTriangle( context, a, b, c, ua, ub, uc ) {\r\n\r\n\t\t\tvA = context.vertices[ a ];\r\n\t\t\tvB = context.vertices[ b ];\r\n\t\t\tvC = context.vertices[ c ];\r\n\r\n\t\t\tuvA = uv[ ua ];\r\n\t\t\tuvB = uv[ ub ];\r\n\t\t\tuvC = uv[ uc ];\r\n\r\n\t\t\tx1 = vB.x - vA.x;\r\n\t\t\tx2 = vC.x - vA.x;\r\n\t\t\ty1 = vB.y - vA.y;\r\n\t\t\ty2 = vC.y - vA.y;\r\n\t\t\tz1 = vB.z - vA.z;\r\n\t\t\tz2 = vC.z - vA.z;\r\n\r\n\t\t\ts1 = uvB.x - uvA.x;\r\n\t\t\ts2 = uvC.x - uvA.x;\r\n\t\t\tt1 = uvB.y - uvA.y;\r\n\t\t\tt2 = uvC.y - uvA.y;\r\n\r\n\t\t\tr = 1.0 / ( s1 * t2 - s2 * t1 );\r\n\t\t\tsdir.set( ( t2 * x1 - t1 * x2 ) * r,\r\n\t\t\t\t\t  ( t2 * y1 - t1 * y2 ) * r,\r\n\t\t\t\t\t  ( t2 * z1 - t1 * z2 ) * r );\r\n\t\t\ttdir.set( ( s1 * x2 - s2 * x1 ) * r,\r\n\t\t\t\t\t  ( s1 * y2 - s2 * y1 ) * r,\r\n\t\t\t\t\t  ( s1 * z2 - s2 * z1 ) * r );\r\n\r\n\t\t\ttan1[ a ].add( sdir );\r\n\t\t\ttan1[ b ].add( sdir );\r\n\t\t\ttan1[ c ].add( sdir );\r\n\r\n\t\t\ttan2[ a ].add( tdir );\r\n\t\t\ttan2[ b ].add( tdir );\r\n\t\t\ttan2[ c ].add( tdir );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\t\t\tuv = this.faceVertexUvs[ 0 ][ f ]; // use UV layer 0 for tangents\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\thandleTriangle( this, face.a, face.b, face.c, 0, 1, 2 );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\thandleTriangle( this, face.a, face.b, face.d, 0, 1, 3 );\r\n\t\t\t\thandleTriangle( this, face.b, face.c, face.d, 1, 2, 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar faceIndex = [ 'a', 'b', 'c', 'd' ];\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tfor ( i = 0; i < face.vertexNormals.length; i++ ) {\r\n\r\n\t\t\t\tn.copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\tvertexIndex = face[ faceIndex[ i ] ];\r\n\r\n\t\t\t\tt = tan1[ vertexIndex ];\r\n\r\n\t\t\t\t// Gram-Schmidt orthogonalize\r\n\r\n\t\t\t\ttmp.copy( t );\r\n\t\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\r\n\r\n\t\t\t\t// Calculate handedness\r\n\r\n\t\t\t\ttmp2.crossVectors( face.vertexNormals[ i ], t );\r\n\t\t\t\ttest = tmp2.dot( tan2[ vertexIndex ] );\r\n\t\t\t\tw = (test < 0.0) ? -1.0 : 1.0;\r\n\r\n\t\t\t\tface.vertexTangents[ i ] = new THREE.Vector4( tmp.x, tmp.y, tmp.z, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.hasTangents = true;\r\n\r\n\t},\r\n\r\n\tcomputeLineDistances: function ( ) {\r\n\r\n\t\tvar d = 0;\r\n\t\tvar vertices = this.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tif ( i > 0 ) {\r\n\r\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.lineDistances[ i ] = d;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.setFromCenterAndPoints( this.boundingSphere.center, this.vertices );\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Checks for duplicate vertices with hashmap.\r\n\t * Duplicated vertices are removed\r\n\t * and faces' vertices are updated.\r\n\t */\r\n\r\n\tmergeVertices: function () {\r\n\r\n\t\tvar verticesMap = {}; // Hashmap for looking up vertice by position coordinates (and making sure they are unique)\r\n\t\tvar unique = [], changes = [];\r\n\r\n\t\tvar v, key;\r\n\t\tvar precisionPoints = 4; // number of decimal points, eg. 4 for epsilon of 0.0001\r\n\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\tvar i,il, face;\r\n\t\tvar indices, k, j, jl, u;\r\n\r\n\t\t// reset cache of vertices as it now will be changing.\r\n\t\tthis.__tmpVertices = undefined;\r\n\r\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tv = this.vertices[ i ];\r\n\t\t\tkey = [ Math.round( v.x * precision ), Math.round( v.y * precision ), Math.round( v.z * precision ) ].join( '_' );\r\n\r\n\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t// have to remove them from the geometry.\r\n\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\tfor( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\t\tvar dupIndex = -1;\r\n\r\n\t\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\t\t\t\t\tif ( indices[ n ] == indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\t\tdupIndex = n;\r\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\t\t\t\tface.d = changes[ face.d ];\r\n\r\n\t\t\t\t// check dups in (a, b, c, d) and convert to -> face3\r\n\r\n\t\t\t\tindices = [ face.a, face.b, face.c, face.d ];\r\n\r\n\t\t\t\tvar dupIndex = -1;\r\n\r\n\t\t\t\tfor ( var n = 0; n < 4; n ++ ) {\r\n\r\n\t\t\t\t\tif ( indices[ n ] == indices[ ( n + 1 ) % 4 ] ) {\r\n\r\n\t\t\t\t\t\t// if more than one duplicated vertex is found\r\n\t\t\t\t\t\t// we can't generate any valid Face3's, thus\r\n\t\t\t\t\t\t// we need to remove this face complete.\r\n\t\t\t\t\t\tif ( dupIndex >= 0 ) {\r\n\r\n\t\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdupIndex = n;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( dupIndex >= 0 ) {\r\n\r\n\t\t\t\t\tindices.splice( dupIndex, 1 );\r\n\r\n\t\t\t\t\tvar newFace = new THREE.Face3( indices[0], indices[1], indices[2], face.normal, face.color, face.materialIndex );\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tu = this.faceVertexUvs[ j ][ i ];\r\n\r\n\t\t\t\t\t\tif ( u ) {\r\n\t\t\t\t\t\t\tu.splice( dupIndex, 1 );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif( face.vertexNormals && face.vertexNormals.length > 0) {\r\n\r\n\t\t\t\t\t\tnewFace.vertexNormals = face.vertexNormals;\r\n\t\t\t\t\t\tnewFace.vertexNormals.splice( dupIndex, 1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif( face.vertexColors && face.vertexColors.length > 0 ) {\r\n\r\n\t\t\t\t\t\tnewFace.vertexColors = face.vertexColors;\r\n\t\t\t\t\t\tnewFace.vertexColors.splice( dupIndex, 1 );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.faces[ i ] = newFace;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\tthis.faces.splice( i, 1 );\r\n\r\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ j ].splice( i, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Use unique set of vertices\r\n\r\n\t\tvar diff = this.vertices.length - unique.length;\r\n\t\tthis.vertices = unique;\r\n\t\treturn diff;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar geometry = new THREE.Geometry();\r\n\r\n\t\tvar vertices = this.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tgeometry.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = this.faces;\r\n\r\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tgeometry.faces.push( faces[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\r\n\t\tfor ( var i = 0, il = uvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs[ i ], uvCopy = [];\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.faceVertexUvs[ 0 ].push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.GeometryIdCount = 0;\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.BufferGeometry = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.GeometryIdCount ++;\r\n\r\n\t// attributes\r\n\r\n\tthis.attributes = {};\r\n\r\n\t// attributes typed arrays are kept only if dynamic flag is set\r\n\r\n\tthis.dynamic = false;\r\n\r\n\t// offsets for chunks when using indexed elements\r\n\r\n\tthis.offsets = [];\r\n\r\n\t// boundings\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.hasTangents = false;\r\n\r\n\t// for compatibility\r\n\r\n\tthis.morphTargets = [];\r\n\r\n};\r\n\r\nTHREE.BufferGeometry.prototype = {\r\n\r\n\tconstructor : THREE.BufferGeometry,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar positionArray;\r\n\t\tvar normalArray;\r\n\r\n\t\tif ( this.attributes[ \"position\" ] ) positionArray = this.attributes[ \"position\" ].array;\r\n\t\tif ( this.attributes[ \"normal\" ] ) normalArray = this.attributes[ \"normal\" ].array;\r\n\r\n\t\tif ( positionArray !== undefined ) {\r\n\r\n\t\t\tmatrix.multiplyVector3Array( positionArray );\r\n\t\t\tthis.verticesNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( normalArray !== undefined ) {\r\n\r\n\t\t\tvar normalMatrix = new THREE.Matrix3();\r\n\t\t\tnormalMatrix.getInverse( matrix ).transpose();\r\n\r\n\t\t\tnormalMatrix.multiplyVector3Array( normalArray );\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\r\n\t\tif ( positions ) {\r\n\r\n\t\t\tvar bb = this.boundingBox;\r\n\t\t\tvar x, y, z;\r\n\r\n\t\t\tif( positions.length >= 3 ) {\r\n\t\t\t\tbb.min.x = bb.max.x = positions[ 0 ];\r\n\t\t\t\tbb.min.y = bb.max.y = positions[ 1 ];\r\n\t\t\t\tbb.min.z = bb.max.z = positions[ 2 ];\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 3, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\tx = positions[ i ];\r\n\t\t\t\ty = positions[ i + 1 ];\r\n\t\t\t\tz = positions[ i + 2 ];\r\n\r\n\t\t\t\t// bounding box\r\n\r\n\t\t\t\tif ( x < bb.min.x ) {\r\n\r\n\t\t\t\t\tbb.min.x = x;\r\n\r\n\t\t\t\t} else if ( x > bb.max.x ) {\r\n\r\n\t\t\t\t\tbb.max.x = x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( y < bb.min.y ) {\r\n\r\n\t\t\t\t\tbb.min.y = y;\r\n\r\n\t\t\t\t} else if ( y > bb.max.y ) {\r\n\r\n\t\t\t\t\tbb.max.y = y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( z < bb.min.z ) {\r\n\r\n\t\t\t\t\tbb.min.z = z;\r\n\r\n\t\t\t\t} else if ( z > bb.max.z ) {\r\n\r\n\t\t\t\t\tbb.max.z = z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( positions === undefined || positions.length === 0 ) {\r\n\r\n\t\t\tthis.boundingBox.min.set( 0, 0, 0 );\r\n\t\t\tthis.boundingBox.max.set( 0, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\r\n\t\tif ( positions ) {\r\n\r\n\t\t\tvar radiusSq, maxRadiusSq = 0;\r\n\t\t\tvar x, y, z;\r\n\r\n\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\tx = positions[ i ];\r\n\t\t\t\ty = positions[ i + 1 ];\r\n\t\t\t\tz = positions[ i + 2 ];\r\n\r\n\t\t\t\tradiusSq =  x * x + y * y + z * z;\r\n\t\t\t\tif ( radiusSq > maxRadiusSq ) maxRadiusSq = radiusSq;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tif ( this.attributes[ \"position\" ] ) {\r\n\r\n\t\t\tvar i, il;\r\n\t\t\tvar j, jl;\r\n\r\n\t\t\tvar nVertexElements = this.attributes[ \"position\" ].array.length;\r\n\r\n\t\t\tif ( this.attributes[ \"normal\" ] === undefined ) {\r\n\r\n\t\t\t\tthis.attributes[ \"normal\" ] = {\r\n\r\n\t\t\t\t\titemSize: 3,\r\n\t\t\t\t\tarray: new Float32Array( nVertexElements ),\r\n\t\t\t\t\tnumItems: nVertexElements\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tfor ( i = 0, il = this.attributes[ \"normal\" ].array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tthis.attributes[ \"normal\" ].array[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\t\t\tvar normals = this.attributes[ \"normal\" ].array;\r\n\r\n\t\t\tvar vA, vB, vC, x, y, z,\r\n\r\n\t\t\tpA = new THREE.Vector3(),\r\n\t\t\tpB = new THREE.Vector3(),\r\n\t\t\tpC = new THREE.Vector3(),\r\n\r\n\t\t\tcb = new THREE.Vector3(),\r\n\t\t\tab = new THREE.Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( this.attributes[ \"index\" ] ) {\r\n\r\n\t\t\t\tvar indices = this.attributes[ \"index\" ].array;\r\n\r\n\t\t\t\tvar offsets = this.offsets;\r\n\r\n\t\t\t\tfor ( j = 0, jl = offsets.length; j < jl; ++ j ) {\r\n\r\n\t\t\t\t\tvar start = offsets[ j ].start;\r\n\t\t\t\t\tvar count = offsets[ j ].count;\r\n\t\t\t\t\tvar index = offsets[ j ].index;\r\n\r\n\t\t\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = index + indices[ i ];\r\n\t\t\t\t\t\tvB = index + indices[ i + 1 ];\r\n\t\t\t\t\t\tvC = index + indices[ i + 2 ];\r\n\r\n\t\t\t\t\t\tx = positions[ vA * 3 ];\r\n\t\t\t\t\t\ty = positions[ vA * 3 + 1 ];\r\n\t\t\t\t\t\tz = positions[ vA * 3 + 2 ];\r\n\t\t\t\t\t\tpA.set( x, y, z );\r\n\r\n\t\t\t\t\t\tx = positions[ vB * 3 ];\r\n\t\t\t\t\t\ty = positions[ vB * 3 + 1 ];\r\n\t\t\t\t\t\tz = positions[ vB * 3 + 2 ];\r\n\t\t\t\t\t\tpB.set( x, y, z );\r\n\r\n\t\t\t\t\t\tx = positions[ vC * 3 ];\r\n\t\t\t\t\t\ty = positions[ vC * 3 + 1 ];\r\n\t\t\t\t\t\tz = positions[ vC * 3 + 2 ];\r\n\t\t\t\t\t\tpC.set( x, y, z );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA * 3 ]     += cb.x;\r\n\t\t\t\t\t\tnormals[ vA * 3 + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA * 3 + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB * 3 ]     += cb.x;\r\n\t\t\t\t\t\tnormals[ vB * 3 + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB * 3 + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC * 3 ]     += cb.x;\r\n\t\t\t\t\t\tnormals[ vC * 3 + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC * 3 + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tx = positions[ i ];\r\n\t\t\t\t\ty = positions[ i + 1 ];\r\n\t\t\t\t\tz = positions[ i + 2 ];\r\n\t\t\t\t\tpA.set( x, y, z );\r\n\r\n\t\t\t\t\tx = positions[ i + 3 ];\r\n\t\t\t\t\ty = positions[ i + 4 ];\r\n\t\t\t\t\tz = positions[ i + 5 ];\r\n\t\t\t\t\tpB.set( x, y, z );\r\n\r\n\t\t\t\t\tx = positions[ i + 6 ];\r\n\t\t\t\t\ty = positions[ i + 7 ];\r\n\t\t\t\t\tz = positions[ i + 8 ];\r\n\t\t\t\t\tpC.set( x, y, z );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormals[ i ] \t = cb.x;\r\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tnormalizeNormals: function () {\r\n\r\n\t\tvar normals = this.attributes[ \"normal\" ].array;\r\n\r\n\t\tvar x, y, z, n;\r\n\r\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\r\n\r\n\t\t\tx = normals[ i ];\r\n\t\t\ty = normals[ i + 1 ];\r\n\t\t\tz = normals[ i + 2 ];\r\n\r\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tnormals[ i ] \t *= n;\r\n\t\t\tnormals[ i + 1 ] *= n;\r\n\t\t\tnormals[ i + 2 ] *= n;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\t// based on http://www.terathon.com/code/tangent.html\r\n\t\t// (per vertex tangents)\r\n\r\n\t\tif ( this.attributes[ \"index\" ] === undefined ||\r\n\t\t\t this.attributes[ \"position\" ] === undefined ||\r\n\t\t\t this.attributes[ \"normal\" ] === undefined ||\r\n\t\t\t this.attributes[ \"uv\" ] === undefined ) {\r\n\r\n\t\t\tconsole.warn( \"Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()\" );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar indices = this.attributes[ \"index\" ].array;\r\n\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\t\tvar normals = this.attributes[ \"normal\" ].array;\r\n\t\tvar uvs = this.attributes[ \"uv\" ].array;\r\n\r\n\t\tvar nVertices = positions.length / 3;\r\n\r\n\t\tif ( this.attributes[ \"tangent\" ] === undefined ) {\r\n\r\n\t\t\tvar nTangentElements = 4 * nVertices;\r\n\r\n\t\t\tthis.attributes[ \"tangent\" ] = {\r\n\r\n\t\t\t\titemSize: 4,\r\n\t\t\t\tarray: new Float32Array( nTangentElements ),\r\n\t\t\t\tnumItems: nTangentElements\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar tangents = this.attributes[ \"tangent\" ].array;\r\n\r\n\t\tvar tan1 = [], tan2 = [];\r\n\r\n\t\tfor ( var k = 0; k < nVertices; k ++ ) {\r\n\r\n\t\t\ttan1[ k ] = new THREE.Vector3();\r\n\t\t\ttan2[ k ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tvar xA, yA, zA,\r\n\t\t\txB, yB, zB,\r\n\t\t\txC, yC, zC,\r\n\r\n\t\t\tuA, vA,\r\n\t\t\tuB, vB,\r\n\t\t\tuC, vC,\r\n\r\n\t\t\tx1, x2, y1, y2, z1, z2,\r\n\t\t\ts1, s2, t1, t2, r;\r\n\r\n\t\tvar sdir = new THREE.Vector3(), tdir = new THREE.Vector3();\r\n\r\n\t\tfunction handleTriangle( a, b, c ) {\r\n\r\n\t\t\txA = positions[ a * 3 ];\r\n\t\t\tyA = positions[ a * 3 + 1 ];\r\n\t\t\tzA = positions[ a * 3 + 2 ];\r\n\r\n\t\t\txB = positions[ b * 3 ];\r\n\t\t\tyB = positions[ b * 3 + 1 ];\r\n\t\t\tzB = positions[ b * 3 + 2 ];\r\n\r\n\t\t\txC = positions[ c * 3 ];\r\n\t\t\tyC = positions[ c * 3 + 1 ];\r\n\t\t\tzC = positions[ c * 3 + 2 ];\r\n\r\n\t\t\tuA = uvs[ a * 2 ];\r\n\t\t\tvA = uvs[ a * 2 + 1 ];\r\n\r\n\t\t\tuB = uvs[ b * 2 ];\r\n\t\t\tvB = uvs[ b * 2 + 1 ];\r\n\r\n\t\t\tuC = uvs[ c * 2 ];\r\n\t\t\tvC = uvs[ c * 2 + 1 ];\r\n\r\n\t\t\tx1 = xB - xA;\r\n\t\t\tx2 = xC - xA;\r\n\r\n\t\t\ty1 = yB - yA;\r\n\t\t\ty2 = yC - yA;\r\n\r\n\t\t\tz1 = zB - zA;\r\n\t\t\tz2 = zC - zA;\r\n\r\n\t\t\ts1 = uB - uA;\r\n\t\t\ts2 = uC - uA;\r\n\r\n\t\t\tt1 = vB - vA;\r\n\t\t\tt2 = vC - vA;\r\n\r\n\t\t\tr = 1.0 / ( s1 * t2 - s2 * t1 );\r\n\r\n\t\t\tsdir.set(\r\n\t\t\t\t( t2 * x1 - t1 * x2 ) * r,\r\n\t\t\t\t( t2 * y1 - t1 * y2 ) * r,\r\n\t\t\t\t( t2 * z1 - t1 * z2 ) * r\r\n\t\t\t);\r\n\r\n\t\t\ttdir.set(\r\n\t\t\t\t( s1 * x2 - s2 * x1 ) * r,\r\n\t\t\t\t( s1 * y2 - s2 * y1 ) * r,\r\n\t\t\t\t( s1 * z2 - s2 * z1 ) * r\r\n\t\t\t);\r\n\r\n\t\t\ttan1[ a ].add( sdir );\r\n\t\t\ttan1[ b ].add( sdir );\r\n\t\t\ttan1[ c ].add( sdir );\r\n\r\n\t\t\ttan2[ a ].add( tdir );\r\n\t\t\ttan2[ b ].add( tdir );\r\n\t\t\ttan2[ c ].add( tdir );\r\n\r\n\t\t}\r\n\r\n\t\tvar i, il;\r\n\t\tvar j, jl;\r\n\t\tvar iA, iB, iC;\r\n\r\n\t\tvar offsets = this.offsets;\r\n\r\n\t\tfor ( j = 0, jl = offsets.length; j < jl; ++ j ) {\r\n\r\n\t\t\tvar start = offsets[ j ].start;\r\n\t\t\tvar count = offsets[ j ].count;\r\n\t\t\tvar index = offsets[ j ].index;\r\n\r\n\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\tiA = index + indices[ i ];\r\n\t\t\t\tiB = index + indices[ i + 1 ];\r\n\t\t\t\tiC = index + indices[ i + 2 ];\r\n\r\n\t\t\t\thandleTriangle( iA, iB, iC );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();\r\n\t\tvar n = new THREE.Vector3(), n2 = new THREE.Vector3();\r\n\t\tvar w, t, test;\r\n\t\tvar nx, ny, nz;\r\n\r\n\t\tfunction handleVertex( v ) {\r\n\r\n\t\t\tn.x = normals[ v * 3 ];\r\n\t\t\tn.y = normals[ v * 3 + 1 ];\r\n\t\t\tn.z = normals[ v * 3 + 2 ];\r\n\r\n\t\t\tn2.copy( n );\r\n\r\n\t\t\tt = tan1[ v ];\r\n\r\n\t\t\t// Gram-Schmidt orthogonalize\r\n\r\n\t\t\ttmp.copy( t );\r\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\r\n\r\n\t\t\t// Calculate handedness\r\n\r\n\t\t\ttmp2.crossVectors( n2, t );\r\n\t\t\ttest = tmp2.dot( tan2[ v ] );\r\n\t\t\tw = ( test < 0.0 ) ? -1.0 : 1.0;\r\n\r\n\t\t\ttangents[ v * 4 ] \t  = tmp.x;\r\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\r\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\r\n\t\t\ttangents[ v * 4 + 3 ] = w;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( j = 0, jl = offsets.length; j < jl; ++ j ) {\r\n\r\n\t\t\tvar start = offsets[ j ].start;\r\n\t\t\tvar count = offsets[ j ].count;\r\n\t\t\tvar index = offsets[ j ].index;\r\n\r\n\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\tiA = index + indices[ i ];\r\n\t\t\t\tiB = index + indices[ i + 1 ];\r\n\t\t\t\tiC = index + indices[ i + 2 ];\r\n\r\n\t\t\t\thandleVertex( iA );\r\n\t\t\t\thandleVertex( iB );\r\n\t\t\t\thandleVertex( iC );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.hasTangents = true;\r\n\t\tthis.tangentsNeedUpdate = true;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\nTHREE.Camera = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.matrixWorldInverse = new THREE.Matrix4();\r\n\r\n\tthis.projectionMatrix = new THREE.Matrix4();\r\n\tthis.projectionMatrixInverse = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Camera.prototype.lookAt = function ( vector ) {\r\n\r\n\t// TODO: Add hierarchy support.\r\n\r\n\tthis.matrix.lookAt( this.position, vector, this.up );\r\n\r\n\tif ( this.rotationAutoUpdate === true ) {\r\n\r\n\t\tif ( this.useQuaternion === false )  {\r\n\r\n\t\t\tthis.rotation.setEulerFromRotationMatrix( this.matrix, this.eulerOrder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.quaternion.copy( this.matrix.decompose()[ 1 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.left = left;\r\n\tthis.right = right;\r\n\tthis.top = top;\r\n\tthis.bottom = bottom;\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\r\nTHREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {\r\n\r\n\tthis.projectionMatrix.makeOrthographic( this.left, this.right, this.top, this.bottom, this.near, this.far );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author greggman / http://games.greggman.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.fov = fov !== undefined ? fov : 50;\r\n\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\tthis.near = near !== undefined ? near : 0.1;\r\n\tthis.far = far !== undefined ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\r\n\r\n/**\r\n * Uses Focal Length (in mm) to estimate and set FOV\r\n * 35mm (fullframe) camera is used if frame size is not specified;\r\n * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\r\n */\r\n\r\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {\r\n\r\n\tif ( frameHeight === undefined ) frameHeight = 24;\r\n\r\n\tthis.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\r\n\tthis.updateProjectionMatrix();\r\n\r\n}\r\n\r\n\r\n/**\r\n * Sets an offset in a larger frustum. This is useful for multi-window or\r\n * multi-monitor/multi-machine setups.\r\n *\r\n * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n * the monitors are in grid like this\r\n *\r\n *   +---+---+---+\r\n *   | A | B | C |\r\n *   +---+---+---+\r\n *   | D | E | F |\r\n *   +---+---+---+\r\n *\r\n * then for each monitor you would call it like this\r\n *\r\n *   var w = 1920;\r\n *   var h = 1080;\r\n *   var fullWidth = w * 3;\r\n *   var fullHeight = h * 2;\r\n *\r\n *   --A--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n *   --B--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n *   --C--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n *   --D--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n *   --E--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n *   --F--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n *\r\n *   Note there is no reason monitors have to be the same size or in a grid.\r\n */\r\n\r\nTHREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\tthis.fullWidth = fullWidth;\r\n\tthis.fullHeight = fullHeight;\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\n\r\nTHREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {\r\n\r\n\tif ( this.fullWidth ) {\r\n\r\n\t\tvar aspect = this.fullWidth / this.fullHeight;\r\n\t\tvar top = Math.tan( THREE.Math.degToRad( this.fov * 0.5 ) ) * this.near;\r\n\t\tvar bottom = -top;\r\n\t\tvar left = aspect * bottom;\r\n\t\tvar right = aspect * top;\r\n\t\tvar width = Math.abs( right - left );\r\n\t\tvar height = Math.abs( top - bottom );\r\n\r\n\t\tthis.projectionMatrix.makeFrustum(\r\n\t\t\tleft + this.x * width / this.fullWidth,\r\n\t\t\tleft + ( this.x + this.width ) * width / this.fullWidth,\r\n\t\t\ttop - ( this.y + this.height ) * height / this.fullHeight,\r\n\t\t\ttop - this.y * height / this.fullHeight,\r\n\t\t\tthis.near,\r\n\t\t\tthis.far\r\n\t\t);\r\n\r\n\t} else {\r\n\r\n\t\tthis.projectionMatrix.makePerspective( this.fov, this.aspect, this.near, this.far );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n \r\nTHREE.Light = function ( hex ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.color = new THREE.Color( hex );\r\n\r\n};\r\n\r\nTHREE.Light.prototype = Object.create( THREE.Object3D.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AmbientLight = function ( hex ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n};\r\n\r\nTHREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author MPanknin / http://www.redplant.de/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.AreaLight = function ( hex, intensity ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.normal = new THREE.Vector3( 0, -1, 0 );\r\n\tthis.right = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n\tthis.width = 1.0;\r\n\tthis.height = 1.0;\r\n\r\n\tthis.constantAttenuation = 1.5;\r\n\tthis.linearAttenuation = 0.5;\r\n\tthis.quadraticAttenuation = 0.1;\r\n\r\n};\r\n\r\nTHREE.AreaLight.prototype = Object.create( THREE.Light.prototype );\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DirectionalLight = function ( hex, intensity ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 1, 0 );\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.onlyShadow = false;\r\n\r\n\t//\r\n\r\n\tthis.shadowCameraNear = 50;\r\n\tthis.shadowCameraFar = 5000;\r\n\r\n\tthis.shadowCameraLeft = -500;\r\n\tthis.shadowCameraRight = 500;\r\n\tthis.shadowCameraTop = 500;\r\n\tthis.shadowCameraBottom = -500;\r\n\r\n\tthis.shadowCameraVisible = false;\r\n\r\n\tthis.shadowBias = 0;\r\n\tthis.shadowDarkness = 0.5;\r\n\r\n\tthis.shadowMapWidth = 512;\r\n\tthis.shadowMapHeight = 512;\r\n\r\n\t//\r\n\r\n\tthis.shadowCascade = false;\r\n\r\n\tthis.shadowCascadeOffset = new THREE.Vector3( 0, 0, -1000 );\r\n\tthis.shadowCascadeCount = 2;\r\n\r\n\tthis.shadowCascadeBias = [ 0, 0, 0 ];\r\n\tthis.shadowCascadeWidth = [ 512, 512, 512 ];\r\n\tthis.shadowCascadeHeight = [ 512, 512, 512 ];\r\n\r\n\tthis.shadowCascadeNearZ = [ -1.000, 0.990, 0.998 ];\r\n\tthis.shadowCascadeFarZ  = [  0.990, 0.998, 1.000 ];\r\n\r\n\tthis.shadowCascadeArray = [];\r\n\r\n\t//\r\n\r\n\tthis.shadowMap = null;\r\n\tthis.shadowMapSize = null;\r\n\tthis.shadowCamera = null;\r\n\tthis.shadowMatrix = null;\r\n\r\n};\r\n\r\nTHREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.HemisphereLight = function ( skyColorHex, groundColorHex, intensity ) {\r\n\r\n\tTHREE.Light.call( this, skyColorHex );\r\n\r\n\tthis.groundColor = new THREE.Color( groundColorHex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 100, 0 );\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n};\r\n\r\nTHREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.PointLight = function ( hex, intensity, distance ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 0, 0 );\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\r\n};\r\n\r\nTHREE.PointLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpotLight = function ( hex, intensity, distance, angle, exponent ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 1, 0 );\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 2;\r\n\tthis.exponent = ( exponent !== undefined ) ? exponent : 10;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.onlyShadow = false;\r\n\r\n\t//\r\n\r\n\tthis.shadowCameraNear = 50;\r\n\tthis.shadowCameraFar = 5000;\r\n\tthis.shadowCameraFov = 50;\r\n\r\n\tthis.shadowCameraVisible = false;\r\n\r\n\tthis.shadowBias = 0;\r\n\tthis.shadowDarkness = 0.5;\r\n\r\n\tthis.shadowMapWidth = 512;\r\n\tthis.shadowMapHeight = 512;\r\n\r\n\t//\r\n\r\n\tthis.shadowMap = null;\r\n\tthis.shadowMapSize = null;\r\n\tthis.shadowCamera = null;\r\n\tthis.shadowMatrix = null;\r\n\r\n};\r\n\r\nTHREE.SpotLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Loader = function ( showStatus ) {\r\n\r\n\tthis.showStatus = showStatus;\r\n\tthis.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;\r\n\r\n\tthis.onLoadStart = function () {};\r\n\tthis.onLoadProgress = function () {};\r\n\tthis.onLoadComplete = function () {};\r\n\r\n};\r\n\r\nTHREE.Loader.prototype = {\r\n\r\n\tconstructor: THREE.Loader,\r\n\r\n\tcrossOrigin: 'anonymous',\r\n\r\n\taddStatusElement: function () {\r\n\r\n\t\tvar e = document.createElement( \"div\" );\r\n\r\n\t\te.style.position = \"absolute\";\r\n\t\te.style.right = \"0px\";\r\n\t\te.style.top = \"0px\";\r\n\t\te.style.fontSize = \"0.8em\";\r\n\t\te.style.textAlign = \"left\";\r\n\t\te.style.background = \"rgba(0,0,0,0.25)\";\r\n\t\te.style.color = \"#fff\";\r\n\t\te.style.width = \"120px\";\r\n\t\te.style.padding = \"0.5em 0.5em 0.5em 0.5em\";\r\n\t\te.style.zIndex = 1000;\r\n\r\n\t\te.innerHTML = \"Loading ...\";\r\n\r\n\t\treturn e;\r\n\r\n\t},\r\n\r\n\tupdateProgress: function ( progress ) {\r\n\r\n\t\tvar message = \"Loaded \";\r\n\r\n\t\tif ( progress.total ) {\r\n\r\n\t\t\tmessage += ( 100 * progress.loaded / progress.total ).toFixed(0) + \"%\";\r\n\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmessage += ( progress.loaded / 1000 ).toFixed(2) + \" KB\";\r\n\r\n\t\t}\r\n\r\n\t\tthis.statusDomElement.innerHTML = message;\r\n\r\n\t},\r\n\r\n\textractUrlBase: function ( url ) {\r\n\r\n\t\tvar parts = url.split( '/' );\r\n\t\tparts.pop();\r\n\t\treturn ( parts.length < 1 ? '.' : parts.join( '/' ) ) + '/';\r\n\r\n\t},\r\n\r\n\tinitMaterials: function ( materials, texturePath ) {\r\n\r\n\t\tvar array = [];\r\n\r\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\r\n\r\n\t\t\tarray[ i ] = THREE.Loader.prototype.createMaterial( materials[ i ], texturePath );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tneedsTangents: function ( materials ) {\r\n\r\n\t\tfor( var i = 0, il = materials.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar m = materials[ i ];\r\n\r\n\t\t\tif ( m instanceof THREE.ShaderMaterial ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tcreateMaterial: function ( m, texturePath ) {\r\n\r\n\t\tvar _this = this;\r\n\r\n\t\tfunction is_pow2( n ) {\r\n\r\n\t\t\tvar l = Math.log( n ) / Math.LN2;\r\n\t\t\treturn Math.floor( l ) == l;\r\n\r\n\t\t}\r\n\r\n\t\tfunction nearest_pow2( n ) {\r\n\r\n\t\t\tvar l = Math.log( n ) / Math.LN2;\r\n\t\t\treturn Math.pow( 2, Math.round(  l ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction load_image( where, url ) {\r\n\r\n\t\t\tvar image = new Image();\r\n\r\n\t\t\timage.onload = function () {\r\n\r\n\t\t\t\tif ( !is_pow2( this.width ) || !is_pow2( this.height ) ) {\r\n\r\n\t\t\t\t\tvar width = nearest_pow2( this.width );\r\n\t\t\t\t\tvar height = nearest_pow2( this.height );\r\n\r\n\t\t\t\t\twhere.image.width = width;\r\n\t\t\t\t\twhere.image.height = height;\r\n\t\t\t\t\twhere.image.getContext( '2d' ).drawImage( this, 0, 0, width, height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\twhere.image = this;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhere.needsUpdate = true;\r\n\r\n\t\t\t};\r\n\r\n\t\t\timage.crossOrigin = _this.crossOrigin;\r\n\t\t\timage.src = url;\r\n\r\n\t\t}\r\n\r\n\t\tfunction create_texture( where, name, sourceFile, repeat, offset, wrap, anisotropy ) {\r\n\r\n\t\t\tvar isCompressed = sourceFile.toLowerCase().endsWith( \".dds\" );\r\n\t\t\tvar fullPath = texturePath + \"/\" + sourceFile;\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\tvar texture = THREE.ImageUtils.loadCompressedTexture( fullPath );\r\n\r\n\t\t\t\twhere[ name ] = texture;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar texture = document.createElement( 'canvas' );\r\n\r\n\t\t\t\twhere[ name ] = new THREE.Texture( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhere[ name ].sourceFile = sourceFile;\r\n\r\n\t\t\tif( repeat ) {\r\n\r\n\t\t\t\twhere[ name ].repeat.set( repeat[ 0 ], repeat[ 1 ] );\r\n\r\n\t\t\t\tif ( repeat[ 0 ] !== 1 ) where[ name ].wrapS = THREE.RepeatWrapping;\r\n\t\t\t\tif ( repeat[ 1 ] !== 1 ) where[ name ].wrapT = THREE.RepeatWrapping;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset ) {\r\n\r\n\t\t\t\twhere[ name ].offset.set( offset[ 0 ], offset[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( wrap ) {\r\n\r\n\t\t\t\tvar wrapMap = {\r\n\t\t\t\t\t\"repeat\": THREE.RepeatWrapping,\r\n\t\t\t\t\t\"mirror\": THREE.MirroredRepeatWrapping\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( wrapMap[ wrap[ 0 ] ] !== undefined ) where[ name ].wrapS = wrapMap[ wrap[ 0 ] ];\r\n\t\t\t\tif ( wrapMap[ wrap[ 1 ] ] !== undefined ) where[ name ].wrapT = wrapMap[ wrap[ 1 ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( anisotropy ) {\r\n\r\n\t\t\t\twhere[ name ].anisotropy = anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! isCompressed ) {\r\n\r\n\t\t\t\tload_image( where[ name ], fullPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction rgb2hex( rgb ) {\r\n\r\n\t\t\treturn ( rgb[ 0 ] * 255 << 16 ) + ( rgb[ 1 ] * 255 << 8 ) + rgb[ 2 ] * 255;\r\n\r\n\t\t}\r\n\r\n\t\t// defaults\r\n\r\n\t\tvar mtype = \"MeshLambertMaterial\";\r\n\t\tvar mpars = { color: 0xeeeeee, opacity: 1.0, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: false };\r\n\r\n\t\t// parameters from model file\r\n\r\n\t\tif ( m.shading ) {\r\n\r\n\t\t\tvar shading = m.shading.toLowerCase();\r\n\r\n\t\t\tif ( shading === \"phong\" ) mtype = \"MeshPhongMaterial\";\r\n\t\t\telse if ( shading === \"basic\" ) mtype = \"MeshBasicMaterial\";\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.blending !== undefined && THREE[ m.blending ] !== undefined ) {\r\n\r\n\t\t\tmpars.blending = THREE[ m.blending ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.transparent !== undefined || m.opacity < 1.0 ) {\r\n\r\n\t\t\tmpars.transparent = m.transparent;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.depthTest !== undefined ) {\r\n\r\n\t\t\tmpars.depthTest = m.depthTest;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.depthWrite !== undefined ) {\r\n\r\n\t\t\tmpars.depthWrite = m.depthWrite;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.visible !== undefined ) {\r\n\r\n\t\t\tmpars.visible = m.visible;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.flipSided !== undefined ) {\r\n\r\n\t\t\tmpars.side = THREE.BackSide;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.doubleSided !== undefined ) {\r\n\r\n\t\t\tmpars.side = THREE.DoubleSide;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.wireframe !== undefined ) {\r\n\r\n\t\t\tmpars.wireframe = m.wireframe;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.vertexColors !== undefined ) {\r\n\r\n\t\t\tif ( m.vertexColors === \"face\" ) {\r\n\r\n\t\t\t\tmpars.vertexColors = THREE.FaceColors;\r\n\r\n\t\t\t} else if ( m.vertexColors ) {\r\n\r\n\t\t\t\tmpars.vertexColors = THREE.VertexColors;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// colors\r\n\r\n\t\tif ( m.colorDiffuse ) {\r\n\r\n\t\t\tmpars.color = rgb2hex( m.colorDiffuse );\r\n\r\n\t\t} else if ( m.DbgColor ) {\r\n\r\n\t\t\tmpars.color = m.DbgColor;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.colorSpecular ) {\r\n\r\n\t\t\tmpars.specular = rgb2hex( m.colorSpecular );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.colorAmbient ) {\r\n\r\n\t\t\tmpars.ambient = rgb2hex( m.colorAmbient );\r\n\r\n\t\t}\r\n\r\n\t\t// modifiers\r\n\r\n\t\tif ( m.transparency ) {\r\n\r\n\t\t\tmpars.opacity = m.transparency;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.specularCoef ) {\r\n\r\n\t\t\tmpars.shininess = m.specularCoef;\r\n\r\n\t\t}\r\n\r\n\t\t// textures\r\n\r\n\t\tif ( m.mapDiffuse && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"map\", m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapLight && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"lightMap\", m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapBump && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"bumpMap\", m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapNormal && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"normalMap\", m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapSpecular && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"specularMap\", m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( m.mapBumpScale ) {\r\n\r\n\t\t\tmpars.bumpScale = m.mapBumpScale;\r\n\r\n\t\t}\r\n\r\n\t\t// special case for normal mapped material\r\n\r\n\t\tif ( m.mapNormal ) {\r\n\r\n\t\t\tvar shader = THREE.ShaderLib[ \"normalmap\" ];\r\n\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\t\tuniforms[ \"tNormal\" ].value = mpars.normalMap;\r\n\r\n\t\t\tif ( m.mapNormalFactor ) {\r\n\r\n\t\t\t\tuniforms[ \"uNormalScale\" ].value.set( m.mapNormalFactor, m.mapNormalFactor );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mpars.map ) {\r\n\r\n\t\t\t\tuniforms[ \"tDiffuse\" ].value = mpars.map;\r\n\t\t\t\tuniforms[ \"enableDiffuse\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mpars.specularMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tSpecular\" ].value = mpars.specularMap;\r\n\t\t\t\tuniforms[ \"enableSpecular\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mpars.lightMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tAO\" ].value = mpars.lightMap;\r\n\t\t\t\tuniforms[ \"enableAO\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// for the moment don't handle displacement texture\r\n\r\n\t\t\tuniforms[ \"uDiffuseColor\" ].value.setHex( mpars.color );\r\n\t\t\tuniforms[ \"uSpecularColor\" ].value.setHex( mpars.specular );\r\n\t\t\tuniforms[ \"uAmbientColor\" ].value.setHex( mpars.ambient );\r\n\r\n\t\t\tuniforms[ \"uShininess\" ].value = mpars.shininess;\r\n\r\n\t\t\tif ( mpars.opacity !== undefined ) {\r\n\r\n\t\t\t\tuniforms[ \"uOpacity\" ].value = mpars.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };\r\n\t\t\tvar material = new THREE.ShaderMaterial( parameters );\r\n\r\n\t\t\tif ( mpars.transparent ) {\r\n\r\n\t\t\t\tmaterial.transparent = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar material = new THREE[ mtype ]( mpars );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.DbgName !== undefined ) material.name = m.DbgName;\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ImageLoader = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.crossOrigin = null;\r\n\r\n};\r\n\r\nTHREE.ImageLoader.prototype = {\r\n\r\n\tconstructor: THREE.ImageLoader,\r\n\r\n\tload: function ( url, image ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tif ( image === undefined ) image = new Image();\r\n\r\n\t\timage.addEventListener( 'load', function () {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'load', content: image } );\r\n\r\n\t\t}, false );\r\n\r\n\t\timage.addEventListener( 'error', function () {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'error', message: 'Couldn\\'t load URL [' + url + ']' } );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( scope.crossOrigin ) image.crossOrigin = scope.crossOrigin;\r\n\r\n\t\timage.src = url;\r\n\r\n\t}\r\n\r\n}\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.JSONLoader = function ( showStatus ) {\r\n\r\n\tTHREE.Loader.call( this, showStatus );\r\n\r\n\tthis.withCredentials = false;\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype = Object.create( THREE.Loader.prototype );\r\n\r\nTHREE.JSONLoader.prototype.load = function ( url, callback, texturePath ) {\r\n\r\n\tvar scope = this;\r\n\r\n\t// todo: unify load API to for easier SceneLoader use\r\n\r\n\ttexturePath = texturePath && ( typeof texturePath === \"string\" ) ? texturePath : this.extractUrlBase( url );\r\n\r\n\tthis.onLoadStart();\r\n\tthis.loadAjaxJSON( this, url, callback, texturePath );\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, callbackProgress ) {\r\n\r\n\tvar xhr = new XMLHttpRequest();\r\n\r\n\tvar length = 0;\r\n\r\n\txhr.onreadystatechange = function () {\r\n\r\n\t\tif ( xhr.readyState === xhr.DONE ) {\r\n\r\n\t\t\tif ( xhr.status === 200 || xhr.status === 0 ) {\r\n\r\n\t\t\t\tif ( xhr.responseText ) {\r\n\r\n\t\t\t\t\tvar json = JSON.parse( xhr.responseText );\r\n\t\t\t\t\tcontext.createModel( json, callback, texturePath );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.JSONLoader: [\" + url + \"] seems to be unreachable or file there is empty\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// in context of more complex asset initialization\r\n\t\t\t\t// do not block on single failed file\r\n\t\t\t\t// maybe should go even one more level up\r\n\r\n\t\t\t\tcontext.onLoadComplete();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( \"THREE.JSONLoader: Couldn't load [\" + url + \"] [\" + xhr.status + \"]\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( xhr.readyState === xhr.LOADING ) {\r\n\r\n\t\t\tif ( callbackProgress ) {\r\n\r\n\t\t\t\tif ( length === 0 ) {\r\n\r\n\t\t\t\t\tlength = xhr.getResponseHeader( \"Content-Length\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallbackProgress( { total: length, loaded: xhr.responseText.length } );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( xhr.readyState === xhr.HEADERS_RECEIVED ) {\r\n\r\n\t\t\tlength = xhr.getResponseHeader( \"Content-Length\" );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\txhr.open( \"GET\", url, true );\r\n\txhr.withCredentials = this.withCredentials;\r\n\txhr.send( null );\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype.createModel = function ( json, callback, texturePath ) {\r\n\r\n\tvar scope = this,\r\n\tgeometry = new THREE.Geometry(),\r\n\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\r\n\r\n\tparseModel( scale );\r\n\r\n\tparseSkin();\r\n\tparseMorphing( scale );\r\n\r\n\tgeometry.computeCentroids();\r\n\tgeometry.computeFaceNormals();\r\n\r\n\tfunction parseModel( scale ) {\r\n\r\n\t\tfunction isBitSet( value, position ) {\r\n\r\n\t\t\treturn value & ( 1 << position );\r\n\r\n\t\t}\r\n\r\n\t\tvar i, j, fi,\r\n\r\n\t\toffset, zLength, nVertices,\r\n\r\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\r\n\r\n\t\ttype,\r\n\t\tisQuad,\r\n\t\thasMaterial,\r\n\t\thasFaceUv, hasFaceVertexUv,\r\n\t\thasFaceNormal, hasFaceVertexNormal,\r\n\t\thasFaceColor, hasFaceVertexColor,\r\n\r\n\t\tvertex, face, color, normal,\r\n\r\n\t\tuvLayer, uvs, u, v,\r\n\r\n\t\tfaces = json.faces,\r\n\t\tvertices = json.vertices,\r\n\t\tnormals = json.normals,\r\n\t\tcolors = json.colors,\r\n\r\n\t\tnUvLayers = 0;\r\n\r\n\t\t// disregard empty arrays\r\n\r\n\t\tfor ( i = 0; i < json.uvs.length; i++ ) {\r\n\r\n\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0; i < nUvLayers; i++ ) {\r\n\r\n\t\t\tgeometry.faceUvs[ i ] = [];\r\n\t\t\tgeometry.faceVertexUvs[ i ] = [];\r\n\r\n\t\t}\r\n\r\n\t\toffset = 0;\r\n\t\tzLength = vertices.length;\r\n\r\n\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\tvertex = new THREE.Vector3();\r\n\r\n\t\t\tvertex.x = vertices[ offset ++ ] * scale;\r\n\t\t\tvertex.y = vertices[ offset ++ ] * scale;\r\n\t\t\tvertex.z = vertices[ offset ++ ] * scale;\r\n\r\n\t\t\tgeometry.vertices.push( vertex );\r\n\r\n\t\t}\r\n\r\n\t\toffset = 0;\r\n\t\tzLength = faces.length;\r\n\r\n\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\ttype = faces[ offset ++ ];\r\n\r\n\r\n\t\t\tisQuad          \t= isBitSet( type, 0 );\r\n\t\t\thasMaterial         = isBitSet( type, 1 );\r\n\t\t\thasFaceUv           = isBitSet( type, 2 );\r\n\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\r\n\t\t\thasFaceNormal       = isBitSet( type, 4 );\r\n\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\r\n\t\t\thasFaceColor\t    = isBitSet( type, 6 );\r\n\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\r\n\r\n\t\t\t//console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceUv, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\r\n\r\n\t\t\tif ( isQuad ) {\r\n\r\n\t\t\t\tface = new THREE.Face4();\r\n\r\n\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\tface.c = faces[ offset ++ ];\r\n\t\t\t\tface.d = faces[ offset ++ ];\r\n\r\n\t\t\t\tnVertices = 4;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface = new THREE.Face3();\r\n\r\n\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\tface.c = faces[ offset ++ ];\r\n\r\n\t\t\t\tnVertices = 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\tif ( hasFaceUv ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nUvLayers; i++ ) {\r\n\r\n\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\tgeometry.faceUvs[ i ][ fi ] = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nUvLayers; i++ ) {\r\n\r\n\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\tuvs = [];\r\n\r\n\t\t\t\t\tfor ( j = 0; j < nVertices; j ++ ) {\r\n\r\n\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\tuvs[ j ] = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = uvs;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\tnormal = new THREE.Vector3();\r\n\r\n\t\t\t\tnormal.x = normals[ normalIndex ++ ];\r\n\t\t\t\tnormal.y = normals[ normalIndex ++ ];\r\n\t\t\t\tnormal.z = normals[ normalIndex ];\r\n\r\n\t\t\t\tface.normal = normal;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nVertices; i++ ) {\r\n\r\n\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\tnormal = new THREE.Vector3();\r\n\r\n\t\t\t\t\tnormal.x = normals[ normalIndex ++ ];\r\n\t\t\t\t\tnormal.y = normals[ normalIndex ++ ];\r\n\t\t\t\t\tnormal.z = normals[ normalIndex ];\r\n\r\n\t\t\t\t\tface.vertexNormals.push( normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\tcolor = new THREE.Color( colors[ colorIndex ] );\r\n\t\t\t\tface.color = color;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nVertices; i++ ) {\r\n\r\n\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tcolor = new THREE.Color( colors[ colorIndex ] );\r\n\t\t\t\t\tface.vertexColors.push( color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.faces.push( face );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction parseSkin() {\r\n\r\n\t\tvar i, l, x, y, z, w, a, b, c, d;\r\n\r\n\t\tif ( json.skinWeights ) {\r\n\r\n\t\t\tfor ( i = 0, l = json.skinWeights.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\tx = json.skinWeights[ i     ];\r\n\t\t\t\ty = json.skinWeights[ i + 1 ];\r\n\t\t\t\tz = 0;\r\n\t\t\t\tw = 0;\r\n\r\n\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.skinIndices ) {\r\n\r\n\t\t\tfor ( i = 0, l = json.skinIndices.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\ta = json.skinIndices[ i     ];\r\n\t\t\t\tb = json.skinIndices[ i + 1 ];\r\n\t\t\t\tc = 0;\r\n\t\t\t\td = 0;\r\n\r\n\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.bones = json.bones;\r\n\t\tgeometry.animation = json.animation;\r\n\r\n\t};\r\n\r\n\tfunction parseMorphing( scale ) {\r\n\r\n\t\tif ( json.morphTargets !== undefined ) {\r\n\r\n\t\t\tvar i, l, v, vl, dstVertices, srcVertices;\r\n\r\n\t\t\tfor ( i = 0, l = json.morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tgeometry.morphTargets[ i ] = {};\r\n\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\r\n\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\r\n\r\n\t\t\t\tdstVertices = geometry.morphTargets[ i ].vertices;\r\n\t\t\t\tsrcVertices = json.morphTargets [ i ].vertices;\r\n\r\n\t\t\t\tfor( v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\r\n\r\n\t\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\r\n\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\r\n\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\r\n\r\n\t\t\t\t\tdstVertices.push( vertex );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.morphColors !== undefined ) {\r\n\r\n\t\t\tvar i, l, c, cl, dstColors, srcColors, color;\r\n\r\n\t\t\tfor ( i = 0, l = json.morphColors.length; i < l; i++ ) {\r\n\r\n\t\t\t\tgeometry.morphColors[ i ] = {};\r\n\t\t\t\tgeometry.morphColors[ i ].name = json.morphColors[ i ].name;\r\n\t\t\t\tgeometry.morphColors[ i ].colors = [];\r\n\r\n\t\t\t\tdstColors = geometry.morphColors[ i ].colors;\r\n\t\t\t\tsrcColors = json.morphColors [ i ].colors;\r\n\r\n\t\t\t\tfor ( c = 0, cl = srcColors.length; c < cl; c += 3 ) {\r\n\r\n\t\t\t\t\tcolor = new THREE.Color( 0xffaa00 );\r\n\t\t\t\t\tcolor.setRGB( srcColors[ c ], srcColors[ c + 1 ], srcColors[ c + 2 ] );\r\n\t\t\t\t\tdstColors.push( color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar materials = this.initMaterials( json.materials, texturePath );\r\n\r\n\tif ( this.needsTangents( materials ) ) geometry.computeTangents();\r\n\r\n\tcallback( geometry, materials );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LoadingMonitor = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tvar loaded = 0;\r\n\tvar total = 0;\r\n\r\n\tvar onLoad = function ( event ) {\r\n\r\n\t\tloaded ++;\r\n\r\n\t\tscope.dispatchEvent( { type: 'progress', loaded: loaded, total: total } );\r\n\r\n\t\tif ( loaded === total ) {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'load' } );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.add = function ( loader ) {\r\n\r\n\t\ttotal ++;\r\n\r\n\t\tloader.addEventListener( 'load', onLoad, false );\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SceneLoader = function () {\r\n\r\n\tthis.onLoadStart = function () {};\r\n\tthis.onLoadProgress = function() {};\r\n\tthis.onLoadComplete = function () {};\r\n\r\n\tthis.callbackSync = function () {};\r\n\tthis.callbackProgress = function () {};\r\n\r\n\tthis.geometryHandlerMap = {};\r\n\tthis.hierarchyHandlerMap = {};\r\n\r\n\tthis.addGeometryHandler( \"ascii\", THREE.JSONLoader );\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.constructor = THREE.SceneLoader;\r\n\r\nTHREE.SceneLoader.prototype.load = function ( url, callbackFinished ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar xhr = new XMLHttpRequest();\r\n\r\n\txhr.onreadystatechange = function () {\r\n\r\n\t\tif ( xhr.readyState === 4 ) {\r\n\r\n\t\t\tif ( xhr.status === 200 || xhr.status === 0 ) {\r\n\r\n\t\t\t\tvar json = JSON.parse( xhr.responseText );\r\n\t\t\t\tscope.parse( json, callbackFinished, url );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( \"THREE.SceneLoader: Couldn't load [\" + url + \"] [\" + xhr.status + \"]\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\txhr.open( \"GET\", url, true );\r\n\txhr.send( null );\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.addGeometryHandler = function ( typeID, loaderClass ) {\r\n\r\n\tthis.geometryHandlerMap[ typeID ] = { \"loaderClass\": loaderClass };\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.addHierarchyHandler = function ( typeID, loaderClass ) {\r\n\r\n\tthis.hierarchyHandlerMap[ typeID ] = { \"loaderClass\": loaderClass };\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.parse = function ( json, callbackFinished, url ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar urlBase = THREE.Loader.prototype.extractUrlBase( url );\r\n\r\n\tvar geometry, material, camera, fog,\r\n\t\ttexture, images, color,\r\n\t\tlight, hex, intensity,\r\n\t\tcounter_models, counter_textures,\r\n\t\ttotal_models, total_textures,\r\n\t\tresult;\r\n\r\n\tvar target_array = [];\r\n\r\n\tvar data = json;\r\n\r\n\t// async geometry loaders\r\n\r\n\tfor ( var typeID in this.geometryHandlerMap ) {\r\n\r\n\t\tvar loaderClass = this.geometryHandlerMap[ typeID ][ \"loaderClass\" ];\r\n\t\tthis.geometryHandlerMap[ typeID ][ \"loaderObject\" ] = new loaderClass();\r\n\r\n\t}\r\n\r\n\t// async hierachy loaders\r\n\r\n\tfor ( var typeID in this.hierarchyHandlerMap ) {\r\n\r\n\t\tvar loaderClass = this.hierarchyHandlerMap[ typeID ][ \"loaderClass\" ];\r\n\t\tthis.hierarchyHandlerMap[ typeID ][ \"loaderObject\" ] = new loaderClass();\r\n\r\n\t}\r\n\r\n\tcounter_models = 0;\r\n\tcounter_textures = 0;\r\n\r\n\tresult = {\r\n\r\n\t\tscene: new THREE.Scene(),\r\n\t\tgeometries: {},\r\n\t\tface_materials: {},\r\n\t\tmaterials: {},\r\n\t\ttextures: {},\r\n\t\tobjects: {},\r\n\t\tcameras: {},\r\n\t\tlights: {},\r\n\t\tfogs: {},\r\n\t\tempties: {},\r\n\t\tgroups: {}\r\n\r\n\t};\r\n\r\n\tif ( data.transform ) {\r\n\r\n\t\tvar position = data.transform.position,\r\n\t\t\trotation = data.transform.rotation,\r\n\t\t\tscale = data.transform.scale;\r\n\r\n\t\tif ( position )\r\n\t\t\tresult.scene.position.set( position[ 0 ], position[ 1 ], position [ 2 ] );\r\n\r\n\t\tif ( rotation )\r\n\t\t\tresult.scene.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation [ 2 ] );\r\n\r\n\t\tif ( scale )\r\n\t\t\tresult.scene.scale.set( scale[ 0 ], scale[ 1 ], scale [ 2 ] );\r\n\r\n\t\tif ( position || rotation || scale ) {\r\n\r\n\t\t\tresult.scene.updateMatrix();\r\n\t\t\tresult.scene.updateMatrixWorld();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction get_url( source_url, url_type ) {\r\n\r\n\t\tif ( url_type == \"relativeToHTML\" ) {\r\n\r\n\t\t\treturn source_url;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn urlBase + \"/\" + source_url;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// toplevel loader function, delegates to handle_children\r\n\r\n\tfunction handle_objects() {\r\n\r\n\t\thandle_children( result.scene, data.objects );\r\n\r\n\t}\r\n\r\n\t// handle all the children from the loaded json and attach them to given parent\r\n\r\n\tfunction handle_children( parent, children ) {\r\n\r\n\t\tvar mat, dst, pos, rot, scl, quat;\r\n\r\n\t\tfor ( var objID in children ) {\r\n\r\n\t\t\t// check by id if child has already been handled,\r\n\t\t\t// if not, create new object\r\n\r\n\t\t\tif ( result.objects[ objID ] === undefined ) {\r\n\r\n\t\t\t\tvar objJSON = children[ objID ];\r\n\r\n\t\t\t\tvar object = null;\r\n\r\n\t\t\t\t// meshes\r\n\r\n\t\t\t\tif ( objJSON.type && ( objJSON.type in scope.hierarchyHandlerMap ) ) {\r\n\r\n\t\t\t\t\tif ( objJSON.loading === undefined ) {\r\n\r\n\t\t\t\t\t\tvar reservedTypes = { \"type\": 1, \"url\": 1, \"material\": 1,\r\n\t\t\t\t\t\t\t\t\t\t\t  \"position\": 1, \"rotation\": 1, \"scale\" : 1,\r\n\t\t\t\t\t\t\t\t\t\t\t  \"visible\": 1, \"children\": 1, \"properties\": 1,\r\n\t\t\t\t\t\t\t\t\t\t\t  \"skin\": 1, \"morph\": 1, \"mirroredLoop\": 1, \"duration\": 1 };\r\n\r\n\t\t\t\t\t\tvar loaderParameters = {};\r\n\r\n\t\t\t\t\t\tfor ( var parType in objJSON ) {\r\n\r\n\t\t\t\t\t\t\tif ( ! ( parType in reservedTypes ) ) {\r\n\r\n\t\t\t\t\t\t\t\tloaderParameters[ parType ] = objJSON[ parType ];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterial = result.materials[ objJSON.material ];\r\n\r\n\t\t\t\t\t\tobjJSON.loading = true;\r\n\r\n\t\t\t\t\t\tvar loader = scope.hierarchyHandlerMap[ objJSON.type ][ \"loaderObject\" ];\r\n\r\n\t\t\t\t\t\t// ColladaLoader\r\n\r\n\t\t\t\t\t\tif ( loader.options ) {\r\n\r\n\t\t\t\t\t\t\tloader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );\r\n\r\n\t\t\t\t\t\t// UTF8Loader\r\n\t\t\t\t\t\t// OBJLoader\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tloader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ), loaderParameters );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( objJSON.geometry !== undefined ) {\r\n\r\n\t\t\t\t\tgeometry = result.geometries[ objJSON.geometry ];\r\n\r\n\t\t\t\t\t// geometry already loaded\r\n\r\n\t\t\t\t\tif ( geometry ) {\r\n\r\n\t\t\t\t\t\tvar needsTangents = false;\r\n\r\n\t\t\t\t\t\tmaterial = result.materials[ objJSON.material ];\r\n\t\t\t\t\t\tneedsTangents = material instanceof THREE.ShaderMaterial;\r\n\r\n\t\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\t\trot = objJSON.rotation;\r\n\t\t\t\t\t\tscl = objJSON.scale;\r\n\t\t\t\t\t\tmat = objJSON.matrix;\r\n\t\t\t\t\t\tquat = objJSON.quaternion;\r\n\r\n\t\t\t\t\t\t// use materials from the model file\r\n\t\t\t\t\t\t// if there is no material specified in the object\r\n\r\n\t\t\t\t\t\tif ( ! objJSON.material ) {\r\n\r\n\t\t\t\t\t\t\tmaterial = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// use materials from the model file\r\n\t\t\t\t\t\t// if there is just empty face material\r\n\t\t\t\t\t\t// (must create new material as each model has its own face material)\r\n\r\n\t\t\t\t\t\tif ( ( material instanceof THREE.MeshFaceMaterial ) && material.materials.length === 0 ) {\r\n\r\n\t\t\t\t\t\t\tmaterial = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( material instanceof THREE.MeshFaceMaterial ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < material.materials.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tneedsTangents = needsTangents || ( material.materials[ i ] instanceof THREE.ShaderMaterial );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( needsTangents ) {\r\n\r\n\t\t\t\t\t\t\tgeometry.computeTangents();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( objJSON.skin ) {\r\n\r\n\t\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\t\t\t} else if ( objJSON.morph ) {\r\n\r\n\t\t\t\t\t\t\tobject = new THREE.MorphAnimMesh( geometry, material );\r\n\r\n\t\t\t\t\t\t\tif ( objJSON.duration !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.duration = objJSON.duration;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( objJSON.time !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.time = objJSON.time;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( objJSON.mirroredLoop !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.mirroredLoop = objJSON.mirroredLoop;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.computeMorphNormals();\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tobject.name = objID;\r\n\r\n\t\t\t\t\t\tif ( mat ) {\r\n\r\n\t\t\t\t\t\t\tobject.matrixAutoUpdate = false;\r\n\t\t\t\t\t\t\tobject.matrix.set(\r\n\t\t\t\t\t\t\t\tmat[0],  mat[1],  mat[2],  mat[3],\r\n\t\t\t\t\t\t\t\tmat[4],  mat[5],  mat[6],  mat[7],\r\n\t\t\t\t\t\t\t\tmat[8],  mat[9],  mat[10], mat[11],\r\n\t\t\t\t\t\t\t\tmat[12], mat[13], mat[14], mat[15]\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tobject.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\t\t\tif ( quat ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.quaternion.set( quat[0], quat[1], quat[2], quat[3] );\r\n\t\t\t\t\t\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tobject.rotation.set( rot[0], rot[1], rot[2] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tobject.scale.set( scl[0], scl[1], scl[2] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tobject.visible = objJSON.visible;\r\n\t\t\t\t\t\tobject.castShadow = objJSON.castShadow;\r\n\t\t\t\t\t\tobject.receiveShadow = objJSON.receiveShadow;\r\n\r\n\t\t\t\t\t\tparent.add( object );\r\n\r\n\t\t\t\t\t\tresult.objects[ objID ] = object;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t// lights\r\n\r\n\t\t\t\t} else if ( objJSON.type === \"DirectionalLight\" || objJSON.type === \"PointLight\" || objJSON.type === \"AmbientLight\" ) {\r\n\r\n\t\t\t\t\thex = ( objJSON.color !== undefined ) ? objJSON.color : 0xffffff;\r\n\t\t\t\t\tintensity = ( objJSON.intensity !== undefined ) ? objJSON.intensity : 1;\r\n\r\n\t\t\t\t\tif ( objJSON.type === \"DirectionalLight\" ) {\r\n\r\n\t\t\t\t\t\tpos = objJSON.direction;\r\n\r\n\t\t\t\t\t\tlight = new THREE.DirectionalLight( hex, intensity );\r\n\t\t\t\t\t\tlight.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\t\tif ( objJSON.target ) {\r\n\r\n\t\t\t\t\t\t\ttarget_array.push( { \"object\": light, \"targetName\" : objJSON.target } );\r\n\r\n\t\t\t\t\t\t\t// kill existing default target\r\n\t\t\t\t\t\t\t// otherwise it gets added to scene when parent gets added\r\n\r\n\t\t\t\t\t\t\tlight.target = null;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( objJSON.type === \"PointLight\" ) {\r\n\r\n\t\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\t\tdst = objJSON.distance;\r\n\r\n\t\t\t\t\t\tlight = new THREE.PointLight( hex, intensity, dst );\r\n\t\t\t\t\t\tlight.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\t} else if ( objJSON.type === \"AmbientLight\" ) {\r\n\r\n\t\t\t\t\t\tlight = new THREE.AmbientLight( hex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tparent.add( light );\r\n\r\n\t\t\t\t\tlight.name = objID;\r\n\t\t\t\t\tresult.lights[ objID ] = light;\r\n\t\t\t\t\tresult.objects[ objID ] = light;\r\n\r\n\t\t\t\t// cameras\r\n\r\n\t\t\t\t} else if ( objJSON.type === \"PerspectiveCamera\" || objJSON.type === \"OrthographicCamera\" ) {\r\n\r\n\t\t\t\t\tif ( objJSON.type === \"PerspectiveCamera\" ) {\r\n\r\n\t\t\t\t\t\tcamera = new THREE.PerspectiveCamera( objJSON.fov, objJSON.aspect, objJSON.near, objJSON.far );\r\n\r\n\t\t\t\t\t} else if ( objJSON.type === \"OrthographicCamera\" ) {\r\n\r\n\t\t\t\t\t\tcamera = new THREE.OrthographicCamera( objJSON.left, objJSON.right, objJSON.top, objJSON.bottom, objJSON.near, objJSON.far );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\tcamera.position.set( pos[0], pos[1], pos[2] );\r\n\t\t\t\t\tparent.add( camera );\r\n\r\n\t\t\t\t\tcamera.name = objID;\r\n\t\t\t\t\tresult.cameras[ objID ] = camera;\r\n\t\t\t\t\tresult.objects[ objID ] = camera;\r\n\r\n\t\t\t\t// pure Object3D\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\trot = objJSON.rotation;\r\n\t\t\t\t\tscl = objJSON.scale;\r\n\t\t\t\t\tquat = objJSON.quaternion;\r\n\r\n\t\t\t\t\tobject = new THREE.Object3D();\r\n\t\t\t\t\tobject.name = objID;\r\n\t\t\t\t\tobject.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\tif ( quat ) {\r\n\r\n\t\t\t\t\t\tobject.quaternion.set( quat[0], quat[1], quat[2], quat[3] );\r\n\t\t\t\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject.rotation.set( rot[0], rot[1], rot[2] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.scale.set( scl[0], scl[1], scl[2] );\r\n\t\t\t\t\tobject.visible = ( objJSON.visible !== undefined ) ? objJSON.visible : false;\r\n\r\n\t\t\t\t\tparent.add( object );\r\n\r\n\t\t\t\t\tresult.objects[ objID ] = object;\r\n\t\t\t\t\tresult.empties[ objID ] = object;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( object ) {\r\n\r\n\t\t\t\t\tif ( objJSON.properties !== undefined )  {\r\n\r\n\t\t\t\t\t\tfor ( var key in objJSON.properties ) {\r\n\r\n\t\t\t\t\t\t\tvar value = objJSON.properties[ key ];\r\n\t\t\t\t\t\t\tobject.properties[ key ] = value;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( objJSON.groups !== undefined ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < objJSON.groups.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar groupID = objJSON.groups[ i ];\r\n\r\n\t\t\t\t\t\t\tif ( result.groups[ groupID ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tresult.groups[ groupID ] = [];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tresult.groups[ groupID ].push( objID );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( objJSON.children !== undefined ) {\r\n\r\n\t\t\t\t\t\thandle_children( object, objJSON.children );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction handle_mesh( geo, mat, id ) {\r\n\r\n\t\tresult.geometries[ id ] = geo;\r\n\t\tresult.face_materials[ id ] = mat;\r\n\t\thandle_objects();\r\n\r\n\t};\r\n\r\n\tfunction handle_hierarchy( node, id, parent, material, obj ) {\r\n\r\n\t\tvar p = obj.position;\r\n\t\tvar r = obj.rotation;\r\n\t\tvar q = obj.quaternion;\r\n\t\tvar s = obj.scale;\r\n\r\n\t\tnode.position.set( p[0], p[1], p[2] );\r\n\r\n\t\tif ( q ) {\r\n\r\n\t\t\tnode.quaternion.set( q[0], q[1], q[2], q[3] );\r\n\t\t\tnode.useQuaternion = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnode.rotation.set( r[0], r[1], r[2] );\r\n\r\n\t\t}\r\n\r\n\t\tnode.scale.set( s[0], s[1], s[2] );\r\n\r\n\t\t// override children materials\r\n\t\t// if object material was specified in JSON explicitly\r\n\r\n\t\tif ( material ) {\r\n\r\n\t\t\tnode.traverse( function ( child )  {\r\n\r\n\t\t\t\tchild.material = material;\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\t// override children visibility\r\n\t\t// with root node visibility as specified in JSON\r\n\r\n\t\tvar visible = ( obj.visible !== undefined ) ? obj.visible : true;\r\n\r\n\t\tnode.traverse( function ( child )  {\r\n\r\n\t\t\tchild.visible = visible;\r\n\r\n\t\t} );\r\n\r\n\t\tparent.add( node );\r\n\r\n\t\tnode.name = id;\r\n\r\n\t\tresult.objects[ id ] = node;\r\n\t\thandle_objects();\r\n\r\n\t};\r\n\r\n\tfunction create_callback_geometry( id ) {\r\n\r\n\t\treturn function( geo, mat ) {\r\n\r\n\t\t\thandle_mesh( geo, mat, id );\r\n\r\n\t\t\tcounter_models -= 1;\r\n\r\n\t\t\tscope.onLoadComplete();\r\n\r\n\t\t\tasync_callback_gate();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction create_callback_hierachy( id, parent, material, obj ) {\r\n\r\n\t\treturn function( event ) {\r\n\r\n\t\t\tvar result;\r\n\r\n\t\t\t// loaders which use EventDispatcher\r\n\r\n\t\t\tif ( event.content ) {\r\n\r\n\t\t\t\tresult = event.content;\r\n\r\n\t\t\t// ColladaLoader\r\n\r\n\t\t\t} else if ( event.dae ) {\r\n\r\n\t\t\t\tresult = event.scene;\r\n\r\n\r\n\t\t\t// UTF8Loader\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = event;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thandle_hierarchy( result, id, parent, material, obj );\r\n\r\n\t\t\tcounter_models -= 1;\r\n\r\n\t\t\tscope.onLoadComplete();\r\n\r\n\t\t\tasync_callback_gate();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction create_callback_embed( id ) {\r\n\r\n\t\treturn function( geo, mat ) {\r\n\r\n\t\t\tresult.geometries[ id ] = geo;\r\n\t\t\tresult.face_materials[ id ] = mat;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction async_callback_gate() {\r\n\r\n\t\tvar progress = {\r\n\r\n\t\t\ttotalModels : total_models,\r\n\t\t\ttotalTextures : total_textures,\r\n\t\t\tloadedModels : total_models - counter_models,\r\n\t\t\tloadedTextures : total_textures - counter_textures\r\n\r\n\t\t};\r\n\r\n\t\tscope.callbackProgress( progress, result );\r\n\r\n\t\tscope.onLoadProgress();\r\n\r\n\t\tif ( counter_models === 0 && counter_textures === 0 ) {\r\n\r\n\t\t\tfinalize();\r\n\t\t\tcallbackFinished( result );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction finalize() {\r\n\r\n\t\t// take care of targets which could be asynchronously loaded objects\r\n\r\n\t\tfor ( var i = 0; i < target_array.length; i ++ ) {\r\n\r\n\t\t\tvar ta = target_array[ i ];\r\n\r\n\t\t\tvar target = result.objects[ ta.targetName ];\r\n\r\n\t\t\tif ( target ) {\r\n\r\n\t\t\t\tta.object.target = target;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// if there was error and target of specified name doesn't exist in the scene file\r\n\t\t\t\t// create instead dummy target\r\n\t\t\t\t// (target must be added to scene explicitly as parent is already added)\r\n\r\n\t\t\t\tta.object.target = new THREE.Object3D();\r\n\t\t\t\tresult.scene.add( ta.object.target );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tta.object.target.properties.targetInverse = ta.object;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar callbackTexture = function ( count ) {\r\n\r\n\t\tcounter_textures -= count;\r\n\t\tasync_callback_gate();\r\n\r\n\t\tscope.onLoadComplete();\r\n\r\n\t};\r\n\r\n\t// must use this instead of just directly calling callbackTexture\r\n\t// because of closure in the calling context loop\r\n\r\n\tvar generateTextureCallback = function ( count ) {\r\n\r\n\t\treturn function() {\r\n\r\n\t\t\tcallbackTexture( count );\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t// first go synchronous elements\r\n\r\n\t// fogs\r\n\r\n\tvar fogID, fogJSON;\r\n\r\n\tfor ( fogID in data.fogs ) {\r\n\r\n\t\tfogJSON = data.fogs[ fogID ];\r\n\r\n\t\tif ( fogJSON.type === \"linear\" ) {\r\n\r\n\t\t\tfog = new THREE.Fog( 0x000000, fogJSON.near, fogJSON.far );\r\n\r\n\t\t} else if ( fogJSON.type === \"exp2\" ) {\r\n\r\n\t\t\tfog = new THREE.FogExp2( 0x000000, fogJSON.density );\r\n\r\n\t\t}\r\n\r\n\t\tcolor = fogJSON.color;\r\n\t\tfog.color.setRGB( color[0], color[1], color[2] );\r\n\r\n\t\tresult.fogs[ fogID ] = fog;\r\n\r\n\t}\r\n\r\n\t// now come potentially asynchronous elements\r\n\r\n\t// geometries\r\n\r\n\t// count how many geometries will be loaded asynchronously\r\n\r\n\tvar geoID, geoJSON;\r\n\r\n\tfor ( geoID in data.geometries ) {\r\n\r\n\t\tgeoJSON = data.geometries[ geoID ];\r\n\r\n\t\tif ( geoJSON.type in this.geometryHandlerMap ) {\r\n\r\n\t\t\tcounter_models += 1;\r\n\r\n\t\t\tscope.onLoadStart();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// count how many hierarchies will be loaded asynchronously\r\n\r\n\tvar objID, objJSON;\r\n\r\n\tfor ( objID in data.objects ) {\r\n\r\n\t\tobjJSON = data.objects[ objID ];\r\n\r\n\t\tif ( objJSON.type && ( objJSON.type in this.hierarchyHandlerMap ) ) {\r\n\r\n\t\t\tcounter_models += 1;\r\n\r\n\t\t\tscope.onLoadStart();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttotal_models = counter_models;\r\n\r\n\tfor ( geoID in data.geometries ) {\r\n\r\n\t\tgeoJSON = data.geometries[ geoID ];\r\n\r\n\t\tif ( geoJSON.type === \"cube\" ) {\r\n\r\n\t\t\tgeometry = new THREE.CubeGeometry( geoJSON.width, geoJSON.height, geoJSON.depth, geoJSON.widthSegments, geoJSON.heightSegments, geoJSON.depthSegments );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"plane\" ) {\r\n\r\n\t\t\tgeometry = new THREE.PlaneGeometry( geoJSON.width, geoJSON.height, geoJSON.widthSegments, geoJSON.heightSegments );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"sphere\" ) {\r\n\r\n\t\t\tgeometry = new THREE.SphereGeometry( geoJSON.radius, geoJSON.widthSegments, geoJSON.heightSegments );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"cylinder\" ) {\r\n\r\n\t\t\tgeometry = new THREE.CylinderGeometry( geoJSON.topRad, geoJSON.botRad, geoJSON.height, geoJSON.radSegs, geoJSON.heightSegs );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"torus\" ) {\r\n\r\n\t\t\tgeometry = new THREE.TorusGeometry( geoJSON.radius, geoJSON.tube, geoJSON.segmentsR, geoJSON.segmentsT );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"icosahedron\" ) {\r\n\r\n\t\t\tgeometry = new THREE.IcosahedronGeometry( geoJSON.radius, geoJSON.subdivisions );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type in this.geometryHandlerMap ) {\r\n\r\n\t\t\tvar loaderParameters = {};\r\n\r\n\t\t\tfor ( var parType in geoJSON ) {\r\n\r\n\t\t\t\tif ( parType !== \"type\" && parType !== \"url\" ) {\r\n\r\n\t\t\t\t\tloaderParameters[ parType ] = geoJSON[ parType ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar loader = this.geometryHandlerMap[ geoJSON.type ][ \"loaderObject\" ];\r\n\t\t\tloader.load( get_url( geoJSON.url, data.urlBaseType ), create_callback_geometry( geoID ), loaderParameters );\r\n\r\n\t\t} else if ( geoJSON.type === \"embedded\" ) {\r\n\r\n\t\t\tvar modelJson = data.embeds[ geoJSON.id ],\r\n\t\t\t\ttexture_path = \"\";\r\n\r\n\t\t\t// pass metadata along to jsonLoader so it knows the format version\r\n\r\n\t\t\tmodelJson.metadata = data.metadata;\r\n\r\n\t\t\tif ( modelJson ) {\r\n\r\n\t\t\t\tvar jsonLoader = this.geometryHandlerMap[ \"ascii\" ][ \"loaderObject\" ];\r\n\t\t\t\tjsonLoader.createModel( modelJson, create_callback_embed( geoID ), texture_path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// textures\r\n\r\n\t// count how many textures will be loaded asynchronously\r\n\r\n\tvar textureID, textureJSON;\r\n\r\n\tfor ( textureID in data.textures ) {\r\n\r\n\t\ttextureJSON = data.textures[ textureID ];\r\n\r\n\t\tif ( textureJSON.url instanceof Array ) {\r\n\r\n\t\t\tcounter_textures += textureJSON.url.length;\r\n\r\n\t\t\tfor( var n = 0; n < textureJSON.url.length; n ++ ) {\r\n\r\n\t\t\t\tscope.onLoadStart();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcounter_textures += 1;\r\n\r\n\t\t\tscope.onLoadStart();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttotal_textures = counter_textures;\r\n\r\n\tfor ( textureID in data.textures ) {\r\n\r\n\t\ttextureJSON = data.textures[ textureID ];\r\n\r\n\t\tif ( textureJSON.mapping !== undefined && THREE[ textureJSON.mapping ] !== undefined  ) {\r\n\r\n\t\t\ttextureJSON.mapping = new THREE[ textureJSON.mapping ]();\r\n\r\n\t\t}\r\n\r\n\t\tif ( textureJSON.url instanceof Array ) {\r\n\r\n\t\t\tvar count = textureJSON.url.length;\r\n\t\t\tvar url_array = [];\r\n\r\n\t\t\tfor( var i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\turl_array[ i ] = get_url( textureJSON.url[ i ], data.urlBaseType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar isCompressed = url_array[ 0 ].endsWith( \".dds\" );\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadCompressedTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar isCompressed = textureJSON.url.toLowerCase().endsWith( \".dds\" );\r\n\t\t\tvar fullUrl = get_url( textureJSON.url, data.urlBaseType );\r\n\t\t\tvar textureCallback = generateTextureCallback( 1 );\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadCompressedTexture( fullUrl, textureJSON.mapping, textureCallback );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadTexture( fullUrl, textureJSON.mapping, textureCallback );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( THREE[ textureJSON.minFilter ] !== undefined )\r\n\t\t\t\ttexture.minFilter = THREE[ textureJSON.minFilter ];\r\n\r\n\t\t\tif ( THREE[ textureJSON.magFilter ] !== undefined )\r\n\t\t\t\ttexture.magFilter = THREE[ textureJSON.magFilter ];\r\n\r\n\t\t\tif ( textureJSON.anisotropy ) texture.anisotropy = textureJSON.anisotropy;\r\n\r\n\t\t\tif ( textureJSON.repeat ) {\r\n\r\n\t\t\t\ttexture.repeat.set( textureJSON.repeat[ 0 ], textureJSON.repeat[ 1 ] );\r\n\r\n\t\t\t\tif ( textureJSON.repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\tif ( textureJSON.repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureJSON.offset ) {\r\n\r\n\t\t\t\ttexture.offset.set( textureJSON.offset[ 0 ], textureJSON.offset[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// handle wrap after repeat so that default repeat can be overriden\r\n\r\n\t\t\tif ( textureJSON.wrap ) {\r\n\r\n\t\t\t\tvar wrapMap = {\r\n\t\t\t\t\"repeat\" \t: THREE.RepeatWrapping,\r\n\t\t\t\t\"mirror\"\t: THREE.MirroredRepeatWrapping\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( wrapMap[ textureJSON.wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ textureJSON.wrap[ 0 ] ];\r\n\t\t\t\tif ( wrapMap[ textureJSON.wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ textureJSON.wrap[ 1 ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tresult.textures[ textureID ] = texture;\r\n\r\n\t}\r\n\r\n\t// materials\r\n\r\n\tvar matID, matJSON;\r\n\tvar parID;\r\n\r\n\tfor ( matID in data.materials ) {\r\n\r\n\t\tmatJSON = data.materials[ matID ];\r\n\r\n\t\tfor ( parID in matJSON.parameters ) {\r\n\r\n\t\t\tif ( parID === \"envMap\" || parID === \"map\" || parID === \"lightMap\" || parID === \"bumpMap\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = result.textures[ matJSON.parameters[ parID ] ];\r\n\r\n\t\t\t} else if ( parID === \"shading\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = ( matJSON.parameters[ parID ] === \"flat\" ) ? THREE.FlatShading : THREE.SmoothShading;\r\n\r\n\t\t\t} else if ( parID === \"side\" ) {\r\n\r\n\t\t\t\tif ( matJSON.parameters[ parID ] == \"double\" ) {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.DoubleSide;\r\n\r\n\t\t\t\t} else if ( matJSON.parameters[ parID ] == \"back\" ) {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.BackSide;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.FrontSide;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( parID === \"blending\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.NormalBlending;\r\n\r\n\t\t\t} else if ( parID === \"combine\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.MultiplyOperation;\r\n\r\n\t\t\t} else if ( parID === \"vertexColors\" ) {\r\n\r\n\t\t\t\tif ( matJSON.parameters[ parID ] == \"face\" ) {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.FaceColors;\r\n\r\n\t\t\t\t// default to vertex colors if \"vertexColors\" is anything else face colors or 0 / null / false\r\n\r\n\t\t\t\t} else if ( matJSON.parameters[ parID ] )   {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.VertexColors;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( parID === \"wrapRGB\" ) {\r\n\r\n\t\t\t\tvar v3 = matJSON.parameters[ parID ];\r\n\t\t\t\tmatJSON.parameters[ parID ] = new THREE.Vector3( v3[ 0 ], v3[ 1 ], v3[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( matJSON.parameters.opacity !== undefined && matJSON.parameters.opacity < 1.0 ) {\r\n\r\n\t\t\tmatJSON.parameters.transparent = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( matJSON.parameters.normalMap ) {\r\n\r\n\t\t\tvar shader = THREE.ShaderLib[ \"normalmap\" ];\r\n\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\t\tvar diffuse = matJSON.parameters.color;\r\n\t\t\tvar specular = matJSON.parameters.specular;\r\n\t\t\tvar ambient = matJSON.parameters.ambient;\r\n\t\t\tvar shininess = matJSON.parameters.shininess;\r\n\r\n\t\t\tuniforms[ \"tNormal\" ].value = result.textures[ matJSON.parameters.normalMap ];\r\n\r\n\t\t\tif ( matJSON.parameters.normalScale ) {\r\n\r\n\t\t\t\tuniforms[ \"uNormalScale\" ].value.set( matJSON.parameters.normalScale[ 0 ], matJSON.parameters.normalScale[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.map ) {\r\n\r\n\t\t\t\tuniforms[ \"tDiffuse\" ].value = matJSON.parameters.map;\r\n\t\t\t\tuniforms[ \"enableDiffuse\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.envMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tCube\" ].value = matJSON.parameters.envMap;\r\n\t\t\t\tuniforms[ \"enableReflection\" ].value = true;\r\n\t\t\t\tuniforms[ \"uReflectivity\" ].value = matJSON.parameters.reflectivity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.lightMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tAO\" ].value = matJSON.parameters.lightMap;\r\n\t\t\t\tuniforms[ \"enableAO\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.specularMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tSpecular\" ].value = result.textures[ matJSON.parameters.specularMap ];\r\n\t\t\t\tuniforms[ \"enableSpecular\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.displacementMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tDisplacement\" ].value = result.textures[ matJSON.parameters.displacementMap ];\r\n\t\t\t\tuniforms[ \"enableDisplacement\" ].value = true;\r\n\r\n\t\t\t\tuniforms[ \"uDisplacementBias\" ].value = matJSON.parameters.displacementBias;\r\n\t\t\t\tuniforms[ \"uDisplacementScale\" ].value = matJSON.parameters.displacementScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms[ \"uDiffuseColor\" ].value.setHex( diffuse );\r\n\t\t\tuniforms[ \"uSpecularColor\" ].value.setHex( specular );\r\n\t\t\tuniforms[ \"uAmbientColor\" ].value.setHex( ambient );\r\n\r\n\t\t\tuniforms[ \"uShininess\" ].value = shininess;\r\n\r\n\t\t\tif ( matJSON.parameters.opacity ) {\r\n\r\n\t\t\t\tuniforms[ \"uOpacity\" ].value = matJSON.parameters.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };\r\n\r\n\t\t\tmaterial = new THREE.ShaderMaterial( parameters );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaterial = new THREE[ matJSON.type ]( matJSON.parameters );\r\n\r\n\t\t}\r\n\r\n\t\tresult.materials[ matID ] = material;\r\n\r\n\t}\r\n\r\n\t// second pass through all materials to initialize MeshFaceMaterials\r\n\t// that could be referring to other materials out of order\r\n\r\n\tfor ( matID in data.materials ) {\r\n\r\n\t\tmatJSON = data.materials[ matID ];\r\n\r\n\t\tif ( matJSON.parameters.materials ) {\r\n\r\n\t\t\tvar materialArray = [];\r\n\r\n\t\t\tfor ( var i = 0; i < matJSON.parameters.materials.length; i ++ ) {\r\n\r\n\t\t\t\tvar label = matJSON.parameters.materials[ i ];\r\n\t\t\t\tmaterialArray.push( result.materials[ label ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult.materials[ matID ].materials = materialArray;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// objects ( synchronous init of procedural primitives )\r\n\r\n\thandle_objects();\r\n\r\n\t// defaults\r\n\r\n\tif ( result.cameras && data.defaults.camera ) {\r\n\r\n\t\tresult.currentCamera = result.cameras[ data.defaults.camera ];\r\n\r\n\t}\r\n\r\n\tif ( result.fogs && data.defaults.fog ) {\r\n\r\n\t\tresult.scene.fog = result.fogs[ data.defaults.fog ];\r\n\r\n\t}\r\n\r\n\t// synchronous callback\r\n\r\n\tscope.callbackSync( result );\r\n\r\n\t// just in case there are no async elements\r\n\r\n\tasync_callback_gate();\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.TextureLoader = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.crossOrigin = null;\r\n\r\n};\r\n\r\nTHREE.TextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.TextureLoader,\r\n\r\n\tload: function ( url ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar image = new Image();\r\n\r\n\t\timage.addEventListener( 'load', function () {\r\n\r\n\t\t\tvar texture = new THREE.Texture( image );\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'load', content: texture } );\r\n\r\n\t\t}, false );\r\n\r\n\t\timage.addEventListener( 'error', function () {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'error', message: 'Couldn\\'t load URL [' + url + ']' } );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( scope.crossOrigin ) image.crossOrigin = scope.crossOrigin;\r\n\r\n\t\timage.src = url;\r\n\r\n\t}\r\n\r\n}\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Material = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.MaterialIdCount ++;\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.side = THREE.FrontSide;\r\n\r\n\tthis.opacity = 1;\r\n\tthis.transparent = false;\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.blendSrc = THREE.SrcAlphaFactor;\r\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\r\n\tthis.blendEquation = THREE.AddEquation;\r\n\r\n\tthis.depthTest = true;\r\n\tthis.depthWrite = true;\r\n\r\n\tthis.polygonOffset = false;\r\n\tthis.polygonOffsetFactor = 0;\r\n\tthis.polygonOffsetUnits = 0;\r\n\r\n\tthis.alphaTest = 0;\r\n\r\n\tthis.overdraw = false; // Boolean for fixing antialiasing gaps in CanvasRenderer\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis.needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.Material.prototype.setValues = function ( values ) {\r\n\r\n\tif ( values === undefined ) return;\r\n\r\n\tfor ( var key in values ) {\r\n\r\n\t\tvar newValue = values[ key ];\r\n\r\n\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\tif ( key in this ) {\r\n\r\n\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue instanceof THREE.Color && newValue instanceof THREE.Color ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else if ( currentValue instanceof THREE.Color ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Material.prototype.clone = function ( material ) {\r\n\r\n\tif ( material === undefined ) material = new THREE.Material();\r\n\r\n\tmaterial.name = this.name;\r\n\r\n\tmaterial.side = this.side;\r\n\r\n\tmaterial.opacity = this.opacity;\r\n\tmaterial.transparent = this.transparent;\r\n\r\n\tmaterial.blending = this.blending;\r\n\r\n\tmaterial.blendSrc = this.blendSrc;\r\n\tmaterial.blendDst = this.blendDst;\r\n\tmaterial.blendEquation = this.blendEquation;\r\n\r\n\tmaterial.depthTest = this.depthTest;\r\n\tmaterial.depthWrite = this.depthWrite;\r\n\r\n\tmaterial.polygonOffset = this.polygonOffset;\r\n\tmaterial.polygonOffsetFactor = this.polygonOffsetFactor;\r\n\tmaterial.polygonOffsetUnits = this.polygonOffsetUnits;\r\n\r\n\tmaterial.alphaTest = this.alphaTest;\r\n\r\n\tmaterial.overdraw = this.overdraw;\r\n\r\n\tmaterial.visible = this.visible;\r\n\r\n\treturn material;\r\n\r\n};\r\n\r\nTHREE.Material.prototype.dispose = function () {\r\n\r\n\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n};\r\n\r\nTHREE.MaterialIdCount = 0;\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  linewidth: <float>,\r\n *  linecap: \"round\",\r\n *  linejoin: \"round\",\r\n *\r\n *  vertexColors: <bool>\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.LineBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\tthis.linecap = 'round';\r\n\tthis.linejoin = 'round';\r\n\r\n\tthis.vertexColors = false;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.LineBasicMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.LineBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.linewidth = this.linewidth;\r\n\tmaterial.linecap = this.linecap;\r\n\tmaterial.linejoin = this.linejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  linewidth: <float>,\r\n *\r\n *  scale: <float>,\r\n *  dashSize: <float>,\r\n *  gapSize: <float>,\r\n *\r\n *  vertexColors: <bool>\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.LineDashedMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.scale = 1;\r\n\tthis.dashSize = 3;\r\n\tthis.gapSize = 1;\r\n\r\n\tthis.vertexColors = false;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.LineDashedMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.LineDashedMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.linewidth = this.linewidth;\r\n\r\n\tmaterial.scale = this.scale;\r\n\tmaterial.dashSize = this.dashSize;\r\n\tmaterial.gapSize = this.gapSize;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshBasicMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.lightMap = this.lightMap;\r\n\r\n\tmaterial.specularMap = this.specularMap;\r\n\r\n\tmaterial.envMap = this.envMap;\r\n\tmaterial.combine = this.combine;\r\n\tmaterial.reflectivity = this.reflectivity;\r\n\tmaterial.refractionRatio = this.refractionRatio;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\r\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  ambient: <hex>,\r\n *  emissive: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshLambertMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.ambient = new THREE.Color( 0xffffff );\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\r\n\tthis.wrapAround = false;\r\n\tthis.wrapRGB = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshLambertMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshLambertMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.ambient.copy( this.ambient );\r\n\tmaterial.emissive.copy( this.emissive );\r\n\r\n\tmaterial.wrapAround = this.wrapAround;\r\n\tmaterial.wrapRGB.copy( this.wrapRGB );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.lightMap = this.lightMap;\r\n\r\n\tmaterial.specularMap = this.specularMap;\r\n\r\n\tmaterial.envMap = this.envMap;\r\n\tmaterial.combine = this.combine;\r\n\tmaterial.reflectivity = this.reflectivity;\r\n\tmaterial.refractionRatio = this.refractionRatio;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\r\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\tmaterial.morphNormals = this.morphNormals;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  ambient: <hex>,\r\n *  emissive: <hex>,\r\n *  specular: <hex>,\r\n *  shininess: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshPhongMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.ambient = new THREE.Color( 0xffffff );\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.specular = new THREE.Color( 0x111111 );\r\n\tthis.shininess = 30;\r\n\r\n\tthis.metal = false;\r\n\tthis.perPixel = true;\r\n\r\n\tthis.wrapAround = false;\r\n\tthis.wrapRGB = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\r\n\tthis.bumpMap = null;\r\n\tthis.bumpScale = 1;\r\n\r\n\tthis.normalMap = null;\r\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshPhongMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshPhongMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.ambient.copy( this.ambient );\r\n\tmaterial.emissive.copy( this.emissive );\r\n\tmaterial.specular.copy( this.specular );\r\n\tmaterial.shininess = this.shininess;\r\n\r\n\tmaterial.metal = this.metal;\r\n\tmaterial.perPixel = this.perPixel;\r\n\r\n\tmaterial.wrapAround = this.wrapAround;\r\n\tmaterial.wrapRGB.copy( this.wrapRGB );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.lightMap = this.lightMap;\r\n\r\n\tmaterial.bumpMap = this.bumpMap;\r\n\tmaterial.bumpScale = this.bumpScale;\r\n\r\n\tmaterial.normalMap = this.normalMap;\r\n\tmaterial.normalScale.copy( this.normalScale );\r\n\r\n\tmaterial.specularMap = this.specularMap;\r\n\r\n\tmaterial.envMap = this.envMap;\r\n\tmaterial.combine = this.combine;\r\n\tmaterial.reflectivity = this.reflectivity;\r\n\tmaterial.refractionRatio = this.refractionRatio;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\r\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\tmaterial.morphNormals = this.morphNormals;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshDepthMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshDepthMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.LineBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  shading: THREE.FlatShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshNormalMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this, parameters );\r\n\r\n\tthis.shading = THREE.FlatShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshNormalMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshNormalMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MeshFaceMaterial = function ( materials ) {\r\n\r\n\tthis.materials = materials instanceof Array ? materials : [];\r\n\r\n};\r\n\r\nTHREE.MeshFaceMaterial.prototype.clone = function () {\r\n\r\n\treturn new THREE.MeshFaceMaterial( this.materials.slice( 0 ) );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  size: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  vertexColors: <bool>,\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.ParticleBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.size = 1;\r\n\tthis.sizeAttenuation = true;\r\n\r\n\tthis.vertexColors = false;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.ParticleBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.ParticleBasicMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.ParticleBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.size = this.size;\r\n\tmaterial.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  program: <function>,\r\n *  opacity: <float>,\r\n *  blending: THREE.NormalBlending\r\n * }\r\n */\r\n\r\nTHREE.ParticleCanvasMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.program = function ( context, color ) {};\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.ParticleCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.ParticleCanvasMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.ParticleCanvasMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.program = this.program;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  fragmentShader: <string>,\r\n *  vertexShader: <string>,\r\n *\r\n *  uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } },\r\n *\r\n *  defines: { \"label\" : \"value\" },\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  lights: <bool>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.ShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.fragmentShader = \"void main() {}\";\r\n\tthis.vertexShader = \"void main() {}\";\r\n\tthis.uniforms = {};\r\n\tthis.defines = {};\r\n\tthis.attributes = null;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false; // set to use scene fog\r\n\r\n\tthis.lights = false; // set to use scene lights\r\n\r\n\tthis.vertexColors = THREE.NoColors; // set to use \"color\" attribute stream\r\n\r\n\tthis.skinning = false; // set to use skinning attribute streams\r\n\r\n\tthis.morphTargets = false; // set to use morph targets\r\n\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.ShaderMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.ShaderMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.fragmentShader = this.fragmentShader;\r\n\tmaterial.vertexShader = this.vertexShader;\r\n\r\n\tmaterial.uniforms = THREE.UniformsUtils.clone( this.uniforms );\r\n\r\n\tmaterial.attributes = this.attributes;\r\n\tmaterial.defines = this.defines;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.lights = this.lights;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\tmaterial.morphNormals = this.morphNormals;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  useScreenCoordinates: <bool>,\r\n *  sizeAttenuation: <bool>,\r\n *  scaleByViewport: <bool>,\r\n *  alignment: THREE.SpriteAlignment.center,\r\n *\r\n *\tuvOffset: new THREE.Vector2(),\r\n *\tuvScale: new THREE.Vector2(),\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.SpriteMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\t// defaults\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.map = new THREE.Texture();\r\n\r\n\tthis.useScreenCoordinates = true;\r\n\tthis.depthTest = !this.useScreenCoordinates;\r\n\tthis.sizeAttenuation = !this.useScreenCoordinates;\r\n\tthis.scaleByViewport = !this.sizeAttenuation;\r\n\tthis.alignment = THREE.SpriteAlignment.center.clone();\r\n\r\n\tthis.fog = false;\r\n\r\n\tthis.uvOffset = new THREE.Vector2( 0, 0 );\r\n\tthis.uvScale  = new THREE.Vector2( 1, 1 );\r\n\r\n\t// set parameters\r\n\r\n\tthis.setValues( parameters );\r\n\r\n\t// override coupled defaults if not specified explicitly by parameters\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tif ( parameters.depthTest === undefined ) this.depthTest = !this.useScreenCoordinates;\r\n\tif ( parameters.sizeAttenuation === undefined ) this.sizeAttenuation = !this.useScreenCoordinates;\r\n\tif ( parameters.scaleByViewport === undefined ) this.scaleByViewport = !this.sizeAttenuation;\r\n\r\n};\r\n\r\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.SpriteMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.SpriteMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.useScreenCoordinates = this.useScreenCoordinates;\r\n\tmaterial.sizeAttenuation = this.sizeAttenuation;\r\n\tmaterial.scaleByViewport = this.scaleByViewport;\r\n\tmaterial.alignment.copy( this.alignment );\r\n\r\n\tmaterial.uvOffset.copy( this.uvOffset );\r\n\tmaterial.uvScale.copy( this.uvScale );\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n\r\n// Alignment enums\r\n\r\nTHREE.SpriteAlignment = {};\r\nTHREE.SpriteAlignment.topLeft = new THREE.Vector2( 1, -1 );\r\nTHREE.SpriteAlignment.topCenter = new THREE.Vector2( 0, -1 );\r\nTHREE.SpriteAlignment.topRight = new THREE.Vector2( -1, -1 );\r\nTHREE.SpriteAlignment.centerLeft = new THREE.Vector2( 1, 0 );\r\nTHREE.SpriteAlignment.center = new THREE.Vector2( 0, 0 );\r\nTHREE.SpriteAlignment.centerRight = new THREE.Vector2( -1, 0 );\r\nTHREE.SpriteAlignment.bottomLeft = new THREE.Vector2( 1, 1 );\r\nTHREE.SpriteAlignment.bottomCenter = new THREE.Vector2( 0, 1 );\r\nTHREE.SpriteAlignment.bottomRight = new THREE.Vector2( -1, 1 );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.TextureIdCount ++;\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.image = image;\r\n\tthis.mipmaps = [];\r\n\r\n\tthis.mapping = mapping !== undefined ? mapping : new THREE.UVMapping();\r\n\r\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\r\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\r\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\r\n\r\n\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.generateMipmaps = true;\r\n\tthis.premultiplyAlpha = false;\r\n\tthis.flipY = true;\r\n\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\tthis.needsUpdate = false;\r\n\tthis.onUpdate = null;\r\n\r\n};\r\n\r\nTHREE.Texture.prototype = {\r\n\r\n\tconstructor: THREE.Texture,\r\n\r\n\tclone: function ( texture ) {\r\n\r\n\t\tif ( texture === undefined ) texture = new THREE.Texture();\r\n\r\n\t\ttexture.image = this.image;\r\n\t\ttexture.mipmaps = this.mipmaps.slice(0);\r\n\r\n\t\ttexture.mapping = this.mapping;\r\n\r\n\t\ttexture.wrapS = this.wrapS;\r\n\t\ttexture.wrapT = this.wrapT;\r\n\r\n\t\ttexture.magFilter = this.magFilter;\r\n\t\ttexture.minFilter = this.minFilter;\r\n\r\n\t\ttexture.anisotropy = this.anisotropy;\r\n\r\n\t\ttexture.format = this.format;\r\n\t\ttexture.type = this.type;\r\n\r\n\t\ttexture.offset.copy( this.offset );\r\n\t\ttexture.repeat.copy( this.repeat );\r\n\r\n\t\ttexture.generateMipmaps = this.generateMipmaps;\r\n\t\ttexture.premultiplyAlpha = this.premultiplyAlpha;\r\n\t\ttexture.flipY = this.flipY;\r\n\t\ttexture.unpackAlignment = this.unpackAlignment;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.TextureIdCount = 0;\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.image = { width: width, height: height };\r\n\tthis.mipmaps = mipmaps;\r\n\r\n\tthis.generateMipmaps = false; // WebGL currently can't generate mipmaps for compressed textures, they must be embedded in DDS file\r\n\r\n};\r\n\r\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\r\nTHREE.CompressedTexture.prototype.clone = function () {\r\n\r\n\tvar texture = new THREE.CompressedTexture();\r\n\r\n\tTHREE.Texture.prototype.clone.call( this, texture );\r\n\r\n\treturn texture;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.image = { data: data, width: width, height: height };\r\n\r\n};\r\n\r\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\r\nTHREE.DataTexture.prototype.clone = function () {\r\n\r\n\tvar texture = new THREE.DataTexture();\r\n\r\n\tTHREE.Texture.prototype.clone.call( this, texture );\r\n\r\n\treturn texture;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Particle = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.material = material;\r\n\r\n};\r\n\r\nTHREE.Particle.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Particle.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Particle( this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ParticleSystem = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.ParticleBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\tthis.sortParticles = false;\r\n\r\n\tif ( this.geometry ) {\r\n\r\n\t\t// calc bound radius\r\n\r\n\t\tif( this.geometry.boundingSphere === null ) {\r\n\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.frustumCulled = false;\r\n\r\n};\r\n\r\nTHREE.ParticleSystem.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.ParticleSystem.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.ParticleSystem( this.geometry, this.material );\r\n\tobject.sortParticles = this.sortParticles;\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Line = function ( geometry, material, type ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\tthis.type = ( type !== undefined ) ? type : THREE.LineStrip;\r\n\r\n\tif ( this.geometry ) {\r\n\r\n\t\tif ( ! this.geometry.boundingSphere ) {\r\n\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LineStrip = 0;\r\nTHREE.LinePieces = 1;\r\n\r\nTHREE.Line.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Line.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Line( this.geometry, this.material, this.type );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author jonobr1 / http://jonobr1.com/\r\n */\r\n\r\nTHREE.Mesh = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff, wireframe: true } );\r\n\r\n\tif ( this.geometry !== undefined ) {\r\n\r\n\t\tif ( this.geometry.boundingSphere === null ) {\r\n\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Mesh.prototype.updateMorphTargets = function () {\r\n\r\n\tif ( this.geometry.morphTargets.length > 0 ) {\r\n\r\n\t\tthis.morphTargetBase = -1;\r\n\t\tthis.morphTargetForcedOrder = [];\r\n\t\tthis.morphTargetInfluences = [];\r\n\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\r\n\r\n\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {\r\n\r\n\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\r\n\r\n\t\treturn this.morphTargetDictionary[ name ];\r\n\r\n\t}\r\n\r\n\tconsole.log( \"THREE.Mesh.getMorphTargetIndexByName: morph target \" + name + \" does not exist. Returning 0.\" );\r\n\r\n\treturn 0;\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Mesh( this.geometry, this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Bone = function( belongsToSkin ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.skin = belongsToSkin;\r\n\tthis.skinMatrix = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.Bone.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Bone.prototype.update = function ( parentSkinMatrix, forceUpdate ) {\r\n\r\n\t// update local\r\n\r\n\tif ( this.matrixAutoUpdate ) {\r\n\r\n\t\tforceUpdate |= this.updateMatrix();\r\n\r\n\t}\r\n\r\n\t// update skin matrix\r\n\r\n\tif ( forceUpdate || this.matrixWorldNeedsUpdate ) {\r\n\r\n\t\tif( parentSkinMatrix ) {\r\n\r\n\t\t\tthis.skinMatrix.multiplyMatrices( parentSkinMatrix, this.matrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.skinMatrix.copy( this.matrix );\r\n\r\n\t\t}\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\t\tforceUpdate = true;\r\n\r\n\t}\r\n\r\n\t// update children\r\n\r\n\tvar child, i, l = this.children.length;\r\n\r\n\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\tthis.children[ i ].update( this.skinMatrix, forceUpdate );\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\t//\r\n\r\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\r\n\r\n\t// init bones\r\n\r\n\tthis.identityMatrix = new THREE.Matrix4();\r\n\r\n\tthis.bones = [];\r\n\tthis.boneMatrices = [];\r\n\r\n\tvar b, bone, gbone, p, q, s;\r\n\r\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\r\n\r\n\t\tfor ( b = 0; b < this.geometry.bones.length; b ++ ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tp = gbone.pos;\r\n\t\t\tq = gbone.rotq;\r\n\t\t\ts = gbone.scl;\r\n\r\n\t\t\tbone = this.addBone();\r\n\r\n\t\t\tbone.name = gbone.name;\r\n\t\t\tbone.position.set( p[0], p[1], p[2] );\r\n\t\t\tbone.quaternion.set( q[0], q[1], q[2], q[3] );\r\n\t\t\tbone.useQuaternion = true;\r\n\r\n\t\t\tif ( s !== undefined ) {\r\n\r\n\t\t\t\tbone.scale.set( s[0], s[1], s[2] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbone.scale.set( 1, 1, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( b = 0; b < this.bones.length; b ++ ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\t\t\tbone = this.bones[ b ];\r\n\r\n\t\t\tif ( gbone.parent === -1 ) {\r\n\r\n\t\t\t\tthis.add( bone );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.bones[ gbone.parent ].add( bone );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar nBones = this.bones.length;\r\n\r\n\t\tif ( this.useVertexTexture ) {\r\n\r\n\t\t\t// layout (1 matrix = 4 pixels)\r\n\t\t\t//\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t\t//  with  8x8  pixel texture max   16 bones  (8 * 8  / 4)\r\n\t\t\t//  \t 16x16 pixel texture max   64 bones (16 * 16 / 4)\r\n\t\t\t//  \t 32x32 pixel texture max  256 bones (32 * 32 / 4)\r\n\t\t\t//  \t 64x64 pixel texture max 1024 bones (64 * 64 / 4)\r\n\r\n\t\t\tvar size;\r\n\r\n\t\t\tif ( nBones > 256 )\r\n\t\t\t\tsize = 64;\r\n\t\t\telse if ( nBones > 64 )\r\n\t\t\t\tsize = 32;\r\n\t\t\telse if ( nBones > 16 )\r\n\t\t\t\tsize = 16;\r\n\t\t\telse\r\n\t\t\t\tsize = 8;\r\n\r\n\t\t\tthis.boneTextureWidth = size;\r\n\t\t\tthis.boneTextureHeight = size;\r\n\r\n\t\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\r\n\t\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\r\n\t\t\tthis.boneTexture.minFilter = THREE.NearestFilter;\r\n\t\t\tthis.boneTexture.magFilter = THREE.NearestFilter;\r\n\t\t\tthis.boneTexture.generateMipmaps = false;\r\n\t\t\tthis.boneTexture.flipY = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.boneMatrices = new Float32Array( 16 * nBones );\r\n\r\n\t\t}\r\n\r\n\t\tthis.pose();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\nTHREE.SkinnedMesh.prototype.addBone = function( bone ) {\r\n\r\n\tif ( bone === undefined ) {\r\n\r\n\t\tbone = new THREE.Bone( this );\r\n\r\n\t}\r\n\r\n\tthis.bones.push( bone );\r\n\r\n\treturn bone;\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\tthis.matrixAutoUpdate && this.updateMatrix();\r\n\r\n\t// update matrixWorld\r\n\r\n\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\tif ( this.parent ) {\r\n\r\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t}\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tforce = true;\r\n\r\n\t}\r\n\r\n\t// update children\r\n\r\n\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\tvar child = this.children[ i ];\r\n\r\n\t\tif ( child instanceof THREE.Bone ) {\r\n\r\n\t\t\tchild.update( this.identityMatrix, false );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tchild.updateMatrixWorld( true );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// make a snapshot of the bones' rest position\r\n\r\n\tif ( this.boneInverses == undefined ) {\r\n\r\n\t\tthis.boneInverses = [];\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\tvar inverse = new THREE.Matrix4();\r\n\r\n\t\t\tinverse.getInverse( this.bones[ b ].skinMatrix );\r\n\r\n\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// flatten bone matrices to array\r\n\r\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t// compute the offset between the current and the original transform;\r\n\r\n\t\t//TODO: we could get rid of this multiplication step if the skinMatrix\r\n\t\t// was already representing the offset; however, this requires some\r\n\t\t// major changes to the animation system\r\n\r\n\t\tTHREE.SkinnedMesh.offsetMatrix.multiplyMatrices( this.bones[ b ].skinMatrix, this.boneInverses[ b ] );\r\n\r\n\t\tTHREE.SkinnedMesh.offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );\r\n\r\n\t}\r\n\r\n\tif ( this.useVertexTexture ) {\r\n\r\n\t\tthis.boneTexture.needsUpdate = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.pose = function () {\r\n\r\n\tthis.updateMatrixWorld( true );\r\n\r\n\tfor ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {\r\n\r\n\t\t// normalize weights\r\n\r\n\t\tvar sw = this.geometry.skinWeights[ i ];\r\n\r\n\t\tvar scale = 1.0 / sw.lengthManhattan();\r\n\r\n\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\tsw.multiplyScalar( scale );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsw.set( 1 ); // this will be normalized by the shader anyway\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.SkinnedMesh( this.geometry, this.material, this.useVertexTexture );\r\n\r\n\tTHREE.Mesh.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.offsetMatrix = new THREE.Matrix4();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MorphAnimMesh = function ( geometry, material ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\t// API\r\n\r\n\tthis.duration = 1000; // milliseconds\r\n\tthis.mirroredLoop = false;\r\n\tthis.time = 0;\r\n\r\n\t// internals\r\n\r\n\tthis.lastKeyframe = 0;\r\n\tthis.currentKeyframe = 0;\r\n\r\n\tthis.direction = 1;\r\n\tthis.directionBackwards = false;\r\n\r\n\tthis.setFrameRange( 0, this.geometry.morphTargets.length - 1 );\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\nTHREE.MorphAnimMesh.prototype.setFrameRange = function ( start, end ) {\r\n\r\n\tthis.startKeyframe = start;\r\n\tthis.endKeyframe = end;\r\n\r\n\tthis.length = this.endKeyframe - this.startKeyframe + 1;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.setDirectionForward = function () {\r\n\r\n\tthis.direction = 1;\r\n\tthis.directionBackwards = false;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.setDirectionBackward = function () {\r\n\r\n\tthis.direction = -1;\r\n\tthis.directionBackwards = true;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.parseAnimations = function () {\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tif ( ! geometry.animations ) geometry.animations = {};\r\n\r\n\tvar firstAnimation, animations = geometry.animations;\r\n\r\n\tvar pattern = /([a-z]+)(\\d+)/;\r\n\r\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\tvar parts = morph.name.match( pattern );\r\n\r\n\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\tvar label = parts[ 1 ];\r\n\t\t\tvar num = parts[ 2 ];\r\n\r\n\t\t\tif ( ! animations[ label ] ) animations[ label ] = { start: Infinity, end: -Infinity };\r\n\r\n\t\t\tvar animation = animations[ label ];\r\n\r\n\t\t\tif ( i < animation.start ) animation.start = i;\r\n\t\t\tif ( i > animation.end ) animation.end = i;\r\n\r\n\t\t\tif ( ! firstAnimation ) firstAnimation = label;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.firstAnimation = firstAnimation;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.setAnimationLabel = function ( label, start, end ) {\r\n\r\n\tif ( ! this.geometry.animations ) this.geometry.animations = {};\r\n\r\n\tthis.geometry.animations[ label ] = { start: start, end: end };\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.playAnimation = function ( label, fps ) {\r\n\r\n\tvar animation = this.geometry.animations[ label ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tthis.setFrameRange( animation.start, animation.end );\r\n\t\tthis.duration = 1000 * ( ( animation.end - animation.start ) / fps );\r\n\t\tthis.time = 0;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( \"animation[\" + label + \"] undefined\" );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.updateAnimation = function ( delta ) {\r\n\r\n\tvar frameTime = this.duration / this.length;\r\n\r\n\tthis.time += this.direction * delta;\r\n\r\n\tif ( this.mirroredLoop ) {\r\n\r\n\t\tif ( this.time > this.duration || this.time < 0 ) {\r\n\r\n\t\t\tthis.direction *= -1;\r\n\r\n\t\t\tif ( this.time > this.duration ) {\r\n\r\n\t\t\t\tthis.time = this.duration;\r\n\t\t\t\tthis.directionBackwards = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.time < 0 ) {\r\n\r\n\t\t\t\tthis.time = 0;\r\n\t\t\t\tthis.directionBackwards = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tthis.time = this.time % this.duration;\r\n\r\n\t\tif ( this.time < 0 ) this.time += this.duration;\r\n\r\n\t}\r\n\r\n\tvar keyframe = this.startKeyframe + THREE.Math.clamp( Math.floor( this.time / frameTime ), 0, this.length - 1 );\r\n\r\n\tif ( keyframe !== this.currentKeyframe ) {\r\n\r\n\t\tthis.morphTargetInfluences[ this.lastKeyframe ] = 0;\r\n\t\tthis.morphTargetInfluences[ this.currentKeyframe ] = 1;\r\n\r\n\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\tthis.lastKeyframe = this.currentKeyframe;\r\n\t\tthis.currentKeyframe = keyframe;\r\n\r\n\t}\r\n\r\n\tvar mix = ( this.time % frameTime ) / frameTime;\r\n\r\n\tif ( this.directionBackwards ) {\r\n\r\n\t\tmix = 1 - mix;\r\n\r\n\t}\r\n\r\n\tthis.morphTargetInfluences[ this.currentKeyframe ] = mix;\r\n\tthis.morphTargetInfluences[ this.lastKeyframe ] = 1 - mix;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.MorphAnimMesh( this.geometry, this.material );\r\n\r\n\tobject.duration = this.duration;\r\n\tobject.mirroredLoop = this.mirroredLoop;\r\n\tobject.time = this.time;\r\n\r\n\tobject.lastKeyframe = this.lastKeyframe;\r\n\tobject.currentKeyframe = this.currentKeyframe;\r\n\r\n\tobject.direction = this.direction;\r\n\tobject.directionBackwards = this.directionBackwards;\r\n\r\n\tTHREE.Mesh.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Ribbon = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = material;\r\n\r\n};\r\n\r\nTHREE.Ribbon.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Ribbon.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Ribbon( this.geometry, this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LOD = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.LODs = [];\r\n\r\n};\r\n\r\n\r\nTHREE.LOD.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.LOD.prototype.addLevel = function ( object3D, visibleAtDistance ) {\r\n\r\n\tif ( visibleAtDistance === undefined ) {\r\n\r\n\t\tvisibleAtDistance = 0;\r\n\r\n\t}\r\n\r\n\tvisibleAtDistance = Math.abs( visibleAtDistance );\r\n\r\n\tfor ( var l = 0; l < this.LODs.length; l ++ ) {\r\n\r\n\t\tif ( visibleAtDistance < this.LODs[ l ].visibleAtDistance ) {\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.LODs.splice( l, 0, { visibleAtDistance: visibleAtDistance, object3D: object3D } );\r\n\tthis.add( object3D );\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.update = function ( camera ) {\r\n\r\n\tif ( this.LODs.length > 1 ) {\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\tvar inverse  = camera.matrixWorldInverse;\r\n\t\tvar distance = -( inverse.elements[2] * this.matrixWorld.elements[12] + inverse.elements[6] * this.matrixWorld.elements[13] + inverse.elements[10] * this.matrixWorld.elements[14] + inverse.elements[14] );\r\n\r\n\t\tthis.LODs[ 0 ].object3D.visible = true;\r\n\r\n\t\tfor ( var l = 1; l < this.LODs.length; l ++ ) {\r\n\r\n\t\t\tif( distance >= this.LODs[ l ].visibleAtDistance ) {\r\n\r\n\t\t\t\tthis.LODs[ l - 1 ].object3D.visible = false;\r\n\t\t\t\tthis.LODs[ l     ].object3D.visible = true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor( ; l < this.LODs.length; l ++ ) {\r\n\r\n\t\t\tthis.LODs[ l ].object3D.visible = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.clone = function () {\r\n\r\n\t// TODO\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Sprite = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\r\n\r\n\tthis.rotation3d = this.rotation;\r\n\tthis.rotation = 0;\r\n\r\n};\r\n\r\nTHREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\n/*\r\n * Custom update matrix\r\n */\r\n\r\nTHREE.Sprite.prototype.updateMatrix = function () {\r\n\r\n\tthis.matrix.setPosition( this.position );\r\n\r\n\tthis.rotation3d.set( 0, 0, this.rotation );\r\n\tthis.matrix.setRotationFromEuler( this.rotation3d );\r\n\r\n\tif ( this.scale.x !== 1 || this.scale.y !== 1 ) {\r\n\r\n\t\tthis.matrix.scale( this.scale );\r\n\r\n\t}\r\n\r\n\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.Sprite.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Sprite( this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Scene = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.fog = null;\r\n\tthis.overrideMaterial = null;\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.__objects = [];\r\n\tthis.__lights = [];\r\n\r\n\tthis.__objectsAdded = [];\r\n\tthis.__objectsRemoved = [];\r\n\r\n};\r\n\r\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Scene.prototype.__addObject = function ( object ) {\r\n\r\n\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\tif ( this.__lights.indexOf( object ) === - 1 ) {\r\n\r\n\t\t\tthis.__lights.push( object );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.target && object.target.parent === undefined ) {\r\n\r\n\t\t\tthis.add( object.target );\r\n\r\n\t\t}\r\n\r\n\t} else if ( !( object instanceof THREE.Camera || object instanceof THREE.Bone ) ) {\r\n\r\n\t\tif ( this.__objects.indexOf( object ) === - 1 ) {\r\n\r\n\t\t\tthis.__objects.push( object );\r\n\t\t\tthis.__objectsAdded.push( object );\r\n\r\n\t\t\t// check if previously removed\r\n\r\n\t\t\tvar i = this.__objectsRemoved.indexOf( object );\r\n\r\n\t\t\tif ( i !== -1 ) {\r\n\r\n\t\t\t\tthis.__objectsRemoved.splice( i, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var c = 0; c < object.children.length; c ++ ) {\r\n\r\n\t\tthis.__addObject( object.children[ c ] );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Scene.prototype.__removeObject = function ( object ) {\r\n\r\n\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\tvar i = this.__lights.indexOf( object );\r\n\r\n\t\tif ( i !== -1 ) {\r\n\r\n\t\t\tthis.__lights.splice( i, 1 );\r\n\r\n\t\t}\r\n\r\n\t} else if ( !( object instanceof THREE.Camera ) ) {\r\n\r\n\t\tvar i = this.__objects.indexOf( object );\r\n\r\n\t\tif( i !== -1 ) {\r\n\r\n\t\t\tthis.__objects.splice( i, 1 );\r\n\t\t\tthis.__objectsRemoved.push( object );\r\n\r\n\t\t\t// check if previously added\r\n\r\n\t\t\tvar ai = this.__objectsAdded.indexOf( object );\r\n\r\n\t\t\tif ( ai !== -1 ) {\r\n\r\n\t\t\t\tthis.__objectsAdded.splice( ai, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var c = 0; c < object.children.length; c ++ ) {\r\n\r\n\t\tthis.__removeObject( object.children[ c ] );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Fog = function ( hex, near, far ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( hex );\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 1;\r\n\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n};\r\n\r\nTHREE.Fog.prototype.clone = function () {\r\n\r\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.FogExp2 = function ( hex, density ) {\r\n\r\n\tthis.name = '';\r\n\tthis.color = new THREE.Color( hex );\r\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n};\r\n\r\nTHREE.FogExp2.prototype.clone = function () {\r\n\r\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CanvasRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _this = this,\r\n\t_renderData, _elements, _lights,\r\n\t_projector = new THREE.Projector(),\r\n\r\n\t_canvas = parameters.canvas !== undefined\r\n\t\t\t? parameters.canvas\r\n\t\t\t: document.createElement( 'canvas' ),\r\n\r\n\t_canvasWidth, _canvasHeight, _canvasWidthHalf, _canvasHeightHalf,\r\n\t_context = _canvas.getContext( '2d' ),\r\n\r\n\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t_clearOpacity = 0,\r\n\r\n\t_contextGlobalAlpha = 1,\r\n\t_contextGlobalCompositeOperation = 0,\r\n\t_contextStrokeStyle = null,\r\n\t_contextFillStyle = null,\r\n\t_contextLineWidth = null,\r\n\t_contextLineCap = null,\r\n\t_contextLineJoin = null,\r\n\r\n\t_v1, _v2, _v3, _v4,\r\n\t_v5 = new THREE.RenderableVertex(),\r\n\t_v6 = new THREE.RenderableVertex(),\r\n\r\n\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\r\n\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\r\n\r\n\t_color = new THREE.Color(),\r\n\t_color1 = new THREE.Color(),\r\n\t_color2 = new THREE.Color(),\r\n\t_color3 = new THREE.Color(),\r\n\t_color4 = new THREE.Color(),\r\n\r\n\t_diffuseColor = new THREE.Color(),\r\n\t_emissiveColor = new THREE.Color(),\r\n\r\n\t_lightColor = new THREE.Color(),\r\n\r\n\t_patterns = {}, _imagedatas = {},\r\n\r\n\t_near, _far,\r\n\r\n\t_image, _uvs,\r\n\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\r\n\r\n\t_clipBox = new THREE.Box2(),\r\n\t_clearBox = new THREE.Box2(),\r\n\t_elemBox = new THREE.Box2(),\r\n\r\n\t_enableLighting = false,\r\n\t_ambientLight = new THREE.Color(),\r\n\t_directionalLights = new THREE.Color(),\r\n\t_pointLights = new THREE.Color(),\r\n\r\n\t_pi2 = Math.PI * 2,\r\n\t_vector3 = new THREE.Vector3(), // Needed for PointLight\r\n\r\n\t_pixelMap, _pixelMapContext, _pixelMapImage, _pixelMapData,\r\n\t_gradientMap, _gradientMapContext, _gradientMapQuality = 16;\r\n\r\n\t_pixelMap = document.createElement( 'canvas' );\r\n\t_pixelMap.width = _pixelMap.height = 2;\r\n\r\n\t_pixelMapContext = _pixelMap.getContext( '2d' );\r\n\t_pixelMapContext.fillStyle = 'rgba(0,0,0,1)';\r\n\t_pixelMapContext.fillRect( 0, 0, 2, 2 );\r\n\r\n\t_pixelMapImage = _pixelMapContext.getImageData( 0, 0, 2, 2 );\r\n\t_pixelMapData = _pixelMapImage.data;\r\n\r\n\t_gradientMap = document.createElement( 'canvas' );\r\n\t_gradientMap.width = _gradientMap.height = _gradientMapQuality;\r\n\r\n\t_gradientMapContext = _gradientMap.getContext( '2d' );\r\n\t_gradientMapContext.translate( - _gradientMapQuality / 2, - _gradientMapQuality / 2 );\r\n\t_gradientMapContext.scale( _gradientMapQuality, _gradientMapQuality );\r\n\r\n\t_gradientMapQuality --; // Fix UVs\r\n\r\n\tthis.domElement = _canvas;\r\n\r\n\tthis.devicePixelRatio = parameters.devicePixelRatio !== undefined\r\n\t\t\t\t? parameters.devicePixelRatio\r\n\t\t\t\t: window.devicePixelRatio !== undefined\r\n\t\t\t\t\t? window.devicePixelRatio\r\n\t\t\t\t\t: 1;\r\n\r\n\tthis.autoClear = true;\r\n\tthis.sortObjects = true;\r\n\tthis.sortElements = true;\r\n\r\n\tthis.info = {\r\n\r\n\t\trender: {\r\n\r\n\t\t\tvertices: 0,\r\n\t\t\tfaces: 0\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// WebGLRenderer compatibility\r\n\r\n\tthis.supportsVertexTextures = function () {};\r\n\tthis.setFaceCulling = function () {};\r\n\r\n\tthis.setSize = function ( width, height ) {\r\n\r\n\t\t_canvasWidth = width * this.devicePixelRatio;\r\n\t\t_canvasHeight = height * this.devicePixelRatio;\r\n\r\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\r\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\r\n\r\n\t\t_canvas.width = _canvasWidth;\r\n\t\t_canvas.height = _canvasHeight;\r\n\r\n\t\t_canvas.style.width = width + 'px';\r\n\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t_clipBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t\t_clearBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t\t_contextGlobalAlpha = 1;\r\n\t\t_contextGlobalCompositeOperation = 0;\r\n\t\t_contextStrokeStyle = null;\r\n\t\t_contextFillStyle = null;\r\n\t\t_contextLineWidth = null;\r\n\t\t_contextLineCap = null;\r\n\t\t_contextLineJoin = null;\r\n\r\n\t};\r\n\r\n\tthis.setClearColor = function ( color, opacity ) {\r\n\r\n\t\t_clearColor.copy( color );\r\n\t\t_clearOpacity = opacity !== undefined ? opacity : 1;\r\n\r\n\t\t_clearBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tthis.setClearColorHex = function ( hex, opacity ) {\r\n\r\n\t\t_clearColor.setHex( hex );\r\n\t\t_clearOpacity = opacity !== undefined ? opacity : 1;\r\n\r\n\t\t_clearBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tthis.getMaxAnisotropy  = function () {\r\n\r\n\t\treturn 0;\r\n\r\n\t};\r\n\r\n\tthis.clear = function () {\r\n\r\n\t\t_context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );\r\n\r\n\t\tif ( _clearBox.empty() === false ) {\r\n\r\n\t\t\t_clearBox.intersect( _clipBox );\r\n\t\t\t_clearBox.expandByScalar( 2 );\r\n\r\n\t\t\tif ( _clearOpacity < 1 ) {\r\n\r\n\t\t\t\t_context.clearRect(\r\n\t\t\t\t\t_clearBox.min.x | 0,\r\n\t\t\t\t\t_clearBox.min.y | 0,\r\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\r\n\t\t\t\t\t( _clearBox.max.y - _clearBox.min.y ) | 0\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _clearOpacity > 0 ) {\r\n\r\n\t\t\t\tsetBlending( THREE.NormalBlending );\r\n\t\t\t\tsetOpacity( 1 );\r\n\r\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearOpacity + ')' );\r\n\r\n\t\t\t\t_context.fillRect(\r\n\t\t\t\t\t_clearBox.min.x | 0,\r\n\t\t\t\t\t_clearBox.min.y | 0,\r\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\r\n\t\t\t\t\t( _clearBox.max.y - _clearBox.min.y ) | 0\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_clearBox.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.autoClear === true ) {\r\n\r\n\t\t\tthis.clear();\r\n\r\n\t\t}\r\n\r\n\t\t_context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );\r\n\r\n\t\t_this.info.render.vertices = 0;\r\n\t\t_this.info.render.faces = 0;\r\n\r\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\r\n\t\t_elements = _renderData.elements;\r\n\t\t_lights = _renderData.lights;\r\n\r\n\t\t/* DEBUG\r\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\r\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\r\n\t\t*/\r\n\r\n\t\t_enableLighting = _lights.length > 0;\r\n\r\n\t\tif ( _enableLighting === true ) {\r\n\r\n\t\t\t calculateLights();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var e = 0, el = _elements.length; e < el; e++ ) {\r\n\r\n\t\t\tvar element = _elements[ e ];\r\n\r\n\t\t\tvar material = element.material;\r\n\r\n\t\t\tif ( material === undefined || material.visible === false ) continue;\r\n\r\n\t\t\t_elemBox.makeEmpty();\r\n\r\n\t\t\tif ( element instanceof THREE.RenderableParticle ) {\r\n\r\n\t\t\t\t_v1 = element;\r\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\trenderParticle( _v1, element, material, scene );\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen ] );\r\n\r\n\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === true ) {\r\n\r\n\t\t\t\t\trenderLine( _v1, _v2, element, material, scene );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableFace3 ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\r\n\r\n\t\t\t\tif ( _v1.positionScreen.z < -1 || _v1.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v2.positionScreen.z < -1 || _v2.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v3.positionScreen.z < -1 || _v3.positionScreen.z > 1 ) continue;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\tif ( material.overdraw === true ) {\r\n\r\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen );\r\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen );\r\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ] );\r\n\r\n\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material, scene );\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableFace4 ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3; _v4 = element.v4;\r\n\r\n\t\t\t\tif ( _v1.positionScreen.z < -1 || _v1.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v2.positionScreen.z < -1 || _v2.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v3.positionScreen.z < -1 || _v3.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v4.positionScreen.z < -1 || _v4.positionScreen.z > 1 ) continue;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v4.positionScreen.x *= _canvasWidthHalf; _v4.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\t_v5.positionScreen.copy( _v2.positionScreen );\r\n\t\t\t\t_v6.positionScreen.copy( _v4.positionScreen );\r\n\r\n\t\t\t\tif ( material.overdraw === true ) {\r\n\r\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen );\r\n\t\t\t\t\texpand( _v2.positionScreen, _v4.positionScreen );\r\n\t\t\t\t\texpand( _v4.positionScreen, _v1.positionScreen );\r\n\r\n\t\t\t\t\texpand( _v3.positionScreen, _v5.positionScreen );\r\n\t\t\t\t\texpand( _v3.positionScreen, _v6.positionScreen );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen, _v4.positionScreen ] );\r\n\r\n\t\t\t\trenderFace4( _v1, _v2, _v3, _v4, _v5, _v6, element, material, scene );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* DEBUG\r\n\t\t\tsetLineWidth( 1 );\r\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\r\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\r\n\t\t\t*/\r\n\r\n\t\t\t_clearBox.union( _elemBox );\r\n\r\n\t\t}\r\n\r\n\t\t/* DEBUG\r\n\t\tsetLineWidth( 1 );\r\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\r\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\r\n\t\t*/\r\n\r\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\r\n\r\n\t\t//\r\n\r\n\t\tfunction calculateLights() {\r\n\r\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\r\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\r\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\r\n\r\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\t\tvar light = _lights[ l ];\r\n\t\t\t\tvar lightColor = light.color;\r\n\r\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\t\t_ambientLight.add( lightColor );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t\t// for particles\r\n\r\n\t\t\t\t\t_directionalLights.add( lightColor );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\t\t// for particles\r\n\r\n\t\t\t\t\t_pointLights.add( lightColor );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction calculateLight( position, normal, color ) {\r\n\r\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\t\tvar light = _lights[ l ];\r\n\r\n\t\t\t\t_lightColor.copy( light.color );\r\n\r\n\t\t\t\tif ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t\tvar lightPosition = light.matrixWorld.getPosition().normalize();\r\n\r\n\t\t\t\t\tvar amount = normal.dot( lightPosition );\r\n\r\n\t\t\t\t\tif ( amount <= 0 ) continue;\r\n\r\n\t\t\t\t\tamount *= light.intensity;\r\n\r\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\t\tvar lightPosition = light.matrixWorld.getPosition();\r\n\r\n\t\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\r\n\r\n\t\t\t\t\tif ( amount <= 0 ) continue;\r\n\r\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\r\n\r\n\t\t\t\t\tif ( amount == 0 ) continue;\r\n\r\n\t\t\t\t\tamount *= light.intensity;\r\n\r\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderParticle( v1, element, material, scene ) {\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\tvar width, height, scaleX, scaleY,\r\n\t\t\tbitmap, bitmapWidth, bitmapHeight;\r\n\r\n\t\t\tif ( material instanceof THREE.ParticleBasicMaterial ) {\r\n\r\n\t\t\t\tif ( material.map === null ) {\r\n\r\n\t\t\t\t\tscaleX = element.object.scale.x;\r\n\t\t\t\t\tscaleY = element.object.scale.y;\r\n\r\n\t\t\t\t\t// TODO: Be able to disable this\r\n\r\n\t\t\t\t\tscaleX *= element.scale.x * _canvasWidthHalf;\r\n\t\t\t\t\tscaleY *= element.scale.y * _canvasHeightHalf;\r\n\r\n\t\t\t\t\t_elemBox.min.set( v1.x - scaleX, v1.y - scaleY );\r\n\t\t\t\t\t_elemBox.max.set( v1.x + scaleX, v1.y + scaleY );\r\n\r\n\t\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\r\n\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsetFillStyle( material.color.getStyle() );\r\n\r\n\t\t\t\t\t_context.save();\r\n\t\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t\t_context.rotate( - element.rotation );\r\n\t\t\t\t\t_context.scale( scaleX, scaleY );\r\n\t\t\t\t\t_context.fillRect( -1, -1, 2, 2 );\r\n\t\t\t\t\t_context.restore();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbitmap = material.map.image;\r\n\t\t\t\t\tbitmapWidth = bitmap.width >> 1;\r\n\t\t\t\t\tbitmapHeight = bitmap.height >> 1;\r\n\r\n\t\t\t\t\tscaleX = element.scale.x * _canvasWidthHalf;\r\n\t\t\t\t\tscaleY = element.scale.y * _canvasHeightHalf;\r\n\r\n\t\t\t\t\twidth = scaleX * bitmapWidth;\r\n\t\t\t\t\theight = scaleY * bitmapHeight;\r\n\r\n\t\t\t\t\t// TODO: Rotations break this...\r\n\r\n\t\t\t\t\t_elemBox.min.set( v1.x - width, v1.y - height );\r\n\t\t\t\t\t_elemBox.max.set( v1.x + width, v1.y + height );\r\n\r\n\t\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\r\n\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_context.save();\r\n\t\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t\t_context.rotate( - element.rotation );\r\n\t\t\t\t\t_context.scale( scaleX, - scaleY );\r\n\r\n\t\t\t\t\t_context.translate( - bitmapWidth, - bitmapHeight );\r\n\t\t\t\t\t_context.drawImage( bitmap, 0, 0 );\r\n\t\t\t\t\t_context.restore();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* DEBUG\r\n\t\t\t\tsetStrokeStyle( 'rgb(255,255,0)' );\r\n\t\t\t\t_context.beginPath();\r\n\t\t\t\t_context.moveTo( v1.x - 10, v1.y );\r\n\t\t\t\t_context.lineTo( v1.x + 10, v1.y );\r\n\t\t\t\t_context.moveTo( v1.x, v1.y - 10 );\r\n\t\t\t\t_context.lineTo( v1.x, v1.y + 10 );\r\n\t\t\t\t_context.stroke();\r\n\t\t\t\t*/\r\n\r\n\t\t\t} else if ( material instanceof THREE.ParticleCanvasMaterial ) {\r\n\r\n\t\t\t\twidth = element.scale.x * _canvasWidthHalf;\r\n\t\t\t\theight = element.scale.y * _canvasHeightHalf;\r\n\r\n\t\t\t\t_elemBox.min.set( v1.x - width, v1.y - height );\r\n\t\t\t\t_elemBox.max.set( v1.x + width, v1.y + height );\r\n\r\n\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\t\t\t\tsetFillStyle( material.color.getStyle() );\r\n\r\n\t\t\t\t_context.save();\r\n\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t_context.rotate( - element.rotation );\r\n\t\t\t\t_context.scale( width, height );\r\n\r\n\t\t\t\tmaterial.program( _context );\r\n\r\n\t\t\t\t_context.restore();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderLine( v1, v2, element, material, scene ) {\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\r\n\t\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\r\n\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\t\tsetLineWidth( material.linewidth );\r\n\t\t\t\tsetLineCap( material.linecap );\r\n\t\t\t\tsetLineJoin( material.linejoin );\r\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\r\n\t\t\t\t_context.stroke();\r\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material, scene ) {\r\n\r\n\t\t\t_this.info.render.vertices += 3;\r\n\t\t\t_this.info.render.faces ++;\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\r\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\r\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\r\n\r\n\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\r\n\r\n\t\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null && material.map === null ) {\r\n\r\n\t\t\t\t_diffuseColor.copy( material.color );\r\n\t\t\t\t_emissiveColor.copy( material.emissive );\r\n\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t_diffuseColor.multiply( element.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _enableLighting === true ) {\r\n\r\n\t\t\t\t\tif ( material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 3 ) {\r\n\r\n\t\t\t\t\t\t_color1.copy( _ambientLight );\r\n\t\t\t\t\t\t_color2.copy( _ambientLight );\r\n\t\t\t\t\t\t_color3.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.v1.positionWorld, element.vertexNormalsModel[ 0 ], _color1 );\r\n\t\t\t\t\t\tcalculateLight( element.v2.positionWorld, element.vertexNormalsModel[ 1 ], _color2 );\r\n\t\t\t\t\t\tcalculateLight( element.v3.positionWorld, element.vertexNormalsModel[ 2 ], _color3 );\r\n\r\n\t\t\t\t\t\t_color1.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color2.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color3.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_color.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.centroidModel, element.normalModel, _color );\r\n\r\n\t\t\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\r\n\r\n\t\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( material.color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( material.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\tif ( material.map !== null ) {\r\n\r\n\t\t\t\t\tif ( material.map.mapping instanceof THREE.UVMapping ) {\r\n\r\n\t\t\t\t\t\t_uvs = element.uvs[ 0 ];\r\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t} else if ( material.envMap !== null ) {\r\n\r\n\t\t\t\t\tif ( material.envMap.mapping instanceof THREE.SphericalReflectionMapping ) {\r\n\r\n\t\t\t\t\t\t_vector3.copy( element.vertexNormalsModelView[ uv1 ] );\r\n\t\t\t\t\t\t_uv1x = 0.5 * _vector3.x + 0.5;\r\n\t\t\t\t\t\t_uv1y = 0.5 * _vector3.y + 0.5;\r\n\r\n\t\t\t\t\t\t_vector3.copy( element.vertexNormalsModelView[ uv2 ] );\r\n\t\t\t\t\t\t_uv2x = 0.5 * _vector3.x + 0.5;\r\n\t\t\t\t\t\t_uv2y = 0.5 * _vector3.y + 0.5;\r\n\r\n\t\t\t\t\t\t_vector3.copy( element.vertexNormalsModelView[ uv3 ] );\r\n\t\t\t\t\t\t_uv3x = 0.5 * _vector3.x + 0.5;\r\n\t\t\t\t\t\t_uv3y = 0.5 * _vector3.y + 0.5;\r\n\r\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\r\n\r\n\t\t\t\t\t}/* else if ( material.envMap.mapping == THREE.SphericalRefractionMapping ) {\r\n\r\n\r\n\r\n\t\t\t\t\t}*/\r\n\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_color.copy( material.color );\r\n\r\n\t\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t\t_color.multiply( element.color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\t_near = camera.near;\r\n\t\t\t\t_far = camera.far;\r\n\r\n\t\t\t\tvar depth;\r\n\r\n\t\t\t\tdepth = 1 - smoothstep( v1.positionScreen.z * v1.positionScreen.w, _near, _far );\r\n\t\t\t\t_color1.setRGB( depth, depth, depth );\r\n\r\n\t\t\t\tdepth = 1 - smoothstep( v2.positionScreen.z * v2.positionScreen.w, _near, _far )\r\n\t\t\t\t_color2.setRGB( depth, depth, depth );\r\n\r\n\t\t\t\tdepth = 1 - smoothstep( v3.positionScreen.z * v3.positionScreen.w, _near, _far );\r\n\t\t\t\t_color3.setRGB( depth, depth, depth );\r\n\r\n\t\t\t\t_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tvar normal;\r\n\r\n\t\t\t\tif ( material.shading == THREE.FlatShading ) {\r\n\r\n\t\t\t\t\tnormal = element.normalModelView;\r\n\r\n\t\t\t\t\t_color.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t} else if ( material.shading == THREE.SmoothShading ) {\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ uv1 ];\r\n\t\t\t\t\t_color1.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ uv2 ];\r\n\t\t\t\t\t_color2.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ uv3 ];\r\n\t\t\t\t\t_color3.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\t_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderFace4( v1, v2, v3, v4, v5, v6, element, material, scene ) {\r\n\r\n\t\t\t_this.info.render.vertices += 4;\r\n\t\t\t_this.info.render.faces ++;\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\tif ( ( material.map !== undefined && material.map !== null ) || ( material.envMap !== undefined && material.envMap !== null ) ) {\r\n\r\n\t\t\t\t// Let renderFace3() handle this\r\n\r\n\t\t\t\trenderFace3( v1, v2, v4, 0, 1, 3, element, material, scene );\r\n\t\t\t\trenderFace3( v5, v3, v6, 1, 2, 3, element, material, scene );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\r\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\r\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\r\n\t\t\t_v4x = v4.positionScreen.x; _v4y = v4.positionScreen.y;\r\n\t\t\t_v5x = v5.positionScreen.x; _v5y = v5.positionScreen.y;\r\n\t\t\t_v6x = v6.positionScreen.x; _v6y = v6.positionScreen.y;\r\n\r\n\t\t\tif ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\t_diffuseColor.copy( material.color );\r\n\t\t\t\t_emissiveColor.copy( material.emissive );\r\n\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t_diffuseColor.multiply( element.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _enableLighting === true ) {\r\n\r\n\t\t\t\t\tif ( material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 4 ) {\r\n\r\n\t\t\t\t\t\t_color1.copy( _ambientLight );\r\n\t\t\t\t\t\t_color2.copy( _ambientLight );\r\n\t\t\t\t\t\t_color3.copy( _ambientLight );\r\n\t\t\t\t\t\t_color4.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.v1.positionWorld, element.vertexNormalsModel[ 0 ], _color1 );\r\n\t\t\t\t\t\tcalculateLight( element.v2.positionWorld, element.vertexNormalsModel[ 1 ], _color2 );\r\n\t\t\t\t\t\tcalculateLight( element.v4.positionWorld, element.vertexNormalsModel[ 3 ], _color3 );\r\n\t\t\t\t\t\tcalculateLight( element.v3.positionWorld, element.vertexNormalsModel[ 2 ], _color4 );\r\n\r\n\t\t\t\t\t\t_color1.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color2.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color3.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color4.multiply( _diffuseColor ).add( _emissiveColor );\r\n\r\n\t\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\t\t// TODO: UVs are incorrect, v4->v3?\r\n\r\n\t\t\t\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );\r\n\t\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t\t\tdrawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );\r\n\t\t\t\t\t\tclipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_color.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.centroidModel, element.normalModel, _color );\r\n\r\n\t\t\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\r\n\r\n\t\t\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_color.addColors( _diffuseColor, _emissiveColor );\r\n\r\n\t\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial ) {\r\n\r\n\t\t\t\t_color.copy( material.color );\r\n\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t_color.multiply( element.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tvar normal;\r\n\r\n\t\t\t\tif ( material.shading == THREE.FlatShading ) {\r\n\r\n\t\t\t\t\tnormal = element.normalModelView;\r\n\t\t\t\t\t_color.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t} else if ( material.shading == THREE.SmoothShading ) {\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 0 ];\r\n\t\t\t\t\t_color1.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 1 ];\r\n\t\t\t\t\t_color2.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 3 ];\r\n\t\t\t\t\t_color3.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 2 ];\r\n\t\t\t\t\t_color4.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );\r\n\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t\tdrawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );\r\n\t\t\t\t\tclipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\t_near = camera.near;\r\n\t\t\t\t_far = camera.far;\r\n\r\n\t\t\t\t_color1.r = _color1.g = _color1.b = 1 - smoothstep( v1.positionScreen.z * v1.positionScreen.w, _near, _far );\r\n\t\t\t\t_color2.r = _color2.g = _color2.b = 1 - smoothstep( v2.positionScreen.z * v2.positionScreen.w, _near, _far );\r\n\t\t\t\t_color3.r = _color3.g = _color3.b = 1 - smoothstep( v4.positionScreen.z * v4.positionScreen.w, _near, _far );\r\n\t\t\t\t_color4.r = _color4.g = _color4.b = 1 - smoothstep( v3.positionScreen.z * v3.positionScreen.w, _near, _far );\r\n\r\n\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t// TODO: UVs are incorrect, v4->v3?\r\n\r\n\t\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );\r\n\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\tdrawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );\r\n\t\t\t\tclipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\r\n\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( x0, y0 );\r\n\t\t\t_context.lineTo( x1, y1 );\r\n\t\t\t_context.lineTo( x2, y2 );\r\n\t\t\t_context.closePath();\r\n\r\n\t\t}\r\n\r\n\t\tfunction drawQuad( x0, y0, x1, y1, x2, y2, x3, y3 ) {\r\n\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( x0, y0 );\r\n\t\t\t_context.lineTo( x1, y1 );\r\n\t\t\t_context.lineTo( x2, y2 );\r\n\t\t\t_context.lineTo( x3, y3 );\r\n\t\t\t_context.closePath();\r\n\r\n\t\t}\r\n\r\n\t\tfunction strokePath( color, linewidth, linecap, linejoin ) {\r\n\r\n\t\t\tsetLineWidth( linewidth );\r\n\t\t\tsetLineCap( linecap );\r\n\t\t\tsetLineJoin( linejoin );\r\n\t\t\tsetStrokeStyle( color.getStyle() );\r\n\r\n\t\t\t_context.stroke();\r\n\r\n\t\t\t_elemBox.expandByScalar( linewidth * 2 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction fillPath( color ) {\r\n\r\n\t\t\tsetFillStyle( color.getStyle() );\r\n\t\t\t_context.fill();\r\n\r\n\t\t}\r\n\r\n\t\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\r\n\r\n\t\t\tif ( texture instanceof THREE.DataTexture || texture.image === undefined || texture.image.width == 0 ) return;\r\n\r\n\t\t\tif ( texture.needsUpdate === true ) {\r\n\r\n\t\t\t\tvar repeatX = texture.wrapS == THREE.RepeatWrapping;\r\n\t\t\t\tvar repeatY = texture.wrapT == THREE.RepeatWrapping;\r\n\r\n\t\t\t\t_patterns[ texture.id ] = _context.createPattern(\r\n\t\t\t\t\ttexture.image, repeatX === true && repeatY === true\r\n\t\t\t\t\t\t? 'repeat'\r\n\t\t\t\t\t\t: repeatX === true && repeatY === false\r\n\t\t\t\t\t\t\t? 'repeat-x'\r\n\t\t\t\t\t\t\t: repeatX === false && repeatY === true\r\n\t\t\t\t\t\t\t\t? 'repeat-y'\r\n\t\t\t\t\t\t\t\t: 'no-repeat'\r\n\t\t\t\t);\r\n\r\n\t\t\t\ttexture.needsUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_patterns[ texture.id ] === undefined\r\n\t\t\t\t? setFillStyle( 'rgba(0,0,0,1)' )\r\n\t\t\t\t: setFillStyle( _patterns[ texture.id ] );\r\n\r\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\r\n\t\t\tvar a, b, c, d, e, f, det, idet,\r\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\r\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\r\n\t\t\twidth = texture.image.width * texture.repeat.x,\r\n\t\t\theight = texture.image.height * texture.repeat.y;\r\n\r\n\t\t\tu0 = ( u0 + offsetX ) * width;\r\n\t\t\tv0 = ( 1.0 - v0 + offsetY ) * height;\r\n\r\n\t\t\tu1 = ( u1 + offsetX ) * width;\r\n\t\t\tv1 = ( 1.0 - v1 + offsetY ) * height;\r\n\r\n\t\t\tu2 = ( u2 + offsetX ) * width;\r\n\t\t\tv2 = ( 1.0 - v2 + offsetY ) * height;\r\n\r\n\t\t\tx1 -= x0; y1 -= y0;\r\n\t\t\tx2 -= x0; y2 -= y0;\r\n\r\n\t\t\tu1 -= u0; v1 -= v0;\r\n\t\t\tu2 -= u0; v2 -= v0;\r\n\r\n\t\t\tdet = u1 * v2 - u2 * v1;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tif ( _imagedatas[ texture.id ] === undefined ) {\r\n\r\n\t\t\t\t\tvar canvas = document.createElement( 'canvas' )\r\n\t\t\t\t\tcanvas.width = texture.image.width;\r\n\t\t\t\t\tcanvas.height = texture.image.height;\r\n\r\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\t\tcontext.drawImage( texture.image, 0, 0 );\r\n\r\n\t\t\t\t\t_imagedatas[ texture.id ] = context.getImageData( 0, 0, texture.image.width, texture.image.height ).data;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar data = _imagedatas[ texture.id ];\r\n\t\t\t\tvar index = ( Math.floor( u0 ) + Math.floor( v0 ) * texture.image.width ) * 4;\r\n\r\n\t\t\t\t_color.setRGB( data[ index ] / 255, data[ index + 1 ] / 255, data[ index + 2 ] / 255 );\r\n\t\t\t\tfillPath( _color );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tidet = 1 / det;\r\n\r\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\r\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\r\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\r\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\r\n\r\n\t\t\te = x0 - a * u0 - c * v0;\r\n\t\t\tf = y0 - b * u0 - d * v0;\r\n\r\n\t\t\t_context.save();\r\n\t\t\t_context.transform( a, b, c, d, e, f );\r\n\t\t\t_context.fill();\r\n\t\t\t_context.restore();\r\n\r\n\t\t}\r\n\r\n\t\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\r\n\r\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\r\n\t\t\tvar a, b, c, d, e, f, det, idet,\r\n\t\t\twidth = image.width - 1,\r\n\t\t\theight = image.height - 1;\r\n\r\n\t\t\tu0 *= width; v0 *= height;\r\n\t\t\tu1 *= width; v1 *= height;\r\n\t\t\tu2 *= width; v2 *= height;\r\n\r\n\t\t\tx1 -= x0; y1 -= y0;\r\n\t\t\tx2 -= x0; y2 -= y0;\r\n\r\n\t\t\tu1 -= u0; v1 -= v0;\r\n\t\t\tu2 -= u0; v2 -= v0;\r\n\r\n\t\t\tdet = u1 * v2 - u2 * v1;\r\n\r\n\t\t\tidet = 1 / det;\r\n\r\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\r\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\r\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\r\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\r\n\r\n\t\t\te = x0 - a * u0 - c * v0;\r\n\t\t\tf = y0 - b * u0 - d * v0;\r\n\r\n\t\t\t_context.save();\r\n\t\t\t_context.transform( a, b, c, d, e, f );\r\n\t\t\t_context.clip();\r\n\t\t\t_context.drawImage( image, 0, 0 );\r\n\t\t\t_context.restore();\r\n\r\n\t\t}\r\n\r\n\t\tfunction getGradientTexture( color1, color2, color3, color4 ) {\r\n\r\n\t\t\t// http://mrdoob.com/blog/post/710\r\n\r\n\t\t\t_pixelMapData[ 0 ] = ( color1.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 1 ] = ( color1.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 2 ] = ( color1.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapData[ 4 ] = ( color2.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 5 ] = ( color2.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 6 ] = ( color2.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapData[ 8 ] = ( color3.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 9 ] = ( color3.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 10 ] = ( color3.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapData[ 12 ] = ( color4.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 13 ] = ( color4.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 14 ] = ( color4.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapContext.putImageData( _pixelMapImage, 0, 0 );\r\n\t\t\t_gradientMapContext.drawImage( _pixelMap, 0, 0 );\r\n\r\n\t\t\treturn _gradientMap;\r\n\r\n\t\t}\r\n\r\n\t\tfunction smoothstep( value, min, max ) {\r\n\r\n\t\t\tvar x = ( value - min ) / ( max - min );\r\n\t\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t\t}\r\n\r\n\t\t// Hide anti-alias gaps\r\n\r\n\t\tfunction expand( v1, v2 ) {\r\n\r\n\t\t\tvar x = v2.x - v1.x, y =  v2.y - v1.y,\r\n\t\t\tdet = x * x + y * y, idet;\r\n\r\n\t\t\tif ( det === 0 ) return;\r\n\r\n\t\t\tidet = 1 / Math.sqrt( det );\r\n\r\n\t\t\tx *= idet; y *= idet;\r\n\r\n\t\t\tv2.x += x; v2.y += y;\r\n\t\t\tv1.x -= x; v1.y -= y;\r\n\r\n\t\t}\r\n\t};\r\n\r\n\t// Context cached methods.\r\n\r\n\tfunction setOpacity( value ) {\r\n\r\n\t\tif ( _contextGlobalAlpha !== value ) {\r\n\r\n\t\t\t_context.globalAlpha = value;\r\n\t\t\t_contextGlobalAlpha = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setBlending( value ) {\r\n\r\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\r\n\r\n\t\t\tif ( value === THREE.NormalBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\r\n\r\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\r\n\r\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'darker';\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_contextGlobalCompositeOperation = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineWidth( value ) {\r\n\r\n\t\tif ( _contextLineWidth !== value ) {\r\n\r\n\t\t\t_context.lineWidth = value;\r\n\t\t\t_contextLineWidth = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineCap( value ) {\r\n\r\n\t\t// \"butt\", \"round\", \"square\"\r\n\r\n\t\tif ( _contextLineCap !== value ) {\r\n\r\n\t\t\t_context.lineCap = value;\r\n\t\t\t_contextLineCap = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineJoin( value ) {\r\n\r\n\t\t// \"round\", \"bevel\", \"miter\"\r\n\r\n\t\tif ( _contextLineJoin !== value ) {\r\n\r\n\t\t\t_context.lineJoin = value;\r\n\t\t\t_contextLineJoin = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setStrokeStyle( value ) {\r\n\r\n\t\tif ( _contextStrokeStyle !== value ) {\r\n\r\n\t\t\t_context.strokeStyle = value;\r\n\t\t\t_contextStrokeStyle = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setFillStyle( value ) {\r\n\r\n\t\tif ( _contextFillStyle !== value ) {\r\n\r\n\t\t\t_context.fillStyle = value;\r\n\t\t\t_contextFillStyle = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\nTHREE.ShaderChunk = {\r\n\r\n\t// FOG\r\n\r\n\tfog_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_FOG\",\r\n\r\n\t\t\t\"uniform vec3 fogColor;\",\r\n\r\n\t\t\t\"#ifdef FOG_EXP2\",\r\n\r\n\t\t\t\t\"uniform float fogDensity;\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"uniform float fogNear;\",\r\n\t\t\t\t\"uniform float fogFar;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tfog_fragment: [\r\n\r\n\t\t\"#ifdef USE_FOG\",\r\n\r\n\t\t\t\"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\r\n\t\t\t\"#ifdef FOG_EXP2\",\r\n\r\n\t\t\t\t\"const float LOG2 = 1.442695;\",\r\n\t\t\t\t\"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\",\r\n\t\t\t\t\"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"float fogFactor = smoothstep( fogNear, fogFar, depth );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// ENVIRONMENT MAP\r\n\r\n\tenvmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_ENVMAP\",\r\n\r\n\t\t\t\"uniform float reflectivity;\",\r\n\t\t\t\"uniform samplerCube envMap;\",\r\n\t\t\t\"uniform float flipEnvMap;\",\r\n\t\t\t\"uniform int combine;\",\r\n\r\n\t\t\t\"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\t\"uniform bool useRefract;\",\r\n\t\t\t\t\"uniform float refractionRatio;\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"varying vec3 vReflect;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tenvmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_ENVMAP\",\r\n\r\n\t\t\t\"vec3 reflectVec;\",\r\n\r\n\t\t\t\"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\t\"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\",\r\n\r\n\t\t\t\t\"if ( useRefract ) {\",\r\n\r\n\t\t\t\t\t\"reflectVec = refract( cameraToVertex, normal, refractionRatio );\",\r\n\r\n\t\t\t\t\"} else { \",\r\n\r\n\t\t\t\t\t\"reflectVec = reflect( cameraToVertex, normal );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"reflectVec = vReflect;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\",\r\n\t\t\t\t\"vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\"cubeColor.xyz *= cubeColor.xyz;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"if ( combine == 1 ) {\",\r\n\r\n\t\t\t\t\"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\",\r\n\r\n\t\t\t\"} else if ( combine == 2 ) {\",\r\n\r\n\t\t\t\t\"gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\",\r\n\r\n\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\"gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tenvmap_pars_vertex: [\r\n\r\n\t\t\"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\"varying vec3 vReflect;\",\r\n\r\n\t\t\t\"uniform float refractionRatio;\",\r\n\t\t\t\"uniform bool useRefract;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tworldpos_vertex : [\r\n\r\n\t\t\"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\",\r\n\r\n\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * skinned;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tenvmap_vertex : [\r\n\r\n\t\t\"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\"vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\",\r\n\t\t\t\"worldNormal = normalize( worldNormal );\",\r\n\r\n\t\t\t\"vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\",\r\n\r\n\t\t\t\"if ( useRefract ) {\",\r\n\r\n\t\t\t\t\"vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\",\r\n\r\n\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\"vReflect = reflect( cameraToVertex, worldNormal );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// COLOR MAP (particles)\r\n\r\n\tmap_particle_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tmap_particle_fragment: [\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// COLOR MAP (triangles)\r\n\r\n\tmap_pars_vertex: [\r\n\r\n\t\t\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\r\n\r\n\t\t\t\"varying vec2 vUv;\",\r\n\t\t\t\"uniform vec4 offsetRepeat;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmap_pars_fragment: [\r\n\r\n\t\t\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\r\n\r\n\t\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmap_vertex: [\r\n\r\n\t\t\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\r\n\r\n\t\t\t\"vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"vec4 texelColor = texture2D( map, vUv );\",\r\n\r\n\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\"texelColor.xyz *= texelColor.xyz;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * texelColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LIGHT MAP\r\n\r\n\tlightmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"varying vec2 vUv2;\",\r\n\t\t\t\"uniform sampler2D lightMap;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlightmap_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"varying vec2 vUv2;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlightmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlightmap_vertex: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"vUv2 = uv2;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// BUMP MAP\r\n\r\n\tbumpmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_BUMPMAP\",\r\n\r\n\t\t\t\"uniform sampler2D bumpMap;\",\r\n\t\t\t\"uniform float bumpScale;\",\r\n\r\n\t\t\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\r\n\t\t\t//\thttp://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\r\n\r\n\t\t\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\n\t\t\t\"vec2 dHdxy_fwd() {\",\r\n\r\n\t\t\t\t\"vec2 dSTdx = dFdx( vUv );\",\r\n\t\t\t\t\"vec2 dSTdy = dFdy( vUv );\",\r\n\r\n\t\t\t\t\"float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\",\r\n\t\t\t\t\"float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\",\r\n\t\t\t\t\"float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\",\r\n\r\n\t\t\t\t\"return vec2( dBx, dBy );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\",\r\n\r\n\t\t\t\t\"vec3 vSigmaX = dFdx( surf_pos );\",\r\n\t\t\t\t\"vec3 vSigmaY = dFdy( surf_pos );\",\r\n\t\t\t\t\"vec3 vN = surf_norm;\",\t\t// normalized\r\n\r\n\t\t\t\t\"vec3 R1 = cross( vSigmaY, vN );\",\r\n\t\t\t\t\"vec3 R2 = cross( vN, vSigmaX );\",\r\n\r\n\t\t\t\t\"float fDet = dot( vSigmaX, R1 );\",\r\n\r\n\t\t\t\t\"vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\",\r\n\t\t\t\t\"return normalize( abs( fDet ) * surf_norm - vGrad );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// NORMAL MAP\r\n\r\n\tnormalmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_NORMALMAP\",\r\n\r\n\t\t\t\"uniform sampler2D normalMap;\",\r\n\t\t\t\"uniform vec2 normalScale;\",\r\n\r\n\t\t\t// Per-Pixel Tangent Space Normal Mapping\r\n\t\t\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\r\n\r\n\t\t\t\"vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\",\r\n\r\n\t\t\t\t\"vec3 q0 = dFdx( eye_pos.xyz );\",\r\n\t\t\t\t\"vec3 q1 = dFdy( eye_pos.xyz );\",\r\n\t\t\t\t\"vec2 st0 = dFdx( vUv.st );\",\r\n\t\t\t\t\"vec2 st1 = dFdy( vUv.st );\",\r\n\r\n\t\t\t\t\"vec3 S = normalize(  q0 * st1.t - q1 * st0.t );\",\r\n\t\t\t\t\"vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\",\r\n\t\t\t\t\"vec3 N = normalize( surf_norm );\",\r\n\r\n\t\t\t\t\"vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\",\r\n\t\t\t\t\"mapN.xy = normalScale * mapN.xy;\",\r\n\t\t\t\t\"mat3 tsn = mat3( S, T, N );\",\r\n\t\t\t\t\"return normalize( tsn * mapN );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// SPECULAR MAP\r\n\r\n\tspecularmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_SPECULARMAP\",\r\n\r\n\t\t\t\"uniform sampler2D specularMap;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tspecularmap_fragment: [\r\n\r\n\t\t\"float specularStrength;\",\r\n\r\n\t\t\"#ifdef USE_SPECULARMAP\",\r\n\r\n\t\t\t\"vec4 texelSpecular = texture2D( specularMap, vUv );\",\r\n\t\t\t\"specularStrength = texelSpecular.r;\",\r\n\r\n\t\t\"#else\",\r\n\r\n\t\t\t\"specularStrength = 1.0;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LIGHTS LAMBERT\r\n\r\n\tlights_lambert_pars_vertex: [\r\n\r\n\t\t\"uniform vec3 ambient;\",\r\n\t\t\"uniform vec3 diffuse;\",\r\n\t\t\"uniform vec3 emissive;\",\r\n\r\n\t\t\"uniform vec3 ambientLightColor;\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\"uniform vec3 wrapRGB;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlights_lambert_vertex: [\r\n\r\n\t\t\"vLightFront = vec3( 0.0 );\",\r\n\r\n\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"vLightBack = vec3( 0.0 );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"transformedNormal = normalize( transformedNormal );\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\r\n\t\t\t\"vec3 dirVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\"float dotProduct = dot( transformedNormal, dirVector );\",\r\n\t\t\t\"vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\"vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\t\t\t\t\"directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"vLightFront += directionalLightColor[ i ] * directionalLightWeighting;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\"lVector = normalize( lVector );\",\r\n\t\t\t\t\"float dotProduct = dot( transformedNormal, lVector );\",\r\n\r\n\t\t\t\t\"vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\"vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\t\t\t\t\t\"pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\",\r\n\r\n\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\"pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\",\r\n\r\n\t\t\t\t\"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\r\n\r\n\t\t\t\t\t\"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\r\n\r\n\t\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\"lVector = normalize( lVector );\",\r\n\r\n\t\t\t\t\t\"float dotProduct = dot( transformedNormal, lVector );\",\r\n\t\t\t\t\t\"vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\"vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\"vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\t\t\t\t\t\t\"spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\t\"spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\"vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\"vec3 lVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t\"float dotProduct = dot( transformedNormal, lVector );\",\r\n\r\n\t\t\t\t\"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\r\n\t\t\t\t\"float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\",\r\n\r\n\t\t\t\t\"vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\",\r\n\r\n\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LIGHTS PHONG\r\n\r\n\tlights_phong_pars_vertex: [\r\n\r\n\t\t\"#ifndef PHONG_PER_PIXEL\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tlights_phong_vertex: [\r\n\r\n\t\t\"#ifndef PHONG_PER_PIXEL\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\"vPointLight[ i ] = vec4( lVector, lDistance );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\"vSpotLight[ i ] = vec4( lVector, lDistance );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"vWorldPosition = worldPosition.xyz;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlights_phong_pars_fragment: [\r\n\r\n\t\t\"uniform vec3 ambientLightColor;\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\"uniform vec3 wrapRGB;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"varying vec3 vViewPosition;\",\r\n\t\t\"varying vec3 vNormal;\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlights_phong_fragment: [\r\n\r\n\t\t\"vec3 normal = normalize( vNormal );\",\r\n\t\t\"vec3 viewPosition = normalize( vViewPosition );\",\r\n\r\n\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef USE_NORMALMAP\",\r\n\r\n\t\t\t\"normal = perturbNormal2Arb( -viewPosition, normal );\",\r\n\r\n\t\t\"#elif defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 pointDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 pointSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\"vec3 lVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\"lVector = normalize( lVector );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"vec3 lVector = normalize( vPointLight[ i ].xyz );\",\r\n\t\t\t\t\t\"float lDistance = vPointLight[ i ].w;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"float pointDiffuseWeightFull = max( dotProduct, 0.0 );\",\r\n\t\t\t\t\t\"float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"float pointDiffuseWeight = max( dotProduct, 0.0 );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\",\r\n\r\n\t\t\t\t// specular\r\n\r\n\t\t\t\t\"vec3 pointHalfVector = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\",\r\n\t\t\t\t\"float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 spotDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 spotSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\"vec3 lVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\"lVector = normalize( lVector );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"vec3 lVector = normalize( vSpotLight[ i ].xyz );\",\r\n\t\t\t\t\t\"float lDistance = vSpotLight[ i ].w;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\",\r\n\r\n\t\t\t\t\"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\r\n\r\n\t\t\t\t\t\"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\r\n\r\n\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\r\n\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\"float spotDiffuseWeightFull = max( dotProduct, 0.0 );\",\r\n\t\t\t\t\t\t\"float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"float spotDiffuseWeight = max( dotProduct, 0.0 );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\"vec3 spotHalfVector = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\t\"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\"float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 dirDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 dirSpecular = vec3( 0.0 );\" ,\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\"vec3 dirVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\"float dotProduct = dot( normal, dirVector );\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"float dirDiffuseWeightFull = max( dotProduct, 0.0 );\",\r\n\t\t\t\t\t\"float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\"vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"float dirDiffuseWeight = max( dotProduct, 0.0 );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t// specular\r\n\r\n\t\t\t\t\"vec3 dirHalfVector = normalize( dirVector + viewPosition );\",\r\n\t\t\t\t\"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\",\r\n\t\t\t\t\"float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t// fresnel term from skin shader\r\n\t\t\t\t\t\"const float F0 = 0.128;\",\r\n\r\n\t\t\t\t\t\"float base = 1.0 - dot( viewPosition, dirHalfVector );\",\r\n\t\t\t\t\t\"float exponential = pow( base, 5.0 );\",\r\n\r\n\t\t\t\t\t\"float fresnel = exponential + F0 * ( 1.0 - exponential );\",\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t// fresnel term from fresnel shader\r\n\t\t\t\t\t\"const float mFresnelBias = 0.08;\",\r\n\t\t\t\t\t\"const float mFresnelScale = 0.3;\",\r\n\t\t\t\t\t\"const float mFresnelPower = 5.0;\",\r\n\r\n\t\t\t\t\t\"float fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\",\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t//\"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\",\r\n\r\n\t\t\t\t\t\"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 hemiDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 hemiSpecular = vec3( 0.0 );\" ,\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\"vec3 lVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\t\t\t\t\"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\r\n\r\n\t\t\t\t\"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\r\n\r\n\t\t\t\t\"hemiDiffuse += diffuse * hemiColor;\",\r\n\r\n\t\t\t\t// specular (sky light)\r\n\r\n\t\t\t\t\"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\",\r\n\t\t\t\t\"float hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t// specular (ground light)\r\n\r\n\t\t\t\t\"vec3 lVectorGround = -lVector;\",\r\n\r\n\t\t\t\t\"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\",\r\n\t\t\t\t\"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\",\r\n\t\t\t\t\"float hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\"float dotProductGround = dot( normal, lVectorGround );\",\r\n\r\n\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\"vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\",\r\n\t\t\t\t\t\"vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\",\r\n\t\t\t\t\t\"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"hemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"vec3 totalDiffuse = vec3( 0.0 );\",\r\n\t\t\"vec3 totalSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += dirDiffuse;\",\r\n\t\t\t\"totalSpecular += dirSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += hemiDiffuse;\",\r\n\t\t\t\"totalSpecular += hemiSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += pointDiffuse;\",\r\n\t\t\t\"totalSpecular += pointSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += spotDiffuse;\",\r\n\t\t\t\"totalSpecular += spotSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef METAL\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\",\r\n\r\n\t\t\"#else\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// VERTEX COLORS\r\n\r\n\tcolor_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"varying vec3 vColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tcolor_fragment: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * vec4( vColor, opacity );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tcolor_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"varying vec3 vColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tcolor_vertex: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\"vColor = color * color;\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"vColor = color;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// SKINNING\r\n\r\n\tskinning_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"#ifdef BONE_TEXTURE\",\r\n\r\n\t\t\t\t\"uniform sampler2D boneTexture;\",\r\n\r\n\t\t\t\t\"mat4 getBoneMatrix( const in float i ) {\",\r\n\r\n\t\t\t\t\t\"float j = i * 4.0;\",\r\n\t\t\t\t\t\"float x = mod( j, N_BONE_PIXEL_X );\",\r\n\t\t\t\t\t\"float y = floor( j / N_BONE_PIXEL_X );\",\r\n\r\n\t\t\t\t\t\"const float dx = 1.0 / N_BONE_PIXEL_X;\",\r\n\t\t\t\t\t\"const float dy = 1.0 / N_BONE_PIXEL_Y;\",\r\n\r\n\t\t\t\t\t\"y = dy * ( y + 0.5 );\",\r\n\r\n\t\t\t\t\t\"vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\",\r\n\t\t\t\t\t\"vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\",\r\n\t\t\t\t\t\"vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\",\r\n\t\t\t\t\t\"vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\",\r\n\r\n\t\t\t\t\t\"mat4 bone = mat4( v1, v2, v3, v4 );\",\r\n\r\n\t\t\t\t\t\"return bone;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"uniform mat4 boneGlobalMatrices[ MAX_BONES ];\",\r\n\r\n\t\t\t\t\"mat4 getBoneMatrix( const in float i ) {\",\r\n\r\n\t\t\t\t\t\"mat4 bone = boneGlobalMatrices[ int(i) ];\",\r\n\t\t\t\t\t\"return bone;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tskinbase_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"mat4 boneMatX = getBoneMatrix( skinIndex.x );\",\r\n\t\t\t\"mat4 boneMatY = getBoneMatrix( skinIndex.y );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tskinning_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\"vec4 skinVertex = vec4( morphed, 1.0 );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\"vec4 skinVertex = vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\r\n\t\t\t\"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// MORPHING\r\n\r\n\tmorphtarget_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\"#ifndef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"uniform float morphTargetInfluences[ 8 ];\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\"uniform float morphTargetInfluences[ 4 ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmorphtarget_vertex: [\r\n\r\n\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\"vec3 morphed = vec3( 0.0 );\",\r\n\t\t\t\"morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\",\r\n\t\t\t\"morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\",\r\n\t\t\t\"morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\",\r\n\t\t\t\"morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\",\r\n\r\n\t\t\t\"#ifndef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\",\r\n\t\t\t\"morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\",\r\n\t\t\t\"morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\",\r\n\t\t\t\"morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"morphed += position;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tdefault_vertex : [\r\n\r\n\t\t\"vec4 mvPosition;\",\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"mvPosition = modelViewMatrix * skinned;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\",\r\n\r\n\t\t\t\"mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\",\r\n\r\n\t\t\t\"mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"gl_Position = projectionMatrix * mvPosition;\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmorphnormal_vertex: [\r\n\r\n\t\t\"#ifdef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"vec3 morphedNormal = vec3( 0.0 );\",\r\n\r\n\t\t\t\"morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\",\r\n\t\t\t\"morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\",\r\n\t\t\t\"morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\",\r\n\t\t\t\"morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\",\r\n\r\n\t\t\t\"morphedNormal += normal;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tskinnormal_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"mat4 skinMatrix = skinWeight.x * boneMatX;\",\r\n\t\t\t\"skinMatrix \t+= skinWeight.y * boneMatY;\",\r\n\r\n\t\t\t\"#ifdef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\"vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tdefaultnormal_vertex: [\r\n\r\n\t\t\"vec3 objectNormal;\",\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"objectNormal = skinnedNormal.xyz;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\",\r\n\r\n\t\t\t\"objectNormal = morphedNormal;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\",\r\n\r\n\t\t\t\"objectNormal = normal;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef FLIP_SIDED\",\r\n\r\n\t\t\t\"objectNormal = -objectNormal;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"vec3 transformedNormal = normalMatrix * objectNormal;\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// SHADOW MAP\r\n\r\n\t// based on SpiderGL shadow map and Fabien Sanglard's GLSL shadow mapping examples\r\n\t//  http://spidergl.org/example.php?id=6\r\n\t// \thttp://fabiensanglard.net/shadowmapping\r\n\r\n\tshadowmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"uniform sampler2D shadowMap[ MAX_SHADOWS ];\",\r\n\t\t\t\"uniform vec2 shadowMapSize[ MAX_SHADOWS ];\",\r\n\r\n\t\t\t\"uniform float shadowDarkness[ MAX_SHADOWS ];\",\r\n\t\t\t\"uniform float shadowBias[ MAX_SHADOWS ];\",\r\n\r\n\t\t\t\"varying vec4 vShadowCoord[ MAX_SHADOWS ];\",\r\n\r\n\t\t\t\"float unpackDepth( const in vec4 rgba_depth ) {\",\r\n\r\n\t\t\t\t\"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\r\n\t\t\t\t\"float depth = dot( rgba_depth, bit_shift );\",\r\n\t\t\t\t\"return depth;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tshadowmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"#ifdef SHADOWMAP_DEBUG\",\r\n\r\n\t\t\t\t\"vec3 frustumColors[3];\",\r\n\t\t\t\t\"frustumColors[0] = vec3( 1.0, 0.5, 0.0 );\",\r\n\t\t\t\t\"frustumColors[1] = vec3( 0.0, 1.0, 0.8 );\",\r\n\t\t\t\t\"frustumColors[2] = vec3( 0.0, 0.5, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef SHADOWMAP_CASCADE\",\r\n\r\n\t\t\t\t\"int inFrustumCount = 0;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"float fDepth;\",\r\n\t\t\t\"vec3 shadowColor = vec3( 1.0 );\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\",\r\n\r\n\t\t\t\t// \"if ( something && something )\" \t\t breaks ATI OpenGL shader compiler\r\n\t\t\t\t// \"if ( all( something, something ) )\"  using this instead\r\n\r\n\t\t\t\t\"bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\",\r\n\t\t\t\t\"bool inFrustum = all( inFrustumVec );\",\r\n\r\n\t\t\t\t// don't shadow pixels outside of light frustum\r\n\t\t\t\t// use just first frustum (for cascades)\r\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\r\n\r\n\t\t\t\t\"#ifdef SHADOWMAP_CASCADE\",\r\n\r\n\t\t\t\t\t\"inFrustumCount += int( inFrustum );\",\r\n\t\t\t\t\t\"bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"bool frustumTest = all( frustumTestVec );\",\r\n\r\n\t\t\t\t\"if ( frustumTest ) {\",\r\n\r\n\t\t\t\t\t\"shadowCoord.z += shadowBias[ i ];\",\r\n\r\n\t\t\t\t\t\"#if defined( SHADOWMAP_TYPE_PCF )\",\r\n\r\n\t\t\t\t\t\t// Percentage-close filtering\r\n\t\t\t\t\t\t// (9 pixel kernel)\r\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\r\n\r\n\t\t\t\t\t\t\"float shadow = 0.0;\",\r\n\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\r\n\t\t\t\t\t\t// must enroll loop manually\r\n\r\n\t\t\t\t\t\t\"for ( float y = -1.25; y <= 1.25; y += 1.25 )\",\r\n\t\t\t\t\t\t\t\"for ( float x = -1.25; x <= 1.25; x += 1.25 ) {\",\r\n\r\n\t\t\t\t\t\t\t\t\"vec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\",\r\n\r\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple \"texture2D\" lookup\r\n\t\t\t\t\t\t\t\t//\"vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\",\r\n\r\n\t\t\t\t\t\t\t\t\"float fDepth = unpackDepth( rgbaDepth );\",\r\n\r\n\t\t\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z )\",\r\n\t\t\t\t\t\t\t\t\t\"shadow += 1.0;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\t\"shadow /= 9.0;\",\r\n\r\n\t\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t\t\"const float shadowDelta = 1.0 / 9.0;\",\r\n\r\n\t\t\t\t\t\t\"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\",\r\n\t\t\t\t\t\t\"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\",\r\n\r\n\t\t\t\t\t\t\"float dx0 = -1.25 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy0 = -1.25 * yPixelOffset;\",\r\n\t\t\t\t\t\t\"float dx1 = 1.25 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy1 = 1.25 * yPixelOffset;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\",\r\n\r\n\t\t\t\t\t\"#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\",\r\n\r\n\t\t\t\t\t\t// Percentage-close filtering\r\n\t\t\t\t\t\t// (9 pixel kernel)\r\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\r\n\r\n\t\t\t\t\t\t\"float shadow = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\",\r\n\t\t\t\t\t\t\"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\",\r\n\r\n\t\t\t\t\t\t\"float dx0 = -1.0 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy0 = -1.0 * yPixelOffset;\",\r\n\t\t\t\t\t\t\"float dx1 = 1.0 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy1 = 1.0 * yPixelOffset;\",\r\n\r\n\t\t\t\t\t\t\"mat3 shadowKernel;\",\r\n\t\t\t\t\t\t\"mat3 depthKernel;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[0][0] < shadowCoord.z ) shadowKernel[0][0] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[0][0] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[0][1] < shadowCoord.z ) shadowKernel[0][1] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[0][1] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[0][2] < shadowCoord.z ) shadowKernel[0][2] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[0][2] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[1][0] < shadowCoord.z ) shadowKernel[1][0] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[1][0] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[1][1] < shadowCoord.z ) shadowKernel[1][1] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[1][1] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[1][2] < shadowCoord.z ) shadowKernel[1][2] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[1][2] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[2][0] < shadowCoord.z ) shadowKernel[2][0] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[2][0] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[2][1] < shadowCoord.z ) shadowKernel[2][1] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[2][1] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[2][2] < shadowCoord.z ) shadowKernel[2][2] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[2][2] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\",\r\n\r\n\t\t\t\t\t\t\"shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\",\r\n\t\t\t\t\t\t\"shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\",\r\n\r\n\t\t\t\t\t\t\"vec4 shadowValues;\",\r\n\t\t\t\t\t\t\"shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\",\r\n\t\t\t\t\t\t\"shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\",\r\n\t\t\t\t\t\t\"shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\",\r\n\t\t\t\t\t\t\"shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\",\r\n\r\n\t\t\t\t\t\t\"shadow = dot( shadowValues, vec4( 1.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\",\r\n\t\t\t\t\t\t\"float fDepth = unpackDepth( rgbaDepth );\",\r\n\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z )\",\r\n\r\n\t\t\t\t\t\t\t// spot with multiple shadows is darker\r\n\r\n\t\t\t\t\t\t\t\"shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\",\r\n\r\n\t\t\t\t\t\t\t// spot with multiple shadows has the same color as single shadow spot\r\n\r\n\t\t\t\t\t\t\t//\"shadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\r\n\t\t\t\t\"#ifdef SHADOWMAP_DEBUG\",\r\n\r\n\t\t\t\t\t\"#ifdef SHADOWMAP_CASCADE\",\r\n\r\n\t\t\t\t\t\t\"if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"#ifdef GAMMA_OUTPUT\",\r\n\r\n\t\t\t\t\"shadowColor *= shadowColor;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tshadowmap_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"varying vec4 vShadowCoord[ MAX_SHADOWS ];\",\r\n\t\t\t\"uniform mat4 shadowMatrix[ MAX_SHADOWS ];\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tshadowmap_vertex: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// ALPHATEST\r\n\r\n\talphatest_fragment: [\r\n\r\n\t\t\"#ifdef ALPHATEST\",\r\n\r\n\t\t\t\"if ( gl_FragColor.a < ALPHATEST ) discard;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LINEAR SPACE\r\n\r\n\tlinear_to_gamma_fragment: [\r\n\r\n\t\t\"#ifdef GAMMA_OUTPUT\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = sqrt( gl_FragColor.xyz );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\")\r\n\r\n\r\n};\r\n\r\nTHREE.UniformsUtils = {\r\n\r\n\tmerge: function ( uniforms ) {\r\n\r\n\t\tvar u, p, tmp, merged = {};\r\n\r\n\t\tfor ( u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\ttmp = this.clone( uniforms[ u ] );\r\n\r\n\t\t\tfor ( p in tmp ) {\r\n\r\n\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn merged;\r\n\r\n\t},\r\n\r\n\tclone: function ( uniforms_src ) {\r\n\r\n\t\tvar u, p, parameter, parameter_src, uniforms_dst = {};\r\n\r\n\t\tfor ( u in uniforms_src ) {\r\n\r\n\t\t\tuniforms_dst[ u ] = {};\r\n\r\n\t\t\tfor ( p in uniforms_src[ u ] ) {\r\n\r\n\t\t\t\tparameter_src = uniforms_src[ u ][ p ];\r\n\r\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\r\n\r\n\t\t\t\t} else if ( parameter_src instanceof Array ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms_dst;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.UniformsLib = {\r\n\r\n\tcommon: {\r\n\r\n\t\t\"diffuse\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\r\n\r\n\t\t\"map\" : { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\r\n\t\t\"lightMap\" : { type: \"t\", value: null },\r\n\t\t\"specularMap\" : { type: \"t\", value: null },\r\n\r\n\t\t\"envMap\" : { type: \"t\", value: null },\r\n\t\t\"flipEnvMap\" : { type: \"f\", value: -1 },\r\n\t\t\"useRefract\" : { type: \"i\", value: 0 },\r\n\t\t\"reflectivity\" : { type: \"f\", value: 1.0 },\r\n\t\t\"refractionRatio\" : { type: \"f\", value: 0.98 },\r\n\t\t\"combine\" : { type: \"i\", value: 0 },\r\n\r\n\t\t\"morphTargetInfluences\" : { type: \"f\", value: 0 }\r\n\r\n\t},\r\n\r\n\tbump: {\r\n\r\n\t\t\"bumpMap\" : { type: \"t\", value: null },\r\n\t\t\"bumpScale\" : { type: \"f\", value: 1 }\r\n\r\n\t},\r\n\r\n\tnormalmap: {\r\n\r\n\t\t\"normalMap\" : { type: \"t\", value: null },\r\n\t\t\"normalScale\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\r\n\t},\r\n\r\n\tfog : {\r\n\r\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\r\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\r\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\r\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tlights: {\r\n\r\n\t\t\"ambientLightColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"directionalLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"directionalLightColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"hemisphereLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"hemisphereLightSkyColor\" : { type: \"fv\", value: [] },\r\n\t\t\"hemisphereLightGroundColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"pointLightColor\" : { type: \"fv\", value: [] },\r\n\t\t\"pointLightPosition\" : { type: \"fv\", value: [] },\r\n\t\t\"pointLightDistance\" : { type: \"fv1\", value: [] },\r\n\r\n\t\t\"spotLightColor\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightPosition\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightDistance\" : { type: \"fv1\", value: [] },\r\n\t\t\"spotLightAngleCos\" : { type: \"fv1\", value: [] },\r\n\t\t\"spotLightExponent\" : { type: \"fv1\", value: [] }\r\n\r\n\t},\r\n\r\n\tparticle: {\r\n\r\n\t\t\"psColor\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\r\n\t\t\"size\" : { type: \"f\", value: 1.0 },\r\n\t\t\"scale\" : { type: \"f\", value: 1.0 },\r\n\t\t\"map\" : { type: \"t\", value: null },\r\n\r\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\r\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\r\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\r\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tshadowmap: {\r\n\r\n\t\t\"shadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"shadowMapSize\": { type: \"v2v\", value: [] },\r\n\r\n\t\t\"shadowBias\" : { type: \"fv1\", value: [] },\r\n\t\t\"shadowDarkness\": { type: \"fv1\", value: [] },\r\n\r\n\t\t\"shadowMatrix\" : { type: \"m4v\", value: [] }\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ShaderLib = {\r\n\r\n\t'basic': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\r\n\t\t\t\t\"#ifdef USE_ENVMAP\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( diffuse, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'lambert': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"ambient\"  : { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"#define LAMBERT\",\r\n\r\n\t\t\t\"varying vec3 vLightFront;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"varying vec3 vLightBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_lambert_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_lambert_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"varying vec3 vLightFront;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"varying vec3 vLightBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t//\"float isFront = float( gl_FrontFacing );\",\r\n\t\t\t\t\t//\"gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;\",\r\n\r\n\t\t\t\t\t\"if ( gl_FrontFacing )\",\r\n\t\t\t\t\t\t\"gl_FragColor.xyz *= vLightFront;\",\r\n\t\t\t\t\t\"else\",\r\n\t\t\t\t\t\t\"gl_FragColor.xyz *= vLightBack;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz *= vLightFront;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'phong': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"bump\" ],\r\n\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"ambient\"  : { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\t\"shininess\": { type: \"f\", value: 30 },\r\n\t\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"#define PHONG\",\r\n\r\n\t\t\t\"varying vec3 vViewPosition;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\t\"vNormal = normalize( transformedNormal );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\t\"vViewPosition = -mvPosition.xyz;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform vec3 ambient;\",\r\n\t\t\t\"uniform vec3 emissive;\",\r\n\t\t\t\"uniform vec3 specular;\",\r\n\t\t\t\"uniform float shininess;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"bumpmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"normalmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'particle_basic': {\r\n\r\n\t\tuniforms:  THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"particle\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform float size;\",\r\n\t\t\t\"uniform float scale;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\t\"#ifdef USE_SIZEATTENUATION\",\r\n\t\t\t\t\t\"gl_PointSize = size * ( scale / length( mvPosition.xyz ) );\",\r\n\t\t\t\t\"#else\",\r\n\t\t\t\t\t\"gl_PointSize = size;\",\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 psColor;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_particle_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( psColor, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_particle_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'dashed': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"scale\":     { type: \"f\", value: 1 },\r\n\t\t\t\t\"dashSize\":  { type: \"f\", value: 1 },\r\n\t\t\t\t\"totalSize\": { type: \"f\", value: 2 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform float scale;\",\r\n\t\t\t\"attribute float lineDistance;\",\r\n\r\n\t\t\t\"varying float vLineDistance;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\t\"vLineDistance = scale * lineDistance;\",\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform float dashSize;\",\r\n\t\t\t\"uniform float totalSize;\",\r\n\r\n\t\t\t\"varying float vLineDistance;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"if ( mod( vLineDistance, totalSize ) > dashSize ) {\",\r\n\r\n\t\t\t\t\t\"discard;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( diffuse, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'depth': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"mNear\": { type: \"f\", value: 1.0 },\r\n\t\t\t\"mFar\" : { type: \"f\", value: 2000.0 },\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float mNear;\",\r\n\t\t\t\"uniform float mFar;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\t\t\t\t\"float color = 1.0 - smoothstep( mNear, mFar, depth );\",\r\n\t\t\t\t\"gl_FragColor = vec4( vec3( color ), opacity );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'normal': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float opacity;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tNormal map shader\r\n\t//\t\t- Blinn-Phong\r\n\t//\t\t- normal + diffuse + specular + AO + displacement + reflection + shadow maps\r\n\t//\t\t- point and directional lights (use with \"lights: true\" material option)\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'normalmap' : {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\r\n\t\t\t\"enableAO\"\t\t  : { type: \"i\", value: 0 },\r\n\t\t\t\"enableDiffuse\"\t  : { type: \"i\", value: 0 },\r\n\t\t\t\"enableSpecular\"  : { type: \"i\", value: 0 },\r\n\t\t\t\"enableReflection\": { type: \"i\", value: 0 },\r\n\t\t\t\"enableDisplacement\": { type: \"i\", value: 0 },\r\n\r\n\t\t\t\"tDisplacement\": { type: \"t\", value: null }, // must go first as this is vertex texture\r\n\t\t\t\"tDiffuse\"\t   : { type: \"t\", value: null },\r\n\t\t\t\"tCube\"\t\t   : { type: \"t\", value: null },\r\n\t\t\t\"tNormal\"\t   : { type: \"t\", value: null },\r\n\t\t\t\"tSpecular\"\t   : { type: \"t\", value: null },\r\n\t\t\t\"tAO\"\t\t   : { type: \"t\", value: null },\r\n\r\n\t\t\t\"uNormalScale\": { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\r\n\r\n\t\t\t\"uDisplacementBias\": { type: \"f\", value: 0.0 },\r\n\t\t\t\"uDisplacementScale\": { type: \"f\", value: 1.0 },\r\n\r\n\t\t\t\"uDiffuseColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\"uSpecularColor\": { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\"uAmbientColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\"uShininess\": { type: \"f\", value: 30 },\r\n\t\t\t\"uOpacity\": { type: \"f\", value: 1 },\r\n\r\n\t\t\t\"useRefract\": { type: \"i\", value: 0 },\r\n\t\t\t\"uRefractionRatio\": { type: \"f\", value: 0.98 },\r\n\t\t\t\"uReflectivity\": { type: \"f\", value: 0.5 },\r\n\r\n\t\t\t\"uOffset\" : { type: \"v2\", value: new THREE.Vector2( 0, 0 ) },\r\n\t\t\t\"uRepeat\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\r\n\r\n\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\r\n\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 uAmbientColor;\",\r\n\t\t\t\"uniform vec3 uDiffuseColor;\",\r\n\t\t\t\"uniform vec3 uSpecularColor;\",\r\n\t\t\t\"uniform float uShininess;\",\r\n\t\t\t\"uniform float uOpacity;\",\r\n\r\n\t\t\t\"uniform bool enableDiffuse;\",\r\n\t\t\t\"uniform bool enableSpecular;\",\r\n\t\t\t\"uniform bool enableAO;\",\r\n\t\t\t\"uniform bool enableReflection;\",\r\n\r\n\t\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\t\"uniform sampler2D tNormal;\",\r\n\t\t\t\"uniform sampler2D tSpecular;\",\r\n\t\t\t\"uniform sampler2D tAO;\",\r\n\r\n\t\t\t\"uniform samplerCube tCube;\",\r\n\r\n\t\t\t\"uniform vec2 uNormalScale;\",\r\n\r\n\t\t\t\"uniform bool useRefract;\",\r\n\t\t\t\"uniform float uRefractionRatio;\",\r\n\t\t\t\"uniform float uReflectivity;\",\r\n\r\n\t\t\t\"varying vec3 vTangent;\",\r\n\t\t\t\"varying vec3 vBinormal;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\t\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\t\"uniform vec3 ambientLightColor;\",\r\n\r\n\t\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\"uniform vec3 wrapRGB;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\t\t\t\"varying vec3 vViewPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( vec3( 1.0 ), uOpacity );\",\r\n\r\n\t\t\t\t\"vec3 specularTex = vec3( 1.0 );\",\r\n\r\n\t\t\t\t\"vec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\",\r\n\t\t\t\t\"normalTex.xy *= uNormalScale;\",\r\n\t\t\t\t\"normalTex = normalize( normalTex );\",\r\n\r\n\t\t\t\t\"if( enableDiffuse ) {\",\r\n\r\n\t\t\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\t\t\"vec4 texelColor = texture2D( tDiffuse, vUv );\",\r\n\t\t\t\t\t\t\"texelColor.xyz *= texelColor.xyz;\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor = gl_FragColor * texelColor;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"if( enableAO ) {\",\r\n\r\n\t\t\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\t\t\"vec4 aoColor = texture2D( tAO, vUv );\",\r\n\t\t\t\t\t\t\"aoColor.xyz *= aoColor.xyz;\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"if( enableSpecular )\",\r\n\t\t\t\t\t\"specularTex = texture2D( tSpecular, vUv ).xyz;\",\r\n\r\n\t\t\t\t\"mat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\",\r\n\t\t\t\t\"vec3 finalNormal = tsb * normalTex;\",\r\n\r\n\t\t\t\t\"#ifdef FLIP_SIDED\",\r\n\r\n\t\t\t\t\t\"finalNormal = -finalNormal;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"vec3 normal = normalize( finalNormal );\",\r\n\t\t\t\t\"vec3 viewPosition = normalize( vViewPosition );\",\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t\t\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 pointDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 pointSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\t\"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\t\"vec3 pointVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\t\"float pointDistance = 1.0;\",\r\n\t\t\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\t\"pointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\t\"pointVector = normalize( pointVector );\",\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\"float pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\"float pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"float pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\"pointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\t\"vec3 pointHalfVector = normalize( pointVector + viewPosition );\",\r\n\t\t\t\t\t\t\"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\t\"float pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"pointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// spot lights\r\n\r\n\t\t\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 spotDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 spotSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\t\"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\t\"vec3 spotVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\t\"float spotDistance = 1.0;\",\r\n\t\t\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\t\"spotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\t\"spotVector = normalize( spotVector );\",\r\n\r\n\t\t\t\t\t\t\"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\",\r\n\r\n\t\t\t\t\t\t\"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\r\n\r\n\t\t\t\t\t\t\t\"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\t\"float spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\t\"float spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\t\"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\t\"float spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\t\"spotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\",\r\n\r\n\t\t\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\t\t\"vec3 spotHalfVector = normalize( spotVector + viewPosition );\",\r\n\t\t\t\t\t\t\t\"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\"float spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\t\"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\t\t\"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\",\r\n\r\n\t\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\t\"spotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\",\r\n\r\n\t\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t\t\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 dirDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 dirSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\t\"for( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\t\t\"vec3 dirVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\"float directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\"float directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"float dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\"dirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\t\"vec3 dirHalfVector = normalize( dirVector + viewPosition );\",\r\n\t\t\t\t\t\t\"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\t\"float dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"dirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t\t\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 hemiDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 hemiSpecular = vec3( 0.0 );\" ,\r\n\r\n\t\t\t\t\t\"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\t\t\"vec3 lVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\t\t\t\t\t\t\"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\r\n\r\n\t\t\t\t\t\t\"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\r\n\r\n\t\t\t\t\t\t\"hemiDiffuse += uDiffuseColor * hemiColor;\",\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\r\n\t\t\t\t\t\t\"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\t\t\"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\",\r\n\t\t\t\t\t\t\"float hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\t\t\t\t\"vec3 lVectorGround = -lVector;\",\r\n\r\n\t\t\t\t\t\t\"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\",\r\n\t\t\t\t\t\t\"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\",\r\n\t\t\t\t\t\t\"float hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t\"float dotProductGround = dot( normal, lVectorGround );\",\r\n\r\n\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"vec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"hemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\t\t\t\t\"vec3 totalDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\"vec3 totalSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += dirDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += dirSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += hemiDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += hemiSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += pointDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += pointSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += spotDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += spotSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#ifdef METAL\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"if ( enableReflection ) {\",\r\n\r\n\t\t\t\t\t\"vec3 vReflect;\",\r\n\t\t\t\t\t\"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\",\r\n\r\n\t\t\t\t\t\"if ( useRefract ) {\",\r\n\r\n\t\t\t\t\t\t\"vReflect = refract( cameraToVertex, normal, uRefractionRatio );\",\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"vReflect = reflect( cameraToVertex, normal );\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"vec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\",\r\n\r\n\t\t\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\t\t\"cubeColor.xyz *= cubeColor.xyz;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"attribute vec4 tangent;\",\r\n\r\n\t\t\t\"uniform vec2 uOffset;\",\r\n\t\t\t\"uniform vec2 uRepeat;\",\r\n\r\n\t\t\t\"uniform bool enableDisplacement;\",\r\n\r\n\t\t\t\"#ifdef VERTEX_TEXTURES\",\r\n\r\n\t\t\t\t\"uniform sampler2D tDisplacement;\",\r\n\t\t\t\t\"uniform float uDisplacementScale;\",\r\n\t\t\t\t\"uniform float uDisplacementBias;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"varying vec3 vTangent;\",\r\n\t\t\t\"varying vec3 vBinormal;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\t\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\t\t\t\"varying vec3 vViewPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\r\n\t\t\t\t// normal, tangent and binormal vectors\r\n\r\n\t\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\t\"vNormal = normalize( normalMatrix * skinnedNormal.xyz );\",\r\n\r\n\t\t\t\t\t\"vec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\",\r\n\t\t\t\t\t\"vTangent = normalize( normalMatrix * skinnedTangent.xyz );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\r\n\t\t\t\t\t\"vTangent = normalize( normalMatrix * tangent.xyz );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\",\r\n\r\n\t\t\t\t\"vUv = uv * uRepeat + uOffset;\",\r\n\r\n\t\t\t\t// displacement mapping\r\n\r\n\t\t\t\t\"vec3 displacedPosition;\",\r\n\r\n\t\t\t\t\"#ifdef VERTEX_TEXTURES\",\r\n\r\n\t\t\t\t\t\"if ( enableDisplacement ) {\",\r\n\r\n\t\t\t\t\t\t\"vec3 dv = texture2D( tDisplacement, uv ).xyz;\",\r\n\t\t\t\t\t\t\"float df = uDisplacementScale * dv.x + uDisplacementBias;\",\r\n\t\t\t\t\t\t\"displacedPosition = position + normalize( normal ) * df;\",\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 skinVertex = vec4( position, 1.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\r\n\t\t\t\t\t\t\t\"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\r\n\r\n\t\t\t\t\t\t\t\"displacedPosition  = skinned.xyz;\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"displacedPosition = position;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\t\t\"vec4 skinVertex = vec4( position, 1.0 );\",\r\n\r\n\t\t\t\t\t\t\"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\r\n\t\t\t\t\t\t\"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\r\n\r\n\t\t\t\t\t\t\"displacedPosition  = skinned.xyz;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"displacedPosition = position;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\",\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\t\"vWorldPosition = worldPosition.xyz;\",\r\n\t\t\t\t\"vViewPosition = -mvPosition.xyz;\",\r\n\r\n\t\t\t\t// shadows\r\n\r\n\t\t\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\t\t\"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'cube': {\r\n\r\n\t\tuniforms: { \"tCube\": { type: \"t\", value: null },\r\n\t\t\t\t\t\"tFlip\": { type: \"f\", value: -1 } },\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\t\"vWorldPosition = worldPosition.xyz;\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform samplerCube tCube;\",\r\n\t\t\t\"uniform float tFlip;\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t// Depth encoding into RGBA texture\r\n\t// \tbased on SpiderGL shadow map example\r\n\t// \t\thttp://spidergl.org/example.php?id=6\r\n\t// \toriginally from\r\n\t//\t\thttp://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD\r\n\t// \tsee also here:\r\n\t//\t\thttp://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n\r\n\t'depthRGBA': {\r\n\r\n\t\tuniforms: {},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"vec4 pack_depth( const in float depth ) {\",\r\n\r\n\t\t\t\t\"const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\r\n\t\t\t\t\"const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\r\n\t\t\t\t\"vec4 res = fract( depth * bit_shift );\",\r\n\t\t\t\t\"res -= res.xxyz * bit_mask;\",\r\n\t\t\t\t\"return res;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\",\r\n\r\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );\",\r\n\t\t\t\t//\"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );\",\r\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( z );\",\r\n\t\t\t\t//\"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.WebGLRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\r\n\r\n\t_precision = parameters.precision !== undefined ? parameters.precision : 'highp',\r\n\r\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : true,\r\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\r\n\r\n\t_clearColor = parameters.clearColor !== undefined ? new THREE.Color( parameters.clearColor ) : new THREE.Color( 0x000000 ),\r\n\t_clearAlpha = parameters.clearAlpha !== undefined ? parameters.clearAlpha : 0;\r\n\r\n\t// public properties\r\n\r\n\tthis.domElement = _canvas;\r\n\tthis.context = null;\r\n\tthis.devicePixelRatio = parameters.devicePixelRatio !== undefined\r\n\t\t\t\t? parameters.devicePixelRatio\r\n\t\t\t\t: window.devicePixelRatio !== undefined\r\n\t\t\t\t\t? window.devicePixelRatio\r\n\t\t\t\t\t: 1;\r\n\r\n\t// clearing\r\n\r\n\tthis.autoClear = true;\r\n\tthis.autoClearColor = true;\r\n\tthis.autoClearDepth = true;\r\n\tthis.autoClearStencil = true;\r\n\r\n\t// scene graph\r\n\r\n\tthis.sortObjects = true;\r\n\r\n\tthis.autoUpdateObjects = true;\r\n\tthis.autoUpdateScene = true;\r\n\r\n\t// physically based shading\r\n\r\n\tthis.gammaInput = false;\r\n\tthis.gammaOutput = false;\r\n\tthis.physicallyBasedShading = false;\r\n\r\n\t// shadow map\r\n\r\n\tthis.shadowMapEnabled = false;\r\n\tthis.shadowMapAutoUpdate = true;\r\n\tthis.shadowMapType = THREE.PCFShadowMap;\r\n\tthis.shadowMapCullFace = THREE.CullFaceFront;\r\n\tthis.shadowMapDebug = false;\r\n\tthis.shadowMapCascade = false;\r\n\r\n\t// morphs\r\n\r\n\tthis.maxMorphTargets = 8;\r\n\tthis.maxMorphNormals = 4;\r\n\r\n\t// flags\r\n\r\n\tthis.autoScaleCubemaps = true;\r\n\r\n\t// custom render plugins\r\n\r\n\tthis.renderPluginsPre = [];\r\n\tthis.renderPluginsPost = [];\r\n\r\n\t// info\r\n\r\n\tthis.info = {\r\n\r\n\t\tmemory: {\r\n\r\n\t\t\tprograms: 0,\r\n\t\t\tgeometries: 0,\r\n\t\t\ttextures: 0\r\n\r\n\t\t},\r\n\r\n\t\trender: {\r\n\r\n\t\t\tcalls: 0,\r\n\t\t\tvertices: 0,\r\n\t\t\tfaces: 0,\r\n\t\t\tpoints: 0\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// internal properties\r\n\r\n\tvar _this = this,\r\n\r\n\t_programs = [],\r\n\t_programs_counter = 0,\r\n\r\n\t// internal state cache\r\n\r\n\t_currentProgram = null,\r\n\t_currentFramebuffer = null,\r\n\t_currentMaterialId = -1,\r\n\t_currentGeometryGroupHash = null,\r\n\t_currentCamera = null,\r\n\t_geometryGroupCounter = 0,\r\n\r\n\t_usedTextureUnits = 0,\r\n\r\n\t// GL state cache\r\n\r\n\t_oldDoubleSided = -1,\r\n\t_oldFlipSided = -1,\r\n\r\n\t_oldBlending = -1,\r\n\r\n\t_oldBlendEquation = -1,\r\n\t_oldBlendSrc = -1,\r\n\t_oldBlendDst = -1,\r\n\r\n\t_oldDepthTest = -1,\r\n\t_oldDepthWrite = -1,\r\n\r\n\t_oldPolygonOffset = null,\r\n\t_oldPolygonOffsetFactor = null,\r\n\t_oldPolygonOffsetUnits = null,\r\n\r\n\t_oldLineWidth = null,\r\n\r\n\t_viewportX = 0,\r\n\t_viewportY = 0,\r\n\t_viewportWidth = 0,\r\n\t_viewportHeight = 0,\r\n\t_currentWidth = 0,\r\n\t_currentHeight = 0,\r\n\r\n\t_enabledAttributes = {},\r\n\r\n\t// frustum\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t // camera matrices cache\r\n\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\t_projScreenMatrixPS = new THREE.Matrix4(),\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\r\n\t// light arrays cache\r\n\r\n\t_direction = new THREE.Vector3(),\r\n\r\n\t_lightsNeedUpdate = true,\r\n\r\n\t_lights = {\r\n\r\n\t\tambient: [ 0, 0, 0 ],\r\n\t\tdirectional: { length: 0, colors: new Array(), positions: new Array() },\r\n\t\tpoint: { length: 0, colors: new Array(), positions: new Array(), distances: new Array() },\r\n\t\tspot: { length: 0, colors: new Array(), positions: new Array(), distances: new Array(), directions: new Array(), anglesCos: new Array(), exponents: new Array() },\r\n\t\themi: { length: 0, skyColors: new Array(), groundColors: new Array(), positions: new Array() }\r\n\r\n\t};\r\n\r\n\t// initialize\r\n\r\n\tvar _gl;\r\n\r\n\tvar _glExtensionTextureFloat;\r\n\tvar _glExtensionStandardDerivatives;\r\n\tvar _glExtensionTextureFilterAnisotropic;\r\n\tvar _glExtensionCompressedTextureS3TC;\r\n\r\n\tinitGL();\r\n\r\n\tsetDefaultGLState();\r\n\r\n\tthis.context = _gl;\r\n\r\n\t// GPU capabilities\r\n\r\n\tvar _maxTextures = _gl.getParameter( _gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\tvar _maxVertexTextures = _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\tvar _maxTextureSize = _gl.getParameter( _gl.MAX_TEXTURE_SIZE );\r\n\tvar _maxCubemapSize = _gl.getParameter( _gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n\tvar _maxAnisotropy = _glExtensionTextureFilterAnisotropic ? _gl.getParameter( _glExtensionTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT ) : 0;\r\n\r\n\tvar _supportsVertexTextures = ( _maxVertexTextures > 0 );\r\n\tvar _supportsBoneTextures = _supportsVertexTextures && _glExtensionTextureFloat;\r\n\r\n\tvar _compressedTextureFormats = _glExtensionCompressedTextureS3TC ? _gl.getParameter( _gl.COMPRESSED_TEXTURE_FORMATS ) : [];\r\n\r\n\t//\r\n\r\n\tvar _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_FLOAT );\r\n\tvar _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT );\r\n\tvar _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_FLOAT );\r\n\r\n\tvar _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT );\r\n\tvar _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT );\r\n\tvar _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_FLOAT );\r\n\r\n\tvar _vertexShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_INT );\r\n\tvar _vertexShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_INT );\r\n\tvar _vertexShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_INT );\r\n\r\n\tvar _fragmentShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_INT );\r\n\tvar _fragmentShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_INT );\r\n\tvar _fragmentShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_INT );\r\n\r\n\t// clamp precision to maximum available\r\n\r\n\tvar highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;\r\n\tvar mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;\r\n\r\n\tif ( _precision === \"highp\" && ! highpAvailable ) {\r\n\r\n\t\tif ( mediumpAvailable ) {\r\n\r\n\t\t\t_precision = \"mediump\";\r\n\t\t\tconsole.warn( \"WebGLRenderer: highp not supported, using mediump\" );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_precision = \"lowp\";\r\n\t\t\tconsole.warn( \"WebGLRenderer: highp and mediump not supported, using lowp\" );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tif ( _precision === \"mediump\" && ! mediumpAvailable ) {\r\n\r\n\t\t_precision = \"lowp\";\r\n\t\tconsole.warn( \"WebGLRenderer: mediump not supported, using lowp\" );\r\n\r\n\t}\r\n\r\n\t// API\r\n\r\n\tthis.getContext = function () {\r\n\r\n\t\treturn _gl;\r\n\r\n\t};\r\n\r\n\tthis.supportsVertexTextures = function () {\r\n\r\n\t\treturn _supportsVertexTextures;\r\n\r\n\t};\r\n\r\n\tthis.supportsFloatTextures = function () {\r\n\r\n\t\treturn _glExtensionTextureFloat;\r\n\r\n\t};\r\n\t\r\n\tthis.supportsStandardDerivatives = function () {\r\n\r\n\t\treturn _glExtensionStandardDerivatives;\r\n\r\n\t};\r\n\t\r\n\tthis.supportsCompressedTextureS3TC = function () {\r\n\r\n\t\treturn _glExtensionCompressedTextureS3TC;\r\n\r\n\t};\r\n\t\r\n\tthis.getMaxAnisotropy  = function () {\r\n\r\n\t\treturn _maxAnisotropy;\r\n\r\n\t};\r\n\r\n\tthis.getPrecision = function () {\r\n\r\n\t\treturn _precision;\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height ) {\r\n\r\n\t\t_canvas.width = width * this.devicePixelRatio;\r\n\t\t_canvas.height = height * this.devicePixelRatio;\r\n\r\n\t\t_canvas.style.width = width + 'px';\r\n\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\tthis.setViewport( 0, 0, _canvas.width, _canvas.height );\r\n\r\n\t};\r\n\r\n\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\t_viewportX = x !== undefined ? x : 0;\r\n\t\t_viewportY = y !== undefined ? y : 0;\r\n\r\n\t\t_viewportWidth = width !== undefined ? width : _canvas.width;\r\n\t\t_viewportHeight = height !== undefined ? height : _canvas.height;\r\n\r\n\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\r\n\r\n\t};\r\n\r\n\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\t_gl.scissor( x, y, width, height );\r\n\r\n\t};\r\n\r\n\tthis.enableScissorTest = function ( enable ) {\r\n\r\n\t\tenable ? _gl.enable( _gl.SCISSOR_TEST ) : _gl.disable( _gl.SCISSOR_TEST );\r\n\r\n\t};\r\n\r\n\t// Clearing\r\n\r\n\tthis.setClearColorHex = function ( hex, alpha ) {\r\n\r\n\t\t_clearColor.setHex( hex );\r\n\t\t_clearAlpha = alpha;\r\n\r\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.setClearColor = function ( color, alpha ) {\r\n\r\n\t\t_clearColor.copy( color );\r\n\t\t_clearAlpha = alpha;\r\n\r\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.getClearColor = function () {\r\n\r\n\t\treturn _clearColor;\r\n\r\n\t};\r\n\r\n\tthis.getClearAlpha = function () {\r\n\r\n\t\treturn _clearAlpha;\r\n\r\n\t};\r\n\r\n\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\tvar bits = 0;\r\n\r\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\r\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n\t\t_gl.clear( bits );\r\n\r\n\t};\r\n\r\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\t\tthis.clear( color, depth, stencil );\r\n\r\n\t};\r\n\r\n\t// Plugins\r\n\r\n\tthis.addPostPlugin = function ( plugin ) {\r\n\r\n\t\tplugin.init( this );\r\n\t\tthis.renderPluginsPost.push( plugin );\r\n\r\n\t};\r\n\r\n\tthis.addPrePlugin = function ( plugin ) {\r\n\r\n\t\tplugin.init( this );\r\n\t\tthis.renderPluginsPre.push( plugin );\r\n\r\n\t};\r\n\r\n\t// Rendering\r\n\r\n\tthis.updateShadowMap = function ( scene, camera ) {\r\n\r\n\t\t_currentProgram = null;\r\n\t\t_oldBlending = -1;\r\n\t\t_oldDepthTest = -1;\r\n\t\t_oldDepthWrite = -1;\r\n\t\t_currentGeometryGroupHash = -1;\r\n\t\t_currentMaterialId = -1;\r\n\t\t_lightsNeedUpdate = true;\r\n\t\t_oldDoubleSided = -1;\r\n\t\t_oldFlipSided = -1;\r\n\r\n\t\tthis.shadowMapPlugin.update( scene, camera );\r\n\r\n\t};\r\n\r\n\t// Internal functions\r\n\r\n\t// Buffer allocation\r\n\r\n\tfunction createParticleBuffers ( geometry ) {\r\n\r\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\tfunction createLineBuffers ( geometry ) {\r\n\r\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglLineDistanceBuffer = _gl.createBuffer();\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\tfunction createRibbonBuffers ( geometry ) {\r\n\r\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglNormalBuffer = _gl.createBuffer();\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\tfunction createMeshBuffers ( geometryGroup ) {\r\n\r\n\t\tgeometryGroup.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglNormalBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglTangentBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglColorBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglUVBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglUV2Buffer = _gl.createBuffer();\r\n\r\n\t\tgeometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();\r\n\r\n\t\tgeometryGroup.__webglFaceBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglLineBuffer = _gl.createBuffer();\r\n\r\n\t\tvar m, ml;\r\n\r\n\t\tif ( geometryGroup.numMorphTargets ) {\r\n\r\n\t\t\tgeometryGroup.__webglMorphTargetsBuffers = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__webglMorphTargetsBuffers.push( _gl.createBuffer() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometryGroup.numMorphNormals ) {\r\n\r\n\t\t\tgeometryGroup.__webglMorphNormalsBuffers = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__webglMorphNormalsBuffers.push( _gl.createBuffer() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\t// Events\r\n\r\n\tvar onGeometryDispose = function ( event ) {\r\n\r\n\t\tvar geometry = event.target;\r\n\r\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tdeallocateGeometry( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tvar onTextureDispose = function ( event ) {\r\n\r\n\t\tvar texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tdeallocateTexture( texture );\r\n\r\n\t\t_this.info.memory.textures --;\r\n\r\n\r\n\t};\r\n\r\n\tvar onRenderTargetDispose = function ( event ) {\r\n\r\n\t\tvar renderTarget = event.target;\r\n\r\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t_this.info.memory.textures --;\r\n\r\n\t};\r\n\r\n\tvar onMaterialDispose = function ( event ) {\r\n\r\n\t\tvar material = event.target;\r\n\r\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\tdeallocateMaterial( material );\r\n\r\n\t};\r\n\r\n\t// Buffer deallocation\r\n\r\n\tvar deallocateGeometry = function ( geometry ) {\r\n\r\n\t\tgeometry.__webglInit = undefined;\r\n\r\n\t\tif ( geometry.__webglVertexBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\tif ( geometry.__webglNormalBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglNormalBuffer );\r\n\t\tif ( geometry.__webglTangentBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglTangentBuffer );\r\n\t\tif ( geometry.__webglColorBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\t\tif ( geometry.__webglUVBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglUVBuffer );\r\n\t\tif ( geometry.__webglUV2Buffer !== undefined ) _gl.deleteBuffer( geometry.__webglUV2Buffer );\r\n\r\n\t\tif ( geometry.__webglSkinIndicesBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinIndicesBuffer );\r\n\t\tif ( geometry.__webglSkinWeightsBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinWeightsBuffer );\r\n\r\n\t\tif ( geometry.__webglFaceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglFaceBuffer );\r\n\t\tif ( geometry.__webglLineBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineBuffer );\r\n\r\n\t\tif ( geometry.__webglLineDistanceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineDistanceBuffer );\r\n\r\n\t\t// geometry groups\r\n\r\n\t\tif ( geometry.geometryGroups !== undefined ) {\r\n\r\n\t\t\tfor ( var g in geometry.geometryGroups ) {\r\n\r\n\t\t\t\tvar geometryGroup = geometry.geometryGroups[ g ];\r\n\r\n\t\t\t\tif ( geometryGroup.numMorphTargets !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometryGroup.numMorphNormals !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdeleteCustomAttributesBuffers( geometryGroup );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t};\r\n\r\n\tvar deallocateTexture = function ( texture ) {\r\n\r\n\t\tif ( texture.image && texture.image.__webglTextureCube ) {\r\n\r\n\t\t\t// cube texture\r\n\r\n\t\t\t_gl.deleteTexture( texture.image.__webglTextureCube );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// 2D texture\r\n\r\n\t\t\tif ( ! texture.__webglInit ) return;\r\n\r\n\t\t\ttexture.__webglInit = false;\r\n\t\t\t_gl.deleteTexture( texture.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar deallocateRenderTarget = function ( renderTarget ) {\r\n\r\n\t\tif ( !renderTarget || ! renderTarget.__webglTexture ) return;\r\n\r\n\t\t_gl.deleteTexture( renderTarget.__webglTexture );\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTarget.__webglFramebuffer[ i ] );\r\n\t\t\t\t_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.deleteFramebuffer( renderTarget.__webglFramebuffer );\r\n\t\t\t_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar deallocateMaterial = function ( material ) {\r\n\r\n\t\tvar program = material.program;\r\n\r\n\t\tif ( program === undefined ) return;\r\n\r\n\t\tmaterial.program = undefined;\r\n\r\n\t\t// only deallocate GL program if this was the last use of shared program\r\n\t\t// assumed there is only single copy of any program in the _programs list\r\n\t\t// (that's how it's constructed)\r\n\r\n\t\tvar i, il, programInfo;\r\n\t\tvar deleteProgram = false;\r\n\r\n\t\tfor ( i = 0, il = _programs.length; i < il; i ++ ) {\r\n\r\n\t\t\tprogramInfo = _programs[ i ];\r\n\r\n\t\t\tif ( programInfo.program === program ) {\r\n\r\n\t\t\t\tprogramInfo.usedTimes --;\r\n\r\n\t\t\t\tif ( programInfo.usedTimes === 0 ) {\r\n\r\n\t\t\t\t\tdeleteProgram = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( deleteProgram === true ) {\r\n\r\n\t\t\t// avoid using array.splice, this is costlier than creating new array from scratch\r\n\r\n\t\t\tvar newPrograms = [];\r\n\r\n\t\t\tfor ( i = 0, il = _programs.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tprogramInfo = _programs[ i ];\r\n\r\n\t\t\t\tif ( programInfo.program !== program ) {\r\n\r\n\t\t\t\t\tnewPrograms.push( programInfo );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_programs = newPrograms;\r\n\r\n\t\t\t_gl.deleteProgram( program );\r\n\r\n\t\t\t_this.info.memory.programs --;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\t/*\r\n\tfunction deleteParticleBuffers ( geometry ) {\r\n\r\n\t\t_gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tfunction deleteLineBuffers ( geometry ) {\r\n\r\n\t\t_gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglLineDistanceBuffer );\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tfunction deleteRibbonBuffers ( geometry ) {\r\n\r\n\t\t_gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglNormalBuffer );\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tfunction deleteMeshBuffers ( geometryGroup ) {\r\n\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglNormalBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglTangentBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglColorBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglUVBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglUV2Buffer );\r\n\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglSkinIndicesBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglSkinWeightsBuffer );\r\n\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglFaceBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglLineBuffer );\r\n\r\n\t\tvar m, ml;\r\n\r\n\t\tif ( geometryGroup.numMorphTargets ) {\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometryGroup.numMorphNormals ) {\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometryGroup );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\t*/\r\n\r\n\tfunction deleteCustomAttributesBuffers( geometry ) {\r\n\r\n\t\tif ( geometry.__webglCustomAttributesList ) {\r\n\r\n\t\t\tfor ( var id in geometry.__webglCustomAttributesList ) {\r\n\r\n\t\t\t\t_gl.deleteBuffer( geometry.__webglCustomAttributesList[ id ].buffer );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Buffer initialization\r\n\r\n\tfunction initCustomAttributes ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tvar material = object.material;\r\n\r\n\t\tif ( material.attributes ) {\r\n\r\n\t\t\tif ( geometry.__webglCustomAttributesList === undefined ) {\r\n\r\n\t\t\t\tgeometry.__webglCustomAttributesList = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\t\tvar attribute = material.attributes[ a ];\r\n\r\n\t\t\t\tif ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {\r\n\r\n\t\t\t\t\tattribute.__webglInitialized = true;\r\n\r\n\t\t\t\t\tvar size = 1;\t\t// \"f\" and \"i\"\r\n\r\n\t\t\t\t\tif ( attribute.type === \"v2\" ) size = 2;\r\n\t\t\t\t\telse if ( attribute.type === \"v3\" ) size = 3;\r\n\t\t\t\t\telse if ( attribute.type === \"v4\" ) size = 4;\r\n\t\t\t\t\telse if ( attribute.type === \"c\"  ) size = 3;\r\n\r\n\t\t\t\t\tattribute.size = size;\r\n\r\n\t\t\t\t\tattribute.array = new Float32Array( nvertices * size );\r\n\r\n\t\t\t\t\tattribute.buffer = _gl.createBuffer();\r\n\t\t\t\t\tattribute.buffer.belongsToAttribute = a;\r\n\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.__webglCustomAttributesList.push( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction initParticleBuffers ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\tgeometry.__sortArray = [];\r\n\r\n\t\tgeometry.__webglParticleCount = nvertices;\r\n\r\n\t\tinitCustomAttributes ( geometry, object );\r\n\r\n\t};\r\n\r\n\tfunction initLineBuffers ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__lineDistanceArray = new Float32Array( nvertices * 1 );\r\n\r\n\t\tgeometry.__webglLineCount = nvertices;\r\n\r\n\t\tinitCustomAttributes ( geometry, object );\r\n\r\n\t};\r\n\r\n\tfunction initRibbonBuffers ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__normalArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\tgeometry.__webglVertexCount = nvertices;\r\n\r\n\t\tinitCustomAttributes ( geometry, object );\r\n\r\n\t};\r\n\r\n\tfunction initMeshBuffers ( geometryGroup, object ) {\r\n\r\n\t\tvar geometry = object.geometry,\r\n\t\t\tfaces3 = geometryGroup.faces3,\r\n\t\t\tfaces4 = geometryGroup.faces4,\r\n\r\n\t\t\tnvertices = faces3.length * 3 + faces4.length * 4,\r\n\t\t\tntris     = faces3.length * 1 + faces4.length * 2,\r\n\t\t\tnlines    = faces3.length * 3 + faces4.length * 4,\r\n\r\n\t\t\tmaterial = getBufferMaterial( object, geometryGroup ),\r\n\r\n\t\t\tuvType = bufferGuessUVType( material ),\r\n\t\t\tnormalType = bufferGuessNormalType( material ),\r\n\t\t\tvertexColorType = bufferGuessVertexColorType( material );\r\n\r\n\t\t//console.log( \"uvType\", uvType, \"normalType\", normalType, \"vertexColorType\", vertexColorType, object, geometryGroup, material );\r\n\r\n\t\tgeometryGroup.__vertexArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\tif ( normalType ) {\r\n\r\n\t\t\tgeometryGroup.__normalArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.hasTangents ) {\r\n\r\n\t\t\tgeometryGroup.__tangentArray = new Float32Array( nvertices * 4 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( vertexColorType ) {\r\n\r\n\t\t\tgeometryGroup.__colorArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvType ) {\r\n\r\n\t\t\tif ( geometry.faceUvs.length > 0 || geometry.faceVertexUvs.length > 0 ) {\r\n\r\n\t\t\t\tgeometryGroup.__uvArray = new Float32Array( nvertices * 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.faceUvs.length > 1 || geometry.faceVertexUvs.length > 1 ) {\r\n\r\n\t\t\t\tgeometryGroup.__uv2Array = new Float32Array( nvertices * 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.geometry.skinWeights.length && object.geometry.skinIndices.length ) {\r\n\r\n\t\t\tgeometryGroup.__skinIndexArray = new Float32Array( nvertices * 4 );\r\n\t\t\tgeometryGroup.__skinWeightArray = new Float32Array( nvertices * 4 );\r\n\r\n\t\t}\r\n\r\n\t\tgeometryGroup.__faceArray = new Uint16Array( ntris * 3 );\r\n\t\tgeometryGroup.__lineArray = new Uint16Array( nlines * 2 );\r\n\r\n\t\tvar m, ml;\r\n\r\n\t\tif ( geometryGroup.numMorphTargets ) {\r\n\r\n\t\t\tgeometryGroup.__morphTargetsArrays = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__morphTargetsArrays.push( new Float32Array( nvertices * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometryGroup.numMorphNormals ) {\r\n\r\n\t\t\tgeometryGroup.__morphNormalsArrays = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__morphNormalsArrays.push( new Float32Array( nvertices * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometryGroup.__webglFaceCount = ntris * 3;\r\n\t\tgeometryGroup.__webglLineCount = nlines * 2;\r\n\r\n\r\n\t\t// custom attributes\r\n\r\n\t\tif ( material.attributes ) {\r\n\r\n\t\t\tif ( geometryGroup.__webglCustomAttributesList === undefined ) {\r\n\r\n\t\t\t\tgeometryGroup.__webglCustomAttributesList = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\t\t// Do a shallow copy of the attribute object so different geometryGroup chunks use different\r\n\t\t\t\t// attribute buffers which are correctly indexed in the setMeshBuffers function\r\n\r\n\t\t\t\tvar originalAttribute = material.attributes[ a ];\r\n\r\n\t\t\t\tvar attribute = {};\r\n\r\n\t\t\t\tfor ( var property in originalAttribute ) {\r\n\r\n\t\t\t\t\tattribute[ property ] = originalAttribute[ property ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {\r\n\r\n\t\t\t\t\tattribute.__webglInitialized = true;\r\n\r\n\t\t\t\t\tvar size = 1;\t\t// \"f\" and \"i\"\r\n\r\n\t\t\t\t\tif( attribute.type === \"v2\" ) size = 2;\r\n\t\t\t\t\telse if( attribute.type === \"v3\" ) size = 3;\r\n\t\t\t\t\telse if( attribute.type === \"v4\" ) size = 4;\r\n\t\t\t\t\telse if( attribute.type === \"c\"  ) size = 3;\r\n\r\n\t\t\t\t\tattribute.size = size;\r\n\r\n\t\t\t\t\tattribute.array = new Float32Array( nvertices * size );\r\n\r\n\t\t\t\t\tattribute.buffer = _gl.createBuffer();\r\n\t\t\t\t\tattribute.buffer.belongsToAttribute = a;\r\n\r\n\t\t\t\t\toriginalAttribute.needsUpdate = true;\r\n\t\t\t\t\tattribute.__original = originalAttribute;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometryGroup.__webglCustomAttributesList.push( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometryGroup.__inittedArrays = true;\r\n\r\n\t};\r\n\r\n\tfunction getBufferMaterial( object, geometryGroup ) {\r\n\r\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\r\n\t\t\t? object.material.materials[ geometryGroup.materialIndex ]\r\n\t\t\t: object.material;\r\n\r\n\t};\r\n\r\n\tfunction materialNeedsSmoothNormals ( material ) {\r\n\r\n\t\treturn material && material.shading !== undefined && material.shading === THREE.SmoothShading;\r\n\r\n\t};\r\n\r\n\tfunction bufferGuessNormalType ( material ) {\r\n\r\n\t\t// only MeshBasicMaterial and MeshDepthMaterial don't need normals\r\n\r\n\t\tif ( ( material instanceof THREE.MeshBasicMaterial && !material.envMap ) || material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNeedsSmoothNormals( material ) ) {\r\n\r\n\t\t\treturn THREE.SmoothShading;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn THREE.FlatShading;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction bufferGuessVertexColorType ( material ) {\r\n\r\n\t\tif ( material.vertexColors ) {\r\n\r\n\t\t\treturn material.vertexColors;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n\tfunction bufferGuessUVType ( material ) {\r\n\r\n\t\t// material must use some texture to require uvs\r\n\r\n\t\tif ( material.map || material.lightMap || material.bumpMap || material.normalMap || material.specularMap || material instanceof THREE.ShaderMaterial ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction initDirectBuffers( geometry ) {\r\n\r\n\t\tvar a, attribute, type;\r\n\r\n\t\tfor ( a in geometry.attributes ) {\r\n\r\n\t\t\tif ( a === \"index\" ) {\r\n\r\n\t\t\t\ttype = _gl.ELEMENT_ARRAY_BUFFER;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttype = _gl.ARRAY_BUFFER;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tattribute = geometry.attributes[ a ];\r\n\r\n\t\t\tattribute.buffer = _gl.createBuffer();\r\n\r\n\t\t\t_gl.bindBuffer( type, attribute.buffer );\r\n\t\t\t_gl.bufferData( type, attribute.array, _gl.STATIC_DRAW );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Buffer setting\r\n\r\n\tfunction setParticleBuffers ( geometry, hint, object ) {\r\n\r\n\t\tvar v, c, vertex, offset, index, color,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tvl = vertices.length,\r\n\r\n\t\tcolors = geometry.colors,\r\n\t\tcl = colors.length,\r\n\r\n\t\tvertexArray = geometry.__vertexArray,\r\n\t\tcolorArray = geometry.__colorArray,\r\n\r\n\t\tsortArray = geometry.__sortArray,\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyElements = geometry.elementsNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\r\n\t\tcustomAttributes = geometry.__webglCustomAttributesList,\r\n\t\ti, il,\r\n\t\ta, ca, cal, value,\r\n\t\tcustomAttribute;\r\n\r\n\t\tif ( object.sortParticles ) {\r\n\r\n\t\t\t_projScreenMatrixPS.copy( _projScreenMatrix );\r\n\t\t\t_projScreenMatrixPS.multiply( object.matrixWorld );\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\t_vector3.copy( vertex );\r\n\t\t\t\t_vector3.applyProjection( _projScreenMatrixPS );\r\n\r\n\t\t\t\tsortArray[ v ] = [ _vector3.z, v ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsortArray.sort( numericalSort );\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ sortArray[v][1] ];\r\n\r\n\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\tcolor = colors[ sortArray[c][1] ];\r\n\r\n\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( customAttributes ) {\r\n\r\n\t\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\t\tif ( ! ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) ) continue;\r\n\r\n\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]     = value.r;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ]      = value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( dirtyColors ) {\r\n\r\n\t\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\t\tcolor = colors[ c ];\r\n\r\n\t\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( customAttributes ) {\r\n\r\n\t\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\t\tif ( customAttribute.needsUpdate &&\r\n\t\t\t\t\t\t ( customAttribute.boundTo === undefined ||\r\n\t\t\t\t\t\t   customAttribute.boundTo === \"vertices\") ) {\r\n\r\n\t\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.r;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]      = value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyVertices || object.sortParticles ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors || object.sortParticles ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( customAttribute.needsUpdate || object.sortParticles ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\tfunction setLineBuffers ( geometry, hint ) {\r\n\r\n\t\tvar v, c, d, vertex, offset, color,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tcolors = geometry.colors,\r\n\t\tlineDistances = geometry.lineDistances,\r\n\r\n\t\tvl = vertices.length,\r\n\t\tcl = colors.length,\r\n\t\tdl = lineDistances.length,\r\n\r\n\t\tvertexArray = geometry.__vertexArray,\r\n\t\tcolorArray = geometry.__colorArray,\r\n\t\tlineDistanceArray = geometry.__lineDistanceArray,\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\t\tdirtyLineDistances = geometry.lineDistancesNeedUpdate,\r\n\r\n\t\tcustomAttributes = geometry.__webglCustomAttributesList,\r\n\r\n\t\ti, il,\r\n\t\ta, ca, cal, value,\r\n\t\tcustomAttribute;\r\n\r\n\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors ) {\r\n\r\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\tcolor = colors[ c ];\r\n\r\n\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyLineDistances ) {\r\n\r\n\t\t\tfor ( d = 0; d < dl; d ++ ) {\r\n\r\n\t\t\t\tlineDistanceArray[ d ] = lineDistances[ d ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, lineDistanceArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( customAttribute.needsUpdate &&\r\n\t\t\t\t\t ( customAttribute.boundTo === undefined ||\r\n\t\t\t\t\t   customAttribute.boundTo === \"vertices\" ) ) {\r\n\r\n\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.r;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t = value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setRibbonBuffers ( geometry, hint ) {\r\n\r\n\t\tvar v, c, n, vertex, offset, color, normal,\r\n\r\n\t\ti, il, ca, cal, customAttribute, value,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tcolors = geometry.colors,\r\n\t\tnormals = geometry.normals,\r\n\r\n\t\tvl = vertices.length,\r\n\t\tcl = colors.length,\r\n\t\tnl = normals.length,\r\n\r\n\t\tvertexArray = geometry.__vertexArray,\r\n\t\tcolorArray = geometry.__colorArray,\r\n\t\tnormalArray = geometry.__normalArray,\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\t\tdirtyNormals = geometry.normalsNeedUpdate,\r\n\r\n\t\tcustomAttributes = geometry.__webglCustomAttributesList;\r\n\r\n\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors ) {\r\n\r\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\tcolor = colors[ c ];\r\n\r\n\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyNormals ) {\r\n\r\n\t\t\tfor ( n = 0; n < nl; n ++ ) {\r\n\r\n\t\t\t\tnormal = normals[ n ];\r\n\r\n\t\t\t\toffset = n * 3;\r\n\r\n\t\t\t\tnormalArray[ offset ]     = normal.x;\r\n\t\t\t\tnormalArray[ offset + 1 ] = normal.y;\r\n\t\t\t\tnormalArray[ offset + 2 ] = normal.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglNormalBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( customAttribute.needsUpdate &&\r\n\t\t\t\t\t ( customAttribute.boundTo === undefined ||\r\n\t\t\t\t\t   customAttribute.boundTo === \"vertices\" ) ) {\r\n\r\n\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.r;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t = value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setMeshBuffers( geometryGroup, object, hint, dispose, material ) {\r\n\r\n\t\tif ( ! geometryGroup.__inittedArrays ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar normalType = bufferGuessNormalType( material ),\r\n\t\tvertexColorType = bufferGuessVertexColorType( material ),\r\n\t\tuvType = bufferGuessUVType( material ),\r\n\r\n\t\tneedsSmoothNormals = ( normalType === THREE.SmoothShading );\r\n\r\n\t\tvar f, fl, fi, face,\r\n\t\tvertexNormals, faceNormal, normal,\r\n\t\tvertexColors, faceColor,\r\n\t\tvertexTangents,\r\n\t\tuv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4,\r\n\t\tc1, c2, c3, c4,\r\n\t\tsw1, sw2, sw3, sw4,\r\n\t\tsi1, si2, si3, si4,\r\n\t\tsa1, sa2, sa3, sa4,\r\n\t\tsb1, sb2, sb3, sb4,\r\n\t\tm, ml, i, il,\r\n\t\tvn, uvi, uv2i,\r\n\t\tvk, vkl, vka,\r\n\t\tnka, chf, faceVertexNormals,\r\n\t\ta,\r\n\r\n\t\tvertexIndex = 0,\r\n\r\n\t\toffset = 0,\r\n\t\toffset_uv = 0,\r\n\t\toffset_uv2 = 0,\r\n\t\toffset_face = 0,\r\n\t\toffset_normal = 0,\r\n\t\toffset_tangent = 0,\r\n\t\toffset_line = 0,\r\n\t\toffset_color = 0,\r\n\t\toffset_skin = 0,\r\n\t\toffset_morphTarget = 0,\r\n\t\toffset_custom = 0,\r\n\t\toffset_customSrc = 0,\r\n\r\n\t\tvalue,\r\n\r\n\t\tvertexArray = geometryGroup.__vertexArray,\r\n\t\tuvArray = geometryGroup.__uvArray,\r\n\t\tuv2Array = geometryGroup.__uv2Array,\r\n\t\tnormalArray = geometryGroup.__normalArray,\r\n\t\ttangentArray = geometryGroup.__tangentArray,\r\n\t\tcolorArray = geometryGroup.__colorArray,\r\n\r\n\t\tskinIndexArray = geometryGroup.__skinIndexArray,\r\n\t\tskinWeightArray = geometryGroup.__skinWeightArray,\r\n\r\n\t\tmorphTargetsArrays = geometryGroup.__morphTargetsArrays,\r\n\t\tmorphNormalsArrays = geometryGroup.__morphNormalsArrays,\r\n\r\n\t\tcustomAttributes = geometryGroup.__webglCustomAttributesList,\r\n\t\tcustomAttribute,\r\n\r\n\t\tfaceArray = geometryGroup.__faceArray,\r\n\t\tlineArray = geometryGroup.__lineArray,\r\n\r\n\t\tgeometry = object.geometry, // this is shared for all chunks\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyElements = geometry.elementsNeedUpdate,\r\n\t\tdirtyUvs = geometry.uvsNeedUpdate,\r\n\t\tdirtyNormals = geometry.normalsNeedUpdate,\r\n\t\tdirtyTangents = geometry.tangentsNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\t\tdirtyMorphTargets = geometry.morphTargetsNeedUpdate,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tchunk_faces3 = geometryGroup.faces3,\r\n\t\tchunk_faces4 = geometryGroup.faces4,\r\n\t\tobj_faces = geometry.faces,\r\n\r\n\t\tobj_uvs  = geometry.faceVertexUvs[ 0 ],\r\n\t\tobj_uvs2 = geometry.faceVertexUvs[ 1 ],\r\n\r\n\t\tobj_colors = geometry.colors,\r\n\r\n\t\tobj_skinIndices = geometry.skinIndices,\r\n\t\tobj_skinWeights = geometry.skinWeights,\r\n\r\n\t\tmorphTargets = geometry.morphTargets,\r\n\t\tmorphNormals = geometry.morphNormals;\r\n\r\n\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\tv1 = vertices[ face.a ];\r\n\t\t\t\tv2 = vertices[ face.b ];\r\n\t\t\t\tv3 = vertices[ face.c ];\r\n\r\n\t\t\t\tvertexArray[ offset ]     = v1.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = v1.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = v1.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 3 ] = v2.x;\r\n\t\t\t\tvertexArray[ offset + 4 ] = v2.y;\r\n\t\t\t\tvertexArray[ offset + 5 ] = v2.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 6 ] = v3.x;\r\n\t\t\t\tvertexArray[ offset + 7 ] = v3.y;\r\n\t\t\t\tvertexArray[ offset + 8 ] = v3.z;\r\n\r\n\t\t\t\toffset += 9;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tv1 = vertices[ face.a ];\r\n\t\t\t\tv2 = vertices[ face.b ];\r\n\t\t\t\tv3 = vertices[ face.c ];\r\n\t\t\t\tv4 = vertices[ face.d ];\r\n\r\n\t\t\t\tvertexArray[ offset ]     = v1.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = v1.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = v1.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 3 ] = v2.x;\r\n\t\t\t\tvertexArray[ offset + 4 ] = v2.y;\r\n\t\t\t\tvertexArray[ offset + 5 ] = v2.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 6 ] = v3.x;\r\n\t\t\t\tvertexArray[ offset + 7 ] = v3.y;\r\n\t\t\t\tvertexArray[ offset + 8 ] = v3.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 9 ]  = v4.x;\r\n\t\t\t\tvertexArray[ offset + 10 ] = v4.y;\r\n\t\t\t\tvertexArray[ offset + 11 ] = v4.z;\r\n\r\n\t\t\t\toffset += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyMorphTargets ) {\r\n\r\n\t\t\tfor ( vk = 0, vkl = morphTargets.length; vk < vkl; vk ++ ) {\r\n\r\n\t\t\t\toffset_morphTarget = 0;\r\n\r\n\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tchf = chunk_faces3[ f ];\r\n\t\t\t\t\tface = obj_faces[ chf ];\r\n\r\n\t\t\t\t\t// morph positions\r\n\r\n\t\t\t\t\tv1 = morphTargets[ vk ].vertices[ face.a ];\r\n\t\t\t\t\tv2 = morphTargets[ vk ].vertices[ face.b ];\r\n\t\t\t\t\tv3 = morphTargets[ vk ].vertices[ face.c ];\r\n\r\n\t\t\t\t\tvka = morphTargetsArrays[ vk ];\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget ] \t  = v1.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 1 ] = v1.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 2 ] = v1.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 3 ] = v2.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 4 ] = v2.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 5 ] = v2.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 6 ] = v3.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 7 ] = v3.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 8 ] = v3.z;\r\n\r\n\t\t\t\t\t// morph normals\r\n\r\n\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\tif ( needsSmoothNormals ) {\r\n\r\n\t\t\t\t\t\t\tfaceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];\r\n\r\n\t\t\t\t\t\t\tn1 = faceVertexNormals.a;\r\n\t\t\t\t\t\t\tn2 = faceVertexNormals.b;\r\n\t\t\t\t\t\t\tn3 = faceVertexNormals.c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tn1 = morphNormals[ vk ].faceNormals[ chf ];\r\n\t\t\t\t\t\t\tn2 = n1;\r\n\t\t\t\t\t\t\tn3 = n1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnka = morphNormalsArrays[ vk ];\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget ] \t  = n1.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 1 ] = n1.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 2 ] = n1.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 3 ] = n2.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 4 ] = n2.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 5 ] = n2.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 6 ] = n3.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 7 ] = n3.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 8 ] = n3.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//\r\n\r\n\t\t\t\t\toffset_morphTarget += 9;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tchf = chunk_faces4[ f ];\r\n\t\t\t\t\tface = obj_faces[ chf ];\r\n\r\n\t\t\t\t\t// morph positions\r\n\r\n\t\t\t\t\tv1 = morphTargets[ vk ].vertices[ face.a ];\r\n\t\t\t\t\tv2 = morphTargets[ vk ].vertices[ face.b ];\r\n\t\t\t\t\tv3 = morphTargets[ vk ].vertices[ face.c ];\r\n\t\t\t\t\tv4 = morphTargets[ vk ].vertices[ face.d ];\r\n\r\n\t\t\t\t\tvka = morphTargetsArrays[ vk ];\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget ] \t  = v1.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 1 ] = v1.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 2 ] = v1.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 3 ] = v2.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 4 ] = v2.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 5 ] = v2.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 6 ] = v3.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 7 ] = v3.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 8 ] = v3.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 9 ]  = v4.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 10 ] = v4.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 11 ] = v4.z;\r\n\r\n\t\t\t\t\t// morph normals\r\n\r\n\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\tif ( needsSmoothNormals ) {\r\n\r\n\t\t\t\t\t\t\tfaceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];\r\n\r\n\t\t\t\t\t\t\tn1 = faceVertexNormals.a;\r\n\t\t\t\t\t\t\tn2 = faceVertexNormals.b;\r\n\t\t\t\t\t\t\tn3 = faceVertexNormals.c;\r\n\t\t\t\t\t\t\tn4 = faceVertexNormals.d;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tn1 = morphNormals[ vk ].faceNormals[ chf ];\r\n\t\t\t\t\t\t\tn2 = n1;\r\n\t\t\t\t\t\t\tn3 = n1;\r\n\t\t\t\t\t\t\tn4 = n1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnka = morphNormalsArrays[ vk ];\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget ] \t  = n1.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 1 ] = n1.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 2 ] = n1.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 3 ] = n2.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 4 ] = n2.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 5 ] = n2.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 6 ] = n3.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 7 ] = n3.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 8 ] = n3.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 9 ]  = n4.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 10 ] = n4.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 11 ] = n4.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//\r\n\r\n\t\t\t\t\toffset_morphTarget += 12;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ vk ] );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, morphTargetsArrays[ vk ], hint );\r\n\r\n\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ vk ] );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, morphNormalsArrays[ vk ], hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( obj_skinWeights.length ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t// weights\r\n\r\n\t\t\t\tsw1 = obj_skinWeights[ face.a ];\r\n\t\t\t\tsw2 = obj_skinWeights[ face.b ];\r\n\t\t\t\tsw3 = obj_skinWeights[ face.c ];\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin ]     = sw1.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 1 ] = sw1.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 2 ] = sw1.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 3 ] = sw1.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 4 ] = sw2.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 5 ] = sw2.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 6 ] = sw2.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 7 ] = sw2.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 8 ]  = sw3.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 9 ]  = sw3.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 10 ] = sw3.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 11 ] = sw3.w;\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tsi1 = obj_skinIndices[ face.a ];\r\n\t\t\t\tsi2 = obj_skinIndices[ face.b ];\r\n\t\t\t\tsi3 = obj_skinIndices[ face.c ];\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin ]     = si1.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 1 ] = si1.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 2 ] = si1.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 3 ] = si1.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 4 ] = si2.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 5 ] = si2.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 6 ] = si2.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 7 ] = si2.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 8 ]  = si3.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 9 ]  = si3.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 10 ] = si3.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 11 ] = si3.w;\r\n\r\n\t\t\t\toffset_skin += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t// weights\r\n\r\n\t\t\t\tsw1 = obj_skinWeights[ face.a ];\r\n\t\t\t\tsw2 = obj_skinWeights[ face.b ];\r\n\t\t\t\tsw3 = obj_skinWeights[ face.c ];\r\n\t\t\t\tsw4 = obj_skinWeights[ face.d ];\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin ]     = sw1.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 1 ] = sw1.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 2 ] = sw1.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 3 ] = sw1.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 4 ] = sw2.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 5 ] = sw2.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 6 ] = sw2.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 7 ] = sw2.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 8 ]  = sw3.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 9 ]  = sw3.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 10 ] = sw3.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 11 ] = sw3.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 12 ] = sw4.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 13 ] = sw4.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 14 ] = sw4.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 15 ] = sw4.w;\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tsi1 = obj_skinIndices[ face.a ];\r\n\t\t\t\tsi2 = obj_skinIndices[ face.b ];\r\n\t\t\t\tsi3 = obj_skinIndices[ face.c ];\r\n\t\t\t\tsi4 = obj_skinIndices[ face.d ];\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin ]     = si1.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 1 ] = si1.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 2 ] = si1.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 3 ] = si1.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 4 ] = si2.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 5 ] = si2.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 6 ] = si2.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 7 ] = si2.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 8 ]  = si3.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 9 ]  = si3.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 10 ] = si3.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 11 ] = si3.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 12 ] = si4.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 13 ] = si4.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 14 ] = si4.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 15 ] = si4.w;\r\n\r\n\t\t\t\toffset_skin += 16;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_skin > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, skinIndexArray, hint );\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, skinWeightArray, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors && vertexColorType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\tvertexColors = face.vertexColors;\r\n\t\t\t\tfaceColor = face.color;\r\n\r\n\t\t\t\tif ( vertexColors.length === 3 && vertexColorType === THREE.VertexColors ) {\r\n\r\n\t\t\t\t\tc1 = vertexColors[ 0 ];\r\n\t\t\t\t\tc2 = vertexColors[ 1 ];\r\n\t\t\t\t\tc3 = vertexColors[ 2 ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tc1 = faceColor;\r\n\t\t\t\t\tc2 = faceColor;\r\n\t\t\t\t\tc3 = faceColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolorArray[ offset_color ]     = c1.r;\r\n\t\t\t\tcolorArray[ offset_color + 1 ] = c1.g;\r\n\t\t\t\tcolorArray[ offset_color + 2 ] = c1.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 3 ] = c2.r;\r\n\t\t\t\tcolorArray[ offset_color + 4 ] = c2.g;\r\n\t\t\t\tcolorArray[ offset_color + 5 ] = c2.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 6 ] = c3.r;\r\n\t\t\t\tcolorArray[ offset_color + 7 ] = c3.g;\r\n\t\t\t\tcolorArray[ offset_color + 8 ] = c3.b;\r\n\r\n\t\t\t\toffset_color += 9;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tvertexColors = face.vertexColors;\r\n\t\t\t\tfaceColor = face.color;\r\n\r\n\t\t\t\tif ( vertexColors.length === 4 && vertexColorType === THREE.VertexColors ) {\r\n\r\n\t\t\t\t\tc1 = vertexColors[ 0 ];\r\n\t\t\t\t\tc2 = vertexColors[ 1 ];\r\n\t\t\t\t\tc3 = vertexColors[ 2 ];\r\n\t\t\t\t\tc4 = vertexColors[ 3 ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tc1 = faceColor;\r\n\t\t\t\t\tc2 = faceColor;\r\n\t\t\t\t\tc3 = faceColor;\r\n\t\t\t\t\tc4 = faceColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolorArray[ offset_color ]     = c1.r;\r\n\t\t\t\tcolorArray[ offset_color + 1 ] = c1.g;\r\n\t\t\t\tcolorArray[ offset_color + 2 ] = c1.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 3 ] = c2.r;\r\n\t\t\t\tcolorArray[ offset_color + 4 ] = c2.g;\r\n\t\t\t\tcolorArray[ offset_color + 5 ] = c2.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 6 ] = c3.r;\r\n\t\t\t\tcolorArray[ offset_color + 7 ] = c3.g;\r\n\t\t\t\tcolorArray[ offset_color + 8 ] = c3.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 9 ]  = c4.r;\r\n\t\t\t\tcolorArray[ offset_color + 10 ] = c4.g;\r\n\t\t\t\tcolorArray[ offset_color + 11 ] = c4.b;\r\n\r\n\t\t\t\toffset_color += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_color > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyTangents && geometry.hasTangents ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\tvertexTangents = face.vertexTangents;\r\n\r\n\t\t\t\tt1 = vertexTangents[ 0 ];\r\n\t\t\t\tt2 = vertexTangents[ 1 ];\r\n\t\t\t\tt3 = vertexTangents[ 2 ];\r\n\r\n\t\t\t\ttangentArray[ offset_tangent ]     = t1.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 1 ] = t1.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 2 ] = t1.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 3 ] = t1.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 4 ] = t2.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 5 ] = t2.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 6 ] = t2.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 7 ] = t2.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 8 ]  = t3.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 9 ]  = t3.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 10 ] = t3.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 11 ] = t3.w;\r\n\r\n\t\t\t\toffset_tangent += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tvertexTangents = face.vertexTangents;\r\n\r\n\t\t\t\tt1 = vertexTangents[ 0 ];\r\n\t\t\t\tt2 = vertexTangents[ 1 ];\r\n\t\t\t\tt3 = vertexTangents[ 2 ];\r\n\t\t\t\tt4 = vertexTangents[ 3 ];\r\n\r\n\t\t\t\ttangentArray[ offset_tangent ]     = t1.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 1 ] = t1.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 2 ] = t1.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 3 ] = t1.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 4 ] = t2.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 5 ] = t2.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 6 ] = t2.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 7 ] = t2.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 8 ]  = t3.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 9 ]  = t3.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 10 ] = t3.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 11 ] = t3.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 12 ] = t4.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 13 ] = t4.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 14 ] = t4.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 15 ] = t4.w;\r\n\r\n\t\t\t\toffset_tangent += 16;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, tangentArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyNormals && normalType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\tvertexNormals = face.vertexNormals;\r\n\t\t\t\tfaceNormal = face.normal;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 && needsSmoothNormals ) {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tvn = vertexNormals[ i ];\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = vn.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = vn.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = vn.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = faceNormal.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = faceNormal.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = faceNormal.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tvertexNormals = face.vertexNormals;\r\n\t\t\t\tfaceNormal = face.normal;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 4 && needsSmoothNormals ) {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\tvn = vertexNormals[ i ];\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = vn.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = vn.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = vn.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = faceNormal.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = faceNormal.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = faceNormal.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyUvs && obj_uvs && uvType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces3[ f ];\r\n\r\n\t\t\t\tuv = obj_uvs[ fi ];\r\n\r\n\t\t\t\tif ( uv === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tuvi = uv[ i ];\r\n\r\n\t\t\t\t\tuvArray[ offset_uv ]     = uvi.x;\r\n\t\t\t\t\tuvArray[ offset_uv + 1 ] = uvi.y;\r\n\r\n\t\t\t\t\toffset_uv += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces4[ f ];\r\n\r\n\t\t\t\tuv = obj_uvs[ fi ];\r\n\r\n\t\t\t\tif ( uv === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\tuvi = uv[ i ];\r\n\r\n\t\t\t\t\tuvArray[ offset_uv ]     = uvi.x;\r\n\t\t\t\t\tuvArray[ offset_uv + 1 ] = uvi.y;\r\n\r\n\t\t\t\t\toffset_uv += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_uv > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uvArray, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyUvs && obj_uvs2 && uvType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces3[ f ];\r\n\r\n\t\t\t\tuv2 = obj_uvs2[ fi ];\r\n\r\n\t\t\t\tif ( uv2 === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tuv2i = uv2[ i ];\r\n\r\n\t\t\t\t\tuv2Array[ offset_uv2 ]     = uv2i.x;\r\n\t\t\t\t\tuv2Array[ offset_uv2 + 1 ] = uv2i.y;\r\n\r\n\t\t\t\t\toffset_uv2 += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces4[ f ];\r\n\r\n\t\t\t\tuv2 = obj_uvs2[ fi ];\r\n\r\n\t\t\t\tif ( uv2 === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\tuv2i = uv2[ i ];\r\n\r\n\t\t\t\t\tuv2Array[ offset_uv2 ]     = uv2i.x;\r\n\t\t\t\t\tuv2Array[ offset_uv2 + 1 ] = uv2i.y;\r\n\r\n\t\t\t\t\toffset_uv2 += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_uv2 > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uv2Array, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyElements ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfaceArray[ offset_face ] \t = vertexIndex;\r\n\t\t\t\tfaceArray[ offset_face + 1 ] = vertexIndex + 1;\r\n\t\t\t\tfaceArray[ offset_face + 2 ] = vertexIndex + 2;\r\n\r\n\t\t\t\toffset_face += 3;\r\n\r\n\t\t\t\tlineArray[ offset_line ]     = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 1 ] = vertexIndex + 1;\r\n\r\n\t\t\t\tlineArray[ offset_line + 2 ] = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 3 ] = vertexIndex + 2;\r\n\r\n\t\t\t\tlineArray[ offset_line + 4 ] = vertexIndex + 1;\r\n\t\t\t\tlineArray[ offset_line + 5 ] = vertexIndex + 2;\r\n\r\n\t\t\t\toffset_line += 6;\r\n\r\n\t\t\t\tvertexIndex += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfaceArray[ offset_face ]     = vertexIndex;\r\n\t\t\t\tfaceArray[ offset_face + 1 ] = vertexIndex + 1;\r\n\t\t\t\tfaceArray[ offset_face + 2 ] = vertexIndex + 3;\r\n\r\n\t\t\t\tfaceArray[ offset_face + 3 ] = vertexIndex + 1;\r\n\t\t\t\tfaceArray[ offset_face + 4 ] = vertexIndex + 2;\r\n\t\t\t\tfaceArray[ offset_face + 5 ] = vertexIndex + 3;\r\n\r\n\t\t\t\toffset_face += 6;\r\n\r\n\t\t\t\tlineArray[ offset_line ]     = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 1 ] = vertexIndex + 1;\r\n\r\n\t\t\t\tlineArray[ offset_line + 2 ] = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 3 ] = vertexIndex + 3;\r\n\r\n\t\t\t\tlineArray[ offset_line + 4 ] = vertexIndex + 1;\r\n\t\t\t\tlineArray[ offset_line + 5 ] = vertexIndex + 2;\r\n\r\n\t\t\t\tlineArray[ offset_line + 6 ] = vertexIndex + 2;\r\n\t\t\t\tlineArray[ offset_line + 7 ] = vertexIndex + 3;\r\n\r\n\t\t\t\toffset_line += 8;\r\n\r\n\t\t\t\tvertexIndex += 4;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );\r\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faceArray, hint );\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );\r\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, lineArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( ! customAttribute.__original.needsUpdate ) continue;\r\n\r\n\t\t\t\toffset_custom = 0;\r\n\t\t\t\toffset_customSrc = 0;\r\n\r\n\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 3;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = value;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 3;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = value;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 6;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tv4 = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v4.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 8;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 6;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\t\t\t\t\t\t\tv4 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v4.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 8;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\tvar pp;\r\n\r\n\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\tpp = [ \"r\", \"g\", \"b\" ];\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tpp = [ \"x\", \"y\", \"z\" ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 9;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tv4 = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 9;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\t\t\t\t\t\t\tv4 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faceVertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 9;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\t\t\t\t\t\t\tv4 = value[ 3 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tv4 = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 12 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 13 ] = v4.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 14 ] = v4.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 15 ] = v4.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 16;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\t\t\t\t\t\t\tv4 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 12 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 13 ] = v4.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 14 ] = v4.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 15 ] = v4.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 16;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faceVertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\t\t\t\t\t\t\tv4 = value[ 3 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 12 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 13 ] = v4.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 14 ] = v4.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 15 ] = v4.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 16;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dispose ) {\r\n\r\n\t\t\tdelete geometryGroup.__inittedArrays;\r\n\t\t\tdelete geometryGroup.__colorArray;\r\n\t\t\tdelete geometryGroup.__normalArray;\r\n\t\t\tdelete geometryGroup.__tangentArray;\r\n\t\t\tdelete geometryGroup.__uvArray;\r\n\t\t\tdelete geometryGroup.__uv2Array;\r\n\t\t\tdelete geometryGroup.__faceArray;\r\n\t\t\tdelete geometryGroup.__vertexArray;\r\n\t\t\tdelete geometryGroup.__lineArray;\r\n\t\t\tdelete geometryGroup.__skinIndexArray;\r\n\t\t\tdelete geometryGroup.__skinWeightArray;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setDirectBuffers ( geometry, hint, dispose ) {\r\n\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tvar index = attributes[ \"index\" ];\r\n\t\tvar position = attributes[ \"position\" ];\r\n\t\tvar normal = attributes[ \"normal\" ];\r\n\t\tvar uv = attributes[ \"uv\" ];\r\n\t\tvar color = attributes[ \"color\" ];\r\n\t\tvar tangent = attributes[ \"tangent\" ];\r\n\r\n\t\tif ( geometry.elementsNeedUpdate && index !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\r\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, index.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.verticesNeedUpdate && position !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, position.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.normalsNeedUpdate && normal !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, normal.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvsNeedUpdate && uv !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uv.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colorsNeedUpdate && color !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, color.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.tangentsNeedUpdate && tangent !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, tangent.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dispose ) {\r\n\r\n\t\t\tfor ( var i in geometry.attributes ) {\r\n\r\n\t\t\t\tdelete geometry.attributes[ i ].array;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Buffer rendering\r\n\r\n\tthis.renderBufferImmediate = function ( object, program, material ) {\r\n\r\n\t\tif ( object.hasPositions && ! object.__webglVertexBuffer ) object.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tif ( object.hasNormals && ! object.__webglNormalBuffer ) object.__webglNormalBuffer = _gl.createBuffer();\r\n\t\tif ( object.hasUvs && ! object.__webglUvBuffer ) object.__webglUvBuffer = _gl.createBuffer();\r\n\t\tif ( object.hasColors && ! object.__webglColorBuffer ) object.__webglColorBuffer = _gl.createBuffer();\r\n\r\n\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglNormalBuffer );\r\n\r\n\t\t\tif ( material.shading === THREE.FlatShading ) {\r\n\r\n\t\t\t\tvar nx, ny, nz,\r\n\t\t\t\t\tnax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz,\r\n\t\t\t\t\tnormalArray,\r\n\t\t\t\t\ti, il = object.count * 3;\r\n\r\n\t\t\t\tfor( i = 0; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tnormalArray = object.normalArray;\r\n\r\n\t\t\t\t\tnax  = normalArray[ i ];\r\n\t\t\t\t\tnay  = normalArray[ i + 1 ];\r\n\t\t\t\t\tnaz  = normalArray[ i + 2 ];\r\n\r\n\t\t\t\t\tnbx  = normalArray[ i + 3 ];\r\n\t\t\t\t\tnby  = normalArray[ i + 4 ];\r\n\t\t\t\t\tnbz  = normalArray[ i + 5 ];\r\n\r\n\t\t\t\t\tncx  = normalArray[ i + 6 ];\r\n\t\t\t\t\tncy  = normalArray[ i + 7 ];\r\n\t\t\t\t\tncz  = normalArray[ i + 8 ];\r\n\r\n\t\t\t\t\tnx = ( nax + nbx + ncx ) / 3;\r\n\t\t\t\t\tny = ( nay + nby + ncy ) / 3;\r\n\t\t\t\t\tnz = ( naz + nbz + ncz ) / 3;\r\n\r\n\t\t\t\t\tnormalArray[ i ] \t = nx;\r\n\t\t\t\t\tnormalArray[ i + 1 ] = ny;\r\n\t\t\t\t\tnormalArray[ i + 2 ] = nz;\r\n\r\n\t\t\t\t\tnormalArray[ i + 3 ] = nx;\r\n\t\t\t\t\tnormalArray[ i + 4 ] = ny;\r\n\t\t\t\t\tnormalArray[ i + 5 ] = nz;\r\n\r\n\t\t\t\t\tnormalArray[ i + 6 ] = nx;\r\n\t\t\t\t\tnormalArray[ i + 7 ] = ny;\r\n\t\t\t\t\tnormalArray[ i + 8 ] = nz;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.normal );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasUvs && material.map ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglUvBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.uv );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.color );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\r\n\r\n\t\tobject.count = 0;\r\n\r\n\t};\r\n\r\n\tthis.renderBufferDirect = function ( camera, lights, fog, material, geometry, object ) {\r\n\r\n\t\tif ( material.visible === false ) return;\r\n\r\n\t\tvar program, attributes, linewidth, primitives, a, attribute;\r\n\r\n\t\tprogram = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\tattributes = program.attributes;\r\n\r\n\t\tvar updateBuffers = false,\r\n\t\t\twireframeBit = material.wireframe ? 1 : 0,\r\n\t\t\tgeometryHash = ( geometry.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;\r\n\r\n\t\tif ( geometryHash !== _currentGeometryGroupHash ) {\r\n\r\n\t\t\t_currentGeometryGroupHash = geometryHash;\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\tdisableAttributes();\r\n\r\n\t\t}\r\n\r\n\t\t// render mesh\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tvar index = geometry.attributes[ \"index\" ];\r\n\r\n\t\t\t// indexed triangles\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tvar offsets = geometry.offsets;\r\n\r\n\t\t\t\t// if there is more than 1 chunk\r\n\t\t\t\t// must set attribute pointers to use new offsets for each chunk\r\n\t\t\t\t// even if geometry and materials didn't change\r\n\r\n\t\t\t\tif ( offsets.length > 1 ) updateBuffers = true;\r\n\r\n\t\t\t\tfor ( var i = 0, il = offsets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar startIndex = offsets[ i ].index;\r\n\r\n\t\t\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t\t\t// vertices\r\n\r\n\t\t\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, startIndex * positionSize * 4 ); // 4 bytes per Float32\r\n\r\n\t\t\t\t\t\t// normals\r\n\r\n\t\t\t\t\t\tvar normal = geometry.attributes[ \"normal\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.normal >= 0 && normal ) {\r\n\r\n\t\t\t\t\t\t\tvar normalSize = normal.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.normal );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.normal, normalSize, _gl.FLOAT, false, 0, startIndex * normalSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\t\tvar uv = geometry.attributes[ \"uv\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.uv >= 0 && uv ) {\r\n\r\n\t\t\t\t\t\t\tvar uvSize = uv.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.uv );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.uv, uvSize, _gl.FLOAT, false, 0, startIndex * uvSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// colors\r\n\r\n\t\t\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, startIndex * colorSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// tangents\r\n\r\n\t\t\t\t\t\tvar tangent = geometry.attributes[ \"tangent\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.tangent >= 0 && tangent ) {\r\n\r\n\t\t\t\t\t\t\tvar tangentSize = tangent.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.tangent );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.tangent, tangentSize, _gl.FLOAT, false, 0, startIndex * tangentSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// indices\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// render indexed triangles\r\n\r\n\t\t\t\t\t_gl.drawElements( _gl.TRIANGLES, offsets[ i ].count, _gl.UNSIGNED_SHORT, offsets[ i ].start * 2 ); // 2 bytes per Uint16\r\n\r\n\t\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t\t_this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared\r\n\t\t\t\t\t_this.info.render.faces += offsets[ i ].count / 3;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t// non-indexed triangles\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t\t// vertices\r\n\r\n\t\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t// normals\r\n\r\n\t\t\t\t\tvar normal = geometry.attributes[ \"normal\" ];\r\n\r\n\t\t\t\t\tif ( attributes.normal >= 0 && normal ) {\r\n\r\n\t\t\t\t\t\tvar normalSize = normal.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.normal );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.normal, normalSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\tvar uv = geometry.attributes[ \"uv\" ];\r\n\r\n\t\t\t\t\tif ( attributes.uv >= 0 && uv ) {\r\n\r\n\t\t\t\t\t\tvar uvSize = uv.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.uv );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.uv, uvSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// colors\r\n\r\n\t\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// tangents\r\n\r\n\t\t\t\t\tvar tangent = geometry.attributes[ \"tangent\" ];\r\n\r\n\t\t\t\t\tif ( attributes.tangent >= 0 && tangent ) {\r\n\r\n\t\t\t\t\t\tvar tangentSize = tangent.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.tangent );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.tangent, tangentSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render non-indexed triangles\r\n\r\n\t\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, position.numItems / 3 );\r\n\r\n\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t_this.info.render.vertices += position.numItems / 3;\r\n\t\t\t\t_this.info.render.faces += position.numItems / 3 / 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t// render particles\r\n\r\n\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t// vertices\r\n\r\n\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t// colors\r\n\r\n\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render particles\r\n\r\n\t\t\t\t_gl.drawArrays( _gl.POINTS, 0, position.numItems / 3 );\r\n\r\n\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t_this.info.render.points += position.numItems / 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t// vertices\r\n\r\n\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t// colors\r\n\r\n\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render lines\r\n\r\n\t\t\t\t_gl.drawArrays( _gl.LINE_STRIP, 0, position.numItems / 3 );\r\n\r\n\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t_this.info.render.points += position.numItems;\r\n\r\n\t\t\t}\r\n\r\n    }\r\n\r\n\t};\r\n\r\n\tthis.renderBuffer = function ( camera, lights, fog, material, geometryGroup, object ) {\r\n\r\n\t\tif ( material.visible === false ) return;\r\n\r\n\t\tvar program, attributes, linewidth, primitives, a, attribute, i, il;\r\n\r\n\t\tprogram = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\tattributes = program.attributes;\r\n\r\n\t\tvar updateBuffers = false,\r\n\t\t\twireframeBit = material.wireframe ? 1 : 0,\r\n\t\t\tgeometryGroupHash = ( geometryGroup.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;\r\n\r\n\t\tif ( geometryGroupHash !== _currentGeometryGroupHash ) {\r\n\r\n\t\t\t_currentGeometryGroupHash = geometryGroupHash;\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\tdisableAttributes();\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tif ( !material.morphTargets && attributes.position >= 0 ) {\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\r\n\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( object.morphTargetBase ) {\r\n\r\n\t\t\t\tsetupMorphTargets( material, geometryGroup, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t// custom attributes\r\n\r\n\t\t\t// Use the per-geometryGroup custom attribute arrays which are setup in initMeshBuffers\r\n\r\n\t\t\tif ( geometryGroup.__webglCustomAttributesList ) {\r\n\r\n\t\t\t\tfor ( i = 0, il = geometryGroup.__webglCustomAttributesList.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tattribute = geometryGroup.__webglCustomAttributesList[ i ];\r\n\r\n\t\t\t\t\tif ( attributes[ attribute.buffer.belongsToAttribute ] >= 0 ) {\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, attribute.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes[ attribute.buffer.belongsToAttribute ] );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ attribute.buffer.belongsToAttribute ], attribute.size, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tif ( attributes.color >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );\r\n\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// normals\r\n\r\n\t\t\tif ( attributes.normal >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );\r\n\t\t\t\tenableAttribute( attributes.normal );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// tangents\r\n\r\n\t\t\tif ( attributes.tangent >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );\r\n\t\t\t\tenableAttribute( attributes.tangent );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.tangent, 4, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tif ( attributes.uv >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );\r\n\t\t\t\tenableAttribute( attributes.uv );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( attributes.uv2 >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );\r\n\t\t\t\tenableAttribute( attributes.uv2 );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv2, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.skinning &&\r\n\t\t\t\t attributes.skinIndex >= 0 && attributes.skinWeight >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );\r\n\t\t\t\tenableAttribute( attributes.skinIndex );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );\r\n\t\t\t\tenableAttribute( attributes.skinWeight );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// line distances\r\n\r\n\t\t\tif ( attributes.lineDistance >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer );\r\n\t\t\t\tenableAttribute( attributes.lineDistance );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// render mesh\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t// wireframe\r\n\r\n\t\t\tif ( material.wireframe ) {\r\n\r\n\t\t\t\tsetLineWidth( material.wireframeLinewidth );\r\n\r\n\t\t\t\tif ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );\r\n\t\t\t\t_gl.drawElements( _gl.LINES, geometryGroup.__webglLineCount, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t// triangles\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, geometryGroup.__webglFaceCount, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\t\t\t_this.info.render.vertices += geometryGroup.__webglFaceCount;\r\n\t\t\t_this.info.render.faces += geometryGroup.__webglFaceCount / 3;\r\n\r\n\t\t// render lines\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\tprimitives = ( object.type === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;\r\n\r\n\t\t\tsetLineWidth( material.linewidth );\r\n\r\n\t\t\t_gl.drawArrays( primitives, 0, geometryGroup.__webglLineCount );\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\r\n\t\t// render particles\r\n\r\n\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\t_gl.drawArrays( _gl.POINTS, 0, geometryGroup.__webglParticleCount );\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\t\t\t_this.info.render.points += geometryGroup.__webglParticleCount;\r\n\r\n\t\t// render ribbon\r\n\r\n\t\t} else if ( object instanceof THREE.Ribbon ) {\r\n\r\n\t\t\t_gl.drawArrays( _gl.TRIANGLE_STRIP, 0, geometryGroup.__webglVertexCount );\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction enableAttribute( attribute ) {\r\n\r\n\t\tif ( ! _enabledAttributes[ attribute ] ) {\r\n\r\n\t\t\t_gl.enableVertexAttribArray( attribute );\r\n\t\t\t_enabledAttributes[ attribute ] = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction disableAttributes() {\r\n\r\n\t\tfor ( var attribute in _enabledAttributes ) {\r\n\r\n\t\t\tif ( _enabledAttributes[ attribute ] ) {\r\n\r\n\t\t\t\t_gl.disableVertexAttribArray( attribute );\r\n\t\t\t\t_enabledAttributes[ attribute ] = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setupMorphTargets ( material, geometryGroup, object ) {\r\n\r\n\t\t// set base\r\n\r\n\t\tvar attributes = material.program.attributes;\r\n\r\n\t\tif ( object.morphTargetBase !== -1 && attributes.position >= 0 ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ object.morphTargetBase ] );\r\n\t\t\tenableAttribute( attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t} else if ( attributes.position >= 0 ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\r\n\t\t\tenableAttribute( attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.morphTargetForcedOrder.length ) {\r\n\r\n\t\t\t// set forced order\r\n\r\n\t\t\tvar m = 0;\r\n\t\t\tvar order = object.morphTargetForcedOrder;\r\n\t\t\tvar influences = object.morphTargetInfluences;\r\n\r\n\t\t\twhile ( m < material.numSupportedMorphTargets && m < order.length ) {\r\n\r\n\t\t\t\tif ( attributes[ \"morphTarget\" + m ] >= 0 ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ order[ m ] ] );\r\n\t\t\t\t\tenableAttribute( attributes[ \"morphTarget\" + m ] );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( attributes[ \"morphNormal\" + m ] >= 0 && material.morphNormals ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ order[ m ] ] );\r\n\t\t\t\t\tenableAttribute( attributes[ \"morphNormal\" + m ] );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = influences[ order[ m ] ];\r\n\r\n\t\t\t\tm ++;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// find the most influencing\r\n\r\n\t\t\tvar influence, activeInfluenceIndices = [];\r\n\t\t\tvar influences = object.morphTargetInfluences;\r\n\t\t\tvar i, il = influences.length;\r\n\r\n\t\t\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\t\t\tinfluence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence > 0 ) {\r\n\r\n\t\t\t\t\tactiveInfluenceIndices.push( [ influence, i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( activeInfluenceIndices.length > material.numSupportedMorphTargets ) {\r\n\r\n\t\t\t\tactiveInfluenceIndices.sort( numericalSort );\r\n\t\t\t\tactiveInfluenceIndices.length = material.numSupportedMorphTargets;\r\n\r\n\t\t\t} else if ( activeInfluenceIndices.length > material.numSupportedMorphNormals ) {\r\n\r\n\t\t\t\tactiveInfluenceIndices.sort( numericalSort );\r\n\r\n\t\t\t} else if ( activeInfluenceIndices.length === 0 ) {\r\n\r\n\t\t\t\tactiveInfluenceIndices.push( [ 0, 0 ] );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar influenceIndex, m = 0;\r\n\r\n\t\t\twhile ( m < material.numSupportedMorphTargets ) {\r\n\r\n\t\t\t\tif ( activeInfluenceIndices[ m ] ) {\r\n\r\n\t\t\t\t\tinfluenceIndex = activeInfluenceIndices[ m ][ 1 ];\r\n\r\n\t\t\t\t\tif ( attributes[ \"morphTarget\" + m ] >= 0 ) {\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ influenceIndex ] );\r\n\t\t\t\t\t\tenableAttribute( attributes[ \"morphTarget\" + m ] );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( attributes[ \"morphNormal\" + m ] >= 0 && material.morphNormals ) {\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ influenceIndex ] );\r\n\t\t\t\t\t\tenableAttribute( attributes[ \"morphNormal\" + m ] );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = influences[ influenceIndex ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tm ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// load updated influences uniform\r\n\r\n\t\tif ( material.program.uniforms.morphTargetInfluences !== null ) {\r\n\r\n\t\t\t_gl.uniform1fv( material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Sorting\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn b.id - a.id;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction numericalSort ( a, b ) {\r\n\r\n\t\treturn b[ 0 ] - a[ 0 ];\r\n\r\n\t};\r\n\r\n\r\n\t// Rendering\r\n\r\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar i, il,\r\n\r\n\t\twebglObject, object,\r\n\t\trenderList,\r\n\r\n\t\tlights = scene.__lights,\r\n\t\tfog = scene.fog;\r\n\r\n\t\t// reset caching for this frame\r\n\r\n\t\t_currentMaterialId = -1;\r\n\t\t_lightsNeedUpdate = true;\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tif ( this.autoUpdateScene ) scene.updateMatrixWorld();\r\n\r\n\t\t// update camera matrices and frustum\r\n\r\n\t\tif ( camera.parent === undefined ) camera.updateMatrixWorld();\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t// update WebGL objects\r\n\r\n\t\tif ( this.autoUpdateObjects ) this.initWebGLObjects( scene );\r\n\r\n\t\t// custom render plugins (pre pass)\r\n\r\n\t\trenderPlugins( this.renderPluginsPre, scene, camera );\r\n\r\n\t\t//\r\n\r\n\t\t_this.info.render.calls = 0;\r\n\t\t_this.info.render.vertices = 0;\r\n\t\t_this.info.render.faces = 0;\r\n\t\t_this.info.render.points = 0;\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\tif ( this.autoClear || forceClear ) {\r\n\r\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\r\n\r\n\t\t}\r\n\r\n\t\t// set matrices for regular objects (frustum culled)\r\n\r\n\t\trenderList = scene.__webglObjects;\r\n\r\n\t\tfor ( i = 0, il = renderList.length; i < il; i ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\twebglObject.render = false;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tif ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\tsetupMatrices( object, camera );\r\n\r\n\t\t\t\t\tunrollBufferMaterial( webglObject );\r\n\r\n\t\t\t\t\twebglObject.render = true;\r\n\r\n\t\t\t\t\tif ( this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t\twebglObject.z = object.renderDepth;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t\twebglObject.z = _vector3.z;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twebglObject.id = object.id;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.sortObjects ) {\r\n\r\n\t\t\trenderList.sort( painterSortStable );\r\n\r\n\t\t}\r\n\r\n\t\t// set matrices for immediate objects\r\n\r\n\t\trenderList = scene.__webglObjectsImmediate;\r\n\r\n\t\tfor ( i = 0, il = renderList.length; i < il; i ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tsetupMatrices( object, camera );\r\n\r\n\t\t\t\tunrollImmediateBufferMaterial( webglObject );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\tvar material = scene.overrideMaterial;\r\n\r\n\t\t\tthis.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\tthis.setDepthTest( material.depthTest );\r\n\t\t\tthis.setDepthWrite( material.depthWrite );\r\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t\trenderObjects( scene.__webglObjects, false, \"\", camera, lights, fog, true, material );\r\n\t\t\trenderObjectsImmediate( scene.__webglObjectsImmediate, \"\", camera, lights, fog, false, material );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar material = null;\r\n\r\n\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\tthis.setBlending( THREE.NoBlending );\r\n\r\n\t\t\trenderObjects( scene.__webglObjects, true, \"opaque\", camera, lights, fog, false, material );\r\n\t\t\trenderObjectsImmediate( scene.__webglObjectsImmediate, \"opaque\", camera, lights, fog, false, material );\r\n\r\n\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\trenderObjects( scene.__webglObjects, false, \"transparent\", camera, lights, fog, true, material );\r\n\t\t\trenderObjectsImmediate( scene.__webglObjectsImmediate, \"transparent\", camera, lights, fog, true, material );\r\n\r\n\t\t}\r\n\r\n\t\t// custom render plugins (post pass)\r\n\r\n\t\trenderPlugins( this.renderPluginsPost, scene, camera );\r\n\r\n\r\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\tif ( renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\tupdateRenderTargetMipmap( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\tthis.setDepthTest( true );\r\n\t\tthis.setDepthWrite( true );\r\n\r\n\t\t// _gl.finish();\r\n\r\n\t};\r\n\r\n\tfunction renderPlugins( plugins, scene, camera ) {\r\n\r\n\t\tif ( ! plugins.length ) return;\r\n\r\n\t\tfor ( var i = 0, il = plugins.length; i < il; i ++ ) {\r\n\r\n\t\t\t// reset state for plugin (to start from clean slate)\r\n\r\n\t\t\t_currentProgram = null;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\t_oldBlending = -1;\r\n\t\t\t_oldDepthTest = -1;\r\n\t\t\t_oldDepthWrite = -1;\r\n\t\t\t_oldDoubleSided = -1;\r\n\t\t\t_oldFlipSided = -1;\r\n\t\t\t_currentGeometryGroupHash = -1;\r\n\t\t\t_currentMaterialId = -1;\r\n\r\n\t\t\t_lightsNeedUpdate = true;\r\n\r\n\t\t\tplugins[ i ].render( scene, camera, _currentWidth, _currentHeight );\r\n\r\n\t\t\t// reset state after plugin (anything could have changed)\r\n\r\n\t\t\t_currentProgram = null;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\t_oldBlending = -1;\r\n\t\t\t_oldDepthTest = -1;\r\n\t\t\t_oldDepthWrite = -1;\r\n\t\t\t_oldDoubleSided = -1;\r\n\t\t\t_oldFlipSided = -1;\r\n\t\t\t_currentGeometryGroupHash = -1;\r\n\t\t\t_currentMaterialId = -1;\r\n\r\n\t\t\t_lightsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction renderObjects ( renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial ) {\r\n\r\n\t\tvar webglObject, object, buffer, material, start, end, delta;\r\n\r\n\t\tif ( reverse ) {\r\n\r\n\t\t\tstart = renderList.length - 1;\r\n\t\t\tend = -1;\r\n\t\t\tdelta = -1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstart = 0;\r\n\t\t\tend = renderList.length;\r\n\t\t\tdelta = 1;\r\n\t\t}\r\n\r\n\t\tfor ( var i = start; i !== end; i += delta ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\r\n\t\t\tif ( webglObject.render ) {\r\n\r\n\t\t\t\tobject = webglObject.object;\r\n\t\t\t\tbuffer = webglObject.buffer;\r\n\r\n\t\t\t\tif ( overrideMaterial ) {\r\n\r\n\t\t\t\t\tmaterial = overrideMaterial;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial = webglObject[ materialType ];\r\n\r\n\t\t\t\t\tif ( ! material ) continue;\r\n\r\n\t\t\t\t\tif ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\r\n\t\t\t\t\t_this.setDepthTest( material.depthTest );\r\n\t\t\t\t\t_this.setDepthWrite( material.depthWrite );\r\n\t\t\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_this.setMaterialFaces( material );\r\n\r\n\t\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t_this.renderBufferDirect( camera, lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_this.renderBuffer( camera, lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction renderObjectsImmediate ( renderList, materialType, camera, lights, fog, useBlending, overrideMaterial ) {\r\n\r\n\t\tvar webglObject, object, material, program;\r\n\r\n\t\tfor ( var i = 0, il = renderList.length; i < il; i ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tif ( overrideMaterial ) {\r\n\r\n\t\t\t\t\tmaterial = overrideMaterial;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial = webglObject[ materialType ];\r\n\r\n\t\t\t\t\tif ( ! material ) continue;\r\n\r\n\t\t\t\t\tif ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\r\n\t\t\t\t\t_this.setDepthTest( material.depthTest );\r\n\t\t\t\t\t_this.setDepthWrite( material.depthWrite );\r\n\t\t\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_this.renderImmediateObject( camera, lights, fog, material, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.renderImmediateObject = function ( camera, lights, fog, material, object ) {\r\n\r\n\t\tvar program = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\t_currentGeometryGroupHash = -1;\r\n\r\n\t\t_this.setMaterialFaces( material );\r\n\r\n\t\tif ( object.immediateRenderCallback ) {\r\n\r\n\t\t\tobject.immediateRenderCallback( program, _gl, _frustum );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tobject.render( function( object ) { _this.renderBufferImmediate( object, program, material ); } );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction unrollImmediateBufferMaterial ( globject ) {\r\n\r\n\t\tvar object = globject.object,\r\n\t\t\tmaterial = object.material;\r\n\r\n\t\tif ( material.transparent ) {\r\n\r\n\t\t\tglobject.transparent = material;\r\n\t\t\tglobject.opaque = null;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tglobject.opaque = material;\r\n\t\t\tglobject.transparent = null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction unrollBufferMaterial ( globject ) {\r\n\r\n\t\tvar object = globject.object,\r\n\t\t\tbuffer = globject.buffer,\r\n\t\t\tmaterial, materialIndex, meshMaterial;\r\n\r\n\t\tmeshMaterial = object.material;\r\n\r\n\t\tif ( meshMaterial instanceof THREE.MeshFaceMaterial ) {\r\n\r\n\t\t\tmaterialIndex = buffer.materialIndex;\r\n\r\n\t\t\tmaterial = meshMaterial.materials[ materialIndex ];\r\n\r\n\t\t\tif ( material.transparent ) {\r\n\r\n\t\t\t\tglobject.transparent = material;\r\n\t\t\t\tglobject.opaque = null;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tglobject.opaque = material;\r\n\t\t\t\tglobject.transparent = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaterial = meshMaterial;\r\n\r\n\t\t\tif ( material ) {\r\n\r\n\t\t\t\tif ( material.transparent ) {\r\n\r\n\t\t\t\t\tglobject.transparent = material;\r\n\t\t\t\t\tglobject.opaque = null;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tglobject.opaque = material;\r\n\t\t\t\t\tglobject.transparent = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Geometry splitting\r\n\r\n\tfunction sortFacesByMaterial ( geometry, material ) {\r\n\r\n\t\tvar f, fl, face, materialIndex, vertices,\r\n\t\t\tgroupHash, hash_map = {};\r\n\r\n\t\tvar numMorphTargets = geometry.morphTargets.length;\r\n\t\tvar numMorphNormals = geometry.morphNormals.length;\r\n\r\n\t\tvar usesFaceMaterial = material instanceof THREE.MeshFaceMaterial;\r\n\r\n\t\tgeometry.geometryGroups = {};\r\n\r\n\t\tfor ( f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = geometry.faces[ f ];\r\n\t\t\tmaterialIndex = usesFaceMaterial ? face.materialIndex : 0;\r\n\r\n\t\t\tif ( hash_map[ materialIndex ] === undefined ) {\r\n\r\n\t\t\t\thash_map[ materialIndex ] = { 'hash': materialIndex, 'counter': 0 };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgroupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;\r\n\r\n\t\t\tif ( geometry.geometryGroups[ groupHash ] === undefined ) {\r\n\r\n\t\t\t\tgeometry.geometryGroups[ groupHash ] = { 'faces3': [], 'faces4': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvertices = face instanceof THREE.Face3 ? 3 : 4;\r\n\r\n\t\t\tif ( geometry.geometryGroups[ groupHash ].vertices + vertices > 65535 ) {\r\n\r\n\t\t\t\thash_map[ materialIndex ].counter += 1;\r\n\t\t\t\tgroupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;\r\n\r\n\t\t\t\tif ( geometry.geometryGroups[ groupHash ] === undefined ) {\r\n\r\n\t\t\t\t\tgeometry.geometryGroups[ groupHash ] = { 'faces3': [], 'faces4': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tgeometry.geometryGroups[ groupHash ].faces3.push( f );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgeometry.geometryGroups[ groupHash ].faces4.push( f );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.geometryGroups[ groupHash ].vertices += vertices;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.geometryGroupsList = [];\r\n\r\n\t\tfor ( var g in geometry.geometryGroups ) {\r\n\r\n\t\t\tgeometry.geometryGroups[ g ].id = _geometryGroupCounter ++;\r\n\r\n\t\t\tgeometry.geometryGroupsList.push( geometry.geometryGroups[ g ] );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects refresh\r\n\r\n\tthis.initWebGLObjects = function ( scene ) {\r\n\r\n\t\tif ( !scene.__webglObjects ) {\r\n\r\n\t\t\tscene.__webglObjects = [];\r\n\t\t\tscene.__webglObjectsImmediate = [];\r\n\t\t\tscene.__webglSprites = [];\r\n\t\t\tscene.__webglFlares = [];\r\n\r\n\t\t}\r\n\r\n\t\twhile ( scene.__objectsAdded.length ) {\r\n\r\n\t\t\taddObject( scene.__objectsAdded[ 0 ], scene );\r\n\t\t\tscene.__objectsAdded.splice( 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\twhile ( scene.__objectsRemoved.length ) {\r\n\r\n\t\t\tremoveObject( scene.__objectsRemoved[ 0 ], scene );\r\n\t\t\tscene.__objectsRemoved.splice( 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\t// update must be called after objects adding / removal\r\n\r\n\t\tfor ( var o = 0, ol = scene.__webglObjects.length; o < ol; o ++ ) {\r\n\r\n\t\t\tupdateObject( scene.__webglObjects[ o ].object );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects adding\r\n\r\n\tfunction addObject ( object, scene ) {\r\n\r\n\t\tvar g, geometry, material, geometryGroup;\r\n\r\n\t\tif ( ! object.__webglInit ) {\r\n\r\n\t\t\tobject.__webglInit = true;\r\n\r\n\t\t\tobject._modelViewMatrix = new THREE.Matrix4();\r\n\t\t\tobject._normalMatrix = new THREE.Matrix3();\r\n\r\n\t\t\tif ( object.geometry !== undefined && object.geometry.__webglInit === undefined ) {\r\n\r\n\t\t\t\tobject.geometry.__webglInit = true;\r\n\t\t\t\tobject.geometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\t\t\t\tmaterial = object.material;\r\n\r\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\tif ( geometry.geometryGroups === undefined ) {\r\n\r\n\t\t\t\t\t\tsortFacesByMaterial( geometry, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// create separate VBOs per geometry chunk\r\n\r\n\t\t\t\t\tfor ( g in geometry.geometryGroups ) {\r\n\r\n\t\t\t\t\t\tgeometryGroup = geometry.geometryGroups[ g ];\r\n\r\n\t\t\t\t\t\t// initialise VBO on the first access\r\n\r\n\t\t\t\t\t\tif ( ! geometryGroup.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\t\t\tcreateMeshBuffers( geometryGroup );\r\n\t\t\t\t\t\t\tinitMeshBuffers( geometryGroup, object );\r\n\r\n\t\t\t\t\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.morphTargetsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.elementsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.uvsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.normalsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.tangentsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.colorsNeedUpdate = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\tinitDirectBuffers( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Ribbon ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( ! geometry.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\tcreateRibbonBuffers( geometry );\r\n\t\t\t\t\tinitRibbonBuffers( geometry, object );\r\n\r\n\t\t\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\t\t\t\tgeometry.colorsNeedUpdate = true;\r\n\t\t\t\t\tgeometry.normalsNeedUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( ! geometry.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n            createLineBuffers( geometry );\r\n            initLineBuffers( geometry, object );\r\n\r\n            geometry.verticesNeedUpdate = true;\r\n            geometry.colorsNeedUpdate = true;\r\n            geometry.lineDistancesNeedUpdate = true;\r\n\r\n          } else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t\tinitDirectBuffers( geometry );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( ! geometry.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\t\tcreateParticleBuffers( geometry );\r\n\t\t\t\t\t\tinitParticleBuffers( geometry, object );\r\n\r\n\t\t\t\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\t\t\t\t\tgeometry.colorsNeedUpdate = true;\r\n\r\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t\tinitDirectBuffers( geometry );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! object.__webglActive ) {\r\n\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\taddBuffer( scene.__webglObjects, geometry, object );\r\n\r\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\tfor ( g in geometry.geometryGroups ) {\r\n\r\n\t\t\t\t\t\tgeometryGroup = geometry.geometryGroups[ g ];\r\n\r\n\t\t\t\t\t\taddBuffer( scene.__webglObjects, geometryGroup, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Ribbon ||\r\n\t\t\t\t\t\tobject instanceof THREE.Line ||\r\n\t\t\t\t\t\tobject instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\t\t\t\taddBuffer( scene.__webglObjects, geometry, object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {\r\n\r\n\t\t\t\taddBufferImmediate( scene.__webglObjectsImmediate, object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\t\tscene.__webglSprites.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\r\n\t\t\t\tscene.__webglFlares.push( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.__webglActive = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction addBuffer ( objlist, buffer, object ) {\r\n\r\n\t\tobjlist.push(\r\n\t\t\t{\r\n\t\t\t\tbuffer: buffer,\r\n\t\t\t\tobject: object,\r\n\t\t\t\topaque: null,\r\n\t\t\t\ttransparent: null\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tfunction addBufferImmediate ( objlist, object ) {\r\n\r\n\t\tobjlist.push(\r\n\t\t\t{\r\n\t\t\t\tobject: object,\r\n\t\t\t\topaque: null,\r\n\t\t\t\ttransparent: null\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t};\r\n\r\n\t// Objects updates\r\n\r\n\tfunction updateObject ( object ) {\r\n\r\n\t\tvar geometry = object.geometry,\r\n\t\t\tgeometryGroup, customAttributesDirty, material;\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.elementsNeedUpdate ||\r\n\t\t\t\t\t geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||\r\n\t\t\t\t\t geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.tangentsNeedUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// check all geometry groups\r\n\r\n\t\t\t\tfor( var i = 0, il = geometry.geometryGroupsList.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tgeometryGroup = geometry.geometryGroupsList[ i ];\r\n\r\n\t\t\t\t\tmaterial = getBufferMaterial( object, geometryGroup );\r\n\r\n\t\t\t\t\tif ( geometry.buffersNeedUpdate ) {\r\n\r\n\t\t\t\t\t\tinitMeshBuffers( geometryGroup, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n\t\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate ||\r\n\t\t\t\t\t\t geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||\r\n\t\t\t\t\t\t geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty ) {\r\n\r\n\t\t\t\t\t\tsetMeshBuffers( geometryGroup, object, _gl.DYNAMIC_DRAW, !geometry.dynamic, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.morphTargetsNeedUpdate = false;\r\n\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.tangentsNeedUpdate = false;\r\n\r\n\t\t\t\tgeometry.buffersNeedUpdate = false;\r\n\r\n\t\t\t\tmaterial.attributes && clearCustomAttributes( material );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Ribbon ) {\r\n\r\n\t\t\tmaterial = getBufferMaterial( object, geometry );\r\n\r\n\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.normalsNeedUpdate || customAttributesDirty ) {\r\n\r\n\t\t\t\tsetRibbonBuffers( geometry, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t\tmaterial.attributes && clearCustomAttributes( material );\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n      if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n        material = getBufferMaterial( object, geometry );\r\n\r\n        customAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n        if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty ) {\r\n\r\n          setLineBuffers( geometry, _gl.DYNAMIC_DRAW );\r\n\r\n        }\r\n\r\n        geometry.verticesNeedUpdate = false;\r\n        geometry.colorsNeedUpdate = false;\r\n        geometry.lineDistancesNeedUpdate = false;\r\n\r\n        material.attributes && clearCustomAttributes( material );\r\n\r\n      }\r\n\r\n\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterial = getBufferMaterial( object, geometry );\r\n\r\n\t\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty ) {\r\n\r\n\t\t\t\t\tsetParticleBuffers( geometry, _gl.DYNAMIC_DRAW, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t\tmaterial.attributes && clearCustomAttributes( material );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects updates - custom attributes check\r\n\r\n\tfunction areCustomAttributesDirty ( material ) {\r\n\r\n\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\tif ( material.attributes[ a ].needsUpdate ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n\tfunction clearCustomAttributes ( material ) {\r\n\r\n\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\tmaterial.attributes[ a ].needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects removal\r\n\r\n\tfunction removeObject ( object, scene ) {\r\n\r\n\t\tif ( object instanceof THREE.Mesh  ||\r\n\t\t\t object instanceof THREE.ParticleSystem ||\r\n\t\t\t object instanceof THREE.Ribbon ||\r\n\t\t\t object instanceof THREE.Line ) {\r\n\r\n\t\t\tremoveInstances( scene.__webglObjects, object );\r\n\r\n\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\tremoveInstancesDirect( scene.__webglSprites, object );\r\n\r\n\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\r\n\t\t\tremoveInstancesDirect( scene.__webglFlares, object );\r\n\r\n\t\t} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {\r\n\r\n\t\t\tremoveInstances( scene.__webglObjectsImmediate, object );\r\n\r\n\t\t}\r\n\r\n\t\tobject.__webglActive = false;\r\n\r\n\t};\r\n\r\n\tfunction removeInstances ( objlist, object ) {\r\n\r\n\t\tfor ( var o = objlist.length - 1; o >= 0; o -- ) {\r\n\r\n\t\t\tif ( objlist[ o ].object === object ) {\r\n\r\n\t\t\t\tobjlist.splice( o, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction removeInstancesDirect ( objlist, object ) {\r\n\r\n\t\tfor ( var o = objlist.length - 1; o >= 0; o -- ) {\r\n\r\n\t\t\tif ( objlist[ o ] === object ) {\r\n\r\n\t\t\t\tobjlist.splice( o, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Materials\r\n\r\n\tthis.initMaterial = function ( material, lights, fog, object ) {\r\n\r\n\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\tvar u, a, identifiers, i, parameters, maxLightCount, maxBones, maxShadows, shaderID;\r\n\r\n\t\tif ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\tshaderID = 'depth';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\tshaderID = 'normal';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshBasicMaterial ) {\r\n\r\n\t\t\tshaderID = 'basic';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\r\n\r\n\t\t\tshaderID = 'lambert';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\tshaderID = 'phong';\r\n\r\n\t\t} else if ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\tshaderID = 'basic';\r\n\r\n\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\tshaderID = 'dashed';\r\n\r\n\t\t} else if ( material instanceof THREE.ParticleBasicMaterial ) {\r\n\r\n\t\t\tshaderID = 'particle_basic';\r\n\r\n\t\t}\r\n\r\n\t\tif ( shaderID ) {\r\n\r\n\t\t\tsetMaterialShaders( material, THREE.ShaderLib[ shaderID ] );\r\n\r\n\t\t}\r\n\r\n\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t// (not to blow over maxLights budget)\r\n\r\n\t\tmaxLightCount = allocateLights( lights );\r\n\r\n\t\tmaxShadows = allocateShadows( lights );\r\n\r\n\t\tmaxBones = allocateBones( object );\r\n\r\n\t\tparameters = {\r\n\r\n\t\t\tmap: !!material.map,\r\n\t\t\tenvMap: !!material.envMap,\r\n\t\t\tlightMap: !!material.lightMap,\r\n\t\t\tbumpMap: !!material.bumpMap,\r\n\t\t\tnormalMap: !!material.normalMap,\r\n\t\t\tspecularMap: !!material.specularMap,\r\n\r\n\t\t\tvertexColors: material.vertexColors,\r\n\r\n\t\t\tfog: fog,\r\n\t\t\tuseFog: material.fog,\r\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\r\n\r\n\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\r\n\t\t\tskinning: material.skinning,\r\n\t\t\tmaxBones: maxBones,\r\n\t\t\tuseVertexTexture: _supportsBoneTextures && object && object.useVertexTexture,\r\n\t\t\tboneTextureWidth: object && object.boneTextureWidth,\r\n\t\t\tboneTextureHeight: object && object.boneTextureHeight,\r\n\r\n\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\tmaxMorphTargets: this.maxMorphTargets,\r\n\t\t\tmaxMorphNormals: this.maxMorphNormals,\r\n\r\n\t\t\tmaxDirLights: maxLightCount.directional,\r\n\t\t\tmaxPointLights: maxLightCount.point,\r\n\t\t\tmaxSpotLights: maxLightCount.spot,\r\n\t\t\tmaxHemiLights: maxLightCount.hemi,\r\n\r\n\t\t\tmaxShadows: maxShadows,\r\n\t\t\tshadowMapEnabled: this.shadowMapEnabled && object.receiveShadow,\r\n\t\t\tshadowMapType: this.shadowMapType,\r\n\t\t\tshadowMapDebug: this.shadowMapDebug,\r\n\t\t\tshadowMapCascade: this.shadowMapCascade,\r\n\r\n\t\t\talphaTest: material.alphaTest,\r\n\t\t\tmetal: material.metal,\r\n\t\t\tperPixel: material.perPixel,\r\n\t\t\twrapAround: material.wrapAround,\r\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\r\n\t\t\tflipSided: material.side === THREE.BackSide\r\n\r\n\t\t};\r\n\r\n\t\tmaterial.program = buildProgram( shaderID, material.fragmentShader, material.vertexShader, material.uniforms, material.attributes, material.defines, parameters );\r\n\r\n\t\tvar attributes = material.program.attributes;\r\n\r\n\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\tvar id, base = \"morphTarget\";\r\n\r\n\t\t\tfor ( i = 0; i < this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tid = base + i;\r\n\r\n\t\t\t\tif ( attributes[ id ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\tvar id, base = \"morphNormal\";\r\n\r\n\t\t\tfor ( i = 0; i < this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\tid = base + i;\r\n\r\n\t\t\t\tif ( attributes[ id ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tmaterial.uniformsList = [];\r\n\r\n\t\tfor ( u in material.uniforms ) {\r\n\r\n\t\t\tmaterial.uniformsList.push( [ material.uniforms[ u ], u ] );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setMaterialShaders( material, shaders ) {\r\n\r\n\t\tmaterial.uniforms = THREE.UniformsUtils.clone( shaders.uniforms );\r\n\t\tmaterial.vertexShader = shaders.vertexShader;\r\n\t\tmaterial.fragmentShader = shaders.fragmentShader;\r\n\r\n\t};\r\n\r\n\tfunction setProgram( camera, lights, fog, material, object ) {\r\n\r\n\t\t_usedTextureUnits = 0;\r\n\r\n\t\tif ( material.needsUpdate ) {\r\n\r\n\t\t\tif ( material.program ) deallocateMaterial( material );\r\n\r\n\t\t\t_this.initMaterial( material, lights, fog, object );\r\n\t\t\tmaterial.needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\tif ( ! object.__webglMorphTargetInfluences ) {\r\n\r\n\t\t\t\tobject.__webglMorphTargetInfluences = new Float32Array( _this.maxMorphTargets );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar refreshMaterial = false;\r\n\r\n\t\tvar program = material.program,\r\n\t\t\tp_uniforms = program.uniforms,\r\n\t\t\tm_uniforms = material.uniforms;\r\n\r\n\t\tif ( program !== _currentProgram ) {\r\n\r\n\t\t\t_gl.useProgram( program );\r\n\t\t\t_currentProgram = program;\r\n\r\n\t\t\trefreshMaterial = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t_currentMaterialId = material.id;\r\n\t\t\trefreshMaterial = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshMaterial || camera !== _currentCamera ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\t\tif ( camera !== _currentCamera ) _currentCamera = camera;\r\n\r\n\t\t}\r\n\r\n\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\tif ( material.skinning ) {\r\n\r\n\t\t\tif ( _supportsBoneTextures && object.useVertexTexture ) {\r\n\r\n\t\t\t\tif ( p_uniforms.boneTexture !== null ) {\r\n\r\n\t\t\t\t\tvar textureUnit = getTextureUnit();\r\n\r\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTexture, textureUnit );\r\n\t\t\t\t\t_this.setTexture( object.boneTexture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( p_uniforms.boneGlobalMatrices !== null ) {\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.boneMatrices );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material.lights ) {\r\n\r\n\t\t\t\tif ( _lightsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetupLights( program, lights );\r\n\t\t\t\t\t_lightsNeedUpdate = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\trefreshUniformsLights( m_uniforms, _lights );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// refresh single material specific uniforms\r\n\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.ParticleBasicMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsParticle( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.mNear.value = camera.near;\r\n\t\t\t\tm_uniforms.mFar.value = camera.far;\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.receiveShadow && ! material._shadowPass ) {\r\n\r\n\t\t\t\trefreshUniformsShadow( m_uniforms, lights );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// load common uniforms\r\n\r\n\t\t\tloadUniformsGeneric( program, material.uniformsList );\r\n\r\n\t\t\t// load material specific uniforms\r\n\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material.envMap ) {\r\n\r\n\t\t\t\tif ( p_uniforms.cameraPosition !== null ) {\r\n\r\n\t\t\t\t\tvar position = camera.matrixWorld.getPosition();\r\n\t\t\t\t\t_gl.uniform3f( p_uniforms.cameraPosition, position.x, position.y, position.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material.skinning ) {\r\n\r\n\t\t\t\tif ( p_uniforms.viewMatrix !== null ) {\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tloadUniformsMatrices( p_uniforms, object );\r\n\r\n\t\tif ( p_uniforms.modelMatrix !== null ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\t// Uniforms (refresh uniforms objects)\r\n\r\n\tfunction refreshUniformsCommon ( uniforms, material ) {\r\n\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copyGammaToLinear( material.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\tuniforms.specularMap.value = material.specularMap;\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities\r\n\t\t//\t1. color map\r\n\t\t//\t2. specular map\r\n\t\t//\t3. normal map\r\n\t\t//\t4. bump map\r\n\r\n\t\tvar uvScaleMap;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\tvar offset = uvScaleMap.offset;\r\n\t\t\tvar repeat = uvScaleMap.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.envMap.value = material.envMap;\r\n\t\tuniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : -1;\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t//uniforms.reflectivity.value = material.reflectivity * material.reflectivity;\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\t\tuniforms.combine.value = material.combine;\r\n\t\tuniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsLine ( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsDash ( uniforms, material ) {\r\n\r\n\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\tuniforms.scale.value = material.scale;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsParticle ( uniforms, material ) {\r\n\r\n\t\tuniforms.psColor.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.size.value = material.size;\r\n\t\tuniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsFog ( uniforms, fog ) {\r\n\r\n\t\tuniforms.fogColor.value = fog.color;\r\n\r\n\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsPhong ( uniforms, material ) {\r\n\r\n\t\tuniforms.shininess.value = material.shininess;\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\tuniforms.ambient.value.copyGammaToLinear( material.ambient );\r\n\t\t\tuniforms.emissive.value.copyGammaToLinear( material.emissive );\r\n\t\t\tuniforms.specular.value.copyGammaToLinear( material.specular );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.ambient.value = material.ambient;\r\n\t\t\tuniforms.emissive.value = material.emissive;\r\n\t\t\tuniforms.specular.value = material.specular;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.wrapAround ) {\r\n\r\n\t\t\tuniforms.wrapRGB.value.copy( material.wrapRGB );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsLambert ( uniforms, material ) {\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\tuniforms.ambient.value.copyGammaToLinear( material.ambient );\r\n\t\t\tuniforms.emissive.value.copyGammaToLinear( material.emissive );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.ambient.value = material.ambient;\r\n\t\t\tuniforms.emissive.value = material.emissive;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.wrapAround ) {\r\n\r\n\t\t\tuniforms.wrapRGB.value.copy( material.wrapRGB );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsLights ( uniforms, lights ) {\r\n\r\n\t\tuniforms.ambientLightColor.value = lights.ambient;\r\n\r\n\t\tuniforms.directionalLightColor.value = lights.directional.colors;\r\n\t\tuniforms.directionalLightDirection.value = lights.directional.positions;\r\n\r\n\t\tuniforms.pointLightColor.value = lights.point.colors;\r\n\t\tuniforms.pointLightPosition.value = lights.point.positions;\r\n\t\tuniforms.pointLightDistance.value = lights.point.distances;\r\n\r\n\t\tuniforms.spotLightColor.value = lights.spot.colors;\r\n\t\tuniforms.spotLightPosition.value = lights.spot.positions;\r\n\t\tuniforms.spotLightDistance.value = lights.spot.distances;\r\n\t\tuniforms.spotLightDirection.value = lights.spot.directions;\r\n\t\tuniforms.spotLightAngleCos.value = lights.spot.anglesCos;\r\n\t\tuniforms.spotLightExponent.value = lights.spot.exponents;\r\n\r\n\t\tuniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;\r\n\t\tuniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;\r\n\t\tuniforms.hemisphereLightDirection.value = lights.hemi.positions;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsShadow ( uniforms, lights ) {\r\n\r\n\t\tif ( uniforms.shadowMatrix ) {\r\n\r\n\t\t\tvar j = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\r\n\t\t\t\tif ( ! light.castShadow ) continue;\r\n\r\n\t\t\t\tif ( light instanceof THREE.SpotLight || ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) ) {\r\n\r\n\t\t\t\t\tuniforms.shadowMap.value[ j ] = light.shadowMap;\r\n\t\t\t\t\tuniforms.shadowMapSize.value[ j ] = light.shadowMapSize;\r\n\r\n\t\t\t\t\tuniforms.shadowMatrix.value[ j ] = light.shadowMatrix;\r\n\r\n\t\t\t\t\tuniforms.shadowDarkness.value[ j ] = light.shadowDarkness;\r\n\t\t\t\t\tuniforms.shadowBias.value[ j ] = light.shadowBias;\r\n\r\n\t\t\t\t\tj ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Uniforms (load to GPU)\r\n\r\n\tfunction loadUniformsMatrices ( uniforms, object ) {\r\n\r\n\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object._modelViewMatrix.elements );\r\n\r\n\t\tif ( uniforms.normalMatrix ) {\r\n\r\n\t\t\t_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object._normalMatrix.elements );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction getTextureUnit() {\r\n\r\n\t\tvar textureUnit = _usedTextureUnits;\r\n\r\n\t\tif ( textureUnit >= _maxTextures ) {\r\n\r\n\t\t\tconsole.warn( \"WebGLRenderer: trying to use \" + textureUnit + \" texture units while this GPU supports only \" + _maxTextures );\r\n\r\n\t\t}\r\n\r\n\t\t_usedTextureUnits += 1;\r\n\r\n\t\treturn textureUnit;\r\n\r\n\t};\r\n\r\n\tfunction loadUniformsGeneric ( program, uniforms ) {\r\n\r\n\t\tvar uniform, value, type, location, texture, textureUnit, i, il, j, jl, offset;\r\n\r\n\t\tfor ( j = 0, jl = uniforms.length; j < jl; j ++ ) {\r\n\r\n\t\t\tlocation = program.uniforms[ uniforms[ j ][ 1 ] ];\r\n\t\t\tif ( !location ) continue;\r\n\r\n\t\t\tuniform = uniforms[ j ][ 0 ];\r\n\r\n\t\t\ttype = uniform.type;\r\n\t\t\tvalue = uniform.value;\r\n\r\n\t\t\tif ( type === \"i\" ) { // single integer\r\n\r\n\t\t\t\t_gl.uniform1i( location, value );\r\n\r\n\t\t\t} else if ( type === \"f\" ) { // single float\r\n\r\n\t\t\t\t_gl.uniform1f( location, value );\r\n\r\n\t\t\t} else if ( type === \"v2\" ) { // single THREE.Vector2\r\n\r\n\t\t\t\t_gl.uniform2f( location, value.x, value.y );\r\n\r\n\t\t\t} else if ( type === \"v3\" ) { // single THREE.Vector3\r\n\r\n\t\t\t\t_gl.uniform3f( location, value.x, value.y, value.z );\r\n\r\n\t\t\t} else if ( type === \"v4\" ) { // single THREE.Vector4\r\n\r\n\t\t\t\t_gl.uniform4f( location, value.x, value.y, value.z, value.w );\r\n\r\n\t\t\t} else if ( type === \"c\" ) { // single THREE.Color\r\n\r\n\t\t\t\t_gl.uniform3f( location, value.r, value.g, value.b );\r\n\r\n\t\t\t} else if ( type === \"iv1\" ) { // flat array of integers (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform1iv( location, value );\r\n\r\n\t\t\t} else if ( type === \"iv\" ) { // flat array of integers with 3 x N size (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform3iv( location, value );\r\n\r\n\t\t\t} else if ( type === \"fv1\" ) { // flat array of floats (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform1fv( location, value );\r\n\r\n\t\t\t} else if ( type === \"fv\" ) { // flat array of floats with 3 x N size (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform3fv( location, value );\r\n\r\n\t\t\t} else if ( type === \"v2v\" ) { // array of THREE.Vector2\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 2 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\toffset = i * 2;\r\n\r\n\t\t\t\t\tuniform._array[ offset ] \t = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform2fv( location, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"v3v\" ) { // array of THREE.Vector3\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 3 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\toffset = i * 3;\r\n\r\n\t\t\t\t\tuniform._array[ offset ] \t = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\r\n\t\t\t\t\tuniform._array[ offset + 2 ] = value[ i ].z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform3fv( location, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"v4v\" ) { // array of THREE.Vector4\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 4 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\toffset = i * 4;\r\n\r\n\t\t\t\t\tuniform._array[ offset ] \t = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\r\n\t\t\t\t\tuniform._array[ offset + 2 ] = value[ i ].z;\r\n\t\t\t\t\tuniform._array[ offset + 3 ] = value[ i ].w;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform4fv( location, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"m4\") { // single THREE.Matrix4\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 16 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvalue.flattenToArray( uniform._array );\r\n\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"m4v\" ) { // array of THREE.Matrix4\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 16 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 16 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"t\" ) { // single THREE.Texture (2d or cube)\r\n\r\n\t\t\t\ttexture = value;\r\n\t\t\t\ttextureUnit = getTextureUnit();\r\n\r\n\t\t\t\t_gl.uniform1i( location, textureUnit );\r\n\r\n\t\t\t\tif ( !texture ) continue;\r\n\r\n\t\t\t\tif ( texture.image instanceof Array && texture.image.length === 6 ) {\r\n\r\n\t\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\r\n\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\tsetCubeTextureDynamic( texture, textureUnit );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( type === \"tv\" ) { // array of THREE.Texture (2d)\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor( i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tuniform._array[ i ] = getTextureUnit();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform1iv( location, uniform._array );\r\n\r\n\t\t\t\tfor( i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\ttexture = uniform.value[ i ];\r\n\t\t\t\t\ttextureUnit = uniform._array[ i ];\r\n\r\n\t\t\t\t\tif ( !texture ) continue;\r\n\r\n\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setupMatrices ( object, camera ) {\r\n\r\n\t\tobject._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\tobject._normalMatrix.getInverse( object._modelViewMatrix );\r\n\t\tobject._normalMatrix.transpose();\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction setColorGamma( array, offset, color, intensitySq ) {\r\n\r\n\t\tarray[ offset ]     = color.r * color.r * intensitySq;\r\n\t\tarray[ offset + 1 ] = color.g * color.g * intensitySq;\r\n\t\tarray[ offset + 2 ] = color.b * color.b * intensitySq;\r\n\r\n\t};\r\n\r\n\tfunction setColorLinear( array, offset, color, intensity ) {\r\n\r\n\t\tarray[ offset ]     = color.r * intensity;\r\n\t\tarray[ offset + 1 ] = color.g * intensity;\r\n\t\tarray[ offset + 2 ] = color.b * intensity;\r\n\r\n\t};\r\n\r\n\tfunction setupLights ( program, lights ) {\r\n\r\n\t\tvar l, ll, light, n,\r\n\t\tr = 0, g = 0, b = 0,\r\n\t\tcolor, skyColor, groundColor,\r\n\t\tintensity,  intensitySq,\r\n\t\tposition,\r\n\t\tdistance,\r\n\r\n\t\tzlights = _lights,\r\n\r\n\t\tdirColors = zlights.directional.colors,\r\n\t\tdirPositions = zlights.directional.positions,\r\n\r\n\t\tpointColors = zlights.point.colors,\r\n\t\tpointPositions = zlights.point.positions,\r\n\t\tpointDistances = zlights.point.distances,\r\n\r\n\t\tspotColors = zlights.spot.colors,\r\n\t\tspotPositions = zlights.spot.positions,\r\n\t\tspotDistances = zlights.spot.distances,\r\n\t\tspotDirections = zlights.spot.directions,\r\n\t\tspotAnglesCos = zlights.spot.anglesCos,\r\n\t\tspotExponents = zlights.spot.exponents,\r\n\r\n\t\themiSkyColors = zlights.hemi.skyColors,\r\n\t\themiGroundColors = zlights.hemi.groundColors,\r\n\t\themiPositions = zlights.hemi.positions,\r\n\r\n\t\tdirLength = 0,\r\n\t\tpointLength = 0,\r\n\t\tspotLength = 0,\r\n\t\themiLength = 0,\r\n\r\n\t\tdirCount = 0,\r\n\t\tpointCount = 0,\r\n\t\tspotCount = 0,\r\n\t\themiCount = 0,\r\n\r\n\t\tdirOffset = 0,\r\n\t\tpointOffset = 0,\r\n\t\tspotOffset = 0,\r\n\t\themiOffset = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tif ( light.onlyShadow ) continue;\r\n\r\n\t\t\tcolor = light.color;\r\n\t\t\tintensity = light.intensity;\r\n\t\t\tdistance = light.distance;\r\n\r\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tr += color.r * color.r;\r\n\t\t\t\t\tg += color.g * color.g;\r\n\t\t\t\t\tb += color.b * color.b;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tr += color.r;\r\n\t\t\t\t\tg += color.g;\r\n\t\t\t\t\tb += color.b;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\tdirCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\t_direction.copy( light.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.sub( light.target.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.normalize();\r\n\r\n\t\t\t\t// skip lights with undefined direction\r\n\t\t\t\t// these create troubles in OpenGL (making pixel black)\r\n\r\n\t\t\t\tif ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;\r\n\r\n\t\t\t\tdirOffset = dirLength * 3;\r\n\r\n\t\t\t\tdirPositions[ dirOffset ]     = _direction.x;\r\n\t\t\t\tdirPositions[ dirOffset + 1 ] = _direction.y;\r\n\t\t\t\tdirPositions[ dirOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tsetColorGamma( dirColors, dirOffset, color, intensity * intensity );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( dirColors, dirOffset, color, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdirLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tpointCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tpointOffset = pointLength * 3;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tsetColorGamma( pointColors, pointOffset, color, intensity * intensity );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( pointColors, pointOffset, color, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tposition = light.matrixWorld.getPosition();\r\n\r\n\t\t\t\tpointPositions[ pointOffset ]     = position.x;\r\n\t\t\t\tpointPositions[ pointOffset + 1 ] = position.y;\r\n\t\t\t\tpointPositions[ pointOffset + 2 ] = position.z;\r\n\r\n\t\t\t\tpointDistances[ pointLength ] = distance;\r\n\r\n\t\t\t\tpointLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\tspotCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tspotOffset = spotLength * 3;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tsetColorGamma( spotColors, spotOffset, color, intensity * intensity );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( spotColors, spotOffset, color, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tposition = light.matrixWorld.getPosition();\r\n\r\n\t\t\t\tspotPositions[ spotOffset ]     = position.x;\r\n\t\t\t\tspotPositions[ spotOffset + 1 ] = position.y;\r\n\t\t\t\tspotPositions[ spotOffset + 2 ] = position.z;\r\n\r\n\t\t\t\tspotDistances[ spotLength ] = distance;\r\n\r\n\t\t\t\t_direction.copy( position );\r\n\t\t\t\t_direction.sub( light.target.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.normalize();\r\n\r\n\t\t\t\tspotDirections[ spotOffset ]     = _direction.x;\r\n\t\t\t\tspotDirections[ spotOffset + 1 ] = _direction.y;\r\n\t\t\t\tspotDirections[ spotOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tspotAnglesCos[ spotLength ] = Math.cos( light.angle );\r\n\t\t\t\tspotExponents[ spotLength ] = light.exponent;\r\n\r\n\t\t\t\tspotLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\r\n\r\n\t\t\t\themiCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\t_direction.copy( light.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.normalize();\r\n\r\n\t\t\t\t// skip lights with undefined direction\r\n\t\t\t\t// these create troubles in OpenGL (making pixel black)\r\n\r\n\t\t\t\tif ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;\r\n\r\n\t\t\t\themiOffset = hemiLength * 3;\r\n\r\n\t\t\t\themiPositions[ hemiOffset ]     = _direction.x;\r\n\t\t\t\themiPositions[ hemiOffset + 1 ] = _direction.y;\r\n\t\t\t\themiPositions[ hemiOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tskyColor = light.color;\r\n\t\t\t\tgroundColor = light.groundColor;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tintensitySq = intensity * intensity;\r\n\r\n\t\t\t\t\tsetColorGamma( hemiSkyColors, hemiOffset, skyColor, intensitySq );\r\n\t\t\t\t\tsetColorGamma( hemiGroundColors, hemiOffset, groundColor, intensitySq );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );\r\n\t\t\t\t\tsetColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\themiLength += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// null eventual remains from removed lights\r\n\t\t// (this is to avoid if in shader)\r\n\r\n\t\tfor ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;\r\n\t\tfor ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;\r\n\t\tfor ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;\r\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;\r\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;\r\n\r\n\t\tzlights.directional.length = dirLength;\r\n\t\tzlights.point.length = pointLength;\r\n\t\tzlights.spot.length = spotLength;\r\n\t\tzlights.hemi.length = hemiLength;\r\n\r\n\t\tzlights.ambient[ 0 ] = r;\r\n\t\tzlights.ambient[ 1 ] = g;\r\n\t\tzlights.ambient[ 2 ] = b;\r\n\r\n\t};\r\n\r\n\t// GL state setting\r\n\r\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\r\n\r\n\t\tif ( cullFace === THREE.CullFaceNone ) {\r\n\r\n\t\t\t_gl.disable( _gl.CULL_FACE );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( cullFace === THREE.CullFaceBack ) {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.FRONT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.FRONT_AND_BACK );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setMaterialFaces = function ( material ) {\r\n\r\n\t\tvar doubleSided = material.side === THREE.DoubleSide;\r\n\t\tvar flipSided = material.side === THREE.BackSide;\r\n\r\n\t\tif ( _oldDoubleSided !== doubleSided ) {\r\n\r\n\t\t\tif ( doubleSided ) {\r\n\r\n\t\t\t\t_gl.disable( _gl.CULL_FACE );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldDoubleSided = doubleSided;\r\n\r\n\t\t}\r\n\r\n\t\tif ( _oldFlipSided !== flipSided ) {\r\n\r\n\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldFlipSided = flipSided;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthTest = function ( depthTest ) {\r\n\r\n\t\tif ( _oldDepthTest !== depthTest ) {\r\n\r\n\t\t\tif ( depthTest ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.disable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldDepthTest = depthTest;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthWrite = function ( depthWrite ) {\r\n\r\n\t\tif ( _oldDepthWrite !== depthWrite ) {\r\n\r\n\t\t\t_gl.depthMask( depthWrite );\r\n\t\t\t_oldDepthWrite = depthWrite;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setLineWidth ( width ) {\r\n\r\n\t\tif ( width !== _oldLineWidth ) {\r\n\r\n\t\t\t_gl.lineWidth( width );\r\n\r\n\t\t\t_oldLineWidth = width;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setPolygonOffset ( polygonoffset, factor, units ) {\r\n\r\n\t\tif ( _oldPolygonOffset !== polygonoffset ) {\r\n\r\n\t\t\tif ( polygonoffset ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.disable( _gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldPolygonOffset = polygonoffset;\r\n\r\n\t\t}\r\n\r\n\t\tif ( polygonoffset && ( _oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units ) ) {\r\n\r\n\t\t\t_gl.polygonOffset( factor, units );\r\n\r\n\t\t\t_oldPolygonOffsetFactor = factor;\r\n\t\t\t_oldPolygonOffsetUnits = units;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst ) {\r\n\r\n\t\tif ( blending !== _oldBlending ) {\r\n\r\n\t\t\tif ( blending === THREE.NoBlending ) {\r\n\r\n\t\t\t\t_gl.disable( _gl.BLEND );\r\n\r\n\t\t\t} else if ( blending === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE );\r\n\r\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFunc( _gl.ZERO, _gl.ONE_MINUS_SRC_COLOR );\r\n\r\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\r\n\r\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFunc( _gl.ZERO, _gl.SRC_COLOR );\r\n\r\n\t\t\t} else if ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquationSeparate( _gl.FUNC_ADD, _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFuncSeparate( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldBlending = blending;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\tif ( blendEquation !== _oldBlendEquation ) {\r\n\r\n\t\t\t\t_gl.blendEquation( paramThreeToGL( blendEquation ) );\r\n\r\n\t\t\t\t_oldBlendEquation = blendEquation;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst ) {\r\n\r\n\t\t\t\t_gl.blendFunc( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ) );\r\n\r\n\t\t\t\t_oldBlendSrc = blendSrc;\r\n\t\t\t\t_oldBlendDst = blendDst;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_oldBlendEquation = null;\r\n\t\t\t_oldBlendSrc = null;\r\n\t\t\t_oldBlendDst = null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Defines\r\n\r\n\tfunction generateDefines ( defines ) {\r\n\r\n\t\tvar value, chunk, chunks = [];\r\n\r\n\t\tfor ( var d in defines ) {\r\n\r\n\t\t\tvalue = defines[ d ];\r\n\t\t\tif ( value === false ) continue;\r\n\r\n\t\t\tchunk = \"#define \" + d + \" \" + value;\r\n\t\t\tchunks.push( chunk );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( \"\\n\" );\r\n\r\n\t};\r\n\r\n\t// Shaders\r\n\r\n\tfunction buildProgram ( shaderID, fragmentShader, vertexShader, uniforms, attributes, defines, parameters ) {\r\n\r\n\t\tvar p, pl, d, program, code;\r\n\t\tvar chunks = [];\r\n\r\n\t\t// Generate code\r\n\r\n\t\tif ( shaderID ) {\r\n\r\n\t\t\tchunks.push( shaderID );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tchunks.push( fragmentShader );\r\n\t\t\tchunks.push( vertexShader );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( d in defines ) {\r\n\r\n\t\t\tchunks.push( d );\r\n\t\t\tchunks.push( defines[ d ] );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( p in parameters ) {\r\n\r\n\t\t\tchunks.push( p );\r\n\t\t\tchunks.push( parameters[ p ] );\r\n\r\n\t\t}\r\n\r\n\t\tcode = chunks.join();\r\n\r\n\t\t// Check if code has been already compiled\r\n\r\n\t\tfor ( p = 0, pl = _programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\tvar programInfo = _programs[ p ];\r\n\r\n\t\t\tif ( programInfo.code === code ) {\r\n\r\n\t\t\t\t//console.log( \"Code already compiled.\" /*: \\n\\n\" + code*/ );\r\n\r\n\t\t\t\tprogramInfo.usedTimes ++;\r\n\r\n\t\t\t\treturn programInfo.program;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar shadowMapTypeDefine = \"SHADOWMAP_TYPE_BASIC\";\r\n\r\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF\";\r\n\r\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF_SOFT\";\r\n\r\n\t\t}\r\n\r\n\t\t//console.log( \"building new program \" );\r\n\r\n\t\t//\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\t//\r\n\r\n\t\tprogram = _gl.createProgram();\r\n\r\n\t\tvar prefix_vertex = [\r\n\r\n\t\t\t\"precision \" + _precision + \" float;\",\r\n\r\n\t\t\tcustomDefines,\r\n\r\n\t\t\t_supportsVertexTextures ? \"#define VERTEX_TEXTURES\" : \"\",\r\n\r\n\t\t\t_this.gammaInput ? \"#define GAMMA_INPUT\" : \"\",\r\n\t\t\t_this.gammaOutput ? \"#define GAMMA_OUTPUT\" : \"\",\r\n\t\t\t_this.physicallyBasedShading ? \"#define PHYSICALLY_BASED_SHADING\" : \"\",\r\n\r\n\t\t\t\"#define MAX_DIR_LIGHTS \" + parameters.maxDirLights,\r\n\t\t\t\"#define MAX_POINT_LIGHTS \" + parameters.maxPointLights,\r\n\t\t\t\"#define MAX_SPOT_LIGHTS \" + parameters.maxSpotLights,\r\n\t\t\t\"#define MAX_HEMI_LIGHTS \" + parameters.maxHemiLights,\r\n\r\n\t\t\t\"#define MAX_SHADOWS \" + parameters.maxShadows,\r\n\r\n\t\t\t\"#define MAX_BONES \" + parameters.maxBones,\r\n\r\n\t\t\tparameters.map ? \"#define USE_MAP\" : \"\",\r\n\t\t\tparameters.envMap ? \"#define USE_ENVMAP\" : \"\",\r\n\t\t\tparameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\r\n\t\t\tparameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\r\n\t\t\tparameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\r\n\t\t\tparameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\r\n\t\t\tparameters.vertexColors ? \"#define USE_COLOR\" : \"\",\r\n\r\n\t\t\tparameters.skinning ? \"#define USE_SKINNING\" : \"\",\r\n\t\t\tparameters.useVertexTexture ? \"#define BONE_TEXTURE\" : \"\",\r\n\t\t\tparameters.boneTextureWidth ? \"#define N_BONE_PIXEL_X \" + parameters.boneTextureWidth.toFixed( 1 ) : \"\",\r\n\t\t\tparameters.boneTextureHeight ? \"#define N_BONE_PIXEL_Y \" + parameters.boneTextureHeight.toFixed( 1 ) : \"\",\r\n\r\n\t\t\tparameters.morphTargets ? \"#define USE_MORPHTARGETS\" : \"\",\r\n\t\t\tparameters.morphNormals ? \"#define USE_MORPHNORMALS\" : \"\",\r\n\t\t\tparameters.perPixel ? \"#define PHONG_PER_PIXEL\" : \"\",\r\n\t\t\tparameters.wrapAround ? \"#define WRAP_AROUND\" : \"\",\r\n\t\t\tparameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\r\n\t\t\tparameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\r\n\r\n\t\t\tparameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\r\n\t\t\tparameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\r\n\t\t\tparameters.shadowMapDebug ? \"#define SHADOWMAP_DEBUG\" : \"\",\r\n\t\t\tparameters.shadowMapCascade ? \"#define SHADOWMAP_CASCADE\" : \"\",\r\n\r\n\t\t\tparameters.sizeAttenuation ? \"#define USE_SIZEATTENUATION\" : \"\",\r\n\r\n\t\t\t\"uniform mat4 modelMatrix;\",\r\n\t\t\t\"uniform mat4 modelViewMatrix;\",\r\n\t\t\t\"uniform mat4 projectionMatrix;\",\r\n\t\t\t\"uniform mat4 viewMatrix;\",\r\n\t\t\t\"uniform mat3 normalMatrix;\",\r\n\t\t\t\"uniform vec3 cameraPosition;\",\r\n\r\n\t\t\t\"attribute vec3 position;\",\r\n\t\t\t\"attribute vec3 normal;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\t\t\t\"attribute vec2 uv2;\",\r\n\r\n\t\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\t\"attribute vec3 color;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\t\"attribute vec3 morphTarget0;\",\r\n\t\t\t\t\"attribute vec3 morphTarget1;\",\r\n\t\t\t\t\"attribute vec3 morphTarget2;\",\r\n\t\t\t\t\"attribute vec3 morphTarget3;\",\r\n\r\n\t\t\t\t\"#ifdef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\t\t\"attribute vec3 morphNormal0;\",\r\n\t\t\t\t\t\"attribute vec3 morphNormal1;\",\r\n\t\t\t\t\t\"attribute vec3 morphNormal2;\",\r\n\t\t\t\t\t\"attribute vec3 morphNormal3;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"attribute vec3 morphTarget4;\",\r\n\t\t\t\t\t\"attribute vec3 morphTarget5;\",\r\n\t\t\t\t\t\"attribute vec3 morphTarget6;\",\r\n\t\t\t\t\t\"attribute vec3 morphTarget7;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\"attribute vec4 skinIndex;\",\r\n\t\t\t\t\"attribute vec4 skinWeight;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"\"\r\n\r\n\t\t].join(\"\\n\");\r\n\r\n\t\tvar prefix_fragment = [\r\n\r\n\t\t\t\"precision \" + _precision + \" float;\",\r\n\r\n\t\t\t( parameters.bumpMap || parameters.normalMap ) ? \"#extension GL_OES_standard_derivatives : enable\" : \"\",\r\n\r\n\t\t\tcustomDefines,\r\n\r\n\t\t\t\"#define MAX_DIR_LIGHTS \" + parameters.maxDirLights,\r\n\t\t\t\"#define MAX_POINT_LIGHTS \" + parameters.maxPointLights,\r\n\t\t\t\"#define MAX_SPOT_LIGHTS \" + parameters.maxSpotLights,\r\n\t\t\t\"#define MAX_HEMI_LIGHTS \" + parameters.maxHemiLights,\r\n\r\n\t\t\t\"#define MAX_SHADOWS \" + parameters.maxShadows,\r\n\r\n\t\t\tparameters.alphaTest ? \"#define ALPHATEST \" + parameters.alphaTest: \"\",\r\n\r\n\t\t\t_this.gammaInput ? \"#define GAMMA_INPUT\" : \"\",\r\n\t\t\t_this.gammaOutput ? \"#define GAMMA_OUTPUT\" : \"\",\r\n\t\t\t_this.physicallyBasedShading ? \"#define PHYSICALLY_BASED_SHADING\" : \"\",\r\n\r\n\t\t\t( parameters.useFog && parameters.fog ) ? \"#define USE_FOG\" : \"\",\r\n\t\t\t( parameters.useFog && parameters.fogExp ) ? \"#define FOG_EXP2\" : \"\",\r\n\r\n\t\t\tparameters.map ? \"#define USE_MAP\" : \"\",\r\n\t\t\tparameters.envMap ? \"#define USE_ENVMAP\" : \"\",\r\n\t\t\tparameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\r\n\t\t\tparameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\r\n\t\t\tparameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\r\n\t\t\tparameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\r\n\t\t\tparameters.vertexColors ? \"#define USE_COLOR\" : \"\",\r\n\r\n\t\t\tparameters.metal ? \"#define METAL\" : \"\",\r\n\t\t\tparameters.perPixel ? \"#define PHONG_PER_PIXEL\" : \"\",\r\n\t\t\tparameters.wrapAround ? \"#define WRAP_AROUND\" : \"\",\r\n\t\t\tparameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\r\n\t\t\tparameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\r\n\r\n\t\t\tparameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\r\n\t\t\tparameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\r\n\t\t\tparameters.shadowMapDebug ? \"#define SHADOWMAP_DEBUG\" : \"\",\r\n\t\t\tparameters.shadowMapCascade ? \"#define SHADOWMAP_CASCADE\" : \"\",\r\n\r\n\t\t\t\"uniform mat4 viewMatrix;\",\r\n\t\t\t\"uniform vec3 cameraPosition;\",\r\n\t\t\t\"\"\r\n\r\n\t\t].join(\"\\n\");\r\n\r\n\t\tvar glFragmentShader = getShader( \"fragment\", prefix_fragment + fragmentShader );\r\n\t\tvar glVertexShader = getShader( \"vertex\", prefix_vertex + vertexShader );\r\n\r\n\t\t_gl.attachShader( program, glVertexShader );\r\n\t\t_gl.attachShader( program, glFragmentShader );\r\n\r\n\t\t_gl.linkProgram( program );\r\n\r\n\t\tif ( !_gl.getProgramParameter( program, _gl.LINK_STATUS ) ) {\r\n\r\n\t\t\tconsole.error( \"Could not initialise shader\\n\" + \"VALIDATE_STATUS: \" + _gl.getProgramParameter( program, _gl.VALIDATE_STATUS ) + \", gl error [\" + _gl.getError() + \"]\" );\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\t_gl.deleteShader( glFragmentShader );\r\n\t\t_gl.deleteShader( glVertexShader );\r\n\r\n\t\t//console.log( prefix_fragment + fragmentShader );\r\n\t\t//console.log( prefix_vertex + vertexShader );\r\n\r\n\t\tprogram.uniforms = {};\r\n\t\tprogram.attributes = {};\r\n\r\n\t\tvar identifiers, u, a, i;\r\n\r\n\t\t// cache uniform locations\r\n\r\n\t\tidentifiers = [\r\n\r\n\t\t\t'viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition',\r\n\t\t\t'morphTargetInfluences'\r\n\r\n\t\t];\r\n\r\n\t\tif ( parameters.useVertexTexture ) {\r\n\r\n\t\t\tidentifiers.push( 'boneTexture' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tidentifiers.push( 'boneGlobalMatrices' );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( u in uniforms ) {\r\n\r\n\t\t\tidentifiers.push( u );\r\n\r\n\t\t}\r\n\r\n\t\tcacheUniformLocations( program, identifiers );\r\n\r\n\t\t// cache attributes locations\r\n\r\n\t\tidentifiers = [\r\n\r\n\t\t\t\"position\", \"normal\", \"uv\", \"uv2\", \"tangent\", \"color\",\r\n\t\t\t\"skinIndex\", \"skinWeight\", \"lineDistance\"\r\n\r\n\t\t];\r\n\r\n\t\tfor ( i = 0; i < parameters.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\tidentifiers.push( \"morphTarget\" + i );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0; i < parameters.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\tidentifiers.push( \"morphNormal\" + i );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( a in attributes ) {\r\n\r\n\t\t\tidentifiers.push( a );\r\n\r\n\t\t}\r\n\r\n\t\tcacheAttributeLocations( program, identifiers );\r\n\r\n\t\tprogram.id = _programs_counter ++;\r\n\r\n\t\t_programs.push( { program: program, code: code, usedTimes: 1 } );\r\n\r\n\t\t_this.info.memory.programs = _programs.length;\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\t// Shader parameters cache\r\n\r\n\tfunction cacheUniformLocations ( program, identifiers ) {\r\n\r\n\t\tvar i, l, id;\r\n\r\n\t\tfor( i = 0, l = identifiers.length; i < l; i ++ ) {\r\n\r\n\t\t\tid = identifiers[ i ];\r\n\t\t\tprogram.uniforms[ id ] = _gl.getUniformLocation( program, id );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction cacheAttributeLocations ( program, identifiers ) {\r\n\r\n\t\tvar i, l, id;\r\n\r\n\t\tfor( i = 0, l = identifiers.length; i < l; i ++ ) {\r\n\r\n\t\t\tid = identifiers[ i ];\r\n\t\t\tprogram.attributes[ id ] = _gl.getAttribLocation( program, id );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction addLineNumbers ( string ) {\r\n\r\n\t\tvar chunks = string.split( \"\\n\" );\r\n\r\n\t\tfor ( var i = 0, il = chunks.length; i < il; i ++ ) {\r\n\r\n\t\t\t// Chrome reports shader errors on lines\r\n\t\t\t// starting counting from 1\r\n\r\n\t\t\tchunks[ i ] = ( i + 1 ) + \": \" + chunks[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( \"\\n\" );\r\n\r\n\t};\r\n\r\n\tfunction getShader ( type, string ) {\r\n\r\n\t\tvar shader;\r\n\r\n\t\tif ( type === \"fragment\" ) {\r\n\r\n\t\t\tshader = _gl.createShader( _gl.FRAGMENT_SHADER );\r\n\r\n\t\t} else if ( type === \"vertex\" ) {\r\n\r\n\t\t\tshader = _gl.createShader( _gl.VERTEX_SHADER );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.shaderSource( shader, string );\r\n\t\t_gl.compileShader( shader );\r\n\r\n\t\tif ( !_gl.getShaderParameter( shader, _gl.COMPILE_STATUS ) ) {\r\n\r\n\t\t\tconsole.error( _gl.getShaderInfoLog( shader ) );\r\n\t\t\tconsole.error( addLineNumbers( string ) );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn shader;\r\n\r\n\t};\r\n\r\n\t// Textures\r\n\r\n\r\n\tfunction isPowerOfTwo ( value ) {\r\n\r\n\t\treturn ( value & ( value - 1 ) ) === 0;\r\n\r\n\t};\r\n\r\n\tfunction setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {\r\n\r\n\t\tif ( isImagePowerOfTwo ) {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( _glExtensionTextureFilterAnisotropic && texture.type !== THREE.FloatType ) {\r\n\r\n\t\t\tif ( texture.anisotropy > 1 || texture.__oldAnisotropy ) {\r\n\r\n\t\t\t\t_gl.texParameterf( textureType, _glExtensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _maxAnisotropy ) );\r\n\t\t\t\ttexture.__oldAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setTexture = function ( texture, slot ) {\r\n\r\n\t\tif ( texture.needsUpdate ) {\r\n\r\n\t\t\tif ( ! texture.__webglInit ) {\r\n\r\n\t\t\t\ttexture.__webglInit = true;\r\n\r\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\ttexture.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t\t_this.info.memory.textures ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\r\n\t\t\tvar image = texture.image,\r\n\t\t\tisImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),\r\n\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );\r\n\r\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\t\tif ( texture instanceof THREE.DataTexture ) {\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\r\n\r\n\t\t\t\t// compressed textures can only use manually created mipmaps\r\n\t\t\t\t// WebGL can't generate mipmaps for DDS textures\r\n\r\n\t\t\t\tfor( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t_gl.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else { // regular Texture (image, video, canvas)\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\t\ttexture.needsUpdate = false;\r\n\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate();\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction clampToMaxSize ( image, maxSize ) {\r\n\r\n\t\tif ( image.width <= maxSize && image.height <= maxSize ) {\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t\t// Warning: Scaling through the canvas will only work with images that use\r\n\t\t// premultiplied alpha.\r\n\r\n\t\tvar maxDimension = Math.max( image.width, image.height );\r\n\t\tvar newWidth = Math.floor( image.width * maxSize / maxDimension );\r\n\t\tvar newHeight = Math.floor( image.height * maxSize / maxDimension );\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = newWidth;\r\n\t\tcanvas.height = newHeight;\r\n\r\n\t\tvar ctx = canvas.getContext( \"2d\" );\r\n\t\tctx.drawImage( image, 0, 0, image.width, image.height, 0, 0, newWidth, newHeight );\r\n\r\n\t\treturn canvas;\r\n\r\n\t}\r\n\r\n\tfunction setCubeTexture ( texture, slot ) {\r\n\r\n\t\tif ( texture.image.length === 6 ) {\r\n\r\n\t\t\tif ( texture.needsUpdate ) {\r\n\r\n\t\t\t\tif ( ! texture.image.__webglTextureCube ) {\r\n\r\n\t\t\t\t\ttexture.image.__webglTextureCube = _gl.createTexture();\r\n\r\n\t\t\t\t\t_this.info.memory.textures ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );\r\n\r\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\r\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\r\n\r\n\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed ) {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], _maxCubemapSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = texture.image[ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\tisImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),\r\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\tfor( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\r\n\t\t\t\t\t\t\t_gl.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.needsUpdate = false;\r\n\r\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setCubeTextureDynamic ( texture, slot ) {\r\n\r\n\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.__webglTexture );\r\n\r\n\t};\r\n\r\n\t// Render targets\r\n\r\n\tfunction setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {\r\n\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0 );\r\n\r\n\t};\r\n\r\n\tfunction setupRenderBuffer ( renderbuffer, renderTarget  ) {\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t/* For some reason this is not working. Defaulting to RGBA4.\r\n\t\t} else if( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\t\t*/\r\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setRenderTarget = function ( renderTarget ) {\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\r\n\t\tif ( renderTarget && ! renderTarget.__webglFramebuffer ) {\r\n\r\n\t\t\tif ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;\r\n\t\t\tif ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;\r\n\r\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\trenderTarget.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t_this.info.memory.textures ++;\r\n\r\n\t\t\t// Setup texture, create render and frame buffers\r\n\r\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget.width ) && isPowerOfTwo( renderTarget.height ),\r\n\t\t\t\tglFormat = paramThreeToGL( renderTarget.format ),\r\n\t\t\t\tglType = paramThreeToGL( renderTarget.type );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTarget.__webglFramebuffer = [];\r\n\t\t\t\trenderTarget.__webglRenderbuffer = [];\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\trenderTarget.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\t\t\t\t\trenderTarget.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\t\tsetupFrameBuffer( renderTarget.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\t\t\t\t\tsetupRenderBuffer( renderTarget.__webglRenderbuffer[ i ], renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTarget.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\r\n\r\n\t\t\t\t\trenderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderTarget.__webglRenderbuffer = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo );\r\n\r\n\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\tsetupFrameBuffer( renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );\r\n\r\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\r\n\r\n\t\t\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );\r\n\r\n\t\t\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetupRenderBuffer( renderTarget.__webglRenderbuffer, renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Release everything\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t\t}\r\n\r\n\t\tvar framebuffer, width, height, vx, vy;\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tframebuffer = renderTarget.__webglFramebuffer[ renderTarget.activeCubeFace ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tframebuffer = renderTarget.__webglFramebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twidth = renderTarget.width;\r\n\t\t\theight = renderTarget.height;\r\n\r\n\t\t\tvx = 0;\r\n\t\t\tvy = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tframebuffer = null;\r\n\r\n\t\t\twidth = _viewportWidth;\r\n\t\t\theight = _viewportHeight;\r\n\r\n\t\t\tvx = _viewportX;\r\n\t\t\tvy = _viewportY;\r\n\r\n\t\t}\r\n\r\n\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t_gl.viewport( vx, vy, width, height );\r\n\r\n\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t}\r\n\r\n\t\t_currentWidth = width;\r\n\t\t_currentHeight = height;\r\n\r\n\t};\r\n\r\n\tfunction updateRenderTargetMipmap ( renderTarget ) {\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );\r\n\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );\r\n\t\t\t_gl.generateMipmap( _gl.TEXTURE_2D );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Fallback filters for non-power-of-2 textures\r\n\r\n\tfunction filterFallback ( f ) {\r\n\r\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\r\n\r\n\t\t\treturn _gl.NEAREST;\r\n\r\n\t\t}\r\n\r\n\t\treturn _gl.LINEAR;\r\n\r\n\t};\r\n\r\n\t// Map three.js constants to WebGL constants\r\n\r\n\tfunction paramThreeToGL ( p ) {\r\n\r\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\r\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\r\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\r\n\r\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\r\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\r\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\r\n\r\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\r\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\r\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\r\n\t\tif ( p === THREE.IntType ) return _gl.INT;\r\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\r\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\r\n\r\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\r\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\r\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\r\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\r\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\r\n\r\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\r\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\r\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\r\n\r\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\r\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\r\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\r\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\r\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\r\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\r\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\r\n\r\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\r\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\r\n\r\n\t\tif ( _glExtensionCompressedTextureS3TC !== undefined ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\r\n\t};\r\n\r\n\t// Allocations\r\n\r\n\tfunction allocateBones ( object ) {\r\n\r\n\t\tif ( _supportsBoneTextures && object && object.useVertexTexture ) {\r\n\r\n\t\t\treturn 1024;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// default for when object is not specified\r\n\t\t\t// ( for example when prebuilding shader\r\n\t\t\t//   to be used with multiple objects )\r\n\t\t\t//\r\n\t\t\t// \t- leave some extra space for other uniforms\r\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\tvar nVertexUniforms = _gl.getParameter( _gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\tvar maxBones = nVertexMatrices;\r\n\r\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\tmaxBones = Math.min( object.bones.length, maxBones );\r\n\r\n\t\t\t\tif ( maxBones < object.bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"WebGLRenderer: too many bones - \" + object.bones.length + \", this GPU supports just \" + maxBones + \" (try OpenGL instead of ANGLE)\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxBones;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction allocateLights ( lights ) {\r\n\r\n\t\tvar l, ll, light, dirLights, pointLights, spotLights, hemiLights;\r\n\r\n\t\tdirLights = pointLights = spotLights = hemiLights = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tif ( light.onlyShadow ) continue;\r\n\r\n\t\t\tif ( light instanceof THREE.DirectionalLight ) dirLights ++;\r\n\t\t\tif ( light instanceof THREE.PointLight ) pointLights ++;\r\n\t\t\tif ( light instanceof THREE.SpotLight ) spotLights ++;\r\n\t\t\tif ( light instanceof THREE.HemisphereLight ) hemiLights ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn { 'directional' : dirLights, 'point' : pointLights, 'spot': spotLights, 'hemi': hemiLights };\r\n\r\n\t};\r\n\r\n\tfunction allocateShadows ( lights ) {\r\n\r\n\t\tvar l, ll, light, maxShadows = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tif ( ! light.castShadow ) continue;\r\n\r\n\t\t\tif ( light instanceof THREE.SpotLight ) maxShadows ++;\r\n\t\t\tif ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) maxShadows ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn maxShadows;\r\n\r\n\t};\r\n\r\n\t// Initialization\r\n\r\n\tfunction initGL () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif ( ! ( _gl = _canvas.getContext( 'experimental-webgl', { alpha: _alpha, premultipliedAlpha: _premultipliedAlpha, antialias: _antialias, stencil: _stencil, preserveDrawingBuffer: _preserveDrawingBuffer } ) ) ) {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context.';\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t\t_glExtensionTextureFloat = _gl.getExtension( 'OES_texture_float' );\r\n\t\t_glExtensionStandardDerivatives = _gl.getExtension( 'OES_standard_derivatives' );\r\n\r\n\t\t_glExtensionTextureFilterAnisotropic = _gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t   _gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t   _gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\r\n\r\n\t\t_glExtensionCompressedTextureS3TC = _gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t_gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t_gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\tif ( ! _glExtensionTextureFloat ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Float textures not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! _glExtensionStandardDerivatives ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Standard derivatives not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! _glExtensionTextureFilterAnisotropic ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Anisotropic texture filtering not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! _glExtensionCompressedTextureS3TC ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: S3TC compressed textures not supported.' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setDefaultGLState () {\r\n\r\n\t\t_gl.clearColor( 0, 0, 0, 1 );\r\n\t\t_gl.clearDepth( 1 );\r\n\t\t_gl.clearStencil( 0 );\r\n\r\n\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\t\t_gl.depthFunc( _gl.LEQUAL );\r\n\r\n\t\t_gl.frontFace( _gl.CCW );\r\n\t\t_gl.cullFace( _gl.BACK );\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t\t_gl.enable( _gl.BLEND );\r\n\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\t// default plugins (order is important)\r\n\r\n\tthis.shadowMapPlugin = new THREE.ShadowMapPlugin();\r\n\tthis.addPrePlugin( this.shadowMapPlugin );\r\n\r\n\tthis.addPostPlugin( new THREE.SpritePlugin() );\r\n\tthis.addPostPlugin( new THREE.LensFlarePlugin() );\r\n\r\n};\r\n/**\r\n * @author szimek / https://github.com/szimek/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\toptions = options || {};\r\n\r\n\tthis.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;\r\n\tthis.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\tthis.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;\r\n\tthis.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\tthis.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;\r\n\r\n\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.format = options.format !== undefined ? options.format : THREE.RGBAFormat;\r\n\tthis.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;\r\n\r\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\r\n\tthis.generateMipmaps = true;\r\n\r\n\tthis.shareDepthFrom = null;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTarget.prototype.clone = function() {\r\n\r\n\tvar tmp = new THREE.WebGLRenderTarget( this.width, this.height );\r\n\r\n\ttmp.wrapS = this.wrapS;\r\n\ttmp.wrapT = this.wrapT;\r\n\r\n\ttmp.magFilter = this.magFilter;\r\n\ttmp.minFilter = this.minFilter;\r\n\r\n\ttmp.anisotropy = this.anisotropy;\r\n\r\n\ttmp.offset.copy( this.offset );\r\n\ttmp.repeat.copy( this.repeat );\r\n\r\n\ttmp.format = this.format;\r\n\ttmp.type = this.type;\r\n\r\n\ttmp.depthBuffer = this.depthBuffer;\r\n\ttmp.stencilBuffer = this.stencilBuffer;\r\n\r\n\ttmp.generateMipmaps = this.generateMipmaps;\r\n\r\n\ttmp.shareDepthFrom = this.shareDepthFrom;\r\n\r\n\treturn tmp;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTarget.prototype.dispose = function () {\r\n\r\n\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com\r\n */\r\n\r\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\r\n\r\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\r\n\r\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableVertex = function () {\r\n\r\n\tthis.positionWorld = new THREE.Vector3();\r\n\tthis.positionScreen = new THREE.Vector4();\r\n\r\n\tthis.visible = true;\r\n\r\n};\r\n\r\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\r\n\r\n\tthis.positionWorld.copy( vertex.positionWorld );\r\n\tthis.positionScreen.copy( vertex.positionScreen );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableFace3 = function () {\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\tthis.v3 = new THREE.RenderableVertex();\r\n\r\n\tthis.centroidModel = new THREE.Vector3();\r\n\r\n\tthis.normalModel = new THREE.Vector3();\r\n\tthis.normalModelView = new THREE.Vector3();\r\n\r\n\tthis.vertexNormalsLength = 0;\r\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\tthis.vertexNormalsModelView = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\tthis.color = null;\r\n\tthis.material = null;\r\n\tthis.uvs = [[]];\r\n\r\n\tthis.z = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableFace4 = function () {\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\tthis.v3 = new THREE.RenderableVertex();\r\n\tthis.v4 = new THREE.RenderableVertex();\r\n\r\n\tthis.centroidModel = new THREE.Vector3();\r\n\r\n\tthis.normalModel = new THREE.Vector3();\r\n\tthis.normalModelView = new THREE.Vector3();\r\n\r\n\tthis.vertexNormalsLength = 0;\r\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\tthis.vertexNormalsModelView = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\tthis.color = null;\r\n\tthis.material = null;\r\n\tthis.uvs = [[]];\r\n\r\n\tthis.z = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableObject = function () {\r\n\r\n\tthis.object = null;\r\n\tthis.z = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableParticle = function () {\r\n\r\n\tthis.object = null;\r\n\r\n\tthis.x = null;\r\n\tthis.y = null;\r\n\tthis.z = null;\r\n\r\n\tthis.rotation = null;\r\n\tthis.scale = new THREE.Vector2();\r\n\r\n\tthis.material = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableLine = function () {\r\n\r\n\tthis.z = null;\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\r\n\tthis.material = null;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ColorUtils = {\r\n\r\n\tadjustHSV : function ( color, h, s, v ) {\r\n\r\n\t\tvar hsv = THREE.ColorUtils.__hsv;\r\n\r\n\t\tcolor.getHSV( hsv );\r\n\r\n\t\thsv.h = THREE.Math.clamp( hsv.h + h, 0, 1 );\r\n\t\thsv.s = THREE.Math.clamp( hsv.s + s, 0, 1 );\r\n\t\thsv.v = THREE.Math.clamp( hsv.v + v, 0, 1 );\r\n\r\n\t\tcolor.setHSV( hsv.h, hsv.s, hsv.v );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ColorUtils.__hsv = { h: 0, s: 0, v: 0 };/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.GeometryUtils = {\r\n\r\n\t// Merge two geometries or geometry and geometry from object (using object's transform)\r\n\r\n\tmerge: function ( geometry1, object2 /* mesh | geometry */ ) {\r\n\r\n\t\tvar matrix, normalMatrix,\r\n\t\tvertexOffset = geometry1.vertices.length,\r\n\t\tuvPosition = geometry1.faceVertexUvs[ 0 ].length,\r\n\t\tgeometry2 = object2 instanceof THREE.Mesh ? object2.geometry : object2,\r\n\t\tvertices1 = geometry1.vertices,\r\n\t\tvertices2 = geometry2.vertices,\r\n\t\tfaces1 = geometry1.faces,\r\n\t\tfaces2 = geometry2.faces,\r\n\t\tuvs1 = geometry1.faceVertexUvs[ 0 ],\r\n\t\tuvs2 = geometry2.faceVertexUvs[ 0 ];\r\n\r\n\t\tif ( object2 instanceof THREE.Mesh ) {\r\n\r\n\t\t\tobject2.matrixAutoUpdate && object2.updateMatrix();\r\n\r\n\t\t\tmatrix = object2.matrix;\r\n\r\n\t\t\tnormalMatrix = new THREE.Matrix3();\r\n\t\t\tnormalMatrix.getInverse( matrix );\r\n\t\t\tnormalMatrix.transpose();\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\tif ( matrix ) vertexCopy.applyMatrix4( matrix );\r\n\r\n\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// faces\r\n\r\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tfaceCopy = new THREE.Face4( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset, face.d + vertexOffset );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\tif ( normalMatrix ) {\r\n\r\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\tif ( normalMatrix ) {\r\n\r\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.materialIndex = face.materialIndex;\r\n\r\n\t\t\tfaceCopy.centroid.copy( face.centroid );\r\n\r\n\t\t\tif ( matrix ) {\r\n\r\n\t\t\t\tfaceCopy.centroid.applyMatrix4( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// uvs\r\n\r\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvs1.push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tremoveMaterials: function ( geometry, materialIndexArray ) {\r\n\r\n\t\tvar materialIndexMap = {};\r\n\r\n\t\tfor ( var i = 0, il = materialIndexArray.length; i < il; i ++ ) {\r\n\r\n\t\t\tmaterialIndexMap[ materialIndexArray[i] ] = true;\r\n\r\n\t\t}\r\n\r\n\t\tvar face, newFaces = [];\r\n\r\n\t\tfor ( var i = 0, il = geometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = geometry.faces[ i ];\r\n\t\t\tif ( ! ( face.materialIndex in materialIndexMap ) ) newFaces.push( face );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.faces = newFaces;\r\n\r\n\t},\r\n\r\n\t// Get random point in triangle (via barycentric coordinates)\r\n\t// \t(uniform distribution)\r\n\t// \thttp://www.cgafaq.info/wiki/Random_Point_In_Triangle\r\n\r\n\trandomPointInTriangle: function ( vectorA, vectorB, vectorC ) {\r\n\r\n\t\tvar a, b, c,\r\n\t\t\tpoint = new THREE.Vector3(),\r\n\t\t\ttmp = THREE.GeometryUtils.__v1;\r\n\r\n\t\ta = THREE.GeometryUtils.random();\r\n\t\tb = THREE.GeometryUtils.random();\r\n\r\n\t\tif ( ( a + b ) > 1 ) {\r\n\r\n\t\t\ta = 1 - a;\r\n\t\t\tb = 1 - b;\r\n\r\n\t\t}\r\n\r\n\t\tc = 1 - a - b;\r\n\r\n\t\tpoint.copy( vectorA );\r\n\t\tpoint.multiplyScalar( a );\r\n\r\n\t\ttmp.copy( vectorB );\r\n\t\ttmp.multiplyScalar( b );\r\n\r\n\t\tpoint.add( tmp );\r\n\r\n\t\ttmp.copy( vectorC );\r\n\t\ttmp.multiplyScalar( c );\r\n\r\n\t\tpoint.add( tmp );\r\n\r\n\t\treturn point;\r\n\r\n\t},\r\n\r\n\t// Get random point in face (triangle / quad)\r\n\t// (uniform distribution)\r\n\r\n\trandomPointInFace: function ( face, geometry, useCachedAreas ) {\r\n\r\n\t\tvar vA, vB, vC, vD;\r\n\r\n\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\tvA = geometry.vertices[ face.a ];\r\n\t\t\tvB = geometry.vertices[ face.b ];\r\n\t\t\tvC = geometry.vertices[ face.c ];\r\n\r\n\t\t\treturn THREE.GeometryUtils.randomPointInTriangle( vA, vB, vC );\r\n\r\n\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\tvA = geometry.vertices[ face.a ];\r\n\t\t\tvB = geometry.vertices[ face.b ];\r\n\t\t\tvC = geometry.vertices[ face.c ];\r\n\t\t\tvD = geometry.vertices[ face.d ];\r\n\r\n\t\t\tvar area1, area2;\r\n\r\n\t\t\tif ( useCachedAreas ) {\r\n\r\n\t\t\t\tif ( face._area1 && face._area2 ) {\r\n\r\n\t\t\t\t\tarea1 = face._area1;\r\n\t\t\t\t\tarea2 = face._area2;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tarea1 = THREE.GeometryUtils.triangleArea( vA, vB, vD );\r\n\t\t\t\t\tarea2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );\r\n\r\n\t\t\t\t\tface._area1 = area1;\r\n\t\t\t\t\tface._area2 = area2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tarea1 = THREE.GeometryUtils.triangleArea( vA, vB, vD ),\r\n\t\t\t\tarea2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar r = THREE.GeometryUtils.random() * ( area1 + area2 );\r\n\r\n\t\t\tif ( r < area1 ) {\r\n\r\n\t\t\t\treturn THREE.GeometryUtils.randomPointInTriangle( vA, vB, vD );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn THREE.GeometryUtils.randomPointInTriangle( vB, vC, vD );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// Get uniformly distributed random points in mesh\r\n\t// \t- create array with cumulative sums of face areas\r\n\t//  - pick random number from 0 to total area\r\n\t//  - find corresponding place in area array by binary search\r\n\t//\t- get random point in face\r\n\r\n\trandomPointsInGeometry: function ( geometry, n ) {\r\n\r\n\t\tvar face, i,\r\n\t\t\tfaces = geometry.faces,\r\n\t\t\tvertices = geometry.vertices,\r\n\t\t\til = faces.length,\r\n\t\t\ttotalArea = 0,\r\n\t\t\tcumulativeAreas = [],\r\n\t\t\tvA, vB, vC, vD;\r\n\r\n\t\t// precompute face areas\r\n\r\n\t\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\t\tface = faces[ i ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tvA = vertices[ face.a ];\r\n\t\t\t\tvB = vertices[ face.b ];\r\n\t\t\t\tvC = vertices[ face.c ];\r\n\r\n\t\t\t\tface._area = THREE.GeometryUtils.triangleArea( vA, vB, vC );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tvA = vertices[ face.a ];\r\n\t\t\t\tvB = vertices[ face.b ];\r\n\t\t\t\tvC = vertices[ face.c ];\r\n\t\t\t\tvD = vertices[ face.d ];\r\n\r\n\t\t\t\tface._area1 = THREE.GeometryUtils.triangleArea( vA, vB, vD );\r\n\t\t\t\tface._area2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );\r\n\r\n\t\t\t\tface._area = face._area1 + face._area2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttotalArea += face._area;\r\n\r\n\t\t\tcumulativeAreas[ i ] = totalArea;\r\n\r\n\t\t}\r\n\r\n\t\t// binary search cumulative areas array\r\n\r\n\t\tfunction binarySearchIndices( value ) {\r\n\r\n\t\t\tfunction binarySearch( start, end ) {\r\n\r\n\t\t\t\t// return closest larger index\r\n\t\t\t\t// if exact number is not found\r\n\r\n\t\t\t\tif ( end < start )\r\n\t\t\t\t\treturn start;\r\n\r\n\t\t\t\tvar mid = start + Math.floor( ( end - start ) / 2 );\r\n\r\n\t\t\t\tif ( cumulativeAreas[ mid ] > value ) {\r\n\r\n\t\t\t\t\treturn binarySearch( start, mid - 1 );\r\n\r\n\t\t\t\t} else if ( cumulativeAreas[ mid ] < value ) {\r\n\r\n\t\t\t\t\treturn binarySearch( mid + 1, end );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn mid;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar result = binarySearch( 0, cumulativeAreas.length - 1 )\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t\t// pick random face weighted by face area\r\n\r\n\t\tvar r, index,\r\n\t\t\tresult = [];\r\n\r\n\t\tvar stats = {};\r\n\r\n\t\tfor ( i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tr = THREE.GeometryUtils.random() * totalArea;\r\n\r\n\t\t\tindex = binarySearchIndices( r );\r\n\r\n\t\t\tresult[ i ] = THREE.GeometryUtils.randomPointInFace( faces[ index ], geometry, true );\r\n\r\n\t\t\tif ( ! stats[ index ] ) {\r\n\r\n\t\t\t\tstats[ index ] = 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstats[ index ] += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// Get triangle area (half of parallelogram)\r\n\t//\thttp://mathworld.wolfram.com/TriangleArea.html\r\n\r\n\ttriangleArea: function ( vectorA, vectorB, vectorC ) {\r\n\r\n\t\tvar tmp1 = THREE.GeometryUtils.__v1,\r\n\t\t\ttmp2 = THREE.GeometryUtils.__v2;\r\n\r\n\t\ttmp1.subVectors( vectorB, vectorA );\r\n\t\ttmp2.subVectors( vectorC, vectorA );\r\n\t\ttmp1.cross( tmp2 );\r\n\r\n\t\treturn 0.5 * tmp1.length();\r\n\r\n\t},\r\n\r\n\t// Center geometry so that 0,0,0 is in center of bounding box\r\n\r\n\tcenter: function ( geometry ) {\r\n\r\n\t\tgeometry.computeBoundingBox();\r\n\r\n\t\tvar bb = geometry.boundingBox;\r\n\r\n\t\tvar offset = new THREE.Vector3();\r\n\r\n\t\toffset.addVectors( bb.min, bb.max );\r\n\t\toffset.multiplyScalar( -0.5 );\r\n\r\n\t\tgeometry.applyMatrix( new THREE.Matrix4().makeTranslation( offset.x, offset.y, offset.z ) );\r\n\t\tgeometry.computeBoundingBox();\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\t// Normalize UVs to be from <0,1>\r\n\t// (for now just the first set of UVs)\r\n\r\n\tnormalizeUVs: function ( geometry ) {\r\n\r\n\t\tvar uvSet = geometry.faceVertexUvs[ 0 ];\r\n\r\n\t\tfor ( var i = 0, il = uvSet.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uvs = uvSet[ i ];\r\n\r\n\t\t\tfor ( var j = 0, jl = uvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t// texture repeat\r\n\r\n\t\t\t\tif( uvs[ j ].x !== 1.0 ) uvs[ j ].x = uvs[ j ].x - Math.floor( uvs[ j ].x );\r\n\t\t\t\tif( uvs[ j ].y !== 1.0 ) uvs[ j ].y = uvs[ j ].y - Math.floor( uvs[ j ].y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttriangulateQuads: function ( geometry ) {\r\n\r\n\t\tvar i, il, j, jl;\r\n\r\n\t\tvar faces = [];\r\n\t\tvar faceUvs = [];\r\n\t\tvar faceVertexUvs = [];\r\n\r\n\t\tfor ( i = 0, il = geometry.faceUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tfaceUvs[ i ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tfaceVertexUvs[ i ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0, il = geometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = geometry.faces[ i ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tvar a = face.a;\r\n\t\t\t\tvar b = face.b;\r\n\t\t\t\tvar c = face.c;\r\n\t\t\t\tvar d = face.d;\r\n\r\n\t\t\t\tvar triA = new THREE.Face3();\r\n\t\t\t\tvar triB = new THREE.Face3();\r\n\r\n\t\t\t\ttriA.color.copy( face.color );\r\n\t\t\t\ttriB.color.copy( face.color );\r\n\r\n\t\t\t\ttriA.materialIndex = face.materialIndex;\r\n\t\t\t\ttriB.materialIndex = face.materialIndex;\r\n\r\n\t\t\t\ttriA.a = a;\r\n\t\t\t\ttriA.b = b;\r\n\t\t\t\ttriA.c = d;\r\n\r\n\t\t\t\ttriB.a = b;\r\n\t\t\t\ttriB.b = c;\r\n\t\t\t\ttriB.c = d;\r\n\r\n\t\t\t\tif ( face.vertexColors.length === 4 ) {\r\n\r\n\t\t\t\t\ttriA.vertexColors[ 0 ] = face.vertexColors[ 0 ].clone();\r\n\t\t\t\t\ttriA.vertexColors[ 1 ] = face.vertexColors[ 1 ].clone();\r\n\t\t\t\t\ttriA.vertexColors[ 2 ] = face.vertexColors[ 3 ].clone();\r\n\r\n\t\t\t\t\ttriB.vertexColors[ 0 ] = face.vertexColors[ 1 ].clone();\r\n\t\t\t\t\ttriB.vertexColors[ 1 ] = face.vertexColors[ 2 ].clone();\r\n\t\t\t\t\ttriB.vertexColors[ 2 ] = face.vertexColors[ 3 ].clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaces.push( triA, triB );\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tif ( geometry.faceVertexUvs[ j ].length ) {\r\n\r\n\t\t\t\t\t\tvar uvs = geometry.faceVertexUvs[ j ][ i ];\r\n\r\n\t\t\t\t\t\tvar uvA = uvs[ 0 ];\r\n\t\t\t\t\t\tvar uvB = uvs[ 1 ];\r\n\t\t\t\t\t\tvar uvC = uvs[ 2 ];\r\n\t\t\t\t\t\tvar uvD = uvs[ 3 ];\r\n\r\n\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvD.clone() ];\r\n\t\t\t\t\t\tvar uvsTriB = [ uvB.clone(), uvC.clone(), uvD.clone() ];\r\n\r\n\t\t\t\t\t\tfaceVertexUvs[ j ].push( uvsTriA, uvsTriB );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tif ( geometry.faceUvs[ j ].length ) {\r\n\r\n\t\t\t\t\t\tvar faceUv = geometry.faceUvs[ j ][ i ];\r\n\r\n\t\t\t\t\t\tfaceUvs[ j ].push( faceUv, faceUv );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfaces.push( face );\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tfaceUvs[ j ].push( geometry.faceUvs[ j ][ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tfaceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.faces = faces;\r\n\t\tgeometry.faceUvs = faceUvs;\r\n\t\tgeometry.faceVertexUvs = faceVertexUvs;\r\n\r\n\t\tgeometry.computeCentroids();\r\n\t\tgeometry.computeFaceNormals();\r\n\t\tgeometry.computeVertexNormals();\r\n\r\n\t\tif ( geometry.hasTangents ) geometry.computeTangents();\r\n\r\n\t},\r\n\r\n\tsetMaterialIndex: function ( geometry, index, startFace, endFace ){\r\n\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar start = startFace || 0;\r\n\t\tvar end = endFace || faces.length - 1;\r\n\r\n\t\tfor ( var i = start; i <= end; i ++ ) {\r\n\r\n\t\t\tfaces[i].materialIndex = index;\r\n\r\n\t\t}\r\n\r\n    }\r\n\r\n};\r\n\r\nTHREE.GeometryUtils.random = THREE.Math.random16;\r\n\r\nTHREE.GeometryUtils.__v1 = new THREE.Vector3();\r\nTHREE.GeometryUtils.__v2 = new THREE.Vector3();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ImageUtils = {\r\n\r\n\tcrossOrigin: 'anonymous',\r\n\r\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tvar image = new Image();\r\n\t\tvar texture = new THREE.Texture( image, mapping );\r\n\r\n\t\tvar loader = new THREE.ImageLoader();\r\n\r\n\t\tloader.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\ttexture.image = event.content;\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t} );\r\n\r\n\t\tloader.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event.message );\r\n\r\n\t\t} );\r\n\r\n\t\tloader.crossOrigin = this.crossOrigin;\r\n\t\tloader.load( url, image );\r\n\r\n\t\ttexture.sourceFile = url;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadCompressedTexture: function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tvar texture = new THREE.CompressedTexture();\r\n\t\ttexture.mapping = mapping;\r\n\r\n\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\trequest.onload = function () {\r\n\r\n\t\t\tvar buffer = request.response;\r\n\t\t\tvar dds = THREE.ImageUtils.parseDDS( buffer, true );\r\n\r\n\t\t\ttexture.format = dds.format;\r\n\r\n\t\t\ttexture.mipmaps = dds.mipmaps;\r\n\t\t\ttexture.image.width = dds.width;\r\n\t\t\ttexture.image.height = dds.height;\r\n\r\n\t\t\t// gl.generateMipmap fails for compressed textures\r\n\t\t\t// mipmaps must be embedded in the DDS file\r\n\t\t\t// or texture filters must not use mipmapping\r\n\r\n\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t}\r\n\r\n\t\trequest.onerror = onError;\r\n\r\n\t\trequest.open( 'GET', url, true );\r\n\t\trequest.responseType = \"arraybuffer\";\r\n\t\trequest.send( null );\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadTextureCube: function ( array, mapping, onLoad, onError ) {\r\n\r\n\t\tvar images = [];\r\n\t\timages.loadCount = 0;\r\n\r\n\t\tvar texture = new THREE.Texture();\r\n\t\ttexture.image = images;\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\t// no flipping needed for cube textures\r\n\r\n\t\ttexture.flipY = false;\r\n\r\n\t\tfor ( var i = 0, il = array.length; i < il; ++ i ) {\r\n\r\n\t\t\tvar cubeImage = new Image();\r\n\t\t\timages[ i ] = cubeImage;\r\n\r\n\t\t\tcubeImage.onload = function () {\r\n\r\n\t\t\t\timages.loadCount += 1;\r\n\r\n\t\t\t\tif ( images.loadCount === 6 ) {\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tcubeImage.onerror = onError;\r\n\r\n\t\t\tcubeImage.crossOrigin = this.crossOrigin;\r\n\t\t\tcubeImage.src = array[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadCompressedTextureCube: function ( array, mapping, onLoad, onError ) {\r\n\r\n\t\tvar images = [];\r\n\t\timages.loadCount = 0;\r\n\r\n\t\tvar texture = new THREE.CompressedTexture();\r\n\t\ttexture.image = images;\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\t// no flipping for cube textures\r\n\t\t// (also flipping doesn't work for compressed textures )\r\n\r\n\t\ttexture.flipY = false;\r\n\r\n\t\t// can't generate mipmaps for compressed textures\r\n\t\t// mips must be embedded in DDS files\r\n\r\n\t\ttexture.generateMipmaps = false;\r\n\r\n\t\tvar generateCubeFaceCallback = function ( rq, img ) {\r\n\r\n\t\t\treturn function () {\r\n\r\n\t\t\t\tvar buffer = rq.response;\r\n\t\t\t\tvar dds = THREE.ImageUtils.parseDDS( buffer, true );\r\n\r\n\t\t\t\timg.format = dds.format;\r\n\r\n\t\t\t\timg.mipmaps = dds.mipmaps;\r\n\t\t\t\timg.width = dds.width;\r\n\t\t\t\timg.height = dds.height;\r\n\r\n\t\t\t\timages.loadCount += 1;\r\n\r\n\t\t\t\tif ( images.loadCount === 6 ) {\r\n\r\n\t\t\t\t\ttexture.format = dds.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// compressed cubemap textures as 6 separate DDS files\r\n\r\n\t\tif ( array instanceof Array ) {\r\n\r\n\t\t\tfor ( var i = 0, il = array.length; i < il; ++ i ) {\r\n\r\n\t\t\t\tvar cubeImage = {};\r\n\t\t\t\timages[ i ] = cubeImage;\r\n\r\n\t\t\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\t\t\trequest.onload = generateCubeFaceCallback( request, cubeImage );\r\n\t\t\t\trequest.onerror = onError;\r\n\r\n\t\t\t\tvar url = array[ i ];\r\n\r\n\t\t\t\trequest.open( 'GET', url, true );\r\n\t\t\t\trequest.responseType = \"arraybuffer\";\r\n\t\t\t\trequest.send( null );\r\n\r\n\t\t\t}\r\n\r\n\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar url = array;\r\n\t\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\t\trequest.onload = function( ) {\r\n\r\n\t\t\t\tvar buffer = request.response;\r\n\t\t\t\tvar dds = THREE.ImageUtils.parseDDS( buffer, true );\r\n\r\n\t\t\t\tif ( dds.isCubemap ) {\r\n\r\n\t\t\t\t\tvar faces = dds.mipmaps.length / dds.mipmapCount;\r\n\r\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < dds.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( dds.mipmaps[ f * dds.mipmapCount + i ] );\r\n\t\t\t\t\t\t\timages[ f ].format = dds.format;\r\n\t\t\t\t\t\t\timages[ f ].width = dds.width;\r\n\t\t\t\t\t\t\timages[ f ].height = dds.height;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.format = dds.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\trequest.onerror = onError;\r\n\r\n\t\t\trequest.open( 'GET', url, true );\r\n\t\t\trequest.responseType = \"arraybuffer\";\r\n\t\t\trequest.send( null );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tparseDDS: function ( buffer, loadMipmaps ) {\r\n\r\n\t\tvar dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\r\n\r\n\t\t// Adapted from @toji's DDS utils\r\n\t\t//\thttps://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\r\n\r\n\t\t// All values and structures referenced from:\r\n\t\t// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\n\r\n\t\tvar DDS_MAGIC = 0x20534444;\r\n\r\n\t\tvar DDSD_CAPS = 0x1,\r\n\t\t\tDDSD_HEIGHT = 0x2,\r\n\t\t\tDDSD_WIDTH = 0x4,\r\n\t\t\tDDSD_PITCH = 0x8,\r\n\t\t\tDDSD_PIXELFORMAT = 0x1000,\r\n\t\t\tDDSD_MIPMAPCOUNT = 0x20000,\r\n\t\t\tDDSD_LINEARSIZE = 0x80000,\r\n\t\t\tDDSD_DEPTH = 0x800000;\r\n\r\n\t\tvar DDSCAPS_COMPLEX = 0x8,\r\n\t\t\tDDSCAPS_MIPMAP = 0x400000,\r\n\t\t\tDDSCAPS_TEXTURE = 0x1000;\r\n\r\n\t\tvar DDSCAPS2_CUBEMAP = 0x200,\r\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\r\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\r\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\r\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\r\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\r\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\r\n\t\t\tDDSCAPS2_VOLUME = 0x200000;\r\n\r\n\t\tvar DDPF_ALPHAPIXELS = 0x1,\r\n\t\t\tDDPF_ALPHA = 0x2,\r\n\t\t\tDDPF_FOURCC = 0x4,\r\n\t\t\tDDPF_RGB = 0x40,\r\n\t\t\tDDPF_YUV = 0x200,\r\n\t\t\tDDPF_LUMINANCE = 0x20000;\r\n\r\n\t\tfunction fourCCToInt32( value ) {\r\n\r\n\t\t\treturn value.charCodeAt(0) +\r\n\t\t\t\t(value.charCodeAt(1) << 8) +\r\n\t\t\t\t(value.charCodeAt(2) << 16) +\r\n\t\t\t\t(value.charCodeAt(3) << 24);\r\n\r\n\t\t}\r\n\r\n\t\tfunction int32ToFourCC( value ) {\r\n\r\n\t\t\treturn String.fromCharCode(\r\n\t\t\t\tvalue & 0xff,\r\n\t\t\t\t(value >> 8) & 0xff,\r\n\t\t\t\t(value >> 16) & 0xff,\r\n\t\t\t\t(value >> 24) & 0xff\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tvar FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\r\n\t\tvar FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\r\n\t\tvar FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\r\n\r\n\t\tvar headerLengthInt = 31; // The header length in 32 bit ints\r\n\r\n\t\t// Offsets into the header array\r\n\r\n\t\tvar off_magic = 0;\r\n\r\n\t\tvar off_size = 1;\r\n\t\tvar off_flags = 2;\r\n\t\tvar off_height = 3;\r\n\t\tvar off_width = 4;\r\n\r\n\t\tvar off_mipmapCount = 7;\r\n\r\n\t\tvar off_pfFlags = 20;\r\n\t\tvar off_pfFourCC = 21;\r\n\r\n\t\tvar off_caps = 27;\r\n\t\tvar off_caps2 = 28;\r\n\t\tvar off_caps3 = 29;\r\n\t\tvar off_caps4 = 30;\r\n\r\n\t\t// Parse header\r\n\r\n\t\tvar header = new Int32Array( buffer, 0, headerLengthInt );\r\n\r\n\t\tif ( header[ off_magic ] !== DDS_MAGIC ) {\r\n\r\n\t\t\tconsole.error( \"ImageUtils.parseDDS(): Invalid magic number in DDS header\" );\r\n\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {\r\n\r\n\t\t\tconsole.error( \"ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code\" );\r\n\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tvar blockBytes;\r\n\r\n\t\tvar fourCC = header[ off_pfFourCC ];\r\n\r\n\t\tswitch ( fourCC ) {\r\n\r\n\t\t\tcase FOURCC_DXT1:\r\n\r\n\t\t\t\tblockBytes = 8;\r\n\t\t\t\tdds.format = THREE.RGB_S3TC_DXT1_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FOURCC_DXT3:\r\n\r\n\t\t\t\tblockBytes = 16;\r\n\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT3_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FOURCC_DXT5:\r\n\r\n\t\t\t\tblockBytes = 16;\r\n\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT5_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconsole.error( \"ImageUtils.parseDDS(): Unsupported FourCC code: \", int32ToFourCC( fourCC ) );\r\n\t\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tdds.mipmapCount = 1;\r\n\r\n\t\tif ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {\r\n\r\n\t\t\tdds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );\r\n\r\n\t\t}\r\n\r\n\t\t//TODO: Verify that all faces of the cubemap are present with DDSCAPS2_CUBEMAP_POSITIVEX, etc.\r\n\r\n\t\tdds.isCubemap = header[ off_caps2 ] & DDSCAPS2_CUBEMAP ? true : false;\r\n\r\n\t\tdds.width = header[ off_width ];\r\n\t\tdds.height = header[ off_height ];\r\n\r\n\t\tvar dataOffset = header[ off_size ] + 4;\r\n\r\n\t\t// Extract mipmaps buffers\r\n\r\n\t\tvar width = dds.width;\r\n\t\tvar height = dds.height;\r\n\r\n\t\tvar faces = dds.isCubemap ? 6 : 1;\r\n\r\n\t\tfor ( var face = 0; face < faces; face ++ ) {\r\n\r\n\t\t\tfor ( var i = 0; i < dds.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\tvar dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;\r\n\t\t\t\tvar byteArray = new Uint8Array( buffer, dataOffset, dataLength );\r\n\r\n\t\t\t\tvar mipmap = { \"data\": byteArray, \"width\": width, \"height\": height };\r\n\t\t\t\tdds.mipmaps.push( mipmap );\r\n\r\n\t\t\t\tdataOffset += dataLength;\r\n\r\n\t\t\t\twidth = Math.max( width * 0.5, 1 );\r\n\t\t\t\theight = Math.max( height * 0.5, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twidth = dds.width;\r\n\t\t\theight = dds.height;\r\n\r\n\t\t}\r\n\r\n\t\treturn dds;\r\n\r\n\t},\r\n\r\n\tgetNormalMap: function ( image, depth ) {\r\n\r\n\t\t// Adapted from http://www.paulbrunt.co.uk/lab/heightnormal/\r\n\r\n\t\tvar cross = function ( a, b ) {\r\n\r\n\t\t\treturn [ a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ], a[ 2 ] * b[ 0 ] - a[ 0 ] * b[ 2 ], a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] ];\r\n\r\n\t\t}\r\n\r\n\t\tvar subtract = function ( a, b ) {\r\n\r\n\t\t\treturn [ a[ 0 ] - b[ 0 ], a[ 1 ] - b[ 1 ], a[ 2 ] - b[ 2 ] ];\r\n\r\n\t\t}\r\n\r\n\t\tvar normalize = function ( a ) {\r\n\r\n\t\t\tvar l = Math.sqrt( a[ 0 ] * a[ 0 ] + a[ 1 ] * a[ 1 ] + a[ 2 ] * a[ 2 ] );\r\n\t\t\treturn [ a[ 0 ] / l, a[ 1 ] / l, a[ 2 ] / l ];\r\n\r\n\t\t}\r\n\r\n\t\tdepth = depth | 1;\r\n\r\n\t\tvar width = image.width;\r\n\t\tvar height = image.height;\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = width;\r\n\t\tcanvas.height = height;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\t\tcontext.drawImage( image, 0, 0 );\r\n\r\n\t\tvar data = context.getImageData( 0, 0, width, height ).data;\r\n\t\tvar imageData = context.createImageData( width, height );\r\n\t\tvar output = imageData.data;\r\n\r\n\t\tfor ( var x = 0; x < width; x ++ ) {\r\n\r\n\t\t\tfor ( var y = 0; y < height; y ++ ) {\r\n\r\n\t\t\t\tvar ly = y - 1 < 0 ? 0 : y - 1;\r\n\t\t\t\tvar uy = y + 1 > height - 1 ? height - 1 : y + 1;\r\n\t\t\t\tvar lx = x - 1 < 0 ? 0 : x - 1;\r\n\t\t\t\tvar ux = x + 1 > width - 1 ? width - 1 : x + 1;\r\n\r\n\t\t\t\tvar points = [];\r\n\t\t\t\tvar origin = [ 0, 0, data[ ( y * width + x ) * 4 ] / 255 * depth ];\r\n\t\t\t\tpoints.push( [ - 1, 0, data[ ( y * width + lx ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ - 1, - 1, data[ ( ly * width + lx ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 0, - 1, data[ ( ly * width + x ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [  1, - 1, data[ ( ly * width + ux ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 1, 0, data[ ( y * width + ux ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 1, 1, data[ ( uy * width + ux ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 0, 1, data[ ( uy * width + x ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ - 1, 1, data[ ( uy * width + lx ) * 4 ] / 255 * depth ] );\r\n\r\n\t\t\t\tvar normals = [];\r\n\t\t\t\tvar num_points = points.length;\r\n\r\n\t\t\t\tfor ( var i = 0; i < num_points; i ++ ) {\r\n\r\n\t\t\t\t\tvar v1 = points[ i ];\r\n\t\t\t\t\tvar v2 = points[ ( i + 1 ) % num_points ];\r\n\t\t\t\t\tv1 = subtract( v1, origin );\r\n\t\t\t\t\tv2 = subtract( v2, origin );\r\n\t\t\t\t\tnormals.push( normalize( cross( v1, v2 ) ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normal = [ 0, 0, 0 ];\r\n\r\n\t\t\t\tfor ( var i = 0; i < normals.length; i ++ ) {\r\n\r\n\t\t\t\t\tnormal[ 0 ] += normals[ i ][ 0 ];\r\n\t\t\t\t\tnormal[ 1 ] += normals[ i ][ 1 ];\r\n\t\t\t\t\tnormal[ 2 ] += normals[ i ][ 2 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnormal[ 0 ] /= normals.length;\r\n\t\t\t\tnormal[ 1 ] /= normals.length;\r\n\t\t\t\tnormal[ 2 ] /= normals.length;\r\n\r\n\t\t\t\tvar idx = ( y * width + x ) * 4;\r\n\r\n\t\t\t\toutput[ idx ] = ( ( normal[ 0 ] + 1.0 ) / 2.0 * 255 ) | 0;\r\n\t\t\t\toutput[ idx + 1 ] = ( ( normal[ 1 ] + 1.0 ) / 2.0 * 255 ) | 0;\r\n\t\t\t\toutput[ idx + 2 ] = ( normal[ 2 ] * 255 ) | 0;\r\n\t\t\t\toutput[ idx + 3 ] = 255;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcontext.putImageData( imageData, 0, 0 );\r\n\r\n\t\treturn canvas;\r\n\r\n\t},\r\n\r\n\tgenerateDataTexture: function ( width, height, color ) {\r\n\r\n\t\tvar size = width * height;\r\n\t\tvar data = new Uint8Array( 3 * size );\r\n\r\n\t\tvar r = Math.floor( color.r * 255 );\r\n\t\tvar g = Math.floor( color.g * 255 );\r\n\t\tvar b = Math.floor( color.b * 255 );\r\n\r\n\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\tdata[ i * 3 ] \t  = r;\r\n\t\t\tdata[ i * 3 + 1 ] = g;\r\n\t\t\tdata[ i * 3 + 2 ] = b;\r\n\r\n\t\t}\r\n\r\n\t\tvar texture = new THREE.DataTexture( data, width, height, THREE.RGBFormat );\r\n\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SceneUtils = {\r\n\r\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\r\n\r\n\t\tvar group = new THREE.Object3D();\r\n\r\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn group;\r\n\r\n\t},\r\n\r\n\tdetach : function ( child, parent, scene ) {\r\n\r\n\t\tchild.applyMatrix( parent.matrixWorld );\r\n\t\tparent.remove( child );\r\n\t\tscene.add( child );\r\n\r\n\t},\r\n\r\n\tattach: function ( child, scene, parent ) {\r\n\r\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\r\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\t\tchild.applyMatrix( matrixWorldInverse );\r\n\r\n\t\tscene.remove( child );\r\n\t\tparent.add( child );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * For Text operations in three.js (See TextGeometry)\r\n *\r\n * It uses techniques used in:\r\n *\r\n * \ttypeface.js and canvastext\r\n * \t\tFor converting fonts and rendering with javascript\r\n *\t\thttp://typeface.neocracy.org\r\n *\r\n *\tTriangulation ported from AS3\r\n *\t\tSimple Polygon Triangulation\r\n *\t\thttp://actionsnippet.com/?p=1462\r\n *\r\n * \tA Method to triangulate shapes with holes\r\n *\t\thttp://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/\r\n *\r\n */\r\n\r\nTHREE.FontUtils = {\r\n\r\n\tfaces : {},\r\n\r\n\t// Just for now. face[weight][style]\r\n\r\n\tface : \"helvetiker\",\r\n\tweight: \"normal\",\r\n\tstyle : \"normal\",\r\n\tsize : 150,\r\n\tdivisions : 10,\r\n\r\n\tgetFace : function() {\r\n\r\n\t\treturn this.faces[ this.face ][ this.weight ][ this.style ];\r\n\r\n\t},\r\n\r\n\tloadFace : function( data ) {\r\n\r\n\t\tvar family = data.familyName.toLowerCase();\r\n\r\n\t\tvar ThreeFont = this;\r\n\r\n\t\tThreeFont.faces[ family ] = ThreeFont.faces[ family ] || {};\r\n\r\n\t\tThreeFont.faces[ family ][ data.cssFontWeight ] = ThreeFont.faces[ family ][ data.cssFontWeight ] || {};\r\n\t\tThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;\r\n\r\n\t\tvar face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tdrawText : function( text ) {\r\n\r\n\t\tvar characterPts = [], allPts = [];\r\n\r\n\t\t// RenderText\r\n\r\n\t\tvar i, p,\r\n\t\t\tface = this.getFace(),\r\n\t\t\tscale = this.size / face.resolution,\r\n\t\t\toffset = 0,\r\n\t\t\tchars = String( text ).split( '' ),\r\n\t\t\tlength = chars.length;\r\n\r\n\t\tvar fontPaths = [];\r\n\r\n\t\tfor ( i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tvar path = new THREE.Path();\r\n\r\n\t\t\tvar ret = this.extractGlyphPoints( chars[ i ], face, scale, offset, path );\r\n\t\t\toffset += ret.offset;\r\n\r\n\t\t\tfontPaths.push( ret.path );\r\n\r\n\t\t}\r\n\r\n\t\t// get the width\r\n\r\n\t\tvar width = offset / 2;\r\n\t\t//\r\n\t\t// for ( p = 0; p < allPts.length; p++ ) {\r\n\t\t//\r\n\t\t// \tallPts[ p ].x -= width;\r\n\t\t//\r\n\t\t// }\r\n\r\n\t\t//var extract = this.extractPoints( allPts, characterPts );\r\n\t\t//extract.contour = allPts;\r\n\r\n\t\t//extract.paths = fontPaths;\r\n\t\t//extract.offset = width;\r\n\r\n\t\treturn { paths : fontPaths, offset : width };\r\n\r\n\t},\r\n\r\n\r\n\r\n\r\n\textractGlyphPoints : function( c, face, scale, offset, path ) {\r\n\r\n\t\tvar pts = [];\r\n\r\n\t\tvar i, i2, divisions,\r\n\t\t\toutline, action, length,\r\n\t\t\tscaleX, scaleY,\r\n\t\t\tx, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2,\r\n\t\t\tlaste,\r\n\t\t\tglyph = face.glyphs[ c ] || face.glyphs[ '?' ];\r\n\r\n\t\tif ( !glyph ) return;\r\n\r\n\t\tif ( glyph.o ) {\r\n\r\n\t\t\toutline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\t\t\tlength = outline.length;\r\n\r\n\t\t\tscaleX = scale;\r\n\t\t\tscaleY = scale;\r\n\r\n\t\t\tfor ( i = 0; i < length; ) {\r\n\r\n\t\t\t\taction = outline[ i ++ ];\r\n\r\n\t\t\t\t//console.log( action );\r\n\r\n\t\t\t\tswitch( action ) {\r\n\r\n\t\t\t\tcase 'm':\r\n\r\n\t\t\t\t\t// Move To\r\n\r\n\t\t\t\t\tx = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\ty = outline[ i++ ] * scaleY;\r\n\r\n\t\t\t\t\tpath.moveTo( x, y );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'l':\r\n\r\n\t\t\t\t\t// Line To\r\n\r\n\t\t\t\t\tx = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\ty = outline[ i++ ] * scaleY;\r\n\t\t\t\t\tpath.lineTo(x,y);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'q':\r\n\r\n\t\t\t\t\t// QuadraticCurveTo\r\n\r\n\t\t\t\t\tcpx  = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\tcpy  = outline[ i++ ] * scaleY;\r\n\t\t\t\t\tcpx1 = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\tcpy1 = outline[ i++ ] * scaleY;\r\n\r\n\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\r\n\r\n\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\tfor ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\tvar tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\t\t\tvar ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );\r\n\t\t\t\t\t  }\r\n\r\n\t\t\t\t  }\r\n\r\n\t\t\t\t  break;\r\n\r\n\t\t\t\tcase 'b':\r\n\r\n\t\t\t\t\t// Cubic Bezier Curve\r\n\r\n\t\t\t\t\tcpx  = outline[ i++ ] *  scaleX + offset;\r\n\t\t\t\t\tcpy  = outline[ i++ ] *  scaleY;\r\n\t\t\t\t\tcpx1 = outline[ i++ ] *  scaleX + offset;\r\n\t\t\t\t\tcpy1 = outline[ i++ ] * -scaleY;\r\n\t\t\t\t\tcpx2 = outline[ i++ ] *  scaleX + offset;\r\n\t\t\t\t\tcpy2 = outline[ i++ ] * -scaleY;\r\n\r\n\t\t\t\t\tpath.bezierCurveTo( cpx, cpy, cpx1, cpy1, cpx2, cpy2 );\r\n\r\n\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\tfor ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\tvar tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\t\t\tvar ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn { offset: glyph.ha*scale, path:path};\r\n\t}\r\n\r\n};\r\n\r\n\r\nTHREE.FontUtils.generateShapes = function( text, parameters ) {\r\n\r\n\t// Parameters \r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar size = parameters.size !== undefined ? parameters.size : 100;\r\n\tvar curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments: 4;\r\n\r\n\tvar font = parameters.font !== undefined ? parameters.font : \"helvetiker\";\r\n\tvar weight = parameters.weight !== undefined ? parameters.weight : \"normal\";\r\n\tvar style = parameters.style !== undefined ? parameters.style : \"normal\";\r\n\r\n\tTHREE.FontUtils.size = size;\r\n\tTHREE.FontUtils.divisions = curveSegments;\r\n\r\n\tTHREE.FontUtils.face = font;\r\n\tTHREE.FontUtils.weight = weight;\r\n\tTHREE.FontUtils.style = style;\r\n\r\n\t// Get a Font data json object\r\n\r\n\tvar data = THREE.FontUtils.drawText( text );\r\n\r\n\tvar paths = data.paths;\r\n\tvar shapes = [];\r\n\r\n\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t}\r\n\r\n\treturn shapes;\r\n\r\n};\r\n\r\n\r\n/**\r\n * This code is a quick port of code written in C++ which was submitted to\r\n * flipcode.com by John W. Ratcliff  // July 22, 2000\r\n * See original code and more information here:\r\n * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\r\n *\r\n * ported to actionscript by Zevan Rosser\r\n * www.actionsnippet.com\r\n *\r\n * ported to javascript by Joshua Koo\r\n * http://www.lab4games.net/zz85/blog\r\n *\r\n */\r\n\r\n\r\n( function( namespace ) {\r\n\r\n\tvar EPSILON = 0.0000000001;\r\n\r\n\t// takes in an contour array and returns\r\n\r\n\tvar process = function( contour, indices ) {\r\n\r\n\t\tvar n = contour.length;\r\n\r\n\t\tif ( n < 3 ) return null;\r\n\r\n\t\tvar result = [],\r\n\t\t\tverts = [],\r\n\t\t\tvertIndices = [];\r\n\r\n\t\t/* we want a counter-clockwise polygon in verts */\r\n\r\n\t\tvar u, v, w;\r\n\r\n\t\tif ( area( contour ) > 0.0 ) {\r\n\r\n\t\t\tfor ( v = 0; v < n; v++ ) verts[ v ] = v;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( v = 0; v < n; v++ ) verts[ v ] = ( n - 1 ) - v;\r\n\r\n\t\t}\r\n\r\n\t\tvar nv = n;\r\n\r\n\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\r\n\r\n\t\tvar count = 2 * nv;   /* error detection */\r\n\r\n\t\tfor( v = nv - 1; nv > 2; ) {\r\n\r\n\t\t\t/* if we loop, it is probably a non-simple polygon */\r\n\r\n\t\t\tif ( ( count-- ) <= 0 ) {\r\n\r\n\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\r\n\r\n\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\r\n\t\t\t\t//return null;\r\n\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\r\n\t\t\t\tconsole.log( \"Warning, unable to triangulate polygon!\" );\r\n\r\n\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\treturn result;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\r\n\r\n\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\r\n\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\r\n\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\r\n\r\n\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\r\n\r\n\t\t\t\tvar a, b, c, s, t;\r\n\r\n\t\t\t\t/* true names of the vertices */\r\n\r\n\t\t\t\ta = verts[ u ];\r\n\t\t\t\tb = verts[ v ];\r\n\t\t\t\tc = verts[ w ];\r\n\r\n\t\t\t\t/* output Triangle */\r\n\r\n\t\t\t\tresult.push( [ contour[ a ],\r\n\t\t\t\t\tcontour[ b ],\r\n\t\t\t\t\tcontour[ c ] ] );\r\n\r\n\r\n\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\r\n\r\n\t\t\t\t/* remove v from the remaining polygon */\r\n\r\n\t\t\t\tfor( s = v, t = v + 1; t < nv; s++, t++ ) {\r\n\r\n\t\t\t\t\tverts[ s ] = verts[ t ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnv--;\r\n\r\n\t\t\t\t/* reset error detection counter */\r\n\r\n\t\t\t\tcount = 2 * nv;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( indices ) return vertIndices;\r\n\t\treturn result;\r\n\r\n\t};\r\n\r\n\t// calculate area of the contour polygon\r\n\r\n\tvar area = function ( contour ) {\r\n\r\n\t\tvar n = contour.length;\r\n\t\tvar a = 0.0;\r\n\r\n\t\tfor( var p = n - 1, q = 0; q < n; p = q++ ) {\r\n\r\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t}\r\n\r\n\t\treturn a * 0.5;\r\n\r\n\t};\r\n\r\n\tvar snip = function ( contour, u, v, w, n, verts ) {\r\n\r\n\t\tvar p;\r\n\t\tvar ax, ay, bx, by;\r\n\t\tvar cx, cy, px, py;\r\n\r\n\t\tax = contour[ verts[ u ] ].x;\r\n\t\tay = contour[ verts[ u ] ].y;\r\n\r\n\t\tbx = contour[ verts[ v ] ].x;\r\n\t\tby = contour[ verts[ v ] ].y;\r\n\r\n\t\tcx = contour[ verts[ w ] ].x;\r\n\t\tcy = contour[ verts[ w ] ].y;\r\n\r\n\t\tif ( EPSILON > (((bx-ax)*(cy-ay)) - ((by-ay)*(cx-ax))) ) return false;\r\n\r\n\t\tvar aX, aY, bX, bY, cX, cY;\r\n\t\tvar apx, apy, bpx, bpy, cpx, cpy;\r\n\t\tvar cCROSSap, bCROSScp, aCROSSbp;\r\n\r\n\t\taX = cx - bx;  aY = cy - by;\r\n\t\tbX = ax - cx;  bY = ay - cy;\r\n\t\tcX = bx - ax;  cY = by - ay;\r\n\r\n\t\tfor ( p = 0; p < n; p++ ) {\r\n\r\n\t\t\tif( (p === u) || (p === v) || (p === w) ) continue;\r\n\r\n\t\t\tpx = contour[ verts[ p ] ].x\r\n\t\t\tpy = contour[ verts[ p ] ].y\r\n\r\n\t\t\tapx = px - ax;  apy = py - ay;\r\n\t\t\tbpx = px - bx;  bpy = py - by;\r\n\t\t\tcpx = px - cx;  cpy = py - cy;\r\n\r\n\t\t\t// see if p is inside triangle abc\r\n\r\n\t\t\taCROSSbp = aX*bpy - aY*bpx;\r\n\t\t\tcCROSSap = cX*apy - cY*apx;\r\n\t\t\tbCROSScp = bX*cpy - bY*cpx;\r\n\r\n\t\t\tif ( (aCROSSbp >= 0.0) && (bCROSScp >= 0.0) && (cCROSSap >= 0.0) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n\r\n\tnamespace.Triangulate = process;\r\n\tnamespace.Triangulate.area = area;\r\n\r\n\treturn namespace;\r\n\r\n})(THREE.FontUtils);\r\n\r\n// To use the typeface.js face files, hook up the API\r\nself._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Extensible curve object\r\n *\r\n * Some common of Curve methods\r\n * .getPoint(t), getTangent(t)\r\n * .getPointAt(u), getTagentAt(u)\r\n * .getPoints(), .getSpacedPoints()\r\n * .getLength()\r\n * .updateArcLengths()\r\n *\r\n * This file contains following classes:\r\n *\r\n * -- 2d classes --\r\n * THREE.Curve\r\n * THREE.LineCurve\r\n * THREE.QuadraticBezierCurve\r\n * THREE.CubicBezierCurve\r\n * THREE.SplineCurve\r\n * THREE.ArcCurve\r\n * THREE.EllipseCurve\r\n *\r\n * -- 3d classes --\r\n * THREE.LineCurve3\r\n * THREE.QuadraticBezierCurve3\r\n * THREE.CubicBezierCurve3\r\n * THREE.SplineCurve3\r\n * THREE.ClosedSplineCurve3\r\n *\r\n * A series of curves can be represented as a THREE.CurvePath\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tAbstract Curve base class\r\n **************************************************************/\r\n\r\nTHREE.Curve = function () {\r\n\r\n};\r\n\r\n// Virtual base class method to overwrite and implement in subclasses\r\n//\t- t [0 .. 1]\r\n\r\nTHREE.Curve.prototype.getPoint = function ( t ) {\r\n\r\n\tconsole.log( \"Warning, getPoint() not implemented!\" );\r\n\treturn null;\r\n\r\n};\r\n\r\n// Get point at relative position in curve according to arc length\r\n// - u [0 .. 1]\r\n\r\nTHREE.Curve.prototype.getPointAt = function ( u ) {\r\n\r\n\tvar t = this.getUtoTmapping( u );\r\n\treturn this.getPoint( t );\r\n\r\n};\r\n\r\n// Get sequence of points using getPoint( t )\r\n\r\nTHREE.Curve.prototype.getPoints = function ( divisions ) {\r\n\r\n\tif ( !divisions ) divisions = 5;\r\n\r\n\tvar d, pts = [];\r\n\r\n\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\tpts.push( this.getPoint( d / divisions ) );\r\n\r\n\t}\r\n\r\n\treturn pts;\r\n\r\n};\r\n\r\n// Get sequence of points using getPointAt( u )\r\n\r\nTHREE.Curve.prototype.getSpacedPoints = function ( divisions ) {\r\n\r\n\tif ( !divisions ) divisions = 5;\r\n\r\n\tvar d, pts = [];\r\n\r\n\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\tpts.push( this.getPointAt( d / divisions ) );\r\n\r\n\t}\r\n\r\n\treturn pts;\r\n\r\n};\r\n\r\n// Get total curve arc length\r\n\r\nTHREE.Curve.prototype.getLength = function () {\r\n\r\n\tvar lengths = this.getLengths();\r\n\treturn lengths[ lengths.length - 1 ];\r\n\r\n};\r\n\r\n// Get list of cumulative segment lengths\r\n\r\nTHREE.Curve.prototype.getLengths = function ( divisions ) {\r\n\r\n\tif ( !divisions ) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions): 200;\r\n\r\n\tif ( this.cacheArcLengths\r\n\t\t&& ( this.cacheArcLengths.length == divisions + 1 )\r\n\t\t&& !this.needsUpdate) {\r\n\r\n\t\t//console.log( \"cached\", this.cacheArcLengths );\r\n\t\treturn this.cacheArcLengths;\r\n\r\n\t}\r\n\r\n\tthis.needsUpdate = false;\r\n\r\n\tvar cache = [];\r\n\tvar current, last = this.getPoint( 0 );\r\n\tvar p, sum = 0;\r\n\r\n\tcache.push( 0 );\r\n\r\n\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\tcurrent = this.getPoint ( p / divisions );\r\n\t\tsum += current.distanceTo( last );\r\n\t\tcache.push( sum );\r\n\t\tlast = current;\r\n\r\n\t}\r\n\r\n\tthis.cacheArcLengths = cache;\r\n\r\n\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\r\n\r\n};\r\n\r\n\r\nTHREE.Curve.prototype.updateArcLengths = function() {\r\n\tthis.needsUpdate = true;\r\n\tthis.getLengths();\r\n};\r\n\r\n// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance\r\n\r\nTHREE.Curve.prototype.getUtoTmapping = function ( u, distance ) {\r\n\r\n\tvar arcLengths = this.getLengths();\r\n\r\n\tvar i = 0, il = arcLengths.length;\r\n\r\n\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\tif ( distance ) {\r\n\r\n\t\ttargetArcLength = distance;\r\n\r\n\t} else {\r\n\r\n\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t}\r\n\r\n\t//var time = Date.now();\r\n\r\n\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\tvar low = 0, high = il - 1, comparison;\r\n\r\n\twhile ( low <= high ) {\r\n\r\n\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\tlow = i + 1;\r\n\t\t\tcontinue;\r\n\r\n\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\thigh = i - 1;\r\n\t\t\tcontinue;\r\n\r\n\t\t} else {\r\n\r\n\t\t\thigh = i;\r\n\t\t\tbreak;\r\n\r\n\t\t\t// DONE\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ti = high;\r\n\r\n\t//console.log('b' , i, low, high, Date.now()- time);\r\n\r\n\tif ( arcLengths[ i ] == targetArcLength ) {\r\n\r\n\t\tvar t = i / ( il - 1 );\r\n\t\treturn t;\r\n\r\n\t}\r\n\r\n\t// we could get finer grain at lengths, or use simple interpolatation between two points\r\n\r\n\tvar lengthBefore = arcLengths[ i ];\r\n    var lengthAfter = arcLengths[ i + 1 ];\r\n\r\n    var segmentLength = lengthAfter - lengthBefore;\r\n\r\n    // determine where we are between the 'before' and 'after' points\r\n\r\n    var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n    // add that fractional amount to t\r\n\r\n    var t = ( i + segmentFraction ) / ( il -1 );\r\n\r\n\treturn t;\r\n\r\n};\r\n\r\n// Returns a unit vector tangent at t\r\n// In case any sub curve does not implement its tangent derivation,\r\n// 2 points a small delta apart will be used to find its gradient\r\n// which seems to give a reasonable approximation\r\n\r\nTHREE.Curve.prototype.getTangent = function( t ) {\r\n\r\n\tvar delta = 0.0001;\r\n\tvar t1 = t - delta;\r\n\tvar t2 = t + delta;\r\n\r\n\t// Capping in case of danger\r\n\r\n\tif ( t1 < 0 ) t1 = 0;\r\n\tif ( t2 > 1 ) t2 = 1;\r\n\r\n\tvar pt1 = this.getPoint( t1 );\r\n\tvar pt2 = this.getPoint( t2 );\r\n\r\n\tvar vec = pt2.clone().sub(pt1);\r\n\treturn vec.normalize();\r\n\r\n};\r\n\r\n\r\nTHREE.Curve.prototype.getTangentAt = function ( u ) {\r\n\r\n\tvar t = this.getUtoTmapping( u );\r\n\treturn this.getTangent( t );\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tLine\r\n **************************************************************/\r\n\r\nTHREE.LineCurve = function ( v1, v2 ) {\r\n\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar point = this.v2.clone().sub(this.v1);\r\n\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\n// Line curve is linear, so we can overwrite default getPointAt\r\n\r\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\r\n\r\n\treturn this.getPoint( u );\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangent = this.v2.clone().sub(this.v1);\r\n\r\n\treturn tangent.normalize();\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );\r\n\tty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );\r\n\r\n\treturn new THREE.Vector2( tx, ty );\r\n\r\n};\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x );\r\n\tty = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y );\r\n\r\n\t// returns unit vector\r\n\r\n\tvar tangent = new THREE.Vector2( tx, ty );\r\n\ttangent.normalize();\r\n\r\n\treturn tangent;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tCubic Bezier curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\tthis.v3 = v3;\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\r\n\tty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\r\n\r\n\treturn new THREE.Vector2( tx, ty );\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\r\n\tty = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\r\n\r\n\tvar tangent = new THREE.Vector2( tx, ty );\r\n\ttangent.normalize();\r\n\r\n\treturn tangent;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tSpline curve\r\n **************************************************************/\r\n\r\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\r\n\r\n\tthis.points = (points == undefined) ? [] : points;\r\n\r\n};\r\n\r\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar v = new THREE.Vector2();\r\n\tvar c = [];\r\n\tvar points = this.points, point, intPoint, weight;\r\n\tpoint = ( points.length - 1 ) * t;\r\n\r\n\tintPoint = Math.floor( point );\r\n\tweight = point - intPoint;\r\n\r\n\tc[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\r\n\tc[ 1 ] = intPoint;\r\n\tc[ 2 ] = intPoint  > points.length - 2 ? points.length -1 : intPoint + 1;\r\n\tc[ 3 ] = intPoint  > points.length - 3 ? points.length -1 : intPoint + 2;\r\n\r\n\tv.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );\r\n\tv.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );\r\n\r\n\treturn v;\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tEllipse curve\r\n **************************************************************/\r\n\r\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\taStartAngle, aEndAngle,\r\n\t\t\t\t\t\t\taClockwise ) {\r\n\r\n\tthis.aX = aX;\r\n\tthis.aY = aY;\r\n\r\n\tthis.xRadius = xRadius;\r\n\tthis.yRadius = yRadius;\r\n\r\n\tthis.aStartAngle = aStartAngle;\r\n\tthis.aEndAngle = aEndAngle;\r\n\r\n\tthis.aClockwise = aClockwise;\r\n\r\n};\r\n\r\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\r\n\tif ( !this.aClockwise ) {\r\n\r\n\t\tt = 1 - t;\r\n\r\n\t}\r\n\r\n\tvar angle = this.aStartAngle + t * deltaAngle;\r\n\r\n\tvar tx = this.aX + this.xRadius * Math.cos( angle );\r\n\tvar ty = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\treturn new THREE.Vector2( tx, ty );\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tArc curve\r\n **************************************************************/\r\n\r\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n};\r\n\r\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\r\n\r\n\r\n/**************************************************************\r\n *\tUtils\r\n **************************************************************/\r\n\r\nTHREE.Curve.Utils = {\r\n\r\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\r\n\r\n\t},\r\n\r\n\t// Puay Bing, thanks for helping with this derivative!\r\n\r\n\ttangentCubicBezier: function (t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn -3 * p0 * (1 - t) * (1 - t)  +\r\n\t\t\t3 * p1 * (1 - t) * (1-t) - 6 *t *p1 * (1-t) +\r\n\t\t\t6 * t *  p2 * (1-t) - 3 * t * t * p2 +\r\n\t\t\t3 * t * t * p3;\r\n\t},\r\n\r\n\r\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t// To check if my formulas are correct\r\n\r\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\r\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\r\n\t\tvar h01 = -6 * t * t + 6 * t; \t// − 2t3 + 3t2\r\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\r\n\r\n\t\treturn h00 + h10 + h01 + h11;\r\n\r\n\t},\r\n\r\n\t// Catmull-Rom\r\n\r\n\tinterpolate: function( p0, p1, p2, p3, t ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// TODO: Transformation for Curves?\r\n\r\n/**************************************************************\r\n *\t3D Curves\r\n **************************************************************/\r\n\r\n// A Factory method for creating new curve subclasses\r\n\r\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\r\n\r\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\r\n\tconstructor.prototype.getPoint = getPointFunc;\r\n\r\n\treturn constructor;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tLine3D\r\n **************************************************************/\r\n\r\nTHREE.LineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v1, v2 ) {\r\n\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar r = new THREE.Vector3();\r\n\r\n\r\n\t\tr.subVectors( this.v2, this.v1 ); // diff\r\n\t\tr.multiplyScalar( t );\r\n\t\tr.add( this.v1 );\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar tx, ty, tz;\r\n\r\n\t\ttx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );\r\n\t\tty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );\r\n\t\ttz = THREE.Shape.Utils.b2( t, this.v0.z, this.v1.z, this.v2.z );\r\n\r\n\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n\r\n/**************************************************************\r\n *\tCubic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2, v3 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar tx, ty, tz;\r\n\r\n\t\ttx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\r\n\t\tty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\r\n\t\ttz = THREE.Shape.Utils.b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z );\r\n\r\n\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n\r\n/**************************************************************\r\n *\tSpline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.SplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */) {\r\n\r\n\t\tthis.points = (points == undefined) ? [] : points;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\t\tvar c = [];\r\n\t\tvar points = this.points, point, intPoint, weight;\r\n\t\tpoint = ( points.length - 1 ) * t;\r\n\r\n\t\tintPoint = Math.floor( point );\r\n\t\tweight = point - intPoint;\r\n\r\n\t\tc[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\r\n\t\tc[ 1 ] = intPoint;\r\n\t\tc[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;\r\n\t\tc[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;\r\n\r\n\t\tvar pt0 = points[ c[0] ],\r\n\t\t\tpt1 = points[ c[1] ],\r\n\t\t\tpt2 = points[ c[2] ],\r\n\t\t\tpt3 = points[ c[3] ];\r\n\r\n\t\tv.x = THREE.Curve.Utils.interpolate(pt0.x, pt1.x, pt2.x, pt3.x, weight);\r\n\t\tv.y = THREE.Curve.Utils.interpolate(pt0.y, pt1.y, pt2.y, pt3.y, weight);\r\n\t\tv.z = THREE.Curve.Utils.interpolate(pt0.z, pt1.z, pt2.z, pt3.z, weight);\r\n\r\n\t\treturn v;\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n// THREE.SplineCurve3.prototype.getTangent = function(t) {\r\n// \t\tvar v = new THREE.Vector3();\r\n// \t\tvar c = [];\r\n// \t\tvar points = this.points, point, intPoint, weight;\r\n// \t\tpoint = ( points.length - 1 ) * t;\r\n\r\n// \t\tintPoint = Math.floor( point );\r\n// \t\tweight = point - intPoint;\r\n\r\n// \t\tc[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\r\n// \t\tc[ 1 ] = intPoint;\r\n// \t\tc[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;\r\n// \t\tc[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;\r\n\r\n// \t\tvar pt0 = points[ c[0] ],\r\n// \t\t\tpt1 = points[ c[1] ],\r\n// \t\t\tpt2 = points[ c[2] ],\r\n// \t\t\tpt3 = points[ c[3] ];\r\n\r\n// \t// t = weight;\r\n// \tv.x = THREE.Curve.Utils.tangentSpline( t, pt0.x, pt1.x, pt2.x, pt3.x );\r\n// \tv.y = THREE.Curve.Utils.tangentSpline( t, pt0.y, pt1.y, pt2.y, pt3.y );\r\n// \tv.z = THREE.Curve.Utils.tangentSpline( t, pt0.z, pt1.z, pt2.z, pt3.z );\r\n\r\n// \treturn v;\r\n\r\n// }\r\n\r\n/**************************************************************\r\n *\tClosed Spline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.ClosedSplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */) {\r\n\r\n\t\tthis.points = (points == undefined) ? [] : points;\r\n\r\n\t},\r\n\r\n    function ( t ) {\r\n\r\n        var v = new THREE.Vector3();\r\n        var c = [];\r\n        var points = this.points, point, intPoint, weight;\r\n        point = ( points.length - 0 ) * t;\r\n            // This needs to be from 0-length +1\r\n\r\n        intPoint = Math.floor( point );\r\n        weight = point - intPoint;\r\n\r\n        intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\r\n        c[ 0 ] = ( intPoint - 1 ) % points.length;\r\n        c[ 1 ] = ( intPoint ) % points.length;\r\n        c[ 2 ] = ( intPoint + 1 ) % points.length;\r\n        c[ 3 ] = ( intPoint + 2 ) % points.length;\r\n\r\n        v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );\r\n        v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );\r\n        v.z = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].z, points[ c[ 1 ] ].z, points[ c[ 2 ] ].z, points[ c[ 3 ] ].z, weight );\r\n\r\n        return v;\r\n\r\n    }\r\n\r\n);\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tCurved Path - a curve path is simply a array of connected\r\n *  curves, but retains the api of a curve\r\n **************************************************************/\r\n\r\nTHREE.CurvePath = function () {\r\n\r\n\tthis.curves = [];\r\n\tthis.bends = [];\r\n\t\r\n\tthis.autoClose = false; // Automatically closes the path\r\n};\r\n\r\nTHREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.CurvePath.prototype.add = function ( curve ) {\r\n\r\n\tthis.curves.push( curve );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.checkConnection = function() {\r\n\t// TODO\r\n\t// If the ending of curve is not connected to the starting\r\n\t// or the next curve, then, this is not a real path\r\n};\r\n\r\nTHREE.CurvePath.prototype.closePath = function() {\r\n\t// TODO Test\r\n\t// and verify for vector3 (needs to implement equals)\r\n\t// Add a line curve if start and end of lines are not connected\r\n\tvar startPoint = this.curves[0].getPoint(0);\r\n\tvar endPoint = this.curves[this.curves.length-1].getPoint(1);\r\n\t\r\n\tif (!startPoint.equals(endPoint)) {\r\n\t\tthis.curves.push( new THREE.LineCurve(endPoint, startPoint) );\r\n\t}\r\n\t\r\n};\r\n\r\n// To get accurate point with reference to\r\n// entire path distance at time t,\r\n// following has to be done:\r\n\r\n// 1. Length of each sub path have to be known\r\n// 2. Locate and identify type of curve\r\n// 3. Get t for the curve\r\n// 4. Return curve.getPointAt(t')\r\n\r\nTHREE.CurvePath.prototype.getPoint = function( t ) {\r\n\r\n\tvar d = t * this.getLength();\r\n\tvar curveLengths = this.getCurveLengths();\r\n\tvar i = 0, diff, curve;\r\n\r\n\t// To think about boundaries points.\r\n\r\n\twhile ( i < curveLengths.length ) {\r\n\r\n\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\tdiff = curveLengths[ i ] - d;\r\n\t\t\tcurve = this.curves[ i ];\r\n\r\n\t\t\tvar u = 1 - diff / curve.getLength();\r\n\r\n\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\ti ++;\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n};\r\n\r\n/*\r\nTHREE.CurvePath.prototype.getTangent = function( t ) {\r\n};*/\r\n\r\n\r\n// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n// getPoint() depends on getLength\r\n\r\nTHREE.CurvePath.prototype.getLength = function() {\r\n\r\n\tvar lens = this.getCurveLengths();\r\n\treturn lens[ lens.length - 1 ];\r\n\r\n};\r\n\r\n// Compute lengths and cache them\r\n// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\nTHREE.CurvePath.prototype.getCurveLengths = function() {\r\n\r\n\t// We use cache values if curves and cache array are same length\r\n\r\n\tif ( this.cacheLengths && this.cacheLengths.length == this.curves.length ) {\r\n\r\n\t\treturn this.cacheLengths;\r\n\r\n\t};\r\n\r\n\t// Get length of subsurve\r\n\t// Push sums into cached array\r\n\r\n\tvar lengths = [], sums = 0;\r\n\tvar i, il = this.curves.length;\r\n\r\n\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\tsums += this.curves[ i ].getLength();\r\n\t\tlengths.push( sums );\r\n\r\n\t}\r\n\r\n\tthis.cacheLengths = lengths;\r\n\r\n\treturn lengths;\r\n\r\n};\r\n\r\n\r\n\r\n// Returns min and max coordinates, as well as centroid\r\n\r\nTHREE.CurvePath.prototype.getBoundingBox = function () {\r\n\r\n\tvar points = this.getPoints();\r\n\r\n\tvar maxX, maxY, maxZ;\r\n\tvar minX, minY, minZ;\r\n\r\n\tmaxX = maxY = Number.NEGATIVE_INFINITY;\r\n\tminX = minY = Number.POSITIVE_INFINITY;\r\n\r\n\tvar p, i, il, sum;\r\n\r\n\tvar v3 = points[0] instanceof THREE.Vector3;\r\n\r\n\tsum = v3 ? new THREE.Vector3() : new THREE.Vector2();\r\n\r\n\tfor ( i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\tp = points[ i ];\r\n\r\n\t\tif ( p.x > maxX ) maxX = p.x;\r\n\t\telse if ( p.x < minX ) minX = p.x;\r\n\r\n\t\tif ( p.y > maxY ) maxY = p.y;\r\n\t\telse if ( p.y < minY ) minY = p.y;\r\n\r\n\t\tif ( v3 ) {\r\n\r\n\t\t\tif ( p.z > maxZ ) maxZ = p.z;\r\n\t\t\telse if ( p.z < minZ ) minZ = p.z;\r\n\r\n\t\t}\r\n\r\n\t\tsum.add( p );\r\n\r\n\t}\r\n\r\n\tvar ret = {\r\n\r\n\t\tminX: minX,\r\n\t\tminY: minY,\r\n\t\tmaxX: maxX,\r\n\t\tmaxY: maxY,\r\n\t\tcentroid: sum.divideScalar( il )\r\n\r\n\t};\r\n\r\n\tif ( v3 ) {\r\n\r\n\t\tret.maxZ = maxZ;\r\n\t\tret.minZ = minZ;\r\n\r\n\t}\r\n\r\n\treturn ret;\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tCreate Geometries Helpers\r\n **************************************************************/\r\n\r\n/// Generate geometry from path points (for Line or ParticleSystem objects)\r\n\r\nTHREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {\r\n\r\n\tvar pts = this.getPoints( divisions, true );\r\n\treturn this.createGeometry( pts );\r\n\r\n};\r\n\r\n// Generate geometry from equidistance sampling along the path\r\n\r\nTHREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {\r\n\r\n\tvar pts = this.getSpacedPoints( divisions, true );\r\n\treturn this.createGeometry( pts );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.createGeometry = function( points ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tfor ( var i = 0; i < points.length; i ++ ) {\r\n\r\n\t\tgeometry.vertices.push( new THREE.Vector3( points[ i ].x, points[ i ].y, points[ i ].z || 0) );\r\n\r\n\t}\r\n\r\n\treturn geometry;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tBend / Wrap Helper Methods\r\n **************************************************************/\r\n\r\n// Wrap path / Bend modifiers?\r\n\r\nTHREE.CurvePath.prototype.addWrapPath = function ( bendpath ) {\r\n\r\n\tthis.bends.push( bendpath );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.getTransformedPoints = function( segments, bends ) {\r\n\r\n\tvar oldPts = this.getPoints( segments ); // getPoints getSpacedPoints\r\n\tvar i, il;\r\n\r\n\tif ( !bends ) {\r\n\r\n\t\tbends = this.bends;\r\n\r\n\t}\r\n\r\n\tfor ( i = 0, il = bends.length; i < il; i ++ ) {\r\n\r\n\t\toldPts = this.getWrapPoints( oldPts, bends[ i ] );\r\n\r\n\t}\r\n\r\n\treturn oldPts;\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.getTransformedSpacedPoints = function( segments, bends ) {\r\n\r\n\tvar oldPts = this.getSpacedPoints( segments );\r\n\r\n\tvar i, il;\r\n\r\n\tif ( !bends ) {\r\n\r\n\t\tbends = this.bends;\r\n\r\n\t}\r\n\r\n\tfor ( i = 0, il = bends.length; i < il; i ++ ) {\r\n\r\n\t\toldPts = this.getWrapPoints( oldPts, bends[ i ] );\r\n\r\n\t}\r\n\r\n\treturn oldPts;\r\n\r\n};\r\n\r\n// This returns getPoints() bend/wrapped around the contour of a path.\r\n// Read http://www.planetclegg.com/projects/WarpingTextToSplines.html\r\n\r\nTHREE.CurvePath.prototype.getWrapPoints = function ( oldPts, path ) {\r\n\r\n\tvar bounds = this.getBoundingBox();\r\n\r\n\tvar i, il, p, oldX, oldY, xNorm;\r\n\r\n\tfor ( i = 0, il = oldPts.length; i < il; i ++ ) {\r\n\r\n\t\tp = oldPts[ i ];\r\n\r\n\t\toldX = p.x;\r\n\t\toldY = p.y;\r\n\r\n\t\txNorm = oldX / bounds.maxX;\r\n\r\n\t\t// If using actual distance, for length > path, requires line extrusions\r\n\t\t//xNorm = path.getUtoTmapping(xNorm, oldX); // 3 styles. 1) wrap stretched. 2) wrap stretch by arc length 3) warp by actual distance\r\n\r\n\t\txNorm = path.getUtoTmapping( xNorm, oldX );\r\n\r\n\t\t// check for out of bounds?\r\n\r\n\t\tvar pathPt = path.getPoint( xNorm );\r\n\t\tvar normal = path.getNormalVector( xNorm ).multiplyScalar( oldY );\r\n\r\n\t\tp.x = pathPt.x + normal.x;\r\n\t\tp.y = pathPt.y + normal.y;\r\n\r\n\t}\r\n\r\n\treturn oldPts;\r\n\r\n};\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Gyroscope = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n};\r\n\r\nTHREE.Gyroscope.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Gyroscope.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\tthis.matrixAutoUpdate && this.updateMatrix();\r\n\r\n\t// update matrixWorld\r\n\r\n\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\tif ( this.parent ) {\r\n\r\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\tthis.matrixWorld.decompose( this.translationWorld, this.rotationWorld, this.scaleWorld );\r\n\t\t\tthis.matrix.decompose( this.translationObject, this.rotationObject, this.scaleObject );\r\n\r\n\t\t\tthis.matrixWorld.compose( this.translationWorld, this.rotationObject, this.scaleWorld );\r\n\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tforce = true;\r\n\r\n\t}\r\n\r\n\t// update children\r\n\r\n\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Gyroscope.prototype.translationWorld = new THREE.Vector3();\r\nTHREE.Gyroscope.prototype.translationObject = new THREE.Vector3();\r\nTHREE.Gyroscope.prototype.rotationWorld = new THREE.Quaternion();\r\nTHREE.Gyroscope.prototype.rotationObject = new THREE.Quaternion();\r\nTHREE.Gyroscope.prototype.scaleWorld = new THREE.Vector3();\r\nTHREE.Gyroscope.prototype.scaleObject = new THREE.Vector3();\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Creates free form 2d path using series of points, lines or curves.\r\n *\r\n **/\r\n\r\nTHREE.Path = function ( points ) {\r\n\r\n\tTHREE.CurvePath.call(this);\r\n\r\n\tthis.actions = [];\r\n\r\n\tif ( points ) {\r\n\r\n\t\tthis.fromPoints( points );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Path.prototype = Object.create( THREE.CurvePath.prototype );\r\n\r\nTHREE.PathActions = {\r\n\r\n\tMOVE_TO: 'moveTo',\r\n\tLINE_TO: 'lineTo',\r\n\tQUADRATIC_CURVE_TO: 'quadraticCurveTo', // Bezier quadratic curve\r\n\tBEZIER_CURVE_TO: 'bezierCurveTo', \t\t// Bezier cubic curve\r\n\tCSPLINE_THRU: 'splineThru',\t\t\t\t// Catmull-rom spline\r\n\tARC: 'arc',\t\t\t\t\t\t\t\t// Circle\r\n\tELLIPSE: 'ellipse'\r\n};\r\n\r\n// TODO Clean up PATH API\r\n\r\n// Create path using straight lines to connect all points\r\n// - vectors: array of Vector2\r\n\r\nTHREE.Path.prototype.fromPoints = function ( vectors ) {\r\n\r\n\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\r\n\r\n\tfor ( var v = 1, vlen = vectors.length; v < vlen; v ++ ) {\r\n\r\n\t\tthis.lineTo( vectors[ v ].x, vectors[ v ].y );\r\n\r\n\t};\r\n\r\n};\r\n\r\n// startPath() endPath()?\r\n\r\nTHREE.Path.prototype.moveTo = function ( x, y ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\tthis.actions.push( { action: THREE.PathActions.MOVE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.lineTo = function ( x, y ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.LINE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.QuadraticBezierCurve( new THREE.Vector2( x0, y0 ),\r\n\t\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCPx, aCPy ),\r\n\t\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aX, aY ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.QUADRATIC_CURVE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y,\r\n                                               aCP2x, aCP2y,\r\n                                               aX, aY ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.CubicBezierCurve( new THREE.Vector2( x0, y0 ),\r\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\r\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\r\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aX, aY ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.BEZIER_CURVE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n//---\r\n\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\r\n\tArray.prototype.push.apply( npts, pts );\r\n\r\n\tvar curve = new THREE.SplineCurve( npts );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.CSPLINE_THRU, args: args } );\r\n\r\n};\r\n\r\n// FUTURE: Change the API or follow canvas API?\r\n\r\nTHREE.Path.prototype.arc = function ( aX, aY, aRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1].args;\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tthis.absarc(aX + x0, aY + y0, aRadius,\r\n\t\taStartAngle, aEndAngle, aClockwise );\r\n\t\r\n };\r\n\r\n THREE.Path.prototype.absarc = function ( aX, aY, aRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n };\r\n \r\nTHREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1].args;\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius,\r\n\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n };\r\n \r\n\r\nTHREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\tthis.curves.push( curve );\r\n\r\n\tvar lastPoint = curve.getPoint(aClockwise ? 1 : 0);\r\n\targs.push(lastPoint.x);\r\n\targs.push(lastPoint.y);\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.ELLIPSE, args: args } );\r\n\r\n };\r\n\r\nTHREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {\r\n\r\n\tif ( ! divisions ) divisions = 40;\r\n\r\n\tvar points = [];\r\n\r\n\tfor ( var i = 0; i < divisions; i ++ ) {\r\n\r\n\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t//if( !this.getPoint( i / divisions ) ) throw \"DIE\";\r\n\r\n\t}\r\n\r\n\t// if ( closedPath ) {\r\n\t//\r\n\t// \tpoints.push( points[ 0 ] );\r\n\t//\r\n\t// }\r\n\r\n\treturn points;\r\n\r\n};\r\n\r\n/* Return an array of vectors based on contour of the path */\r\n\r\nTHREE.Path.prototype.getPoints = function( divisions, closedPath ) {\r\n\r\n\tif (this.useSpacedPoints) {\r\n\t\tconsole.log('tata');\r\n\t\treturn this.getSpacedPoints( divisions, closedPath );\r\n\t}\r\n\r\n\tdivisions = divisions || 12;\r\n\r\n\tvar points = [];\r\n\r\n\tvar i, il, item, action, args;\r\n\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\r\n\t\tlaste, j,\r\n\t\tt, tx, ty;\r\n\r\n\tfor ( i = 0, il = this.actions.length; i < il; i ++ ) {\r\n\r\n\t\titem = this.actions[ i ];\r\n\r\n\t\taction = item.action;\r\n\t\targs = item.args;\r\n\r\n\t\tswitch( action ) {\r\n\r\n\t\tcase THREE.PathActions.MOVE_TO:\r\n\r\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.LINE_TO:\r\n\r\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.QUADRATIC_CURVE_TO:\r\n\r\n\t\t\tcpx  = args[ 2 ];\r\n\t\t\tcpy  = args[ 3 ];\r\n\r\n\t\t\tcpx1 = args[ 0 ];\r\n\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / divisions;\r\n\r\n\t\t\t\ttx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\tty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t  \t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.BEZIER_CURVE_TO:\r\n\r\n\t\t\tcpx  = args[ 4 ];\r\n\t\t\tcpy  = args[ 5 ];\r\n\r\n\t\t\tcpx1 = args[ 0 ];\r\n\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\tcpx2 = args[ 2 ];\r\n\t\t\tcpy2 = args[ 3 ];\r\n\r\n\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfor ( j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / divisions;\r\n\r\n\t\t\t\ttx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\tty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.CSPLINE_THRU:\r\n\r\n\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\r\n\t\t\tvar spts = [ last ];\r\n\r\n\t\t\tvar n = divisions * args[ 0 ].length;\r\n\r\n\t\t\tspts = spts.concat( args[ 0 ] );\r\n\r\n\t\t\tvar spline = new THREE.SplineCurve( spts );\r\n\r\n\t\t\tfor ( j = 1; j <= n; j ++ ) {\r\n\r\n\t\t\t\tpoints.push( spline.getPointAt( j / n ) ) ;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.ARC:\r\n\r\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\taRadius = args[ 2 ],\r\n\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\r\n\t\t\t\taClockwise = !!args[ 5 ];\r\n\r\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\tvar angle;\r\n\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\tfor ( j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / tdivisions;\r\n\r\n\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\ttx = aX + aRadius * Math.cos( angle );\r\n\t\t\t\tty = aY + aRadius * Math.sin( angle );\r\n\r\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(points);\r\n\r\n\t\t  break;\r\n\t\t  \r\n\t\tcase THREE.PathActions.ELLIPSE:\r\n\r\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\txRadius = args[ 2 ],\r\n\t\t\t\tyRadius = args[ 3 ],\r\n\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\r\n\t\t\t\taClockwise = !!args[ 6 ];\r\n\r\n\r\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\tvar angle;\r\n\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\tfor ( j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / tdivisions;\r\n\r\n\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\ttx = aX + xRadius * Math.cos( angle );\r\n\t\t\t\tty = aY + yRadius * Math.sin( angle );\r\n\r\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(points);\r\n\r\n\t\t  break;\r\n\r\n\t\t} // end switch\r\n\r\n\t}\r\n\r\n\r\n\r\n\t// Normalize to remove the closing point by default.\r\n\tvar lastPoint = points[ points.length - 1];\r\n\tvar EPSILON = 0.0000000001;\r\n\tif ( Math.abs(lastPoint.x - points[ 0 ].x) < EPSILON &&\r\n             Math.abs(lastPoint.y - points[ 0 ].y) < EPSILON)\r\n\t\tpoints.splice( points.length - 1, 1);\r\n\tif ( closedPath ) {\r\n\r\n\t\tpoints.push( points[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn points;\r\n\r\n};\r\n\r\n// Breaks path into shapes\r\n\r\nTHREE.Path.prototype.toShapes = function() {\r\n\r\n\tvar i, il, item, action, args;\r\n\r\n\tvar subPaths = [], lastPath = new THREE.Path();\r\n\r\n\tfor ( i = 0, il = this.actions.length; i < il; i ++ ) {\r\n\r\n\t\titem = this.actions[ i ];\r\n\r\n\t\targs = item.args;\r\n\t\taction = item.action;\r\n\r\n\t\tif ( action == THREE.PathActions.MOVE_TO ) {\r\n\r\n\t\t\tif ( lastPath.actions.length != 0 ) {\r\n\r\n\t\t\t\tsubPaths.push( lastPath );\r\n\t\t\t\tlastPath = new THREE.Path();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlastPath[ action ].apply( lastPath, args );\r\n\r\n\t}\r\n\r\n\tif ( lastPath.actions.length != 0 ) {\r\n\r\n\t\tsubPaths.push( lastPath );\r\n\r\n\t}\r\n\r\n\t// console.log(subPaths);\r\n\r\n\tif ( subPaths.length == 0 ) return [];\r\n\r\n\tvar tmpPath, tmpShape, shapes = [];\r\n\r\n\tvar holesFirst = !THREE.Shape.Utils.isClockWise( subPaths[ 0 ].getPoints() );\r\n\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\tif ( subPaths.length == 1) {\r\n\t\ttmpPath = subPaths[0];\r\n\t\ttmpShape = new THREE.Shape();\r\n\t\ttmpShape.actions = tmpPath.actions;\r\n\t\ttmpShape.curves = tmpPath.curves;\r\n\t\tshapes.push( tmpShape );\r\n\t\treturn shapes;\r\n\t};\r\n\r\n\tif ( holesFirst ) {\r\n\r\n\t\ttmpShape = new THREE.Shape();\r\n\r\n\t\tfor ( i = 0, il = subPaths.length; i < il; i ++ ) {\r\n\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( tmpPath.getPoints() ) ) {\r\n\r\n\t\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\ttmpShape = new THREE.Shape();\r\n\r\n\t\t\t\t//console.log('cw', i);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttmpShape.holes.push( tmpPath );\r\n\r\n\t\t\t\t//console.log('ccw', i);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\t// Shapes first\r\n\r\n\t\tfor ( i = 0, il = subPaths.length; i < il; i ++ ) {\r\n\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( tmpPath.getPoints() ) ) {\r\n\r\n\r\n\t\t\t\tif ( tmpShape ) shapes.push( tmpShape );\r\n\r\n\t\t\t\ttmpShape = new THREE.Shape();\r\n\t\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttmpShape.holes.push( tmpPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tshapes.push( tmpShape );\r\n\r\n\t}\r\n\r\n\t//console.log(\"shape\", shapes);\r\n\r\n\treturn shapes;\r\n\r\n};\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Defines a 2d shape plane using paths.\r\n **/\r\n\r\n// STEP 1 Create a path.\r\n// STEP 2 Turn path into shape.\r\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n// STEP 3a - Extract points from each shape, turn to vertices\r\n// STEP 3b - Triangulate each shape, add faces.\r\n\r\nTHREE.Shape = function ( ) {\r\n\r\n\tTHREE.Path.apply( this, arguments );\r\n\tthis.holes = [];\r\n\r\n};\r\n\r\nTHREE.Shape.prototype = Object.create( THREE.Path.prototype );\r\n\r\n// Convenience method to return ExtrudeGeometry\r\n\r\nTHREE.Shape.prototype.extrude = function ( options ) {\r\n\r\n\tvar extruded = new THREE.ExtrudeGeometry( this, options );\r\n\treturn extruded;\r\n\r\n};\r\n\r\n// Convenience method to return ShapeGeometry\r\n\r\nTHREE.Shape.prototype.makeGeometry = function ( options ) {\r\n\r\n\tvar geometry = new THREE.ShapeGeometry( this, options );\r\n\treturn geometry;\r\n\r\n};\r\n\r\n// Get points of holes\r\n\r\nTHREE.Shape.prototype.getPointsHoles = function ( divisions ) {\r\n\r\n\tvar i, il = this.holes.length, holesPts = [];\r\n\r\n\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\tholesPts[ i ] = this.holes[ i ].getTransformedPoints( divisions, this.bends );\r\n\r\n\t}\r\n\r\n\treturn holesPts;\r\n\r\n};\r\n\r\n// Get points of holes (spaced by regular distance)\r\n\r\nTHREE.Shape.prototype.getSpacedPointsHoles = function ( divisions ) {\r\n\r\n\tvar i, il = this.holes.length, holesPts = [];\r\n\r\n\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\tholesPts[ i ] = this.holes[ i ].getTransformedSpacedPoints( divisions, this.bends );\r\n\r\n\t}\r\n\r\n\treturn holesPts;\r\n\r\n};\r\n\r\n\r\n// Get points of shape and holes (keypoints based on segments parameter)\r\n\r\nTHREE.Shape.prototype.extractAllPoints = function ( divisions ) {\r\n\r\n\treturn {\r\n\r\n\t\tshape: this.getTransformedPoints( divisions ),\r\n\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.Shape.prototype.extractPoints = function ( divisions ) {\r\n\r\n\tif (this.useSpacedPoints) {\r\n\t\treturn this.extractAllSpacedPoints(divisions);\r\n\t}\r\n\r\n\treturn this.extractAllPoints(divisions);\r\n\r\n};\r\n\r\n//\r\n// THREE.Shape.prototype.extractAllPointsWithBend = function ( divisions, bend ) {\r\n//\r\n// \treturn {\r\n//\r\n// \t\tshape: this.transform( bend, divisions ),\r\n// \t\tholes: this.getPointsHoles( divisions, bend )\r\n//\r\n// \t};\r\n//\r\n// };\r\n\r\n// Get points of shape and holes (spaced by regular distance)\r\n\r\nTHREE.Shape.prototype.extractAllSpacedPoints = function ( divisions ) {\r\n\r\n\treturn {\r\n\r\n\t\tshape: this.getTransformedSpacedPoints( divisions ),\r\n\t\tholes: this.getSpacedPointsHoles( divisions )\r\n\r\n\t};\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tUtils\r\n **************************************************************/\r\n\r\nTHREE.Shape.Utils = {\r\n\r\n\t/*\r\n\t\tcontour - array of vector2 for contour\r\n\t\tholes   - array of array of vector2\r\n\t*/\r\n\r\n\tremoveHoles: function ( contour, holes ) {\r\n\r\n\t\tvar shape = contour.concat(); // work on this shape\r\n\t\tvar allpoints = shape.concat();\r\n\r\n\t\t/* For each isolated shape, find the closest points and break to the hole to allow triangulation */\r\n\r\n\r\n\t\tvar prevShapeVert, nextShapeVert,\r\n\t\t\tprevHoleVert, nextHoleVert,\r\n\t\t\tholeIndex, shapeIndex,\r\n\t\t\tshapeId, shapeGroup,\r\n\t\t\th, h2,\r\n\t\t\thole, shortest, d,\r\n\t\t\tp, pts1, pts2,\r\n\t\t\ttmpShape1, tmpShape2,\r\n\t\t\ttmpHole1, tmpHole2,\r\n\t\t\tverts = [];\r\n\r\n\t\tfor ( h = 0; h < holes.length; h ++ ) {\r\n\r\n\t\t\thole = holes[ h ];\r\n\r\n\t\t\t/*\r\n\t\t\tshapeholes[ h ].concat(); // preserves original\r\n\t\t\tholes.push( hole );\r\n\t\t\t*/\r\n\r\n\t\t\tArray.prototype.push.apply( allpoints, hole );\r\n\r\n\t\t\tshortest = Number.POSITIVE_INFINITY;\r\n\r\n\r\n\t\t\t// Find the shortest pair of pts between shape and hole\r\n\r\n\t\t\t// Note: Actually, I'm not sure now if we could optimize this to be faster than O(m*n)\r\n\t\t\t// Using distanceToSquared() intead of distanceTo() should speed a little\r\n\t\t\t// since running square roots operations are reduced.\r\n\r\n\t\t\tfor ( h2 = 0; h2 < hole.length; h2 ++ ) {\r\n\r\n\t\t\t\tpts1 = hole[ h2 ];\r\n\t\t\t\tvar dist = [];\r\n\r\n\t\t\t\tfor ( p = 0; p < shape.length; p++ ) {\r\n\r\n\t\t\t\t\tpts2 = shape[ p ];\r\n\t\t\t\t\td = pts1.distanceToSquared( pts2 );\r\n\t\t\t\t\tdist.push( d );\r\n\r\n\t\t\t\t\tif ( d < shortest ) {\r\n\r\n\t\t\t\t\t\tshortest = d;\r\n\t\t\t\t\t\tholeIndex = h2;\r\n\t\t\t\t\t\tshapeIndex = p;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(\"shortest\", shortest, dist);\r\n\r\n\t\t\tprevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\r\n\t\t\tprevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\r\n\r\n\t\t\tvar areaapts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\tshape[ shapeIndex ],\r\n\t\t\t\tshape[ prevShapeVert ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areaa = THREE.FontUtils.Triangulate.area( areaapts );\r\n\r\n\t\t\tvar areabpts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\thole[ prevHoleVert ],\r\n\t\t\t\tshape[ shapeIndex ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areab = THREE.FontUtils.Triangulate.area( areabpts );\r\n\r\n\t\t\tvar shapeOffset = 1;\r\n\t\t\tvar holeOffset = -1;\r\n\r\n\t\t\tvar oldShapeIndex = shapeIndex, oldHoleIndex = holeIndex;\r\n\t\t\tshapeIndex += shapeOffset;\r\n\t\t\tholeIndex += holeOffset;\r\n\r\n\t\t\tif ( shapeIndex < 0 ) { shapeIndex += shape.length;  }\r\n\t\t\tshapeIndex %= shape.length;\r\n\r\n\t\t\tif ( holeIndex < 0 ) { holeIndex += hole.length;  }\r\n\t\t\tholeIndex %= hole.length;\r\n\r\n\t\t\tprevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\r\n\t\t\tprevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\r\n\r\n\t\t\tareaapts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\tshape[ shapeIndex ],\r\n\t\t\t\tshape[ prevShapeVert ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areaa2 = THREE.FontUtils.Triangulate.area( areaapts );\r\n\r\n\t\t\tareabpts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\thole[ prevHoleVert ],\r\n\t\t\t\tshape[ shapeIndex ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areab2 = THREE.FontUtils.Triangulate.area( areabpts );\r\n\t\t\t//console.log(areaa,areab ,areaa2,areab2, ( areaa + areab ),  ( areaa2 + areab2 ));\r\n\r\n\t\t\tif ( ( areaa + areab ) > ( areaa2 + areab2 ) ) {\r\n\r\n\t\t\t\t// In case areas are not correct.\r\n\t\t\t\t//console.log(\"USE THIS\");\r\n\r\n\t\t\t\tshapeIndex = oldShapeIndex;\r\n\t\t\t\tholeIndex = oldHoleIndex ;\r\n\r\n\t\t\t\tif ( shapeIndex < 0 ) { shapeIndex += shape.length;  }\r\n\t\t\t\tshapeIndex %= shape.length;\r\n\r\n\t\t\t\tif ( holeIndex < 0 ) { holeIndex += hole.length;  }\r\n\t\t\t\tholeIndex %= hole.length;\r\n\r\n\t\t\t\tprevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\r\n\t\t\t\tprevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log(\"USE THAT \")\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttmpShape1 = shape.slice( 0, shapeIndex );\r\n\t\t\ttmpShape2 = shape.slice( shapeIndex );\r\n\t\t\ttmpHole1 = hole.slice( holeIndex );\r\n\t\t\ttmpHole2 = hole.slice( 0, holeIndex );\r\n\r\n\t\t\t// Should check orders here again?\r\n\r\n\t\t\tvar trianglea = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\tshape[ shapeIndex ],\r\n\t\t\t\tshape[ prevShapeVert ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar triangleb = [\r\n\r\n\t\t\t\thole[ holeIndex ] ,\r\n\t\t\t\thole[ prevHoleVert ],\r\n\t\t\t\tshape[ shapeIndex ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tverts.push( trianglea );\r\n\t\t\tverts.push( triangleb );\r\n\r\n\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tshape:shape, \t\t/* shape with no holes */\r\n\t\t\tisolatedPts: verts, /* isolated faces */\r\n\t\t\tallpoints: allpoints\r\n\r\n\t\t}\r\n\r\n\r\n\t},\r\n\r\n\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\tvar shapeWithoutHoles = THREE.Shape.Utils.removeHoles( contour, holes );\r\n\r\n\t\tvar shape = shapeWithoutHoles.shape,\r\n\t\t\tallpoints = shapeWithoutHoles.allpoints,\r\n\t\t\tisolatedPts = shapeWithoutHoles.isolatedPts;\r\n\r\n\t\tvar triangles = THREE.FontUtils.Triangulate( shape, false ); // True returns indices for points of spooled shape\r\n\r\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\r\n\r\n\t\t//console.log( \"triangles\",triangles, triangles.length );\r\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\r\n\r\n\t\tvar i, il, f, face,\r\n\t\t\tkey, index,\r\n\t\t\tallPointsMap = {},\r\n\t\t\tisolatedPointsMap = {};\r\n\r\n\t\t// prepare all points map\r\n\r\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\r\n\r\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\r\n\r\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.log( \"Duplicate point\", key );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tallPointsMap[ key ] = i;\r\n\r\n\t\t}\r\n\r\n\t\t// check all face vertices against all points map\r\n\r\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = triangles[ i ];\r\n\r\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\r\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\r\n\t\t\t\tindex = allPointsMap[ key ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tface[ f ] = index;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check isolated points vertices against all points map\r\n\r\n\t\tfor ( i = 0, il = isolatedPts.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = isolatedPts[ i ];\r\n\r\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\r\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\r\n\t\t\t\tindex = allPointsMap[ key ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tface[ f ] = index;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn triangles.concat( isolatedPts );\r\n\r\n\t}, // end triangulate shapes\r\n\r\n\t/*\r\n\ttriangulate2 : function( pts, holes ) {\r\n\r\n\t\t// For use with Poly2Tri.js\r\n\r\n\t\tvar allpts = pts.concat();\r\n\t\tvar shape = [];\r\n\t\tfor (var p in pts) {\r\n\t\t\tshape.push(new js.poly2tri.Point(pts[p].x, pts[p].y));\r\n\t\t}\r\n\r\n\t\tvar swctx = new js.poly2tri.SweepContext(shape);\r\n\r\n\t\tfor (var h in holes) {\r\n\t\t\tvar aHole = holes[h];\r\n\t\t\tvar newHole = []\r\n\t\t\tfor (i in aHole) {\r\n\t\t\t\tnewHole.push(new js.poly2tri.Point(aHole[i].x, aHole[i].y));\r\n\t\t\t\tallpts.push(aHole[i]);\r\n\t\t\t}\r\n\t\t\tswctx.AddHole(newHole);\r\n\t\t}\r\n\r\n\t\tvar find;\r\n\t\tvar findIndexForPt = function (pt) {\r\n\t\t\tfind = new THREE.Vector2(pt.x, pt.y);\r\n\t\t\tvar p;\r\n\t\t\tfor (p=0, pl = allpts.length; p<pl; p++) {\r\n\t\t\t\tif (allpts[p].equals(find)) return p;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t// triangulate\r\n\t\tjs.poly2tri.sweep.Triangulate(swctx);\r\n\r\n\t\tvar triangles =  swctx.GetTriangles();\r\n\t\tvar tr ;\r\n\t\tvar facesPts = [];\r\n\t\tfor (var t in triangles) {\r\n\t\t\ttr =  triangles[t];\r\n\t\t\tfacesPts.push([\r\n\t\t\t\tfindIndexForPt(tr.GetPoint(0)),\r\n\t\t\t\tfindIndexForPt(tr.GetPoint(1)),\r\n\t\t\t\tfindIndexForPt(tr.GetPoint(2))\r\n\t\t\t\t\t]);\r\n\t\t}\r\n\r\n\r\n\t//\tconsole.log(facesPts);\r\n\t//\tconsole.log(\"triangles\", triangles.length, triangles);\r\n\r\n\t\t// Returns array of faces with 3 element each\r\n\treturn facesPts;\r\n\t},\r\n*/\r\n\r\n\tisClockWise: function ( pts ) {\r\n\r\n\t\treturn THREE.FontUtils.Triangulate.area( pts ) < 0;\r\n\r\n\t},\r\n\r\n\t// Bezier Curves formulas obtained from\r\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n\r\n\t// Quad Bezier Functions\r\n\r\n\tb2p0: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * p;\r\n\r\n\t},\r\n\r\n\tb2p1: function ( t, p ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t},\r\n\r\n\tb2p2: function ( t, p ) {\r\n\r\n\t\treturn t * t * p;\r\n\r\n\t},\r\n\r\n\tb2: function ( t, p0, p1, p2 ) {\r\n\r\n\t\treturn this.b2p0( t, p0 ) + this.b2p1( t, p1 ) + this.b2p2( t, p2 );\r\n\r\n\t},\r\n\r\n\t// Cubic Bezier Functions\r\n\r\n\tb3p0: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * k * p;\r\n\r\n\t},\r\n\r\n\tb3p1: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn 3 * k * k * t * p;\r\n\r\n\t},\r\n\r\n\tb3p2: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn 3 * k * t * t * p;\r\n\r\n\t},\r\n\r\n\tb3p3: function ( t, p ) {\r\n\r\n\t\treturn t * t * t * p;\r\n\r\n\t},\r\n\r\n\tb3: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn this.b3p0( t, p0 ) + this.b3p1( t, p1 ) + this.b3p2( t, p2 ) +  this.b3p3( t, p3 );\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\nTHREE.AnimationHandler = (function() {\r\n\r\n\tvar playing = [];\r\n\tvar library = {};\r\n\tvar that    = {};\r\n\r\n\r\n\t//--- update ---\r\n\r\n\tthat.update = function( deltaTimeMS ) {\r\n\r\n\t\tfor( var i = 0; i < playing.length; i ++ )\r\n\t\t\tplaying[ i ].update( deltaTimeMS );\r\n\r\n\t};\r\n\r\n\r\n\t//--- add ---\r\n\r\n\tthat.addToUpdate = function( animation ) {\r\n\r\n\t\tif ( playing.indexOf( animation ) === -1 )\r\n\t\t\tplaying.push( animation );\r\n\r\n\t};\r\n\r\n\r\n\t//--- remove ---\r\n\r\n\tthat.removeFromUpdate = function( animation ) {\r\n\r\n\t\tvar index = playing.indexOf( animation );\r\n\r\n\t\tif( index !== -1 )\r\n\t\t\tplaying.splice( index, 1 );\r\n\r\n\t};\r\n\r\n\r\n\t//--- add ---\r\n\r\n\tthat.add = function( data ) {\r\n\r\n\t\tif ( library[ data.name ] !== undefined )\r\n\t\t\tconsole.log( \"THREE.AnimationHandler.add: Warning! \" + data.name + \" already exists in library. Overwriting.\" );\r\n\r\n\t\tlibrary[ data.name ] = data;\r\n\t\tinitData( data );\r\n\r\n\t};\r\n\r\n\r\n\t//--- get ---\r\n\r\n\tthat.get = function( name ) {\r\n\r\n\t\tif ( typeof name === \"string\" ) {\r\n\r\n\t\t\tif ( library[ name ] ) {\r\n\r\n\t\t\t\treturn library[ name ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.log( \"THREE.AnimationHandler.get: Couldn't find animation \" + name );\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// todo: add simple tween library\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//--- parse ---\r\n\r\n\tthat.parse = function( root ) {\r\n\r\n\t\t// setup hierarchy\r\n\r\n\t\tvar hierarchy = [];\r\n\r\n\t\tif ( root instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\tfor( var b = 0; b < root.bones.length; b++ ) {\r\n\r\n\t\t\t\thierarchy.push( root.bones[ b ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tparseRecurseHierarchy( root, hierarchy );\r\n\r\n\t\t}\r\n\r\n\t\treturn hierarchy;\r\n\r\n\t};\r\n\r\n\tvar parseRecurseHierarchy = function( root, hierarchy ) {\r\n\r\n\t\thierarchy.push( root );\r\n\r\n\t\tfor( var c = 0; c < root.children.length; c++ )\r\n\t\t\tparseRecurseHierarchy( root.children[ c ], hierarchy );\r\n\r\n\t}\r\n\r\n\r\n\t//--- init data ---\r\n\r\n\tvar initData = function( data ) {\r\n\r\n\t\tif( data.initialized === true )\r\n\t\t\treturn;\r\n\r\n\r\n\t\t// loop through all keys\r\n\r\n\t\tfor( var h = 0; h < data.hierarchy.length; h ++ ) {\r\n\r\n\t\t\tfor( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\t// remove minus times\r\n\r\n\t\t\t\tif( data.hierarchy[ h ].keys[ k ].time < 0 )\r\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].time = 0;\r\n\r\n\r\n\t\t\t\t// create quaternions\r\n\r\n\t\t\t\tif( data.hierarchy[ h ].keys[ k ].rot !== undefined &&\r\n\t\t\t\t !( data.hierarchy[ h ].keys[ k ].rot instanceof THREE.Quaternion ) ) {\r\n\r\n\t\t\t\t\tvar quat = data.hierarchy[ h ].keys[ k ].rot;\r\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].rot = new THREE.Quaternion( quat[0], quat[1], quat[2], quat[3] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// prepare morph target keys\r\n\r\n\t\t\tif( data.hierarchy[ h ].keys.length && data.hierarchy[ h ].keys[ 0 ].morphTargets !== undefined ) {\r\n\r\n\t\t\t\t// get all used\r\n\r\n\t\t\t\tvar usedMorphTargets = {};\r\n\r\n\t\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\t\tfor ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphTargetName = data.hierarchy[ h ].keys[ k ].morphTargets[ m ];\r\n\t\t\t\t\t\tusedMorphTargets[ morphTargetName ] = -1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdata.hierarchy[ h ].usedMorphTargets = usedMorphTargets;\r\n\r\n\r\n\t\t\t\t// set all used on all frames\r\n\r\n\t\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\t\tvar influences = {};\r\n\r\n\t\t\t\t\tfor ( var morphTargetName in usedMorphTargets ) {\r\n\r\n\t\t\t\t\t\tfor ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( data.hierarchy[ h ].keys[ k ].morphTargets[ m ] === morphTargetName ) {\r\n\r\n\t\t\t\t\t\t\t\tinfluences[ morphTargetName ] = data.hierarchy[ h ].keys[ k ].morphTargetsInfluences[ m ];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( m === data.hierarchy[ h ].keys[ k ].morphTargets.length ) {\r\n\r\n\t\t\t\t\t\t\tinfluences[ morphTargetName ] = 0;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].morphTargetsInfluences = influences;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// remove all keys that are on the same time\r\n\r\n\t\t\tfor ( var k = 1; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\tif ( data.hierarchy[ h ].keys[ k ].time === data.hierarchy[ h ].keys[ k - 1 ].time ) {\r\n\r\n\t\t\t\t\tdata.hierarchy[ h ].keys.splice( k, 1 );\r\n\t\t\t\t\tk --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// set index\r\n\r\n\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\tdata.hierarchy[ h ].keys[ k ].index = k;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// JIT\r\n\r\n\t\tvar lengthInFrames = parseInt( data.length * data.fps, 10 );\r\n\r\n\t\tdata.JIT = {};\r\n\t\tdata.JIT.hierarchy = [];\r\n\r\n\t\tfor( var h = 0; h < data.hierarchy.length; h ++ )\r\n\t\t\tdata.JIT.hierarchy.push( new Array( lengthInFrames ) );\r\n\r\n\r\n\t\t// done\r\n\r\n\t\tdata.initialized = true;\r\n\r\n\t};\r\n\r\n\r\n\t// interpolation types\r\n\r\n\tthat.LINEAR = 0;\r\n\tthat.CATMULLROM = 1;\r\n\tthat.CATMULLROM_FORWARD = 2;\r\n\r\n\treturn that;\r\n\r\n}());\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Animation = function ( root, name, interpolationType ) {\r\n\r\n\tthis.root = root;\r\n\tthis.data = THREE.AnimationHandler.get( name );\r\n\tthis.hierarchy = THREE.AnimationHandler.parse( root );\r\n\r\n\tthis.currentTime = 0;\r\n\tthis.timeScale = 1;\r\n\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused = true;\r\n\tthis.loop = true;\r\n\r\n\tthis.interpolationType = interpolationType !== undefined ? interpolationType : THREE.AnimationHandler.LINEAR;\r\n\r\n\tthis.points = [];\r\n\tthis.target = new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Animation.prototype.play = function ( loop, startTimeMS ) {\r\n\r\n\tif ( this.isPlaying === false ) {\r\n\r\n\t\tthis.isPlaying = true;\r\n\t\tthis.loop = loop !== undefined ? loop : true;\r\n\t\tthis.currentTime = startTimeMS !== undefined ? startTimeMS : 0;\r\n\r\n\t\t// reset key cache\r\n\r\n\t\tvar h, hl = this.hierarchy.length,\r\n\t\t\tobject;\r\n\r\n\t\tfor ( h = 0; h < hl; h ++ ) {\r\n\r\n\t\t\tobject = this.hierarchy[ h ];\r\n\r\n\t\t\tif ( this.interpolationType !== THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.matrixAutoUpdate = true;\r\n\r\n\t\t\tif ( object.animationCache === undefined ) {\r\n\r\n\t\t\t\tobject.animationCache = {};\r\n\t\t\t\tobject.animationCache.prevKey = { pos: 0, rot: 0, scl: 0 };\r\n\t\t\t\tobject.animationCache.nextKey = { pos: 0, rot: 0, scl: 0 };\r\n\t\t\t\tobject.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar prevKey = object.animationCache.prevKey;\r\n\t\t\tvar nextKey = object.animationCache.nextKey;\r\n\r\n\t\t\tprevKey.pos = this.data.hierarchy[ h ].keys[ 0 ];\r\n\t\t\tprevKey.rot = this.data.hierarchy[ h ].keys[ 0 ];\r\n\t\t\tprevKey.scl = this.data.hierarchy[ h ].keys[ 0 ];\r\n\r\n\t\t\tnextKey.pos = this.getNextKeyWith( \"pos\", h, 1 );\r\n\t\t\tnextKey.rot = this.getNextKeyWith( \"rot\", h, 1 );\r\n\t\t\tnextKey.scl = this.getNextKeyWith( \"scl\", h, 1 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.update( 0 );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = false;\r\n\r\n\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n};\r\n\r\n\r\nTHREE.Animation.prototype.pause = function() {\r\n\r\n\tif ( this.isPaused === true ) {\r\n\r\n\t\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n\t} else {\r\n\r\n\t\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = !this.isPaused;\r\n\r\n};\r\n\r\n\r\nTHREE.Animation.prototype.stop = function() {\r\n\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused  = false;\r\n\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n};\r\n\r\n\r\nTHREE.Animation.prototype.update = function ( deltaTimeMS ) {\r\n\r\n\t// early out\r\n\r\n\tif ( this.isPlaying === false ) return;\r\n\r\n\r\n\t// vars\r\n\r\n\tvar types = [ \"pos\", \"rot\", \"scl\" ];\r\n\tvar type;\r\n\tvar scale;\r\n\tvar vector;\r\n\tvar prevXYZ, nextXYZ;\r\n\tvar prevKey, nextKey;\r\n\tvar object;\r\n\tvar animationCache;\r\n\tvar frame;\r\n\tvar JIThierarchy = this.data.JIT.hierarchy;\r\n\tvar currentTime, unloopedCurrentTime;\r\n\tvar currentPoint, forwardPoint, angle;\r\n\r\n\r\n\tthis.currentTime += deltaTimeMS * this.timeScale;\r\n\r\n\tunloopedCurrentTime = this.currentTime;\r\n\tcurrentTime = this.currentTime = this.currentTime % this.data.length;\r\n\tframe = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );\r\n\r\n\r\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {\r\n\r\n\t\tobject = this.hierarchy[ h ];\r\n\t\tanimationCache = object.animationCache;\r\n\r\n\t\t// loop through pos/rot/scl\r\n\r\n\t\tfor ( var t = 0; t < 3; t ++ ) {\r\n\r\n\t\t\t// get keys\r\n\r\n\t\t\ttype    = types[ t ];\r\n\t\t\tprevKey = animationCache.prevKey[ type ];\r\n\t\t\tnextKey = animationCache.nextKey[ type ];\r\n\r\n\t\t\t// switch keys?\r\n\r\n\t\t\tif ( nextKey.time <= unloopedCurrentTime ) {\r\n\r\n\t\t\t\t// did we loop?\r\n\r\n\t\t\t\tif ( currentTime < unloopedCurrentTime ) {\r\n\r\n\t\t\t\t\tif ( this.loop ) {\r\n\r\n\t\t\t\t\t\tprevKey = this.data.hierarchy[ h ].keys[ 0 ];\r\n\t\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, 1 );\r\n\r\n\t\t\t\t\t\twhile( nextKey.time < currentTime ) {\r\n\r\n\t\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.stop();\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdo {\r\n\r\n\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );\r\n\r\n\t\t\t\t\t} while( nextKey.time < currentTime )\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimationCache.prevKey[ type ] = prevKey;\r\n\t\t\t\tanimationCache.nextKey[ type ] = nextKey;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tobject.matrixAutoUpdate = true;\r\n\t\t\tobject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\tscale = ( currentTime - prevKey.time ) / ( nextKey.time - prevKey.time );\r\n\t\t\tprevXYZ = prevKey[ type ];\r\n\t\t\tnextXYZ = nextKey[ type ];\r\n\r\n\r\n\t\t\t// check scale error\r\n\r\n\t\t\tif ( scale < 0 || scale > 1 ) {\r\n\r\n\t\t\t\tconsole.log( \"THREE.Animation.update: Warning! Scale out of bounds:\" + scale + \" on bone \" + h );\r\n\t\t\t\tscale = scale < 0 ? 0 : 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// interpolate\r\n\r\n\t\t\tif ( type === \"pos\" ) {\r\n\r\n\t\t\t\tvector = object.position;\r\n\r\n\t\t\t\tif ( this.interpolationType === THREE.AnimationHandler.LINEAR ) {\r\n\r\n\t\t\t\t\tvector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;\r\n\t\t\t\t\tvector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;\r\n\t\t\t\t\tvector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;\r\n\r\n\t\t\t\t} else if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\r\n\t\t\t\t\t\t    this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\t\t\t\tthis.points[ 0 ] = this.getPrevKeyWith( \"pos\", h, prevKey.index - 1 )[ \"pos\" ];\r\n\t\t\t\t\tthis.points[ 1 ] = prevXYZ;\r\n\t\t\t\t\tthis.points[ 2 ] = nextXYZ;\r\n\t\t\t\t\tthis.points[ 3 ] = this.getNextKeyWith( \"pos\", h, nextKey.index + 1 )[ \"pos\" ];\r\n\r\n\t\t\t\t\tscale = scale * 0.33 + 0.33;\r\n\r\n\t\t\t\t\tcurrentPoint = this.interpolateCatmullRom( this.points, scale );\r\n\r\n\t\t\t\t\tvector.x = currentPoint[ 0 ];\r\n\t\t\t\t\tvector.y = currentPoint[ 1 ];\r\n\t\t\t\t\tvector.z = currentPoint[ 2 ];\r\n\r\n\t\t\t\t\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\t\t\t\t\tforwardPoint = this.interpolateCatmullRom( this.points, scale * 1.01 );\r\n\r\n\t\t\t\t\t\tthis.target.set( forwardPoint[ 0 ], forwardPoint[ 1 ], forwardPoint[ 2 ] );\r\n\t\t\t\t\t\tthis.target.sub( vector );\r\n\t\t\t\t\t\tthis.target.y = 0;\r\n\t\t\t\t\t\tthis.target.normalize();\r\n\r\n\t\t\t\t\t\tangle = Math.atan2( this.target.x, this.target.z );\r\n\t\t\t\t\t\tobject.rotation.set( 0, angle, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( type === \"rot\" ) {\r\n\r\n\t\t\t\tTHREE.Quaternion.slerp( prevXYZ, nextXYZ, object.quaternion, scale );\r\n\r\n\t\t\t} else if ( type === \"scl\" ) {\r\n\r\n\t\t\t\tvector = object.scale;\r\n\r\n\t\t\t\tvector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;\r\n\t\t\t\tvector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;\r\n\t\t\t\tvector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Catmull-Rom spline\r\n\r\nTHREE.Animation.prototype.interpolateCatmullRom = function ( points, scale ) {\r\n\r\n\tvar c = [], v3 = [],\r\n\tpoint, intPoint, weight, w2, w3,\r\n\tpa, pb, pc, pd;\r\n\r\n\tpoint = ( points.length - 1 ) * scale;\r\n\tintPoint = Math.floor( point );\r\n\tweight = point - intPoint;\r\n\r\n\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\tc[ 1 ] = intPoint;\r\n\tc[ 2 ] = intPoint > points.length - 2 ? intPoint : intPoint + 1;\r\n\tc[ 3 ] = intPoint > points.length - 3 ? intPoint : intPoint + 2;\r\n\r\n\tpa = points[ c[ 0 ] ];\r\n\tpb = points[ c[ 1 ] ];\r\n\tpc = points[ c[ 2 ] ];\r\n\tpd = points[ c[ 3 ] ];\r\n\r\n\tw2 = weight * weight;\r\n\tw3 = weight * w2;\r\n\r\n\tv3[ 0 ] = this.interpolate( pa[ 0 ], pb[ 0 ], pc[ 0 ], pd[ 0 ], weight, w2, w3 );\r\n\tv3[ 1 ] = this.interpolate( pa[ 1 ], pb[ 1 ], pc[ 1 ], pd[ 1 ], weight, w2, w3 );\r\n\tv3[ 2 ] = this.interpolate( pa[ 2 ], pb[ 2 ], pc[ 2 ], pd[ 2 ], weight, w2, w3 );\r\n\r\n\treturn v3;\r\n\r\n};\r\n\r\nTHREE.Animation.prototype.interpolate = function ( p0, p1, p2, p3, t, t2, t3 ) {\r\n\r\n\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\r\n\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n};\r\n\r\n\r\n\r\n// Get next key with\r\n\r\nTHREE.Animation.prototype.getNextKeyWith = function ( type, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\r\n\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\r\n\t\t this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\tkey = key < keys.length - 1 ? key : keys.length - 1;\r\n\r\n\t} else {\r\n\r\n\t\tkey = key % keys.length;\r\n\r\n\t}\r\n\r\n\tfor ( ; key < keys.length; key++ ) {\r\n\r\n\t\tif ( keys[ key ][ type ] !== undefined ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn this.data.hierarchy[ h ].keys[ 0 ];\r\n\r\n};\r\n\r\n// Get previous key with\r\n\r\nTHREE.Animation.prototype.getPrevKeyWith = function ( type, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\r\n\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\r\n\t\t this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\tkey = key > 0 ? key : 0;\r\n\r\n\t} else {\r\n\r\n\t\tkey = key >= 0 ? key : key + keys.length;\r\n\r\n\t}\r\n\r\n\r\n\tfor ( ; key >= 0; key -- ) {\r\n\r\n\t\tif ( keys[ key ][ type ] !== undefined ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn this.data.hierarchy[ h ].keys[ keys.length - 1 ];\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author khang duong\r\n * @author erik kitson\r\n */\r\n\r\nTHREE.KeyFrameAnimation = function( root, data, JITCompile ) {\r\n\r\n\tthis.root = root;\r\n\tthis.data = THREE.AnimationHandler.get( data );\r\n\tthis.hierarchy = THREE.AnimationHandler.parse( root );\r\n\tthis.currentTime = 0;\r\n\tthis.timeScale = 0.001;\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused = true;\r\n\tthis.loop = true;\r\n\tthis.JITCompile = JITCompile !== undefined ? JITCompile : true;\r\n\r\n\t// initialize to first keyframes\r\n\r\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\r\n\r\n\t\tvar keys = this.data.hierarchy[h].keys,\r\n\t\t\tsids = this.data.hierarchy[h].sids,\r\n\t\t\tobj = this.hierarchy[h];\r\n\r\n\t\tif ( keys.length && sids ) {\r\n\r\n\t\t\tfor ( var s = 0; s < sids.length; s++ ) {\r\n\r\n\t\t\t\tvar sid = sids[ s ],\r\n\t\t\t\t\tnext = this.getNextKeyWith( sid, h, 0 );\r\n\r\n\t\t\t\tif ( next ) {\r\n\r\n\t\t\t\t\tnext.apply( sid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobj.matrixAutoUpdate = false;\r\n\t\t\tthis.data.hierarchy[h].node.updateMatrix();\r\n\t\t\tobj.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Play\r\n\r\nTHREE.KeyFrameAnimation.prototype.play = function( loop, startTimeMS ) {\r\n\r\n\tif( !this.isPlaying ) {\r\n\r\n\t\tthis.isPlaying = true;\r\n\t\tthis.loop = loop !== undefined ? loop : true;\r\n\t\tthis.currentTime = startTimeMS !== undefined ? startTimeMS : 0;\r\n\t\tthis.startTimeMs = startTimeMS;\r\n\t\tthis.startTime = 10000000;\r\n\t\tthis.endTime = -this.startTime;\r\n\r\n\r\n\t\t// reset key cache\r\n\r\n\t\tvar h, hl = this.hierarchy.length,\r\n\t\t\tobject,\r\n\t\t\tnode;\r\n\r\n\t\tfor ( h = 0; h < hl; h++ ) {\r\n\r\n\t\t\tobject = this.hierarchy[ h ];\r\n\t\t\tnode = this.data.hierarchy[ h ];\r\n\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\tif ( node.animationCache === undefined ) {\r\n\r\n\t\t\t\tnode.animationCache = {};\r\n\t\t\t\tnode.animationCache.prevKey = null;\r\n\t\t\t\tnode.animationCache.nextKey = null;\r\n\t\t\t\tnode.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar keys = this.data.hierarchy[h].keys;\r\n\r\n\t\t\tif (keys.length) {\r\n\r\n\t\t\t\tnode.animationCache.prevKey = keys[ 0 ];\r\n\t\t\t\tnode.animationCache.nextKey = keys[ 1 ];\r\n\r\n\t\t\t\tthis.startTime = Math.min( keys[0].time, this.startTime );\r\n\t\t\t\tthis.endTime = Math.max( keys[keys.length - 1].time, this.endTime );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.update( 0 );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = false;\r\n\r\n\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n};\r\n\r\n\r\n\r\n// Pause\r\n\r\nTHREE.KeyFrameAnimation.prototype.pause = function() {\r\n\r\n\tif( this.isPaused ) {\r\n\r\n\t\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n\t} else {\r\n\r\n\t\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = !this.isPaused;\r\n\r\n};\r\n\r\n\r\n// Stop\r\n\r\nTHREE.KeyFrameAnimation.prototype.stop = function() {\r\n\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused  = false;\r\n\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n\r\n\t// reset JIT matrix and remove cache\r\n\r\n\tfor ( var h = 0; h < this.data.hierarchy.length; h++ ) {\r\n        \r\n        var obj = this.hierarchy[ h ];\r\n\t\tvar node = this.data.hierarchy[ h ];\r\n\r\n\t\tif ( node.animationCache !== undefined ) {\r\n\r\n\t\t\tvar original = node.animationCache.originalMatrix;\r\n\r\n\t\t\tif( obj instanceof THREE.Bone ) {\r\n\r\n\t\t\t\toriginal.copy( obj.skinMatrix );\r\n\t\t\t\tobj.skinMatrix = original;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\toriginal.copy( obj.matrix );\r\n\t\t\t\tobj.matrix = original;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdelete node.animationCache;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// Update\r\n\r\nTHREE.KeyFrameAnimation.prototype.update = function( deltaTimeMS ) {\r\n\r\n\t// early out\r\n\r\n\tif( !this.isPlaying ) return;\r\n\r\n\r\n\t// vars\r\n\r\n\tvar prevKey, nextKey;\r\n\tvar object;\r\n\tvar node;\r\n\tvar frame;\r\n\tvar JIThierarchy = this.data.JIT.hierarchy;\r\n\tvar currentTime, unloopedCurrentTime;\r\n\tvar looped;\r\n\r\n\r\n\t// update\r\n\r\n\tthis.currentTime += deltaTimeMS * this.timeScale;\r\n\r\n\tunloopedCurrentTime = this.currentTime;\r\n\tcurrentTime         = this.currentTime = this.currentTime % this.data.length;\r\n\r\n\t// if looped around, the current time should be based on the startTime\r\n\tif ( currentTime < this.startTimeMs ) {\r\n\r\n\t\tcurrentTime = this.currentTime = this.startTimeMs + currentTime;\r\n\r\n\t}\r\n\r\n\tframe               = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );\r\n\tlooped \t\t\t\t= currentTime < unloopedCurrentTime;\r\n\r\n\tif ( looped && !this.loop ) {\r\n\r\n\t\t// Set the animation to the last keyframes and stop\r\n\t\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\r\n\r\n\t\t\tvar keys = this.data.hierarchy[h].keys,\r\n\t\t\t\tsids = this.data.hierarchy[h].sids,\r\n\t\t\t\tend = keys.length-1,\r\n\t\t\t\tobj = this.hierarchy[h];\r\n\r\n\t\t\tif ( keys.length ) {\r\n\r\n\t\t\t\tfor ( var s = 0; s < sids.length; s++ ) {\r\n\r\n\t\t\t\t\tvar sid = sids[ s ],\r\n\t\t\t\t\t\tprev = this.getPrevKeyWith( sid, h, end );\r\n\r\n\t\t\t\t\tif ( prev ) {\r\n\t\t\t\t\t\tprev.apply( sid );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.data.hierarchy[h].node.updateMatrix();\r\n\t\t\t\tobj.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.stop();\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\t// check pre-infinity\r\n\tif ( currentTime < this.startTime ) {\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\t// update\r\n\r\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\r\n\r\n\t\tobject = this.hierarchy[ h ];\r\n\t\tnode = this.data.hierarchy[ h ];\r\n\r\n\t\tvar keys = node.keys,\r\n\t\t\tanimationCache = node.animationCache;\r\n\r\n\t\t// use JIT?\r\n\r\n\t\tif ( this.JITCompile && JIThierarchy[ h ][ frame ] !== undefined ) {\r\n\r\n\t\t\tif( object instanceof THREE.Bone ) {\r\n\r\n\t\t\t\tobject.skinMatrix = JIThierarchy[ h ][ frame ];\r\n\t\t\t\tobject.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tobject.matrix = JIThierarchy[ h ][ frame ];\r\n\t\t\t\tobject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t// use interpolation\r\n\r\n\t\t} else if ( keys.length ) {\r\n\r\n\t\t\t// make sure so original matrix and not JIT matrix is set\r\n\r\n\t\t\tif ( this.JITCompile && animationCache ) {\r\n\r\n\t\t\t\tif( object instanceof THREE.Bone ) {\r\n\r\n\t\t\t\t\tobject.skinMatrix = animationCache.originalMatrix;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tobject.matrix = animationCache.originalMatrix;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprevKey = animationCache.prevKey;\r\n\t\t\tnextKey = animationCache.nextKey;\r\n\r\n\t\t\tif ( prevKey && nextKey ) {\r\n\r\n\t\t\t\t// switch keys?\r\n\r\n\t\t\t\tif ( nextKey.time <= unloopedCurrentTime ) {\r\n\r\n\t\t\t\t\t// did we loop?\r\n\r\n\t\t\t\t\tif ( looped && this.loop ) {\r\n\r\n\t\t\t\t\t\tprevKey = keys[ 0 ];\r\n\t\t\t\t\t\tnextKey = keys[ 1 ];\r\n\r\n\t\t\t\t\t\twhile ( nextKey.time < currentTime ) {\r\n\r\n\t\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\t\tnextKey = keys[ prevKey.index + 1 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( !looped ) {\r\n\r\n\t\t\t\t\t\tvar lastIndex = keys.length - 1;\r\n\r\n\t\t\t\t\t\twhile ( nextKey.time < currentTime && nextKey.index !== lastIndex ) {\r\n\r\n\t\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\t\tnextKey = keys[ prevKey.index + 1 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tanimationCache.prevKey = prevKey;\r\n\t\t\t\t\tanimationCache.nextKey = nextKey;\r\n\r\n\t\t\t\t}\r\n                if(nextKey.time >= currentTime)\r\n                    prevKey.interpolate( nextKey, currentTime );\r\n                else\r\n                    prevKey.interpolate( nextKey, nextKey.time);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.data.hierarchy[h].node.updateMatrix();\r\n\t\t\tobject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// update JIT?\r\n\r\n\tif ( this.JITCompile ) {\r\n\r\n\t\tif ( JIThierarchy[ 0 ][ frame ] === undefined ) {\r\n\r\n\t\t\tthis.hierarchy[ 0 ].updateMatrixWorld( true );\r\n\r\n\t\t\tfor ( var h = 0; h < this.hierarchy.length; h++ ) {\r\n\r\n\t\t\t\tif( this.hierarchy[ h ] instanceof THREE.Bone ) {\r\n\r\n\t\t\t\t\tJIThierarchy[ h ][ frame ] = this.hierarchy[ h ].skinMatrix.clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tJIThierarchy[ h ][ frame ] = this.hierarchy[ h ].matrix.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Get next key with\r\n\r\nTHREE.KeyFrameAnimation.prototype.getNextKeyWith = function( sid, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\tkey = key % keys.length;\r\n\r\n\tfor ( ; key < keys.length; key++ ) {\r\n\r\n\t\tif ( keys[ key ].hasTarget( sid ) ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn keys[ 0 ];\r\n\r\n};\r\n\r\n// Get previous key with\r\n\r\nTHREE.KeyFrameAnimation.prototype.getPrevKeyWith = function( sid, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\tkey = key >= 0 ? key : key + keys.length;\r\n\r\n\tfor ( ; key >= 0; key-- ) {\r\n\r\n\t\tif ( keys[ key ].hasTarget( sid ) ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn keys[ keys.length - 1 ];\r\n\r\n};\r\n/**\r\n * Camera for rendering cube maps\r\n *\t- renders scene into axis-aligned cube\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tvar fov = 90, aspect = 1;\r\n\r\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPX.up.set( 0, -1, 0 );\r\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\r\n\tthis.add( cameraPX );\r\n\r\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNX.up.set( 0, -1, 0 );\r\n\tcameraNX.lookAt( new THREE.Vector3( -1, 0, 0 ) );\r\n\tthis.add( cameraNX );\r\n\r\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPY.up.set( 0, 0, 1 );\r\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\r\n\tthis.add( cameraPY );\r\n\r\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNY.up.set( 0, 0, -1 );\r\n\tcameraNY.lookAt( new THREE.Vector3( 0, -1, 0 ) );\r\n\tthis.add( cameraNY );\r\n\r\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPZ.up.set( 0, -1, 0 );\r\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\r\n\tthis.add( cameraPZ );\r\n\r\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNZ.up.set( 0, -1, 0 );\r\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, -1 ) );\r\n\tthis.add( cameraNZ );\r\n\r\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );\r\n\r\n\tthis.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tvar renderTarget = this.renderTarget;\r\n\t\tvar generateMipmaps = renderTarget.generateMipmaps;\r\n\r\n\t\trenderTarget.generateMipmaps = false;\r\n\r\n\t\trenderTarget.activeCubeFace = 0;\r\n\t\trenderer.render( scene, cameraPX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 1;\r\n\t\trenderer.render( scene, cameraNX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 2;\r\n\t\trenderer.render( scene, cameraPY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 3;\r\n\t\trenderer.render( scene, cameraNY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 4;\r\n\t\trenderer.render( scene, cameraPZ, renderTarget );\r\n\r\n\t\trenderTarget.generateMipmaps = generateMipmaps;\r\n\r\n\t\trenderTarget.activeCubeFace = 5;\r\n\t\trenderer.render( scene, cameraNZ, renderTarget );\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\r\n/*\r\n *\t@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog\r\n *\r\n *\tA general perpose camera, for setting FOV, Lens Focal Length,\r\n *\t\tand switching between perspective and orthographic views easily.\r\n *\t\tUse this only if you do not wish to manage\r\n *\t\tboth a Orthographic and Perspective Camera\r\n *\r\n */\r\n\r\n\r\nTHREE.CombinedCamera = function ( width, height, fov, near, far, orthoNear, orthoFar ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.fov = fov;\r\n\r\n\tthis.left = -width / 2;\r\n\tthis.right = width / 2\r\n\tthis.top = height / 2;\r\n\tthis.bottom = -height / 2;\r\n\r\n\t// We could also handle the projectionMatrix internally, but just wanted to test nested camera objects\r\n\r\n\tthis.cameraO = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, \torthoNear, orthoFar );\r\n\tthis.cameraP = new THREE.PerspectiveCamera( fov, width / height, near, far );\r\n\r\n\tthis.zoom = 1;\r\n\r\n\tthis.toPerspective();\r\n\r\n\tvar aspect = width/height;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\r\nTHREE.CombinedCamera.prototype.toPerspective = function () {\r\n\r\n\t// Switches to the Perspective Camera\r\n\r\n\tthis.near = this.cameraP.near;\r\n\tthis.far = this.cameraP.far;\r\n\r\n\tthis.cameraP.fov =  this.fov / this.zoom ;\r\n\r\n\tthis.cameraP.updateProjectionMatrix();\r\n\r\n\tthis.projectionMatrix = this.cameraP.projectionMatrix;\r\n\r\n\tthis.inPerspectiveMode = true;\r\n\tthis.inOrthographicMode = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toOrthographic = function () {\r\n\r\n\t// Switches to the Orthographic camera estimating viewport from Perspective\r\n\r\n\tvar fov = this.fov;\r\n\tvar aspect = this.cameraP.aspect;\r\n\tvar near = this.cameraP.near;\r\n\tvar far = this.cameraP.far;\r\n\r\n\t// The size that we set is the mid plane of the viewing frustum\r\n\r\n\tvar hyperfocus = ( near + far ) / 2;\r\n\r\n\tvar halfHeight = Math.tan( fov / 2 ) * hyperfocus;\r\n\tvar planeHeight = 2 * halfHeight;\r\n\tvar planeWidth = planeHeight * aspect;\r\n\tvar halfWidth = planeWidth / 2;\r\n\r\n\thalfHeight /= this.zoom;\r\n\thalfWidth /= this.zoom;\r\n\r\n\tthis.cameraO.left = -halfWidth;\r\n\tthis.cameraO.right = halfWidth;\r\n\tthis.cameraO.top = halfHeight;\r\n\tthis.cameraO.bottom = -halfHeight;\r\n\r\n\t// this.cameraO.left = -farHalfWidth;\r\n\t// this.cameraO.right = farHalfWidth;\r\n\t// this.cameraO.top = farHalfHeight;\r\n\t// this.cameraO.bottom = -farHalfHeight;\r\n\r\n\t// this.cameraO.left = this.left / this.zoom;\r\n\t// this.cameraO.right = this.right / this.zoom;\r\n\t// this.cameraO.top = this.top / this.zoom;\r\n\t// this.cameraO.bottom = this.bottom / this.zoom;\r\n\r\n\tthis.cameraO.updateProjectionMatrix();\r\n\r\n\tthis.near = this.cameraO.near;\r\n\tthis.far = this.cameraO.far;\r\n\tthis.projectionMatrix = this.cameraO.projectionMatrix;\r\n\r\n\tthis.inPerspectiveMode = false;\r\n\tthis.inOrthographicMode = true;\r\n\r\n};\r\n\r\n\r\nTHREE.CombinedCamera.prototype.setSize = function( width, height ) {\r\n\r\n\tthis.cameraP.aspect = width / height;\r\n\tthis.left = -width / 2;\r\n\tthis.right = width / 2\r\n\tthis.top = height / 2;\r\n\tthis.bottom = -height / 2;\r\n\r\n};\r\n\r\n\r\nTHREE.CombinedCamera.prototype.setFov = function( fov ) {\r\n\r\n\tthis.fov = fov;\r\n\r\n\tif ( this.inPerspectiveMode ) {\r\n\r\n\t\tthis.toPerspective();\r\n\r\n\t} else {\r\n\r\n\t\tthis.toOrthographic();\r\n\r\n\t}\r\n\r\n};\r\n\r\n// For mantaining similar API with PerspectiveCamera\r\n\r\nTHREE.CombinedCamera.prototype.updateProjectionMatrix = function() {\r\n\r\n\tif ( this.inPerspectiveMode ) {\r\n\r\n\t\tthis.toPerspective();\r\n\r\n\t} else {\r\n\r\n\t\tthis.toPerspective();\r\n\t\tthis.toOrthographic();\r\n\r\n\t}\r\n\r\n};\r\n\r\n/*\r\n* Uses Focal Length (in mm) to estimate and set FOV\r\n* 35mm (fullframe) camera is used if frame size is not specified;\r\n* Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\r\n*/\r\nTHREE.CombinedCamera.prototype.setLens = function ( focalLength, frameHeight ) {\r\n\r\n\tif ( frameHeight === undefined ) frameHeight = 24;\r\n\r\n\tvar fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\r\n\r\n\tthis.setFov( fov );\r\n\r\n\treturn fov;\r\n};\r\n\r\n\r\nTHREE.CombinedCamera.prototype.setZoom = function( zoom ) {\r\n\r\n\tthis.zoom = zoom;\r\n\r\n\tif ( this.inPerspectiveMode ) {\r\n\r\n\t\tthis.toPerspective();\r\n\r\n\t} else {\r\n\r\n\t\tthis.toOrthographic();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toFrontView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = 0;\r\n\tthis.rotation.z = 0;\r\n\r\n\t// should we be modifing the matrix instead?\r\n\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toBackView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = Math.PI;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toLeftView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = - Math.PI / 2;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toRightView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = Math.PI / 2;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toTopView = function() {\r\n\r\n\tthis.rotation.x = - Math.PI / 2;\r\n\tthis.rotation.y = 0;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toBottomView = function() {\r\n\r\n\tthis.rotation.x = Math.PI / 2;\r\n\tthis.rotation.y = 0;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- 3d asterisk shape (for line pieces THREE.Line)\r\n */\r\n\r\nTHREE.AsteriskGeometry = function ( innerRadius, outerRadius ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar sd = innerRadius;\r\n\tvar ed = outerRadius;\r\n\r\n\tvar sd2 = 0.707 * sd;\r\n\tvar ed2 = 0.707 * ed;\r\n\r\n\tvar rays = [ [ sd, 0, 0 ], [ ed, 0, 0 ], [ -sd, 0, 0 ], [ -ed, 0, 0 ],\r\n\t\t\t\t [ 0, sd, 0 ], [ 0, ed, 0 ], [ 0, -sd, 0 ], [ 0, -ed, 0 ],\r\n\t\t\t\t [ 0, 0, sd ], [ 0, 0, ed ], [ 0, 0, -sd ], [ 0, 0, -ed ],\r\n\t\t\t\t [ sd2, sd2, 0 ], [ ed2, ed2, 0 ], [ -sd2, -sd2, 0 ], [ -ed2, -ed2, 0 ],\r\n\t\t\t\t [ sd2, -sd2, 0 ], [ ed2, -ed2, 0 ], [ -sd2, sd2, 0 ], [ -ed2, ed2, 0 ],\r\n\t\t\t\t [ sd2, 0, sd2 ], [ ed2, 0, ed2 ], [ -sd2, 0, -sd2 ], [ -ed2, 0, -ed2 ],\r\n\t\t\t\t [ sd2, 0, -sd2 ], [ ed2, 0, -ed2 ], [ -sd2, 0, sd2 ], [ -ed2, 0, ed2 ],\r\n\t\t\t\t [ 0, sd2, sd2 ], [ 0, ed2, ed2 ], [ 0, -sd2, -sd2 ], [ 0, -ed2, -ed2 ],\r\n\t\t\t\t [ 0, sd2, -sd2 ], [ 0, ed2, -ed2 ], [ 0, -sd2, sd2 ], [ 0, -ed2, ed2 ]\r\n\t];\r\n\r\n\tfor ( var i = 0, il = rays.length; i < il; i ++ ) {\r\n\r\n\t\tvar x = rays[ i ][ 0 ];\r\n\t\tvar y = rays[ i ][ 1 ];\r\n\t\tvar z = rays[ i ][ 2 ];\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.AsteriskGeometry.prototype = Object.create( THREE.Geometry.prototype );/**\r\n * @author hughes\r\n */\r\n\r\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n    THREE.Geometry.call( this );\r\n\r\n    radius = radius || 50;\r\n\r\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n    segments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n    var i, uvs = [],\r\n    center = new THREE.Vector3(), centerUV = new THREE.Vector2( 0.5, 0.5 );\r\n\r\n    this.vertices.push(center);\r\n    uvs.push( centerUV );\r\n\r\n    for ( i = 0; i <= segments; i ++ ) {\r\n\r\n        var vertex = new THREE.Vector3();\r\n\r\n        vertex.x = radius * Math.cos( thetaStart + i / segments * thetaLength );\r\n        vertex.y = radius * Math.sin( thetaStart + i / segments * thetaLength );\r\n\r\n        this.vertices.push( vertex );\r\n        uvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, - ( vertex.y / radius + 1 ) / 2 + 1 ) );\r\n\r\n    }\r\n\r\n    var n = new THREE.Vector3( 0, 0, -1 );\r\n\r\n    for ( i = 1; i <= segments; i ++ ) {\r\n\r\n        var v1 = i;\r\n        var v2 = i + 1 ;\r\n        var v3 = 0;\r\n\r\n        this.faces.push( new THREE.Face3( v1, v2, v3, [ n, n, n ] ) );\r\n        this.faceVertexUvs[ 0 ].push( [ uvs[ i ], uvs[ i + 1 ], centerUV ] );\r\n\r\n    }\r\n\r\n    this.computeCentroids();\r\n    this.computeFaceNormals();\r\n\r\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\r\n */\r\n\r\nTHREE.CubeGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\tthis.depth = depth;\r\n\r\n\tthis.widthSegments = widthSegments || 1;\r\n\tthis.heightSegments = heightSegments || 1;\r\n\tthis.depthSegments = depthSegments || 1;\r\n\r\n\tvar width_half = this.width / 2;\r\n\tvar height_half = this.height / 2;\r\n\tvar depth_half = this.depth / 2;\r\n\r\n\tbuildPlane( 'z', 'y', - 1, - 1, this.depth, this.height, width_half, 0 ); // px\r\n\tbuildPlane( 'z', 'y',   1, - 1, this.depth, this.height, - width_half, 1 ); // nx\r\n\tbuildPlane( 'x', 'z',   1,   1, this.width, this.depth, height_half, 2 ); // py\r\n\tbuildPlane( 'x', 'z',   1, - 1, this.width, this.depth, - height_half, 3 ); // ny\r\n\tbuildPlane( 'x', 'y',   1, - 1, this.width, this.height, depth_half, 4 ); // pz\r\n\tbuildPlane( 'x', 'y', - 1, - 1, this.width, this.height, - depth_half, 5 ); // nz\r\n\r\n\tfunction buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {\r\n\r\n\t\tvar w, ix, iy,\r\n\t\tgridX = scope.widthSegments,\r\n\t\tgridY = scope.heightSegments,\r\n\t\twidth_half = width / 2,\r\n\t\theight_half = height / 2,\r\n\t\toffset = scope.vertices.length;\r\n\r\n\t\tif ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {\r\n\r\n\t\t\tw = 'z';\r\n\r\n\t\t} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {\r\n\r\n\t\t\tw = 'y';\r\n\t\t\tgridY = scope.depthSegments;\r\n\r\n\t\t} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {\r\n\r\n\t\t\tw = 'x';\r\n\t\t\tgridX = scope.depthSegments;\r\n\r\n\t\t}\r\n\r\n\t\tvar gridX1 = gridX + 1,\r\n\t\tgridY1 = gridY + 1,\r\n\t\tsegment_width = width / gridX,\r\n\t\tsegment_height = height / gridY,\r\n\t\tnormal = new THREE.Vector3();\r\n\r\n\t\tnormal[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar vector = new THREE.Vector3();\r\n\t\t\t\tvector[ u ] = ( ix * segment_width - width_half ) * udir;\r\n\t\t\t\tvector[ v ] = ( iy * segment_height - height_half ) * vdir;\r\n\t\t\t\tvector[ w ] = depth;\r\n\r\n\t\t\t\tscope.vertices.push( vector );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix++ ) {\r\n\r\n\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\tvar face = new THREE.Face4( a + offset, b + offset, c + offset, d + offset );\r\n\t\t\t\tface.normal.copy( normal );\r\n\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone(), normal.clone() );\r\n\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t\tscope.faces.push( face );\r\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - iy / gridY ),\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY ),\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1- ( iy + 1 ) / gridY ),\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY )\r\n\t\t\t\t\t\t] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.CubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\r\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\r\n\theight = height !== undefined ? height : 100;\r\n\r\n\tvar heightHalf = height / 2;\r\n\tvar segmentsX = radiusSegments || 8;\r\n\tvar segmentsY = heightSegments || 1;\r\n\r\n\tvar x, y, vertices = [], uvs = [];\r\n\r\n\tfor ( y = 0; y <= segmentsY; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\t\tvar uvsRow = [];\r\n\r\n\t\tvar v = y / segmentsY;\r\n\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\tfor ( x = 0; x <= segmentsX; x ++ ) {\r\n\r\n\t\t\tvar u = x / segmentsX;\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = radius * Math.sin( u * Math.PI * 2 );\r\n\t\t\tvertex.y = - v * height + heightHalf;\r\n\t\t\tvertex.z = radius * Math.cos( u * Math.PI * 2 );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tverticesRow.push( this.vertices.length - 1 );\r\n\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\t\tuvs.push( uvsRow );\r\n\r\n\t}\r\n\r\n\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\r\n\tvar na, nb;\r\n\r\n\tfor ( x = 0; x < segmentsX; x ++ ) {\r\n\r\n\t\tif ( radiusTop !== 0 ) {\r\n\r\n\t\t\tna = this.vertices[ vertices[ 0 ][ x ] ].clone();\r\n\t\t\tnb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tna = this.vertices[ vertices[ 1 ][ x ] ].clone();\r\n\t\t\tnb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tna.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();\r\n\t\tnb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();\r\n\r\n\t\tfor ( y = 0; y < segmentsY; y ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x ];\r\n\t\t\tvar v2 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x + 1 ];\r\n\t\t\tvar v4 = vertices[ y ][ x + 1 ];\r\n\r\n\t\t\tvar n1 = na.clone();\r\n\t\t\tvar n2 = na.clone();\r\n\t\t\tvar n3 = nb.clone();\r\n\t\t\tvar n4 = nb.clone();\r\n\r\n\t\t\tvar uv1 = uvs[ y ][ x ].clone();\r\n\t\t\tvar uv2 = uvs[ y + 1 ][ x ].clone();\r\n\t\t\tvar uv3 = uvs[ y + 1 ][ x + 1 ].clone();\r\n\t\t\tvar uv4 = uvs[ y ][ x + 1 ].clone();\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( v1, v2, v3, v4, [ n1, n2, n3, n4 ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3, uv4 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// top cap\r\n\r\n\tif ( !openEnded && radiusTop > 0 ) {\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );\r\n\r\n\t\tfor ( x = 0; x < segmentsX; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ 0 ][ x ];\r\n\t\t\tvar v2 = vertices[ 0 ][ x + 1 ];\r\n\t\t\tvar v3 = this.vertices.length - 1;\r\n\r\n\t\t\tvar n1 = new THREE.Vector3( 0, 1, 0 );\r\n\t\t\tvar n2 = new THREE.Vector3( 0, 1, 0 );\r\n\t\t\tvar n3 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\t\tvar uv1 = uvs[ 0 ][ x ].clone();\r\n\t\t\tvar uv2 = uvs[ 0 ][ x + 1 ].clone();\r\n\t\t\tvar uv3 = new THREE.Vector2( uv2.u, 0 );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// bottom cap\r\n\r\n\tif ( !openEnded && radiusBottom > 0 ) {\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );\r\n\r\n\t\tfor ( x = 0; x < segmentsX; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\tvar v3 = this.vertices.length - 1;\r\n\r\n\t\t\tvar n1 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\t\tvar n2 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\t\tvar n3 = new THREE.Vector3( 0, - 1, 0 );\r\n\r\n\t\t\tvar uv1 = uvs[ y ][ x + 1 ].clone();\r\n\t\t\tvar uv2 = uvs[ y ][ x ].clone();\r\n\t\t\tvar uv3 = new THREE.Vector2( uv2.u, 1 );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n}\r\n\r\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n * Creates extruded geometry from a path shape.\r\n *\r\n * parameters = {\r\n *\r\n *  size: <float>, // size of the text\r\n *  height: <float>, // thickness to extrude text\r\n *  curveSegments: <int>, // number of points on the curves\r\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segements of extrude spline too\r\n *  amount: <int>, // Amount\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into text bevel goes\r\n *  bevelSize: <float>, // how far from text outline is bevel\r\n *  bevelSegments: <int>, // number of bevel layers\r\n *\r\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\r\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\r\n *\r\n *  material: <int> // material index for front and back faces\r\n *  extrudeMaterial: <int> // material index for extrusion and beveled faces\r\n *  uvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\r\n\r\n\tif ( typeof( shapes ) === \"undefined\" ) {\r\n\t\tshapes = [];\r\n\t\treturn;\r\n\t}\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tshapes = shapes instanceof Array ? shapes : [ shapes ];\r\n\r\n\tthis.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n\t// can't really use automatic vertex normals\r\n\t// as then front and back sides get smoothed too\r\n\t// should do separate smoothing just for sides\r\n\r\n\t//this.computeVertexNormals();\r\n\r\n\t//console.log( \"took\", ( Date.now() - startTime ) );\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\tvar sl = shapes.length;\r\n\r\n\tfor ( var s = 0; s < sl; s ++ ) {\r\n\t\tvar shape = shapes[ s ];\r\n\t\tthis.addShape( shape, options );\r\n\t}\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tvar amount = options.amount !== undefined ? options.amount : 100;\r\n\r\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\r\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\r\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\r\n\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\r\n\tvar extrudePath = options.extrudePath;\r\n\tvar extrudePts, extrudeByPath = false;\r\n\r\n\tvar material = options.material;\r\n\tvar extrudeMaterial = options.extrudeMaterial;\r\n\r\n\t// Use default WorldUVGenerator if no UV generators are specified.\r\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\r\n\r\n\tvar shapebb = this.shapebb;\r\n\t//shapebb = shape.getBoundingBox();\r\n\r\n\r\n\r\n\tvar splineTube, binormal, normal, position2;\r\n\tif ( extrudePath ) {\r\n\r\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\textrudeByPath = true;\r\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t// SETUP TNB variables\r\n\r\n\t\t// Reuse TNB from TubeGeomtry for now.\r\n\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);\r\n\r\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\tbinormal = new THREE.Vector3();\r\n\t\tnormal = new THREE.Vector3();\r\n\t\tposition2 = new THREE.Vector3();\r\n\r\n\t}\r\n\r\n\t// Safeguards if bevels are not enabled\r\n\r\n\tif ( ! bevelEnabled ) {\r\n\r\n\t\tbevelSegments = 0;\r\n\t\tbevelThickness = 0;\r\n\t\tbevelSize = 0;\r\n\r\n\t}\r\n\r\n\t// Variables initalization\r\n\r\n\tvar ahole, h, hl; // looping of holes\r\n\tvar scope = this;\r\n\tvar bevelPoints = [];\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = !THREE.Shape.Utils.isClockWise( vertices ) ;\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\r\n\r\n\t}\r\n\r\n\r\n\tvar faces = THREE.Shape.Utils.triangulateShape ( vertices, holes );\r\n\r\n\t/* Vertices */\r\n\r\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\tfor ( h = 0, hl = holes.length;  h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\tvertices = vertices.concat( ahole );\r\n\r\n\t}\r\n\r\n\r\n\tfunction scalePt2 ( pt, vec, size ) {\r\n\r\n\t\tif ( !vec ) console.log( \"die\" );\r\n\r\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t}\r\n\r\n\tvar b, bs, t, z,\r\n\t\tvert, vlen = vertices.length,\r\n\t\tface, flen = faces.length,\r\n\t\tcont, clen = contour.length;\r\n\r\n\r\n\t// Find directions for point movement\r\n\r\n\tvar RAD_TO_DEGREES = 180 / Math.PI;\r\n\r\n\r\n\tfunction getBevelVec( pt_i, pt_j, pt_k ) {\r\n\r\n\t\t// Algorithm 2\r\n\r\n\t\treturn getBevelVec2( pt_i, pt_j, pt_k );\r\n\r\n\t}\r\n\r\n\tfunction getBevelVec1( pt_i, pt_j, pt_k ) {\r\n\r\n\t\tvar anglea = Math.atan2( pt_j.y - pt_i.y, pt_j.x - pt_i.x );\r\n\t\tvar angleb = Math.atan2( pt_k.y - pt_i.y, pt_k.x - pt_i.x );\r\n\r\n\t\tif ( anglea > angleb ) {\r\n\r\n\t\t\tangleb += Math.PI * 2;\r\n\r\n\t\t}\r\n\r\n\t\tvar anglec = ( anglea + angleb ) / 2;\r\n\r\n\r\n\t\t//console.log('angle1', anglea * RAD_TO_DEGREES,'angle2', angleb * RAD_TO_DEGREES, 'anglec', anglec *RAD_TO_DEGREES);\r\n\r\n\t\tvar x = - Math.cos( anglec );\r\n\t\tvar y = - Math.sin( anglec );\r\n\r\n\t\tvar vec = new THREE.Vector2( x, y ); //.normalize();\r\n\r\n\t\treturn vec;\r\n\r\n\t}\r\n\r\n\tfunction getBevelVec2( pt_i, pt_j, pt_k ) {\r\n\r\n\t\tvar a = THREE.ExtrudeGeometry.__v1,\r\n\t\t\tb = THREE.ExtrudeGeometry.__v2,\r\n\t\t\tv_hat = THREE.ExtrudeGeometry.__v3,\r\n\t\t\tw_hat = THREE.ExtrudeGeometry.__v4,\r\n\t\t\tp = THREE.ExtrudeGeometry.__v5,\r\n\t\t\tq = THREE.ExtrudeGeometry.__v6,\r\n\t\t\tv, w,\r\n\t\t\tv_dot_w_hat, q_sub_p_dot_w_hat,\r\n\t\t\ts, intersection;\r\n\r\n\t\t// good reading for line-line intersection\r\n\t\t// http://sputsoft.com/blog/2010/03/line-line-intersection.html\r\n\r\n\t\t// define a as vector j->i\r\n\t\t// define b as vectot k->i\r\n\r\n\t\ta.set( pt_i.x - pt_j.x, pt_i.y - pt_j.y );\r\n\t\tb.set( pt_i.x - pt_k.x, pt_i.y - pt_k.y );\r\n\r\n\t\t// get unit vectors\r\n\r\n\t\tv = a.normalize();\r\n\t\tw = b.normalize();\r\n\r\n\t\t// normals from pt i\r\n\r\n\t\tv_hat.set( -v.y, v.x );\r\n\t\tw_hat.set( w.y, -w.x );\r\n\r\n\t\t// pts from i\r\n\r\n\t\tp.copy( pt_i ).add( v_hat );\r\n\t\tq.copy( pt_i ).add( w_hat );\r\n\r\n\t\tif ( p.equals( q ) ) {\r\n\r\n\t\t\t//console.log(\"Warning: lines are straight\");\r\n\t\t\treturn w_hat.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// Points from j, k. helps prevents points cross overover most of the time\r\n\r\n\t\tp.copy( pt_j ).add( v_hat );\r\n\t\tq.copy( pt_k ).add( w_hat );\r\n\r\n\t\tv_dot_w_hat = v.dot( w_hat );\r\n\t\tq_sub_p_dot_w_hat = q.sub( p ).dot( w_hat );\r\n\r\n\t\t// We should not reach these conditions\r\n\r\n\t\tif ( v_dot_w_hat === 0 ) {\r\n\r\n\t\t\tconsole.log( \"Either infinite or no solutions!\" );\r\n\r\n\t\t\tif ( q_sub_p_dot_w_hat === 0 ) {\r\n\r\n\t\t\t\tconsole.log( \"Its finite solutions.\" );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.log( \"Too bad, no solutions.\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\ts = q_sub_p_dot_w_hat / v_dot_w_hat;\r\n\r\n\t\tif ( s < 0 ) {\r\n\r\n\t\t\t// in case of emergecy, revert to algorithm 1.\r\n\r\n\t\t\treturn getBevelVec1( pt_i, pt_j, pt_k );\r\n\r\n\t\t}\r\n\r\n\t\tintersection = v.multiplyScalar( s ).add( p );\r\n\r\n\t\treturn intersection.sub( pt_i ).clone(); // Don't normalize!, otherwise sharp corners become ugly\r\n\r\n\t}\r\n\r\n\tvar contourMovements = [];\r\n\r\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\tif ( j === il ) j = 0;\r\n\t\tif ( k === il ) k = 0;\r\n\r\n\t\t//  (j)---(i)---(k)\r\n\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\tvar pt_i = contour[ i ];\r\n\t\tvar pt_j = contour[ j ];\r\n\t\tvar pt_k = contour[ k ];\r\n\r\n\t\tcontourMovements[ i ]= getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t}\r\n\r\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\toneHoleMovements = [];\r\n\r\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\tif ( j === il ) j = 0;\r\n\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t//  (j)---(i)---(k)\r\n\t\t\toneHoleMovements[ i ]= getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t}\r\n\r\n\t\tholesMovements.push( oneHoleMovements );\r\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t}\r\n\r\n\r\n\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\r\n\t\t//z = bevelThickness * t;\r\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI/2 ) ) ; // curved\r\n\t\t//bs = bevelSize * t ; // linear\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t//vert = scalePt( contour[ i ], contourCentroid, bs, false );\r\n\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\t\t\t\t//vert = scalePt( ahole[ i ], holesCentroids[ h ], bs, true );\r\n\r\n\t\t\t\tv( vert.x, vert.y,  -z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tbs = bevelSize;\r\n\r\n\t// Back facing vertices\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\tif ( !extrudeByPath ) {\r\n\r\n\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\tnormal.copy( splineTube.normals[0] ).multiplyScalar(vert.x);\r\n\t\t\tbinormal.copy( splineTube.binormals[0] ).multiplyScalar(vert.y);\r\n\r\n\t\t\tposition2.copy( extrudePts[0] ).add(normal).add(binormal);\r\n\r\n\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Add stepped vertices...\r\n\t// Including front facing vertices\r\n\r\n\tvar s;\r\n\r\n\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\tif ( !extrudeByPath ) {\r\n\r\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\tnormal.copy( splineTube.normals[s] ).multiplyScalar( vert.x );\r\n\t\t\t\tbinormal.copy( splineTube.binormals[s] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\tposition2.copy( extrudePts[s] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Add bevel segments planes\r\n\r\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\r\n\t\tbs = bevelSize * Math.sin ( t * Math.PI/2 ) ;\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tif ( !extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* Faces */\r\n\r\n\t// Top and bottom faces\r\n\r\n\tbuildLidFaces();\r\n\r\n\t// Sides faces\r\n\r\n\tbuildSideFaces();\r\n\r\n\r\n\t/////  Internal functions\r\n\r\n\tfunction buildLidFaces() {\r\n\r\n\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\tvar layer = 0 ; // steps + 1\r\n\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ]+ offset, face[ 1 ]+ offset, face[ 0 ] + offset, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset, false );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ], true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps, false );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Create faces for the z-sides of the shape\r\n\r\n\tfunction buildSideFaces() {\r\n\r\n\t\tvar layeroffset = 0;\r\n\t\tsidewalls( contour, layeroffset );\r\n\t\tlayeroffset += contour.length;\r\n\r\n\t\tfor ( h = 0, hl = holes.length;  h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t//, true\r\n\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\tvar j, k;\r\n\t\ti = contour.length;\r\n\r\n\t\twhile ( --i >= 0 ) {\r\n\r\n\t\t\tj = i;\r\n\t\t\tk = i - 1;\r\n\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\r\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\r\n\r\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction v( x, y, z ) {\r\n\r\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\r\n\t}\r\n\r\n\tfunction f3( a, b, c, isBottom ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\r\n\t\t// normal, color, material\r\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\r\n\t\tvar uvs = isBottom ? uvgen.generateBottomUV( scope, shape, options, a, b, c ) : uvgen.generateTopUV( scope, shape, options, a, b, c );\r\n\r\n \t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\r\n\t}\r\n\r\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\t\td += shapesOffset;\r\n\r\n \t\tscope.faces.push( new THREE.Face4( a, b, c, d, null, null, extrudeMaterial ) );\r\n\r\n \t\tvar uvs = uvgen.generateSideWallUV( scope, shape, wallContour, options, a, b, c, d,\r\n \t\t                                    stepIndex, stepsLength, contourIndex1, contourIndex2 );\r\n \t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\r\n\r\n\tgenerateTopUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {\r\n\t\tvar ax = geometry.vertices[ indexA ].x,\r\n\t\t\tay = geometry.vertices[ indexA ].y,\r\n\r\n\t\t\tbx = geometry.vertices[ indexB ].x,\r\n\t\t\tby = geometry.vertices[ indexB ].y,\r\n\r\n\t\t\tcx = geometry.vertices[ indexC ].x,\r\n\t\t\tcy = geometry.vertices[ indexC ].y;\r\n\r\n\t\treturn [\r\n\t\t\tnew THREE.Vector2( ax, ay ),\r\n\t\t\tnew THREE.Vector2( bx, by ),\r\n\t\t\tnew THREE.Vector2( cx, cy )\r\n\t\t];\r\n\r\n\t},\r\n\r\n\tgenerateBottomUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {\r\n\r\n\t\treturn this.generateTopUV( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC );\r\n\r\n\t},\r\n\r\n\tgenerateSideWallUV: function( geometry, extrudedShape, wallContour, extrudeOptions,\r\n\t                              indexA, indexB, indexC, indexD, stepIndex, stepsLength,\r\n\t                              contourIndex1, contourIndex2 ) {\r\n\r\n\t\tvar ax = geometry.vertices[ indexA ].x,\r\n\t\t\tay = geometry.vertices[ indexA ].y,\r\n\t\t\taz = geometry.vertices[ indexA ].z,\r\n\r\n\t\t\tbx = geometry.vertices[ indexB ].x,\r\n\t\t\tby = geometry.vertices[ indexB ].y,\r\n\t\t\tbz = geometry.vertices[ indexB ].z,\r\n\r\n\t\t\tcx = geometry.vertices[ indexC ].x,\r\n\t\t\tcy = geometry.vertices[ indexC ].y,\r\n\t\t\tcz = geometry.vertices[ indexC ].z,\r\n\r\n\t\t\tdx = geometry.vertices[ indexD ].x,\r\n\t\t\tdy = geometry.vertices[ indexD ].y,\r\n\t\t\tdz = geometry.vertices[ indexD ].z;\r\n\r\n\t\tif ( Math.abs( ay - by ) < 0.01 ) {\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( ax, 1 - az ),\r\n\t\t\t\tnew THREE.Vector2( bx, 1 - bz ),\r\n\t\t\t\tnew THREE.Vector2( cx, 1 - cz ),\r\n\t\t\t\tnew THREE.Vector2( dx, 1 - dz )\r\n\t\t\t];\r\n\t\t} else {\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( ay, 1 - az ),\r\n\t\t\t\tnew THREE.Vector2( by, 1 - bz ),\r\n\t\t\t\tnew THREE.Vector2( cy, 1 - cz ),\r\n\t\t\t\tnew THREE.Vector2( dy, 1 - dz )\r\n\t\t\t];\r\n\t\t}\r\n\t}\r\n};\r\n\r\nTHREE.ExtrudeGeometry.__v1 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v2 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v3 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v4 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v5 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v6 = new THREE.Vector2();\r\n/**\r\n * @author jonobr1 / http://jonobr1.com\r\n *\r\n * Creates a one-sided polygonal geometry from a path shape. Similar to\r\n * ExtrudeGeometry.\r\n *\r\n * parameters = {\r\n *\r\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\r\n *\r\n *\tmaterial: <int> // material index for front and back faces\r\n *\tuvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ShapeGeometry = function ( shapes, options ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tif ( shapes instanceof Array === false ) shapes = [ shapes ];\r\n\r\n\tthis.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n};\r\n\r\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\r\n/**\r\n * Add an array of shapes to THREE.ShapeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tfor ( var i = 0, l = shapes.length; i < l; i++ ) {\r\n\r\n\t\tthis.addShape( shapes[ i ], options );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n/**\r\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tif ( options === undefined ) options = {};\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar material = options.material;\r\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\r\n\r\n\tvar shapebb = this.shapebb;\r\n\r\n\t//\r\n\r\n\tvar i, l, hole, s;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = !THREE.Shape.Utils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\r\n\r\n\t\tfor ( i = 0, l = holes.length; i < l; i++ ) {\r\n\r\n\t\t\thole = holes[ i ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( hole ) ) {\r\n\r\n\t\t\t\tholes[ i ] = hole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false;\r\n\r\n\t}\r\n\r\n\tvar faces = THREE.Shape.Utils.triangulateShape( vertices, holes );\r\n\r\n\t// Vertices\r\n\r\n\tvar contour = vertices;\r\n\r\n\tfor ( i = 0, l = holes.length; i < l; i++ ) {\r\n\r\n\t\thole = holes[ i ];\r\n\t\tvertices = vertices.concat( hole );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar vert, vlen = vertices.length;\r\n\tvar face, flen = faces.length;\r\n\tvar cont, clen = contour.length;\r\n\r\n\tfor ( i = 0; i < vlen; i++ ) {\r\n\r\n\t\tvert = vertices[ i ];\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\r\n\r\n\t}\r\n\r\n\tfor ( i = 0; i < flen; i++ ) {\r\n\r\n\t\tface = faces[ i ];\r\n\r\n\t\tvar a = face[ 0 ] + shapesOffset;\r\n\t\tvar b = face[ 1 ] + shapesOffset;\r\n\t\tvar c = face[ 2 ] + shapesOffset;\r\n\r\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateBottomUV( this, shape, options, a, b, c ) );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author astrodud / http://astrodud.isgreat.org/\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\n// points - to create a closed torus, one must use a set of points \r\n//    like so: [ a, b, c, d, a ], see first is the same as last.\r\n// segments - the number of circumference segments to create\r\n// phiStart - the starting radian\r\n// phiLength - the radian (0 to 2*PI) range of the lathed section\r\n//    2*pi is a closed lathe, less than 2PI is a portion.\r\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tsegments = segments || 12;\r\n\tphiStart = phiStart || 0;\r\n\tphiLength = phiLength || 2 * Math.PI;\r\n\r\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\r\n\tvar inverseSegments = 1.0 / segments;\r\n\r\n\tfor ( var i = 0, il = segments; i <= il; i ++ ) {\r\n\r\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\tvar c = Math.cos( phi ),\r\n\t\t\ts = Math.sin( phi );\r\n\r\n\t\tfor ( var j = 0, jl = points.length; j < jl; j ++ ) {\r\n\r\n\t\t\tvar pt = points[ j ];\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\r\n\t\t\tvertex.x = c * pt.x - s * pt.y;\r\n\t\t\tvertex.y = s * pt.x + c * pt.y;\r\n\t\t\tvertex.z = pt.z;\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar np = points.length;\r\n\r\n\tfor ( var i = 0, il = segments; i < il; i ++ ) {\r\n\r\n\t\tfor ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {\r\n\r\n\t\t\tvar base = j + np * i;\r\n\t\t\tvar a = base;\r\n\t\t\tvar b = base + np;\r\n\t\t\tvar c = base + 1 + np;\r\n\t\t\tvar d = base + 1;\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( a, b, c, d ) );\r\n\r\n\t\t\tvar u0 = i * inverseSegments;\r\n\t\t\tvar v0 = j * inversePointLength;\r\n\t\t\tvar u1 = u0 + inverseSegments;\r\n\t\t\tvar v1 = v0 + inversePointLength;\r\n\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\r\n\t\t\t\tnew THREE.Vector2( u0, v0 ), \r\n\t\t\t\tnew THREE.Vector2( u1, v0 ),\r\n\t\t\t\tnew THREE.Vector2( u1, v1 ),\r\n\t\t\t\tnew THREE.Vector2( u0, v1 )\r\n\r\n\t\t\t] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.mergeVertices();\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.widthSegments = widthSegments || 1;\r\n\tthis.heightSegments = heightSegments || 1;\r\n\r\n\tvar ix, iz;\r\n\tvar width_half = width / 2;\r\n\tvar height_half = height / 2;\r\n\r\n\tvar gridX = this.widthSegments;\r\n\tvar gridZ = this.heightSegments;\r\n\r\n\tvar gridX1 = gridX + 1;\r\n\tvar gridZ1 = gridZ + 1;\r\n\r\n\tvar segment_width = this.width / gridX;\r\n\tvar segment_height = this.height / gridZ;\r\n\r\n\tvar normal = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\tfor ( iz = 0; iz < gridZ1; iz ++ ) {\r\n\r\n\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\tvar x = ix * segment_width - width_half;\r\n\t\t\tvar y = iz * segment_height - height_half;\r\n\r\n\t\t\tthis.vertices.push( new THREE.Vector3( x, - y, 0 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( iz = 0; iz < gridZ; iz ++ ) {\r\n\r\n\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\tvar a = ix + gridX1 * iz;\r\n\t\t\tvar b = ix + gridX1 * ( iz + 1 );\r\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iz + 1 );\r\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iz;\r\n\r\n\t\t\tvar face = new THREE.Face4( a, b, c, d );\r\n\t\t\tface.normal.copy( normal );\r\n\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone(), normal.clone() );\r\n\r\n\t\t\tthis.faces.push( face );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - iz / gridZ ),\r\n\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - ( iz + 1 ) / gridZ ),\r\n\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iz + 1 ) / gridZ ),\r\n\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1 - iz / gridZ )\r\n\t\t\t] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\r\n};\r\n\r\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.radius = radius || 50;\r\n\r\n\tthis.widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\tthis.heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\tvar x, y, vertices = [], uvs = [];\r\n\r\n\tfor ( y = 0; y <= this.heightSegments; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\t\tvar uvsRow = [];\r\n\r\n\t\tfor ( x = 0; x <= this.widthSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / this.widthSegments;\r\n\t\t\tvar v = y / this.heightSegments;\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = - this.radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\tvertex.y = this.radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\tvertex.z = this.radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tverticesRow.push( this.vertices.length - 1 );\r\n\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\t\tuvs.push( uvsRow );\r\n\r\n\t}\r\n\r\n\tfor ( y = 0; y < this.heightSegments; y ++ ) {\r\n\r\n\t\tfor ( x = 0; x < this.widthSegments; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\r\n\r\n\t\t\tvar n1 = this.vertices[ v1 ].clone().normalize();\r\n\t\t\tvar n2 = this.vertices[ v2 ].clone().normalize();\r\n\t\t\tvar n3 = this.vertices[ v3 ].clone().normalize();\r\n\t\t\tvar n4 = this.vertices[ v4 ].clone().normalize();\r\n\r\n\t\t\tvar uv1 = uvs[ y ][ x + 1 ].clone();\r\n\t\t\tvar uv2 = uvs[ y ][ x ].clone();\r\n\t\t\tvar uv3 = uvs[ y + 1 ][ x ].clone();\r\n\t\t\tvar uv4 = uvs[ y + 1 ][ x + 1 ].clone();\r\n\r\n\t\t\tif ( Math.abs( this.vertices[ v1 ].y ) === this.radius ) {\r\n\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v3, v4, [ n1, n3, n4 ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv3, uv4 ] );\r\n\r\n\t\t\t} else if ( Math.abs( this.vertices[ v3 ].y ) === this.radius ) {\r\n\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.faces.push( new THREE.Face4( v1, v2, v3, v4, [ n1, n2, n3, n4 ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3, uv4 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * For creating 3D text geometry in three.js\r\n *\r\n * Text = 3D Text\r\n *\r\n * parameters = {\r\n *  size: \t\t\t<float>, \t// size of the text\r\n *  height: \t\t<float>, \t// thickness to extrude text\r\n *  curveSegments: \t<int>,\t\t// number of points on the curves\r\n *\r\n *  font: \t\t\t<string>,\t\t// font name\r\n *  weight: \t\t<string>,\t\t// font weight (normal, bold)\r\n *  style: \t\t\t<string>,\t\t// font style  (normal, italics)\r\n *\r\n *  bevelEnabled:\t<bool>,\t\t\t// turn on bevel\r\n *  bevelThickness: <float>, \t\t// how deep into text bevel goes\r\n *  bevelSize:\t\t<float>, \t\t// how far from text outline is bevel\r\n *  }\r\n *\r\n */\r\n\r\n/*\tUsage Examples\r\n\r\n\t// TextGeometry wrapper\r\n\r\n\tvar text3d = new TextGeometry( text, options );\r\n\r\n\t// Complete manner\r\n\r\n\tvar textShapes = THREE.FontUtils.generateShapes( text, options );\r\n\tvar text3d = new ExtrudeGeometry( textShapes, options );\r\n\r\n*/\r\n\r\n\r\nTHREE.TextGeometry = function ( text, parameters ) {\r\n\r\n\tvar textShapes = THREE.FontUtils.generateShapes( text, parameters );\r\n\r\n\t// translate parameters to ExtrudeGeometry API\r\n\r\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t// defaults\r\n\r\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\r\n\tTHREE.ExtrudeGeometry.call( this, textShapes, parameters );\r\n\r\n};\r\n\r\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\r\n/**\r\n * @author oosmoxiecode\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\r\n */\r\n\r\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.radius = radius || 100;\r\n\tthis.tube = tube || 40;\r\n\tthis.radialSegments = radialSegments || 8;\r\n\tthis.tubularSegments = tubularSegments || 6;\r\n\tthis.arc = arc || Math.PI * 2;\r\n\r\n\tvar center = new THREE.Vector3(), uvs = [], normals = [];\r\n\r\n\tfor ( var j = 0; j <= this.radialSegments; j ++ ) {\r\n\r\n\t\tfor ( var i = 0; i <= this.tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar u = i / this.tubularSegments * this.arc;\r\n\t\t\tvar v = j / this.radialSegments * Math.PI * 2;\r\n\r\n\t\t\tcenter.x = this.radius * Math.cos( u );\r\n\t\t\tcenter.y = this.radius * Math.sin( u );\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = ( this.radius + this.tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\tvertex.y = ( this.radius + this.tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\tvertex.z = this.tube * Math.sin( v );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tuvs.push( new THREE.Vector2( i / this.tubularSegments, j / this.radialSegments ) );\r\n\t\t\tnormals.push( vertex.clone().sub( center ).normalize() );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfor ( var j = 1; j <= this.radialSegments; j ++ ) {\r\n\r\n\t\tfor ( var i = 1; i <= this.tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar a = ( this.tubularSegments + 1 ) * j + i - 1;\r\n\t\t\tvar b = ( this.tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\tvar c = ( this.tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\tvar d = ( this.tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\tvar face = new THREE.Face4( a, b, c, d, [ normals[ a ], normals[ b ], normals[ c ], normals[ d ] ] );\r\n\t\t\tface.normal.add( normals[ a ] );\r\n\t\t\tface.normal.add( normals[ b ] );\r\n\t\t\tface.normal.add( normals[ c ] );\r\n\t\t\tface.normal.add( normals[ d ] );\r\n\t\t\tface.normal.normalize();\r\n\r\n\t\t\tthis.faces.push( face );\r\n\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\r\n};\r\n\r\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author oosmoxiecode\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n */\r\n\r\nTHREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.radius = radius || 100;\r\n\tthis.tube = tube || 40;\r\n\tthis.radialSegments = radialSegments || 64;\r\n\tthis.tubularSegments = tubularSegments || 8;\r\n\tthis.p = p || 2;\r\n\tthis.q = q || 3;\r\n\tthis.heightScale = heightScale || 1;\r\n\tthis.grid = new Array( this.radialSegments );\r\n\r\n\tvar tang = new THREE.Vector3();\r\n\tvar n = new THREE.Vector3();\r\n\tvar bitan = new THREE.Vector3();\r\n\r\n\tfor ( var i = 0; i < this.radialSegments; ++ i ) {\r\n\r\n\t\tthis.grid[ i ] = new Array( this.tubularSegments );\r\n\r\n\t\tfor ( var j = 0; j < this.tubularSegments; ++ j ) {\r\n\r\n\t\t\tvar u = i / this.radialSegments * 2 * this.p * Math.PI;\r\n\t\t\tvar v = j / this.tubularSegments * 2 * Math.PI;\r\n\t\t\tvar p1 = getPos( u, v, this.q, this.p, this.radius, this.heightScale );\r\n\t\t\tvar p2 = getPos( u + 0.01, v, this.q, this.p, this.radius, this.heightScale );\r\n\t\t\tvar cx, cy;\r\n\r\n\t\t\ttang.subVectors( p2, p1 );\r\n\t\t\tn.addVectors( p2, p1 );\r\n\r\n\t\t\tbitan.crossVectors( tang, n );\r\n\t\t\tn.crossVectors( bitan, tang );\r\n\t\t\tbitan.normalize();\r\n\t\t\tn.normalize();\r\n\r\n\t\t\tcx = - this.tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tcy = this.tube * Math.sin( v );\r\n\r\n\t\t\tp1.x += cx * n.x + cy * bitan.x;\r\n\t\t\tp1.y += cx * n.y + cy * bitan.y;\r\n\t\t\tp1.z += cx * n.z + cy * bitan.z;\r\n\r\n\t\t\tthis.grid[ i ][ j ] = vert( p1.x, p1.y, p1.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0; i < this.radialSegments; ++ i ) {\r\n\r\n\t\tfor ( var j = 0; j < this.tubularSegments; ++ j ) {\r\n\r\n\t\t\tvar ip = ( i + 1 ) % this.radialSegments;\r\n\t\t\tvar jp = ( j + 1 ) % this.tubularSegments;\r\n\r\n\t\t\tvar a = this.grid[ i ][ j ];\r\n\t\t\tvar b = this.grid[ ip ][ j ];\r\n\t\t\tvar c = this.grid[ ip ][ jp ];\r\n\t\t\tvar d = this.grid[ i ][ jp ];\r\n\r\n\t\t\tvar uva = new THREE.Vector2( i / this.radialSegments, j / this.tubularSegments );\r\n\t\t\tvar uvb = new THREE.Vector2( ( i + 1 ) / this.radialSegments, j / this.tubularSegments );\r\n\t\t\tvar uvc = new THREE.Vector2( ( i + 1 ) / this.radialSegments, ( j + 1 ) / this.tubularSegments );\r\n\t\t\tvar uvd = new THREE.Vector2( i / this.radialSegments, ( j + 1 ) / this.tubularSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( a, b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva,uvb,uvc, uvd ] );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n\tfunction vert( x, y, z ) {\r\n\r\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\r\n\t}\r\n\r\n\tfunction getPos( u, v, in_q, in_p, radius, heightScale ) {\r\n\r\n\t\tvar cu = Math.cos( u );\r\n\t\tvar cv = Math.cos( v );\r\n\t\tvar su = Math.sin( u );\r\n\t\tvar quOverP = in_q / in_p * u;\r\n\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\tvar tx = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\tvar ty = radius * ( 2 + cs ) * su * 0.5;\r\n\t\tvar tz = heightScale * radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author WestLangley / https://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author miningold / https://github.com/miningold\r\n *\r\n * Modified from the TorusKnotGeometry by @oosmoxiecode\r\n *\r\n * Creates a tube which extrudes along a 3d spline\r\n *\r\n * Uses parallel transport frames as described in\r\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n */\r\n\r\nTHREE.TubeGeometry = function( path, segments, radius, radiusSegments, closed, debug ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.path = path;\r\n\tthis.segments = segments || 64;\r\n\tthis.radius = radius || 1;\r\n\tthis.radiusSegments = radiusSegments || 8;\r\n\tthis.closed = closed || false;\r\n\r\n\tif ( debug ) this.debug = new THREE.Object3D();\r\n\r\n\tthis.grid = [];\r\n\r\n\tvar scope = this,\r\n\r\n\t\ttangent,\r\n\t\tnormal,\r\n\t\tbinormal,\r\n\r\n\t\tnumpoints = this.segments + 1,\r\n\r\n\t\tx, y, z,\r\n\t\ttx, ty, tz,\r\n\t\tu, v,\r\n\r\n\t\tcx, cy,\r\n\t\tpos, pos2 = new THREE.Vector3(),\r\n\t\ti, j,\r\n\t\tip, jp,\r\n\t\ta, b, c, d,\r\n\t\tuva, uvb, uvc, uvd;\r\n\r\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( this.path, this.segments, this.closed ),\r\n\t\ttangents = frames.tangents,\r\n\t\tnormals = frames.normals,\r\n\t\tbinormals = frames.binormals;\r\n\r\n\t// proxy internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\tfunction vert( x, y, z ) {\r\n\r\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\r\n\t}\r\n\r\n\r\n\t// consruct the grid\r\n\r\n\tfor ( i = 0; i < numpoints; i++ ) {\r\n\r\n\t\tthis.grid[ i ] = [];\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\tpos = path.getPointAt( u );\r\n\r\n\t\ttangent = tangents[ i ];\r\n\t\tnormal = normals[ i ];\r\n\t\tbinormal = binormals[ i ];\r\n\r\n\t\tif ( this.debug ) {\r\n\r\n\t\t\tthis.debug.add( new THREE.ArrowHelper(tangent, pos, radius, 0x0000ff ) );\r\n\t\t\tthis.debug.add( new THREE.ArrowHelper(normal, pos, radius, 0xff0000 ) );\r\n\t\t\tthis.debug.add( new THREE.ArrowHelper(binormal, pos, radius, 0x00ff00 ) );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( j = 0; j < this.radiusSegments; j++ ) {\r\n\r\n\t\t\tv = j / this.radiusSegments * 2 * Math.PI;\r\n\r\n\t\t\tcx = -this.radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tcy = this.radius * Math.sin( v );\r\n\r\n\t\t\tpos2.copy( pos );\r\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\r\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\r\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\r\n\r\n\t\t\tthis.grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// construct the mesh\r\n\r\n\tfor ( i = 0; i < this.segments; i++ ) {\r\n\r\n\t\tfor ( j = 0; j < this.radiusSegments; j++ ) {\r\n\r\n\t\t\tip = ( this.closed ) ? (i + 1) % this.segments : i + 1;\r\n\t\t\tjp = (j + 1) % this.radiusSegments;\r\n\r\n\t\t\ta = this.grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\r\n\t\t\tb = this.grid[ ip ][ j ];\r\n\t\t\tc = this.grid[ ip ][ jp ];\r\n\t\t\td = this.grid[ i ][ jp ];\r\n\r\n\t\t\tuva = new THREE.Vector2( i / this.segments, j / this.radiusSegments );\r\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / this.segments, j / this.radiusSegments );\r\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / this.segments, ( j + 1 ) / this.radiusSegments );\r\n\t\t\tuvd = new THREE.Vector2( i / this.segments, ( j + 1 ) / this.radiusSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( a, b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvc, uvd ] );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\r\n\r\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\r\nTHREE.TubeGeometry.FrenetFrames = function(path, segments, closed) {\r\n\r\n\tvar\ttangent = new THREE.Vector3(),\r\n\t\tnormal = new THREE.Vector3(),\r\n\t\tbinormal = new THREE.Vector3(),\r\n\r\n\t\ttangents = [],\r\n\t\tnormals = [],\r\n\t\tbinormals = [],\r\n\r\n\t\tvec = new THREE.Vector3(),\r\n\t\tmat = new THREE.Matrix4(),\r\n\r\n\t\tnumpoints = segments + 1,\r\n\t\ttheta,\r\n\t\tepsilon = 0.0001,\r\n\t\tsmallest,\r\n\r\n\t\ttx, ty, tz,\r\n\t\ti, u, v;\r\n\r\n\r\n\t// expose internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\t// compute the tangent vectors for each segment on the path\r\n\r\n\tfor ( i = 0; i < numpoints; i++ ) {\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\ttangents[ i ] = path.getTangentAt( u );\r\n\t\ttangents[ i ].normalize();\r\n\r\n\t}\r\n\r\n\tinitialNormal3();\r\n\r\n\tfunction initialNormal1(lastBinormal) {\r\n\t\t// fixed start binormal. Has dangers of 0 vectors\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\r\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t}\r\n\r\n\tfunction initialNormal2() {\r\n\r\n\t\t// This uses the Frenet-Serret formula for deriving binormal\r\n\t\tvar t2 = path.getTangentAt( epsilon );\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\r\n\t}\r\n\r\n\tfunction initialNormal3() {\r\n\t\t// select an initial normal vector perpenicular to the first tangent vector,\r\n\t\t// and in the direction of the smallest tangent xyz component\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tsmallest = Number.MAX_VALUE;\r\n\t\ttx = Math.abs( tangents[ 0 ].x );\r\n\t\tty = Math.abs( tangents[ 0 ].y );\r\n\t\ttz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\tif ( tx <= smallest ) {\r\n\t\t\tsmallest = tx;\r\n\t\t\tnormal.set( 1, 0, 0 );\r\n\t\t}\r\n\r\n\t\tif ( ty <= smallest ) {\r\n\t\t\tsmallest = ty;\r\n\t\t\tnormal.set( 0, 1, 0 );\r\n\t\t}\r\n\r\n\t\tif ( tz <= smallest ) {\r\n\t\t\tnormal.set( 0, 0, 1 );\r\n\t\t}\r\n\r\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\t}\r\n\r\n\r\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\r\n\r\n\tfor ( i = 1; i < numpoints; i++ ) {\r\n\r\n\t\tnormals[ i ] = normals[ i-1 ].clone();\r\n\r\n\t\tbinormals[ i ] = binormals[ i-1 ].clone();\r\n\r\n\t\tvec.crossVectors( tangents[ i-1 ], tangents[ i ] );\r\n\r\n\t\tif ( vec.length() > epsilon ) {\r\n\r\n\t\t\tvec.normalize();\r\n\r\n\t\t\ttheta = Math.acos( tangents[ i-1 ].dot( tangents[ i ] ) );\r\n\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t}\r\n\r\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t}\r\n\r\n\r\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\tif ( closed ) {\r\n\r\n\t\ttheta = Math.acos( normals[ 0 ].dot( normals[ numpoints-1 ] ) );\r\n\t\ttheta /= ( numpoints - 1 );\r\n\r\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints-1 ] ) ) > 0 ) {\r\n\r\n\t\t\ttheta = -theta;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 1; i < numpoints; i++ ) {\r\n\r\n\t\t\t// twist a little...\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n};\r\n/**\r\n * @author clockworkgeek / https://github.com/clockworkgeek\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.PolyhedronGeometry = function ( vertices, faces, radius, detail ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tradius = radius || 1;\r\n\tdetail = detail || 0;\r\n\r\n\tvar that = this;\r\n\r\n\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\tprepare( new THREE.Vector3( vertices[ i ][ 0 ], vertices[ i ][ 1 ], vertices[ i ][ 2 ] ) );\r\n\r\n\t}\r\n\r\n\tvar midpoints = [], p = this.vertices;\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tmake( p[ faces[ i ][ 0 ] ], p[ faces[ i ][ 1 ] ], p[ faces[ i ][ 2 ] ], detail );\r\n\r\n\t}\r\n\r\n\tthis.mergeVertices();\r\n\r\n\t// Apply radius\r\n\r\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\tthis.vertices[ i ].multiplyScalar( radius );\r\n\r\n\t}\r\n\r\n\r\n\t// Project vector onto sphere's surface\r\n\r\n\tfunction prepare( vector ) {\r\n\r\n\t\tvar vertex = vector.normalize().clone();\r\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\r\n\r\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\r\n\r\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\r\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\r\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\r\n\r\n\t\treturn vertex;\r\n\r\n\t}\r\n\r\n\r\n\t// Approximate a curved face with recursively sub-divided triangles.\r\n\r\n\tfunction make( v1, v2, v3, detail ) {\r\n\r\n\t\tif ( detail < 1 ) {\r\n\r\n\t\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\r\n\t\t\tface.centroid.add( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\r\n\t\t\tface.normal = face.centroid.clone().normalize();\r\n\t\t\tthat.faces.push( face );\r\n\r\n\t\t\tvar azi = azimuth( face.centroid );\r\n\t\t\tthat.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\tcorrectUV( v1.uv, v1, azi ),\r\n\t\t\t\tcorrectUV( v2.uv, v2, azi ),\r\n\t\t\t\tcorrectUV( v3.uv, v3, azi )\r\n\t\t\t] );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdetail -= 1;\r\n\r\n\t\t\t// split triangle into 4 smaller triangles\r\n\r\n\t\t\tmake( v1, midpoint( v1, v2 ), midpoint( v1, v3 ), detail ); // top quadrant\r\n\t\t\tmake( midpoint( v1, v2 ), v2, midpoint( v2, v3 ), detail ); // left quadrant\r\n\t\t\tmake( midpoint( v1, v3 ), midpoint( v2, v3 ), v3, detail ); // right quadrant\r\n\t\t\tmake( midpoint( v1, v2 ), midpoint( v2, v3 ), midpoint( v1, v3 ), detail ); // center quadrant\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction midpoint( v1, v2 ) {\r\n\r\n\t\tif ( !midpoints[ v1.index ] ) midpoints[ v1.index ] = [];\r\n\t\tif ( !midpoints[ v2.index ] ) midpoints[ v2.index ] = [];\r\n\r\n\t\tvar mid = midpoints[ v1.index ][ v2.index ];\r\n\r\n\t\tif ( mid === undefined ) {\r\n\r\n\t\t\t// generate mean point and project to surface with prepare()\r\n\r\n\t\t\tmidpoints[ v1.index ][ v2.index ] = midpoints[ v2.index ][ v1.index ] = mid = prepare(\r\n\t\t\t\tnew THREE.Vector3().addVectors( v1, v2 ).divideScalar( 2 )\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn mid;\r\n\r\n\t}\r\n\r\n\r\n\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\tfunction azimuth( vector ) {\r\n\r\n\t\treturn Math.atan2( vector.z, -vector.x );\r\n\r\n\t}\r\n\r\n\r\n\t// Angle above the XZ plane.\r\n\r\n\tfunction inclination( vector ) {\r\n\r\n\t\treturn Math.atan2( -vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t}\r\n\r\n\r\n\t// Texture fixing helper. Spheres have some odd behaviours.\r\n\r\n\tfunction correctUV( uv, vector, azimuth ) {\r\n\r\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\r\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\r\n\t\treturn uv;\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\r\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\tvar vertices = [\r\n\t\t[ -1,  t,  0 ], [  1, t, 0 ], [ -1, -t,  0 ], [  1, -t,  0 ],\r\n\t\t[  0, -1,  t ], [  0, 1, t ], [  0, -1, -t ], [  0,  1, -t ],\r\n\t\t[  t,  0, -1 ], [  t, 0, 1 ], [ -t,  0, -1 ], [ -t,  0,  1 ]\r\n\t];\r\n\r\n\tvar faces = [\r\n\t\t[ 0, 11,  5 ], [ 0,  5,  1 ], [  0,  1,  7 ], [  0,  7, 10 ], [  0, 10, 11 ],\r\n\t\t[ 1,  5,  9 ], [ 5, 11,  4 ], [ 11, 10,  2 ], [ 10,  7,  6 ], [  7,  1,  8 ],\r\n\t\t[ 3,  9,  4 ], [ 3,  4,  2 ], [  3,  2,  6 ], [  3,  6,  8 ], [  3,  8,  9 ],\r\n\t\t[ 4,  9,  5 ], [ 2,  4, 11 ], [  6,  2, 10 ], [  8,  6,  7 ], [  9,  8,  1 ]\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\r\n\r\n};\r\n\r\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.OctahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t[ 1, 0, 0 ], [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ], [ 0, 0, -1 ]\r\n\t];\r\n\r\n\tvar faces = [\r\n\t\t[ 0, 2, 4 ], [ 0, 4, 3 ], [ 0, 3, 5 ], [ 0, 5, 2 ], [ 1, 2, 5 ], [ 1, 5, 3 ], [ 1, 3, 4 ], [ 1, 4, 2 ]\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\r\n};\r\n\r\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t[ 1,  1,  1 ], [ -1, -1, 1 ], [ -1, 1, -1 ], [ 1, -1, -1 ]\r\n\t];\r\n\r\n\tvar faces = [\r\n\t\t[ 2, 1, 0 ], [ 0, 3, 2 ], [ 1, 3, 0 ], [ 2, 3, 1 ]\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\r\n\r\n};\r\n\r\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author zz85 / https://github.com/zz85\r\n * Parametric Surfaces Geometry\r\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n *\r\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements, useTris );\r\n *\r\n */\r\n\r\nTHREE.ParametricGeometry = function ( func, slices, stacks, useTris ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar verts = this.vertices;\r\n\tvar faces = this.faces;\r\n\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\r\n\tuseTris = (useTris === undefined) ? false : useTris;\r\n\r\n\tvar i, il, j, p;\r\n\tvar u, v;\r\n\r\n\tvar stackCount = stacks + 1;\r\n\tvar sliceCount = slices + 1;\r\n\r\n\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\tv = i / stacks;\r\n\r\n\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\tu = j / slices;\r\n\r\n\t\t\tp = func( u, v );\r\n\t\t\tverts.push( p );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tvar a, b, c, d;\r\n\tvar uva, uvb, uvc, uvd;\r\n\r\n\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\ta = i * sliceCount + j;\r\n\t\t\tb = i * sliceCount + j + 1;\r\n\t\t\tc = (i + 1) * sliceCount + j;\r\n\t\t\td = (i + 1) * sliceCount + j + 1;\r\n\r\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\r\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\r\n\t\t\tuvc = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\r\n\t\t\tuvd = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\r\n\r\n\t\t\tif ( useTris ) {\r\n\r\n\t\t\t\tfaces.push( new THREE.Face3( a, b, c ) );\r\n\t\t\t\tfaces.push( new THREE.Face3( b, d, c ) );\r\n\r\n\t\t\t\tuvs.push( [ uva, uvb, uvc ] );\r\n\t\t\t\tuvs.push( [ uvb, uvd, uvc ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfaces.push( new THREE.Face4( a, b, d, c ) );\r\n\t\t\t\tuvs.push( [ uva, uvb, uvd, uvc ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// console.log(this);\r\n\r\n\t// magic bullet\r\n\t// var diff = this.mergeVertices();\r\n\t// console.log('removed ', diff, ' vertices by merging');\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author qiao / https://github.com/qiao\r\n * @fileoverview This is a convex hull generator using the incremental method. \r\n * The complexity is O(n^2) where n is the number of vertices.\r\n * O(nlogn) algorithms do exist, but they are much more complicated.\r\n *\r\n * Benchmark: \r\n *\r\n *  Platform: CPU: P7350 @2.00GHz Engine: V8\r\n *\r\n *  Num Vertices\tTime(ms)\r\n *\r\n *     10           1\r\n *     20           3\r\n *     30           19\r\n *     40           48\r\n *     50           107\r\n */\r\n\r\nTHREE.ConvexGeometry = function( vertices ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar faces = [ [ 0, 1, 2 ], [ 0, 2, 1 ] ]; \r\n\r\n\tfor ( var i = 3; i < vertices.length; i++ ) {\r\n\r\n\t\taddPoint( i );\r\n\r\n\t}\r\n\r\n\r\n\tfunction addPoint( vertexId ) {\r\n\r\n\t\tvar vertex = vertices[ vertexId ].clone();\r\n\r\n\t\tvar mag = vertex.length();\r\n\t\tvertex.x += mag * randomOffset();\r\n\t\tvertex.y += mag * randomOffset();\r\n\t\tvertex.z += mag * randomOffset();\r\n\r\n\t\tvar hole = [];\r\n\r\n\t\tfor ( var f = 0; f < faces.length; ) {\r\n\r\n\t\t\tvar face = faces[ f ];\r\n\r\n\t\t\t// for each face, if the vertex can see it,\r\n\t\t\t// then we try to add the face's edges into the hole.\r\n\t\t\tif ( visible( face, vertex ) ) {\r\n\r\n\t\t\t\tfor ( var e = 0; e < 3; e++ ) {\r\n\r\n\t\t\t\t\tvar edge = [ face[ e ], face[ ( e + 1 ) % 3 ] ];\r\n\t\t\t\t\tvar boundary = true;\r\n\r\n\t\t\t\t\t// remove duplicated edges.\r\n\t\t\t\t\tfor ( var h = 0; h < hole.length; h++ ) {\r\n\r\n\t\t\t\t\t\tif ( equalEdge( hole[ h ], edge ) ) {\r\n\r\n\t\t\t\t\t\t\thole[ h ] = hole[ hole.length - 1 ];\r\n\t\t\t\t\t\t\thole.pop();\r\n\t\t\t\t\t\t\tboundary = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( boundary ) {\r\n\r\n\t\t\t\t\t\thole.push( edge );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove faces[ f ]\r\n\t\t\t\tfaces[ f ] = faces[ faces.length - 1 ];\r\n\t\t\t\tfaces.pop();\r\n\r\n\t\t\t} else { // not visible\r\n\r\n\t\t\t\tf++;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// construct the new faces formed by the edges of the hole and the vertex\r\n\t\tfor ( var h = 0; h < hole.length; h++ ) {\r\n\r\n\t\t\tfaces.push( [ \r\n\t\t\t\thole[ h ][ 0 ],\r\n\t\t\t\thole[ h ][ 1 ],\r\n\t\t\t\tvertexId\r\n\t\t\t] );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Whether the face is visible from the vertex\r\n\t */\r\n\tfunction visible( face, vertex ) {\r\n\r\n\t\tvar va = vertices[ face[ 0 ] ];\r\n\t\tvar vb = vertices[ face[ 1 ] ];\r\n\t\tvar vc = vertices[ face[ 2 ] ];\r\n\r\n\t\tvar n = normal( va, vb, vc );\r\n\r\n\t\t// distance from face to origin\r\n\t\tvar dist = n.dot( va );\r\n\r\n\t\treturn n.dot( vertex ) >= dist; \r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Face normal\r\n\t */\r\n\tfunction normal( va, vb, vc ) {\r\n\r\n\t\tvar cb = new THREE.Vector3();\r\n\t\tvar ab = new THREE.Vector3();\r\n\r\n\t\tcb.subVectors( vc, vb );\r\n\t\tab.subVectors( va, vb );\r\n\t\tcb.cross( ab );\r\n\r\n\t\tcb.normalize();\r\n\r\n\t\treturn cb;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Detect whether two edges are equal.\r\n\t * Note that when constructing the convex hull, two same edges can only\r\n\t * be of the negative direction.\r\n\t */\r\n\tfunction equalEdge( ea, eb ) {\r\n\r\n\t\treturn ea[ 0 ] === eb[ 1 ] && ea[ 1 ] === eb[ 0 ]; \r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Create a random offset between -1e-6 and 1e-6.\r\n\t */\r\n\tfunction randomOffset() {\r\n\r\n\t\treturn ( Math.random() - 0.5 ) * 2 * 1e-6;\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * XXX: Not sure if this is the correct approach. Need someone to review.\r\n\t */\r\n\tfunction vertexUv( vertex ) {\r\n\r\n\t\tvar mag = vertex.length();\r\n\t\treturn new THREE.Vector2( vertex.x / mag, vertex.y / mag );\r\n\r\n\t}\r\n\r\n\t// Push vertices into `this.vertices`, skipping those inside the hull\r\n\tvar id = 0;\r\n\tvar newId = new Array( vertices.length ); // map from old vertex id to new id\r\n\r\n\tfor ( var i = 0; i < faces.length; i++ ) {\r\n\r\n\t\t var face = faces[ i ];\r\n\r\n\t\t for ( var j = 0; j < 3; j++ ) {\r\n\r\n\t\t\t\tif ( newId[ face[ j ] ] === undefined ) {\r\n\r\n\t\t\t\t\t\tnewId[ face[ j ] ] = id++;\r\n\t\t\t\t\t\tthis.vertices.push( vertices[ face[ j ] ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tface[ j ] = newId[ face[ j ] ];\r\n\r\n\t\t }\r\n\r\n\t}\r\n\r\n\t// Convert faces into instances of THREE.Face3\r\n\tfor ( var i = 0; i < faces.length; i++ ) {\r\n\r\n\t\tthis.faces.push( new THREE.Face3( \r\n\t\t\t\tfaces[ i ][ 0 ],\r\n\t\t\t\tfaces[ i ][ 1 ],\r\n\t\t\t\tfaces[ i ][ 2 ]\r\n\t\t) );\r\n\r\n\t}\r\n\r\n\t// Compute UVs\r\n\tfor ( var i = 0; i < this.faces.length; i++ ) {\r\n\r\n\t\tvar face = this.faces[ i ];\r\n\r\n\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\t\t\tvertexUv( this.vertices[ face.a ] ),\r\n\t\t\tvertexUv( this.vertices[ face.b ] ),\r\n\t\t\tvertexUv( this.vertices[ face.c ])\r\n\t\t] );\r\n\r\n\t}\r\n\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.ConvexGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author sroucheray / http://sroucheray.org/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AxisHelper = function ( size ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tgeometry.vertices.push(\r\n\t\tnew THREE.Vector3(), new THREE.Vector3( size || 1, 0, 0 ),\r\n\t\tnew THREE.Vector3(), new THREE.Vector3( 0, size || 1, 0 ),\r\n\t\tnew THREE.Vector3(), new THREE.Vector3( 0, 0, size || 1 )\r\n\t);\r\n\r\n\tgeometry.colors.push(\r\n\t\tnew THREE.Color( 0xff0000 ), new THREE.Color( 0xffaa00 ),\r\n\t\tnew THREE.Color( 0x00ff00 ), new THREE.Color( 0xaaff00 ),\r\n\t\tnew THREE.Color( 0x0000ff ), new THREE.Color( 0x00aaff )\r\n\t);\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tTHREE.Line.call( this, geometry, material, THREE.LinePieces );\r\n\r\n};\r\n\r\nTHREE.AxisHelper.prototype = Object.create( THREE.Line.prototype );\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / https://exocortex.com\r\n *\r\n * Creates an arrow for visualizing directions\r\n *\r\n * Parameters:\r\n *  dir - Vector3\r\n *  origin - Vector3\r\n *  length - Number\r\n *  hex - color in hex value\r\n */\r\n\r\nTHREE.ArrowHelper = function ( dir, origin, length, hex ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tif ( length === undefined ) length = 20;\r\n\tif ( hex === undefined ) hex = 0xffff00;\r\n\r\n\tvar lineGeometry = new THREE.Geometry();\r\n\tlineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );\r\n\tlineGeometry.vertices.push( new THREE.Vector3( 0, 1, 0 ) );\r\n\r\n\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: hex } ) );\r\n\tthis.add( this.line );\r\n\r\n\tvar coneGeometry = new THREE.CylinderGeometry( 0, 0.05, 0.25, 5, 1 );\r\n\r\n\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: hex } ) );\r\n\tthis.cone.position.set( 0, 1, 0 );\r\n\tthis.add( this.cone );\r\n\r\n\tif ( origin instanceof THREE.Vector3 ) this.position = origin;\r\n\r\n\tthis.setDirection( dir );\r\n\tthis.setLength( length );\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.ArrowHelper.prototype.setDirection = function ( dir ) {\r\n\r\n    var d = THREE.ArrowHelper.__v1.copy( dir ).normalize();\r\n\r\n    if ( d.y > 0.999 ) {\r\n\r\n        this.rotation.set( 0, 0, 0 );\r\n \r\n    } else if ( d.y < - 0.999 ) {\r\n\r\n        this.rotation.set( Math.PI, 0, 0 );\r\n\r\n    } else {\r\n\r\n\t    var axis = THREE.ArrowHelper.__v2.set( d.z, 0, - d.x ).normalize();\r\n\t    var radians = Math.acos( d.y );\r\n\t    var quaternion = THREE.ArrowHelper.__q1.setFromAxisAngle( axis, radians );\r\n\r\n\t    this.rotation.setEulerFromQuaternion( quaternion, this.eulerOrder );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype.setLength = function ( length ) {\r\n\r\n\tthis.scale.set( length, length, length );\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype.setColor = function ( hex ) {\r\n\r\n\tthis.line.material.color.setHex( hex );\r\n\tthis.cone.material.color.setHex( hex );\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.__v1 = new THREE.Vector3();\r\nTHREE.ArrowHelper.__v2 = new THREE.Vector3();\r\nTHREE.ArrowHelper.__q1 = new THREE.Quaternion();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows frustum, line of sight and up of the camera\r\n *\t- suitable for fast updates\r\n * \t- based on frustum visualization in lightgl.js shadowmap example\r\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n */\r\n\r\nTHREE.CameraHelper = function ( camera ) {\r\n\r\n\tTHREE.Line.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.geometry = new THREE.Geometry();\r\n\tthis.material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\r\n\tthis.type = THREE.LinePieces;\r\n\r\n\tthis.matrixWorld = camera.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.pointMap = {};\r\n\r\n\t// colors\r\n\r\n\tvar hexFrustum = 0xffaa00;\r\n\tvar hexCone = 0xff0000;\r\n\tvar hexUp = 0x00aaff;\r\n\tvar hexTarget = 0xffffff;\r\n\tvar hexCross = 0x333333;\r\n\r\n\t// near\r\n\r\n\taddLine( \"n1\", \"n2\", hexFrustum );\r\n\taddLine( \"n2\", \"n4\", hexFrustum );\r\n\taddLine( \"n4\", \"n3\", hexFrustum );\r\n\taddLine( \"n3\", \"n1\", hexFrustum );\r\n\r\n\t// far\r\n\r\n\taddLine( \"f1\", \"f2\", hexFrustum );\r\n\taddLine( \"f2\", \"f4\", hexFrustum );\r\n\taddLine( \"f4\", \"f3\", hexFrustum );\r\n\taddLine( \"f3\", \"f1\", hexFrustum );\r\n\r\n\t// sides\r\n\r\n\taddLine( \"n1\", \"f1\", hexFrustum );\r\n\taddLine( \"n2\", \"f2\", hexFrustum );\r\n\taddLine( \"n3\", \"f3\", hexFrustum );\r\n\taddLine( \"n4\", \"f4\", hexFrustum );\r\n\r\n\t// cone\r\n\r\n\taddLine( \"p\", \"n1\", hexCone );\r\n\taddLine( \"p\", \"n2\", hexCone );\r\n\taddLine( \"p\", \"n3\", hexCone );\r\n\taddLine( \"p\", \"n4\", hexCone );\r\n\r\n\t// up\r\n\r\n\taddLine( \"u1\", \"u2\", hexUp );\r\n\taddLine( \"u2\", \"u3\", hexUp );\r\n\taddLine( \"u3\", \"u1\", hexUp );\r\n\r\n\t// target\r\n\r\n\taddLine( \"c\", \"t\", hexTarget );\r\n\taddLine( \"p\", \"c\", hexCross );\r\n\r\n\t// cross\r\n\r\n\taddLine( \"cn1\", \"cn2\", hexCross );\r\n\taddLine( \"cn3\", \"cn4\", hexCross );\r\n\r\n\taddLine( \"cf1\", \"cf2\", hexCross );\r\n\taddLine( \"cf3\", \"cf4\", hexCross );\r\n\r\n\tthis.camera = camera;\r\n\r\n\tfunction addLine( a, b, hex ) {\r\n\r\n\t\taddPoint( a, hex );\r\n\t\taddPoint( b, hex );\r\n\r\n\t}\r\n\r\n\tfunction addPoint( id, hex ) {\r\n\r\n\t\tscope.geometry.vertices.push( new THREE.Vector3() );\r\n\t\tscope.geometry.colors.push( new THREE.Color( hex ) );\r\n\r\n\t\tif ( scope.pointMap[ id ] === undefined ) scope.pointMap[ id ] = [];\r\n\r\n\t\tscope.pointMap[ id ].push( scope.geometry.vertices.length - 1 );\r\n\r\n\t}\r\n\r\n\tthis.update( camera );\r\n\r\n};\r\n\r\nTHREE.CameraHelper.prototype = Object.create( THREE.Line.prototype );\r\n\r\nTHREE.CameraHelper.prototype.update = function () {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar w = 1, h = 1;\r\n\r\n\t// we need just camera projection matrix\r\n\t// world matrix must be identity\r\n\r\n\tTHREE.CameraHelper.__c.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\r\n\t// center / target\r\n\r\n\tsetPoint( \"c\", 0, 0, -1 );\r\n\tsetPoint( \"t\", 0, 0,  1 );\r\n\r\n\t// near\r\n\r\n\tsetPoint( \"n1\", -w, -h, -1 );\r\n\tsetPoint( \"n2\",  w, -h, -1 );\r\n\tsetPoint( \"n3\", -w,  h, -1 );\r\n\tsetPoint( \"n4\",  w,  h, -1 );\r\n\r\n\t// far\r\n\r\n\tsetPoint( \"f1\", -w, -h, 1 );\r\n\tsetPoint( \"f2\",  w, -h, 1 );\r\n\tsetPoint( \"f3\", -w,  h, 1 );\r\n\tsetPoint( \"f4\",  w,  h, 1 );\r\n\r\n\t// up\r\n\r\n\tsetPoint( \"u1\",  w * 0.7, h * 1.1, -1 );\r\n\tsetPoint( \"u2\", -w * 0.7, h * 1.1, -1 );\r\n\tsetPoint( \"u3\",        0, h * 2,   -1 );\r\n\r\n\t// cross\r\n\r\n\tsetPoint( \"cf1\", -w,  0, 1 );\r\n\tsetPoint( \"cf2\",  w,  0, 1 );\r\n\tsetPoint( \"cf3\",  0, -h, 1 );\r\n\tsetPoint( \"cf4\",  0,  h, 1 );\r\n\r\n\tsetPoint( \"cn1\", -w,  0, -1 );\r\n\tsetPoint( \"cn2\",  w,  0, -1 );\r\n\tsetPoint( \"cn3\",  0, -h, -1 );\r\n\tsetPoint( \"cn4\",  0,  h, -1 );\r\n\r\n\tfunction setPoint( point, x, y, z ) {\r\n\r\n\t\tTHREE.CameraHelper.__v.set( x, y, z );\r\n\t\tTHREE.CameraHelper.__projector.unprojectVector( THREE.CameraHelper.__v, THREE.CameraHelper.__c );\r\n\r\n\t\tvar points = scope.pointMap[ point ];\r\n\r\n\t\tif ( points !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tscope.geometry.vertices[ points[ i ] ].copy( THREE.CameraHelper.__v );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.geometry.verticesNeedUpdate = true;\r\n\r\n};\r\n\r\nTHREE.CameraHelper.__projector = new THREE.Projector();\r\nTHREE.CameraHelper.__v = new THREE.Vector3();\r\nTHREE.CameraHelper.__c = new THREE.Camera();\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows directional light color, intensity, position, orientation and target\r\n */\r\n\r\nTHREE.DirectionalLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t// direction\r\n\r\n\tthis.direction = new THREE.Vector3();\r\n\tthis.direction.subVectors( light.target.position, light.position );\r\n\r\n\t// color\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// light helper\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );\r\n\tvar raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );\r\n\r\n\tvar bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\r\n\tthis.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );\r\n\r\n\tthis.add( this.lightSphere );\r\n\tthis.add( this.lightRays );\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t// light target helper\r\n\r\n\tthis.targetSphere = null;\r\n\r\n\tif ( light.target.properties.targetInverse !== undefined ) {\r\n\r\n\t\tvar targetGeo = new THREE.SphereGeometry( sphereSize, 8, 4 );\r\n\t\tvar targetMaterial = new THREE.MeshBasicMaterial( { color: hexColor, wireframe: true, fog: false } );\r\n\r\n\t\tthis.targetSphere = new THREE.Mesh( targetGeo, targetMaterial );\r\n\t\tthis.targetSphere.position = light.target.position;\r\n\r\n\t\tthis.targetSphere.properties.isGizmo = true;\r\n\t\tthis.targetSphere.properties.gizmoSubject = light.target;\r\n\t\tthis.targetSphere.properties.gizmoRoot = this.targetSphere;\r\n\r\n\t\tvar lineMaterial = new THREE.LineDashedMaterial( { color: hexColor, dashSize: 4, gapSize: 4, opacity: 0.75, transparent: true, fog: false } );\r\n\t\tvar lineGeometry = new THREE.Geometry();\r\n\t\tlineGeometry.vertices.push( this.position.clone() );\r\n\t\tlineGeometry.vertices.push( this.targetSphere.position.clone() );\r\n\t\tlineGeometry.computeLineDistances();\r\n\r\n\t\tthis.targetLine = new THREE.Line( lineGeometry, lineMaterial );\r\n\t\tthis.targetLine.properties.isGizmo = true;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n}\r\n\r\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.DirectionalLightHelper.prototype.update = function () {\r\n\r\n\t// update arrow orientation\r\n\t// pointing from light to target\r\n\r\n\tthis.direction.subVectors( this.light.target.position, this.light.position );\r\n\r\n\t// update arrow, spheres, rays and line colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.color.copy( this.color );\r\n\tthis.lightRays.material.color.copy( this.color );\r\n\r\n\t// Only update targetSphere and targetLine if available\r\n\tif ( this.targetSphere !== null ) {\r\n\r\n\t\tthis.targetSphere.material.color.copy( this.color );\r\n\t\tthis.targetLine.material.color.copy( this.color );\r\n\r\n\t\t// update target line vertices\r\n\r\n\t\tthis.targetLine.geometry.vertices[ 0 ].copy( this.light.position );\r\n\t\tthis.targetLine.geometry.vertices[ 1 ].copy( this.light.target.position );\r\n\r\n\t\tthis.targetLine.geometry.computeLineDistances();\r\n\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows hemisphere light intensity, sky and ground colors and directions\r\n */\r\n\r\nTHREE.HemisphereLightHelper = function ( light, sphereSize, arrowLength, domeSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t//\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\t// sky color\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// ground color\r\n\r\n\tthis.groundColor = light.groundColor.clone();\r\n\tthis.groundColor.multiplyScalar( intensity );\r\n\r\n\tvar hexColorGround = this.groundColor.getHex();\r\n\r\n\t// double colored light bulb\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8, 0, Math.PI * 2, 0, Math.PI * 0.5 );\r\n\tvar bulbGroundGeometry = new THREE.SphereGeometry( sphereSize, 16, 8, 0, Math.PI * 2, Math.PI * 0.5, Math.PI );\r\n\r\n\tvar bulbSkyMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar bulbGroundMaterial = new THREE.MeshBasicMaterial( { color: hexColorGround, fog: false } );\r\n\r\n\tfor ( var i = 0, il = bulbGeometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\tbulbGeometry.faces[ i ].materialIndex = 0;\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0, il = bulbGroundGeometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\tbulbGroundGeometry.faces[ i ].materialIndex = 1;\r\n\r\n\t}\r\n\r\n\tTHREE.GeometryUtils.merge( bulbGeometry, bulbGroundGeometry );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, new THREE.MeshFaceMaterial( [ bulbSkyMaterial, bulbGroundMaterial ] ) );\r\n\r\n\t// arrows for sky and ground light directions\r\n\r\n\tthis.lightArrow = new THREE.ArrowHelper( new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, ( sphereSize + arrowLength ) * 1.1, 0 ), arrowLength, hexColor );\r\n\tthis.lightArrow.rotation.x = Math.PI;\r\n\r\n\tthis.lightArrowGround = new THREE.ArrowHelper( new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, ( sphereSize + arrowLength ) * -1.1, 0 ), arrowLength, hexColorGround );\r\n\r\n\tvar joint = new THREE.Object3D();\r\n\tjoint.rotation.x = -Math.PI * 0.5;\r\n\r\n\tjoint.add( this.lightSphere );\r\n\tjoint.add( this.lightArrow );\r\n\tjoint.add( this.lightArrowGround );\r\n\r\n\tthis.add( joint );\r\n\r\n\t//\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n\t//\r\n\r\n\tthis.target = new THREE.Vector3();\r\n\tthis.lookAt( this.target );\r\n\r\n}\r\n\r\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.HemisphereLightHelper.prototype.update = function () {\r\n\r\n\t// update sphere sky and ground colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.groundColor.copy( this.light.groundColor );\r\n\tthis.groundColor.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.materials[ 0 ].color.copy( this.color );\r\n\tthis.lightSphere.material.materials[ 1 ].color.copy( this.groundColor );\r\n\r\n\tthis.lightArrow.setColor( this.color.getHex() );\r\n\tthis.lightArrowGround.setColor( this.groundColor.getHex() );\r\n\r\n\tthis.lookAt( this.target );\r\n\r\n}\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows point light color, intensity, position and distance\r\n */\r\n\r\nTHREE.PointLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t// color\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// light helper\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );\r\n\tvar raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );\r\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\r\n\tvar bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );\r\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\tvar d = light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n\tthis.add( this.lightSphere );\r\n\tthis.add( this.lightRays );\r\n\tthis.add( this.lightDistance );\r\n\r\n\t//\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n}\r\n\r\nTHREE.PointLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.PointLightHelper.prototype.update = function () {\r\n\r\n\t// update sphere and rays colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.color.copy( this.color );\r\n\tthis.lightRays.material.color.copy( this.color );\r\n\tthis.lightDistance.material.color.copy( this.color );\r\n\r\n\t//\r\n\r\n\tvar d = this.light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.visible = true;\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows spot light color, intensity, position, orientation, light cone and target\r\n */\r\n\r\nTHREE.SpotLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t// direction\r\n\r\n\tthis.direction = new THREE.Vector3();\r\n\tthis.direction.subVectors( light.target.position, light.position );\r\n\r\n\t// color\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// light helper\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );\r\n\tvar raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );\r\n\tvar coneGeometry = new THREE.CylinderGeometry( 0.0001, 1, 1, 8, 1, true );\r\n\r\n\tvar coneMatrix = new THREE.Matrix4();\r\n\tconeMatrix.rotateX( -Math.PI/2 );\r\n\tconeMatrix.translate( new THREE.Vector3( 0, -0.5, 0 ) );\r\n\tconeGeometry.applyMatrix( coneMatrix );\r\n\r\n\tvar bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar coneMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.3, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightCone = new THREE.Mesh( coneGeometry, coneMaterial );\r\n\r\n\tvar coneLength = light.distance ? light.distance : 10000;\r\n\tvar coneWidth = coneLength * Math.tan( light.angle * 0.5 ) * 2;\r\n\tthis.lightCone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\tthis.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );\r\n\r\n\tthis.gyroscope = new THREE.Gyroscope();\r\n\r\n\tthis.gyroscope.add( this.lightSphere );\r\n\tthis.gyroscope.add( this.lightRays );\r\n\r\n\tthis.add( this.gyroscope );\r\n\tthis.add( this.lightCone );\r\n\r\n\tthis.lookAt( light.target.position );\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t// light target helper\r\n\r\n\tthis.targetSphere = null;\r\n\r\n\tif ( light.target.properties.targetInverse !== undefined ) {\r\n\r\n\t\tvar targetGeo = new THREE.SphereGeometry( sphereSize, 8, 4 );\r\n\t\tvar targetMaterial = new THREE.MeshBasicMaterial( { color: hexColor, wireframe: true, fog: false } );\r\n\r\n\t\tthis.targetSphere = new THREE.Mesh( targetGeo, targetMaterial );\r\n\t\tthis.targetSphere.position = light.target.position;\r\n\r\n\t\tthis.targetSphere.properties.isGizmo = true;\r\n\t\tthis.targetSphere.properties.gizmoSubject = light.target;\r\n\t\tthis.targetSphere.properties.gizmoRoot = this.targetSphere;\r\n\r\n\t\tvar lineMaterial = new THREE.LineDashedMaterial( { color: hexColor, dashSize: 4, gapSize: 4, opacity: 0.75, transparent: true, fog: false } );\r\n\t\tvar lineGeometry = new THREE.Geometry();\r\n\t\tlineGeometry.vertices.push( this.position.clone() );\r\n\t\tlineGeometry.vertices.push( this.targetSphere.position.clone() );\r\n\t\tlineGeometry.computeLineDistances();\r\n\r\n\t\tthis.targetLine = new THREE.Line( lineGeometry, lineMaterial );\r\n\t\tthis.targetLine.properties.isGizmo = true;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n}\r\n\r\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.SpotLightHelper.prototype.update = function () {\r\n\r\n\t// update arrow orientation\r\n\t// pointing from light to target\r\n\r\n\tthis.direction.subVectors( this.light.target.position, this.light.position );\r\n\r\n\t// update light cone orientation and size\r\n\r\n\tthis.lookAt( this.light.target.position );\r\n\r\n\tvar coneLength = this.light.distance ? this.light.distance : 10000;\r\n\tvar coneWidth = coneLength * Math.tan( this.light.angle * 0.5 ) * 2;\r\n\tthis.lightCone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t// update arrow, spheres, rays and line colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.color.copy( this.color );\r\n\tthis.lightRays.material.color.copy( this.color );\r\n\tthis.lightCone.material.color.copy( this.color );\r\n\r\n\t// Only update targetSphere and targetLine if available\r\n\tif ( this.targetSphere !== null ) {\r\n\r\n\t\tthis.targetSphere.material.color.copy( this.color );\r\n\t\tthis.targetLine.material.color.copy( this.color );\r\n\r\n\t\t// update target line vertices\r\n\r\n\t\tthis.targetLine.geometry.vertices[ 0 ].copy( this.light.position );\r\n\t\tthis.targetLine.geometry.vertices[ 1 ].copy( this.light.target.position );\r\n\r\n\t\tthis.targetLine.geometry.computeLineDistances();\r\n\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ImmediateRenderObject = function ( ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.render = function ( renderCallback ) { };\r\n\r\n};\r\n\r\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.lensFlares = [];\r\n\r\n\tthis.positionScreen = new THREE.Vector3();\r\n\tthis.customUpdateCallback = undefined;\r\n\r\n\tif( texture !== undefined ) {\r\n\r\n\t\tthis.add( texture, size, distance, blending, color );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\n\r\n/*\r\n * Add: adds another flare\r\n */\r\n\r\nTHREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {\r\n\r\n\tif( size === undefined ) size = -1;\r\n\tif( distance === undefined ) distance = 0;\r\n\tif( opacity === undefined ) opacity = 1;\r\n\tif( color === undefined ) color = new THREE.Color( 0xffffff );\r\n\tif( blending === undefined ) blending = THREE.NormalBlending;\r\n\r\n\tdistance = Math.min( distance, Math.max( 0, distance ) );\r\n\r\n\tthis.lensFlares.push( { texture: texture, \t\t\t// THREE.Texture\r\n\t\t                    size: size, \t\t\t\t// size in pixels (-1 = use texture.width)\r\n\t\t                    distance: distance, \t\t// distance (0-1) from light source (0=at light source)\r\n\t\t                    x: 0, y: 0, z: 0,\t\t\t// screen position (-1 => 1) z = 0 is ontop z = 1 is back\r\n\t\t                    scale: 1, \t\t\t\t\t// scale\r\n\t\t                    rotation: 1, \t\t\t\t// rotation\r\n\t\t                    opacity: opacity,\t\t\t// opacity\r\n\t\t\t\t\t\t\tcolor: color,\t\t\t\t// color\r\n\t\t                    blending: blending } );\t\t// blending\r\n\r\n};\r\n\r\n\r\n/*\r\n * Update lens flares update positions on all flares based on the screen position\r\n * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\r\n */\r\n\r\nTHREE.LensFlare.prototype.updateLensFlares = function () {\r\n\r\n\tvar f, fl = this.lensFlares.length;\r\n\tvar flare;\r\n\tvar vecX = -this.positionScreen.x * 2;\r\n\tvar vecY = -this.positionScreen.y * 2;\r\n\r\n\tfor( f = 0; f < fl; f ++ ) {\r\n\r\n\t\tflare = this.lensFlares[ f ];\r\n\r\n\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\r\n\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\r\n\r\n\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\r\n\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MorphBlendMesh = function( geometry, material ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.animationsMap = {};\r\n\tthis.animationsList = [];\r\n\r\n\t// prepare default animation\r\n\t// (all frames played together in 1 second)\r\n\r\n\tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n\tvar name = \"__default\";\r\n\r\n\tvar startFrame = 0;\r\n\tvar endFrame = numFrames - 1;\r\n\r\n\tvar fps = numFrames / 1;\r\n\r\n\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\tthis.setAnimationWeight( name, 1 );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n\tvar animation = {\r\n\r\n\t\tstartFrame: start,\r\n\t\tendFrame: end,\r\n\r\n\t\tlength: end - start + 1,\r\n\r\n\t\tfps: fps,\r\n\t\tduration: ( end - start ) / fps,\r\n\r\n\t\tlastFrame: 0,\r\n\t\tcurrentFrame: 0,\r\n\r\n\t\tactive: false,\r\n\r\n\t\ttime: 0,\r\n\t\tdirection: 1,\r\n\t\tweight: 1,\r\n\r\n\t\tdirectionBackwards: false,\r\n\t\tmirroredLoop: false\r\n\r\n\t};\r\n\r\n\tthis.animationsMap[ name ] = animation;\r\n\tthis.animationsList.push( animation );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n\tvar pattern = /([a-z]+)(\\d+)/;\r\n\r\n\tvar firstAnimation, frameRanges = {};\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\tvar chunks = morph.name.match( pattern );\r\n\r\n\t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n\t\t\tvar name = chunks[ 1 ];\r\n\t\t\tvar num = chunks[ 2 ];\r\n\r\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: -Infinity };\r\n\r\n\t\t\tvar range = frameRanges[ name ];\r\n\r\n\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\tif ( i > range.end ) range.end = i;\r\n\r\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var name in frameRanges ) {\r\n\r\n\t\tvar range = frameRanges[ name ];\r\n\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n\t}\r\n\r\n\tthis.firstAnimation = firstAnimation;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = 1;\r\n\t\tanimation.directionBackwards = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = -1;\r\n\t\tanimation.directionBackwards = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.fps = fps;\r\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.duration = duration;\r\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.weight = weight;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = time;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n\tvar time = 0;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\ttime = animation.time;\r\n\r\n\t}\r\n\r\n\treturn time;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n\tvar duration = -1;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tduration = animation.duration;\r\n\r\n\t}\r\n\r\n\treturn duration;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = 0;\r\n\t\tanimation.active = true;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( \"animation[\" + name + \"] undefined\" );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.active = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n\t\tvar animation = this.animationsList[ i ];\r\n\r\n\t\tif ( ! animation.active ) continue;\r\n\r\n\t\tvar frameTime = animation.duration / animation.length;\r\n\r\n\t\tanimation.time += animation.direction * delta;\r\n\r\n\t\tif ( animation.mirroredLoop ) {\r\n\r\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n\t\t\t\tanimation.direction *= -1;\r\n\r\n\t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( animation.time < 0 ) {\r\n\r\n\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n\t\t}\r\n\r\n\t\tvar keyframe = animation.startFrame + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\tvar weight = animation.weight;\r\n\r\n\t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\tanimation.currentFrame = keyframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlarePlugin = function ( ) {\r\n\r\n\tvar _gl, _renderer, _precision, _lensFlare = {};\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\t_precision = renderer.getPrecision();\r\n\r\n\t\t_lensFlare.vertices = new Float32Array( 8 + 8 );\r\n\t\t_lensFlare.faces = new Uint16Array( 6 );\r\n\r\n\t\tvar i = 0;\r\n\t\t_lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = -1;\t// vertex\r\n\t\t_lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 0;\t// uv... etc.\r\n\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = -1;\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 0;\r\n\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;\r\n\r\n\t\t_lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = 1;\r\n\t\t_lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 1;\r\n\r\n\t\ti = 0;\r\n\t\t_lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 1; _lensFlare.faces[ i++ ] = 2;\r\n\t\t_lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 2; _lensFlare.faces[ i++ ] = 3;\r\n\r\n\t\t// buffers\r\n\r\n\t\t_lensFlare.vertexBuffer     = _gl.createBuffer();\r\n\t\t_lensFlare.elementBuffer    = _gl.createBuffer();\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );\r\n\t\t_gl.bufferData( _gl.ARRAY_BUFFER, _lensFlare.vertices, _gl.STATIC_DRAW );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );\r\n\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.faces, _gl.STATIC_DRAW );\r\n\r\n\t\t// textures\r\n\r\n\t\t_lensFlare.tempTexture      = _gl.createTexture();\r\n\t\t_lensFlare.occlusionTexture = _gl.createTexture();\r\n\r\n\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\r\n\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, 16, 16, 0, _gl.RGB, _gl.UNSIGNED_BYTE, null );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );\r\n\r\n\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );\r\n\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, 16, 16, 0, _gl.RGBA, _gl.UNSIGNED_BYTE, null );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );\r\n\r\n\t\tif ( _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) <= 0 ) {\r\n\r\n\t\t\t_lensFlare.hasVertexTexture = false;\r\n\t\t\t_lensFlare.program = createProgram( THREE.ShaderFlares[ \"lensFlare\" ], _precision );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_lensFlare.hasVertexTexture = true;\r\n\t\t\t_lensFlare.program = createProgram( THREE.ShaderFlares[ \"lensFlareVertexTexture\" ], _precision );\r\n\r\n\t\t}\r\n\r\n\t\t_lensFlare.attributes = {};\r\n\t\t_lensFlare.uniforms = {};\r\n\r\n\t\t_lensFlare.attributes.vertex       = _gl.getAttribLocation ( _lensFlare.program, \"position\" );\r\n\t\t_lensFlare.attributes.uv           = _gl.getAttribLocation ( _lensFlare.program, \"uv\" );\r\n\r\n\t\t_lensFlare.uniforms.renderType     = _gl.getUniformLocation( _lensFlare.program, \"renderType\" );\r\n\t\t_lensFlare.uniforms.map            = _gl.getUniformLocation( _lensFlare.program, \"map\" );\r\n\t\t_lensFlare.uniforms.occlusionMap   = _gl.getUniformLocation( _lensFlare.program, \"occlusionMap\" );\r\n\t\t_lensFlare.uniforms.opacity        = _gl.getUniformLocation( _lensFlare.program, \"opacity\" );\r\n\t\t_lensFlare.uniforms.color          = _gl.getUniformLocation( _lensFlare.program, \"color\" );\r\n\t\t_lensFlare.uniforms.scale          = _gl.getUniformLocation( _lensFlare.program, \"scale\" );\r\n\t\t_lensFlare.uniforms.rotation       = _gl.getUniformLocation( _lensFlare.program, \"rotation\" );\r\n\t\t_lensFlare.uniforms.screenPosition = _gl.getUniformLocation( _lensFlare.program, \"screenPosition\" );\r\n\r\n\t};\r\n\r\n\r\n\t/*\r\n\t * Render lens flares\r\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\r\n\t *         reads these back and calculates occlusion.\r\n\t *         Then _lensFlare.update_lensFlares() is called to re-position and\r\n\t *         update transparency of flares. Then they are rendered.\r\n\t *\r\n\t */\r\n\r\n\tthis.render = function ( scene, camera, viewportWidth, viewportHeight ) {\r\n\r\n\t\tvar flares = scene.__webglFlares,\r\n\t\t\tnFlares = flares.length;\r\n\r\n\t\tif ( ! nFlares ) return;\r\n\r\n\t\tvar tempPosition = new THREE.Vector3();\r\n\r\n\t\tvar invAspect = viewportHeight / viewportWidth,\r\n\t\t\thalfViewportWidth = viewportWidth * 0.5,\r\n\t\t\thalfViewportHeight = viewportHeight * 0.5;\r\n\r\n\t\tvar size = 16 / viewportHeight,\r\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\r\n\r\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\r\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\r\n\r\n\t\tvar uniforms = _lensFlare.uniforms,\r\n\t\t\tattributes = _lensFlare.attributes;\r\n\r\n\t\t// set _lensFlare program and reset blending\r\n\r\n\t\t_gl.useProgram( _lensFlare.program );\r\n\r\n\t\t_gl.enableVertexAttribArray( _lensFlare.attributes.vertex );\r\n\t\t_gl.enableVertexAttribArray( _lensFlare.attributes.uv );\r\n\r\n\t\t// loop through all lens flares to update their occlusion and positions\r\n\t\t// setup gl and common used attribs/unforms\r\n\r\n\t\t_gl.uniform1i( uniforms.occlusionMap, 0 );\r\n\t\t_gl.uniform1i( uniforms.map, 1 );\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );\r\n\t\t_gl.vertexAttribPointer( attributes.vertex, 2, _gl.FLOAT, false, 2 * 8, 0 );\r\n\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );\r\n\r\n\t\t_gl.disable( _gl.CULL_FACE );\r\n\t\t_gl.depthMask( false );\r\n\r\n\t\tvar i, j, jl, flare, sprite;\r\n\r\n\t\tfor ( i = 0; i < nFlares; i ++ ) {\r\n\r\n\t\t\tsize = 16 / viewportHeight;\r\n\t\t\tscale.set( size * invAspect, size );\r\n\r\n\t\t\t// calc object screen position\r\n\r\n\t\t\tflare = flares[ i ];\r\n\r\n\t\t\ttempPosition.set( flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14] );\r\n\r\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\r\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\r\n\r\n\t\t\t// setup arrays for gl programs\r\n\r\n\t\t\tscreenPosition.copy( tempPosition )\r\n\r\n\t\t\tscreenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;\r\n\t\t\tscreenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;\r\n\r\n\t\t\t// screen cull\r\n\r\n\t\t\tif ( _lensFlare.hasVertexTexture || (\r\n\t\t\t\tscreenPositionPixels.x > 0 &&\r\n\t\t\t\tscreenPositionPixels.x < viewportWidth &&\r\n\t\t\t\tscreenPositionPixels.y > 0 &&\r\n\t\t\t\tscreenPositionPixels.y < viewportHeight ) ) {\r\n\r\n\t\t\t\t// save current RGB to temp texture\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE1 );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\r\n\t\t\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// render pink quad\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.renderType, 0 );\r\n\t\t\t\t_gl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t_gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\r\n\t\t\t\t_gl.disable( _gl.BLEND );\r\n\t\t\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// copy result to occlusionMap\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );\r\n\t\t\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// restore graphics\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.renderType, 1 );\r\n\t\t\t\t_gl.disable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE1 );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// update object positions\r\n\r\n\t\t\t\tflare.positionScreen.copy( screenPosition )\r\n\r\n\t\t\t\tif ( flare.customUpdateCallback ) {\r\n\r\n\t\t\t\t\tflare.customUpdateCallback( flare );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tflare.updateLensFlares();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render flares\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.renderType, 2 );\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\t\t\tfor ( j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tsprite = flare.lensFlares[ j ];\r\n\r\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\r\n\r\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\r\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\r\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\r\n\r\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewportHeight;\r\n\r\n\t\t\t\t\t\tscale.x = size * invAspect;\r\n\t\t\t\t\t\tscale.y = size;\r\n\r\n\t\t\t\t\t\t_gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\t\t\t\t\t_gl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\t\t_gl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\r\n\t\t\t\t\t\t_gl.uniform1f( uniforms.opacity, sprite.opacity );\r\n\t\t\t\t\t\t_gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\r\n\r\n\t\t\t\t\t\t_renderer.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\r\n\t\t\t\t\t\t_renderer.setTexture( sprite.texture, 1 );\r\n\r\n\t\t\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\t\t_gl.depthMask( true );\r\n\r\n\t};\r\n\r\n\tfunction createProgram ( shader, precision ) {\r\n\r\n\t\tvar program = _gl.createProgram();\r\n\r\n\t\tvar fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );\r\n\t\tvar vertexShader = _gl.createShader( _gl.VERTEX_SHADER );\r\n\r\n\t\tvar prefix = \"precision \" + precision + \" float;\\n\";\r\n\r\n\t\t_gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\t_gl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\r\n\t\t_gl.compileShader( fragmentShader );\r\n\t\t_gl.compileShader( vertexShader );\r\n\r\n\t\t_gl.attachShader( program, fragmentShader );\r\n\t\t_gl.attachShader( program, vertexShader );\r\n\r\n\t\t_gl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ShadowMapPlugin = function ( ) {\r\n\r\n\tvar _gl,\r\n\t_renderer,\r\n\t_depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_min = new THREE.Vector3(),\r\n\t_max = new THREE.Vector3();\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\r\n\t\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\r\n\r\n\t\t_depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );\r\n\t\t_depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );\r\n\t\t_depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );\r\n\t\t_depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );\r\n\r\n\t\t_depthMaterial._shadowPass = true;\r\n\t\t_depthMaterialMorph._shadowPass = true;\r\n\t\t_depthMaterialSkin._shadowPass = true;\r\n\t\t_depthMaterialMorphSkin._shadowPass = true;\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( ! ( _renderer.shadowMapEnabled && _renderer.shadowMapAutoUpdate ) ) return;\r\n\r\n\t\tthis.update( scene, camera );\r\n\r\n\t};\r\n\r\n\tthis.update = function ( scene, camera ) {\r\n\r\n\t\tvar i, il, j, jl, n,\r\n\r\n\t\tshadowMap, shadowMatrix, shadowCamera,\r\n\t\tprogram, buffer, material,\r\n\t\twebglObject, object, light,\r\n\t\trenderList,\r\n\r\n\t\tlights = [],\r\n\t\tk = 0,\r\n\r\n\t\tfog = null;\r\n\r\n\t\t// set GL state for depth map\r\n\r\n\t\t_gl.clearColor( 1, 1, 1, 1 );\r\n\t\t_gl.disable( _gl.BLEND );\r\n\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\tif ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t_gl.cullFace( _gl.FRONT );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t}\r\n\r\n\t\t_renderer.setDepthTest( true );\r\n\r\n\t\t// preprocess lights\r\n\t\t// \t- skip lights that are not casting shadows\r\n\t\t//\t- create virtual lights for cascaded shadow maps\r\n\r\n\t\tfor ( i = 0, il = scene.__lights.length; i < il; i ++ ) {\r\n\r\n\t\t\tlight = scene.__lights[ i ];\r\n\r\n\t\t\tif ( ! light.castShadow ) continue;\r\n\r\n\t\t\tif ( ( light instanceof THREE.DirectionalLight ) && light.shadowCascade ) {\r\n\r\n\t\t\t\tfor ( n = 0; n < light.shadowCascadeCount; n ++ ) {\r\n\r\n\t\t\t\t\tvar virtualLight;\r\n\r\n\t\t\t\t\tif ( ! light.shadowCascadeArray[ n ] ) {\r\n\r\n\t\t\t\t\t\tvirtualLight = createVirtualLight( light, n );\r\n\t\t\t\t\t\tvirtualLight.originalCamera = camera;\r\n\r\n\t\t\t\t\t\tvar gyro = new THREE.Gyroscope();\r\n\t\t\t\t\t\tgyro.position = light.shadowCascadeOffset;\r\n\r\n\t\t\t\t\t\tgyro.add( virtualLight );\r\n\t\t\t\t\t\tgyro.add( virtualLight.target );\r\n\r\n\t\t\t\t\t\tcamera.add( gyro );\r\n\r\n\t\t\t\t\t\tlight.shadowCascadeArray[ n ] = virtualLight;\r\n\r\n\t\t\t\t\t\tconsole.log( \"Created virtualLight\", virtualLight );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvirtualLight = light.shadowCascadeArray[ n ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tupdateVirtualLight( light, n );\r\n\r\n\t\t\t\t\tlights[ k ] = virtualLight;\r\n\t\t\t\t\tk ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlights[ k ] = light;\r\n\t\t\t\tk ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// render depth map\r\n\r\n\t\tfor ( i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\tlight = lights[ i ];\r\n\r\n\t\t\tif ( ! light.shadowMap ) {\r\n\r\n\t\t\t\tvar shadowFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\tif ( _renderer.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\t\t\tshadowFilter = THREE.NearestFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };\r\n\r\n\t\t\t\tlight.shadowMap = new THREE.WebGLRenderTarget( light.shadowMapWidth, light.shadowMapHeight, pars );\r\n\t\t\t\tlight.shadowMapSize = new THREE.Vector2( light.shadowMapWidth, light.shadowMapHeight );\r\n\r\n\t\t\t\tlight.shadowMatrix = new THREE.Matrix4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! light.shadowCamera ) {\r\n\r\n\t\t\t\tif ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\t\tlight.shadowCamera = new THREE.PerspectiveCamera( light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t\tlight.shadowCamera = new THREE.OrthographicCamera( light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( \"Unsupported light type for shadow\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscene.add( light.shadowCamera );\r\n\r\n\t\t\t\tif ( _renderer.autoUpdateScene ) scene.updateMatrixWorld();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( light.shadowCameraVisible && ! light.cameraHelper ) {\r\n\r\n\t\t\t\tlight.cameraHelper = new THREE.CameraHelper( light.shadowCamera );\r\n\t\t\t\tlight.shadowCamera.add( light.cameraHelper );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( light.isVirtual && virtualLight.originalCamera == camera ) {\r\n\r\n\t\t\t\tupdateShadowCamera( camera, light );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tshadowMap = light.shadowMap;\r\n\t\t\tshadowMatrix = light.shadowMatrix;\r\n\t\t\tshadowCamera = light.shadowCamera;\r\n\r\n\t\t\tshadowCamera.position.copy( light.matrixWorld.getPosition() );\r\n\t\t\tshadowCamera.lookAt( light.target.matrixWorld.getPosition() );\r\n\t\t\tshadowCamera.updateMatrixWorld();\r\n\r\n\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\r\n\r\n\t\t\tif ( light.cameraHelper ) light.cameraHelper.visible = light.shadowCameraVisible;\r\n\t\t\tif ( light.shadowCameraVisible ) light.cameraHelper.update();\r\n\r\n\t\t\t// compute shadow matrix\r\n\r\n\t\t\tshadowMatrix.set( 0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t\t\t\t  0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t\t\t\t  0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t\t\t\t  0.0, 0.0, 0.0, 1.0 );\r\n\r\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t// render shadow map\r\n\r\n\t\t\t_renderer.setRenderTarget( shadowMap );\r\n\t\t\t_renderer.clear();\r\n\r\n\t\t\t// set object matrices & frustum culling\r\n\r\n\t\t\trenderList = scene.__webglObjects;\r\n\r\n\t\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\twebglObject = renderList[ j ];\r\n\t\t\t\tobject = webglObject.object;\r\n\r\n\t\t\t\twebglObject.render = false;\r\n\r\n\t\t\t\tif ( object.visible && object.castShadow ) {\r\n\r\n\t\t\t\t\tif ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\t\twebglObject.render = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// render regular objects\r\n\r\n\t\t\tvar objectMaterial, useMorphing, useSkinning;\r\n\r\n\t\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\twebglObject = renderList[ j ];\r\n\r\n\t\t\t\tif ( webglObject.render ) {\r\n\r\n\t\t\t\t\tobject = webglObject.object;\r\n\t\t\t\t\tbuffer = webglObject.buffer;\r\n\r\n\t\t\t\t\t// culling is overriden globally for all objects\r\n\t\t\t\t\t// while rendering depth map\r\n\r\n\t\t\t\t\t// need to deal with MeshFaceMaterial somehow\r\n\t\t\t\t\t// in that case just use the first of material.materials for now\r\n\t\t\t\t\t// (proper solution would require to break objects by materials\r\n\t\t\t\t\t//  similarly to regular rendering and then set corresponding\r\n\t\t\t\t\t//  depth materials per each chunk instead of just once per object)\r\n\r\n\t\t\t\t\tobjectMaterial = getObjectMaterial( object );\r\n\r\n\t\t\t\t\tuseMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;\r\n\t\t\t\t\tuseSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;\r\n\r\n\t\t\t\t\tif ( object.customDepthMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterial = object.customDepthMaterial;\r\n\r\n\t\t\t\t\t} else if ( useSkinning ) {\r\n\r\n\t\t\t\t\t\tmaterial = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;\r\n\r\n\t\t\t\t\t} else if ( useMorphing ) {\r\n\r\n\t\t\t\t\t\tmaterial = _depthMaterialMorph;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tmaterial = _depthMaterial;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_renderer.renderBuffer( shadowCamera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// set matrices and render immediate objects\r\n\r\n\t\t\trenderList = scene.__webglObjectsImmediate;\r\n\r\n\t\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\twebglObject = renderList[ j ];\r\n\t\t\t\tobject = webglObject.object;\r\n\r\n\t\t\t\tif ( object.visible && object.castShadow ) {\r\n\r\n\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\t_renderer.renderImmediateObject( shadowCamera, scene.__lights, fog, _depthMaterial, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore GL state\r\n\r\n\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\tclearAlpha = _renderer.getClearAlpha();\r\n\r\n\t\t_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );\r\n\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\tif ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction createVirtualLight( light, cascade ) {\r\n\r\n\t\tvar virtualLight = new THREE.DirectionalLight();\r\n\r\n\t\tvirtualLight.isVirtual = true;\r\n\r\n\t\tvirtualLight.onlyShadow = true;\r\n\t\tvirtualLight.castShadow = true;\r\n\r\n\t\tvirtualLight.shadowCameraNear = light.shadowCameraNear;\r\n\t\tvirtualLight.shadowCameraFar = light.shadowCameraFar;\r\n\r\n\t\tvirtualLight.shadowCameraLeft = light.shadowCameraLeft;\r\n\t\tvirtualLight.shadowCameraRight = light.shadowCameraRight;\r\n\t\tvirtualLight.shadowCameraBottom = light.shadowCameraBottom;\r\n\t\tvirtualLight.shadowCameraTop = light.shadowCameraTop;\r\n\r\n\t\tvirtualLight.shadowCameraVisible = light.shadowCameraVisible;\r\n\r\n\t\tvirtualLight.shadowDarkness = light.shadowDarkness;\r\n\r\n\t\tvirtualLight.shadowBias = light.shadowCascadeBias[ cascade ];\r\n\t\tvirtualLight.shadowMapWidth = light.shadowCascadeWidth[ cascade ];\r\n\t\tvirtualLight.shadowMapHeight = light.shadowCascadeHeight[ cascade ];\r\n\r\n\t\tvirtualLight.pointsWorld = [];\r\n\t\tvirtualLight.pointsFrustum = [];\r\n\r\n\t\tvar pointsWorld = virtualLight.pointsWorld,\r\n\t\t\tpointsFrustum = virtualLight.pointsFrustum;\r\n\r\n\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\tpointsWorld[ i ] = new THREE.Vector3();\r\n\t\t\tpointsFrustum[ i ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tvar nearZ = light.shadowCascadeNearZ[ cascade ];\r\n\t\tvar farZ = light.shadowCascadeFarZ[ cascade ];\r\n\r\n\t\tpointsFrustum[ 0 ].set( -1, -1, nearZ );\r\n\t\tpointsFrustum[ 1 ].set(  1, -1, nearZ );\r\n\t\tpointsFrustum[ 2 ].set( -1,  1, nearZ );\r\n\t\tpointsFrustum[ 3 ].set(  1,  1, nearZ );\r\n\r\n\t\tpointsFrustum[ 4 ].set( -1, -1, farZ );\r\n\t\tpointsFrustum[ 5 ].set(  1, -1, farZ );\r\n\t\tpointsFrustum[ 6 ].set( -1,  1, farZ );\r\n\t\tpointsFrustum[ 7 ].set(  1,  1, farZ );\r\n\r\n\t\treturn virtualLight;\r\n\r\n\t}\r\n\r\n\t// Synchronize virtual light with the original light\r\n\r\n\tfunction updateVirtualLight( light, cascade ) {\r\n\r\n\t\tvar virtualLight = light.shadowCascadeArray[ cascade ];\r\n\r\n\t\tvirtualLight.position.copy( light.position );\r\n\t\tvirtualLight.target.position.copy( light.target.position );\r\n\t\tvirtualLight.lookAt( virtualLight.target );\r\n\r\n\t\tvirtualLight.shadowCameraVisible = light.shadowCameraVisible;\r\n\t\tvirtualLight.shadowDarkness = light.shadowDarkness;\r\n\r\n\t\tvirtualLight.shadowBias = light.shadowCascadeBias[ cascade ];\r\n\r\n\t\tvar nearZ = light.shadowCascadeNearZ[ cascade ];\r\n\t\tvar farZ = light.shadowCascadeFarZ[ cascade ];\r\n\r\n\t\tvar pointsFrustum = virtualLight.pointsFrustum;\r\n\r\n\t\tpointsFrustum[ 0 ].z = nearZ;\r\n\t\tpointsFrustum[ 1 ].z = nearZ;\r\n\t\tpointsFrustum[ 2 ].z = nearZ;\r\n\t\tpointsFrustum[ 3 ].z = nearZ;\r\n\r\n\t\tpointsFrustum[ 4 ].z = farZ;\r\n\t\tpointsFrustum[ 5 ].z = farZ;\r\n\t\tpointsFrustum[ 6 ].z = farZ;\r\n\t\tpointsFrustum[ 7 ].z = farZ;\r\n\r\n\t}\r\n\r\n\t// Fit shadow camera's ortho frustum to camera frustum\r\n\r\n\tfunction updateShadowCamera( camera, light ) {\r\n\r\n\t\tvar shadowCamera = light.shadowCamera,\r\n\t\t\tpointsFrustum = light.pointsFrustum,\r\n\t\t\tpointsWorld = light.pointsWorld;\r\n\r\n\t\t_min.set( Infinity, Infinity, Infinity );\r\n\t\t_max.set( -Infinity, -Infinity, -Infinity );\r\n\r\n\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\tvar p = pointsWorld[ i ];\r\n\r\n\t\t\tp.copy( pointsFrustum[ i ] );\r\n\t\t\tTHREE.ShadowMapPlugin.__projector.unprojectVector( p, camera );\r\n\r\n\t\t\tp.applyMatrix4( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\tif ( p.x < _min.x ) _min.x = p.x;\r\n\t\t\tif ( p.x > _max.x ) _max.x = p.x;\r\n\r\n\t\t\tif ( p.y < _min.y ) _min.y = p.y;\r\n\t\t\tif ( p.y > _max.y ) _max.y = p.y;\r\n\r\n\t\t\tif ( p.z < _min.z ) _min.z = p.z;\r\n\t\t\tif ( p.z > _max.z ) _max.z = p.z;\r\n\r\n\t\t}\r\n\r\n\t\tshadowCamera.left = _min.x;\r\n\t\tshadowCamera.right = _max.x;\r\n\t\tshadowCamera.top = _max.y;\r\n\t\tshadowCamera.bottom = _min.y;\r\n\r\n\t\t// can't really fit near/far\r\n\t\t//shadowCamera.near = _min.z;\r\n\t\t//shadowCamera.far = _max.z;\r\n\r\n\t\tshadowCamera.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\t// For the moment just ignore objects that have multiple materials with different animation methods\r\n\t// Only the first material will be taken into account for deciding which depth material to use for shadow maps\r\n\r\n\tfunction getObjectMaterial( object ) {\r\n\r\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\r\n\t\t\t? object.material.materials[ 0 ]\r\n\t\t\t: object.material;\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.ShadowMapPlugin.__projector = new THREE.Projector();\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpritePlugin = function ( ) {\r\n\r\n\tvar _gl, _renderer, _precision, _sprite = {};\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\t_precision = renderer.getPrecision();\r\n\r\n\t\t_sprite.vertices = new Float32Array( 8 + 8 );\r\n\t\t_sprite.faces    = new Uint16Array( 6 );\r\n\r\n\t\tvar i = 0;\r\n\r\n\t\t_sprite.vertices[ i++ ] = -1; _sprite.vertices[ i++ ] = -1;\t// vertex 0\r\n\t\t_sprite.vertices[ i++ ] = 0;  _sprite.vertices[ i++ ] = 0;\t// uv 0\r\n\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = -1;\t// vertex 1\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 0;\t// uv 1\r\n\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 1;\t// vertex 2\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 1;\t// uv 2\r\n\r\n\t\t_sprite.vertices[ i++ ] = -1; _sprite.vertices[ i++ ] = 1;\t// vertex 3\r\n\t\t_sprite.vertices[ i++ ] = 0;  _sprite.vertices[ i++ ] = 1;\t// uv 3\r\n\r\n\t\ti = 0;\r\n\r\n\t\t_sprite.faces[ i++ ] = 0; _sprite.faces[ i++ ] = 1; _sprite.faces[ i++ ] = 2;\r\n\t\t_sprite.faces[ i++ ] = 0; _sprite.faces[ i++ ] = 2; _sprite.faces[ i++ ] = 3;\r\n\r\n\t\t_sprite.vertexBuffer  = _gl.createBuffer();\r\n\t\t_sprite.elementBuffer = _gl.createBuffer();\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _sprite.vertexBuffer );\r\n\t\t_gl.bufferData( _gl.ARRAY_BUFFER, _sprite.vertices, _gl.STATIC_DRAW );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer );\r\n\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _sprite.faces, _gl.STATIC_DRAW );\r\n\r\n\t\t_sprite.program = createProgram( THREE.ShaderSprite[ \"sprite\" ], _precision );\r\n\r\n\t\t_sprite.attributes = {};\r\n\t\t_sprite.uniforms = {};\r\n\r\n\t\t_sprite.attributes.position           = _gl.getAttribLocation ( _sprite.program, \"position\" );\r\n\t\t_sprite.attributes.uv                 = _gl.getAttribLocation ( _sprite.program, \"uv\" );\r\n\r\n\t\t_sprite.uniforms.uvOffset             = _gl.getUniformLocation( _sprite.program, \"uvOffset\" );\r\n\t\t_sprite.uniforms.uvScale              = _gl.getUniformLocation( _sprite.program, \"uvScale\" );\r\n\r\n\t\t_sprite.uniforms.rotation             = _gl.getUniformLocation( _sprite.program, \"rotation\" );\r\n\t\t_sprite.uniforms.scale                = _gl.getUniformLocation( _sprite.program, \"scale\" );\r\n\t\t_sprite.uniforms.alignment            = _gl.getUniformLocation( _sprite.program, \"alignment\" );\r\n\r\n\t\t_sprite.uniforms.color                = _gl.getUniformLocation( _sprite.program, \"color\" );\r\n\t\t_sprite.uniforms.map                  = _gl.getUniformLocation( _sprite.program, \"map\" );\r\n\t\t_sprite.uniforms.opacity              = _gl.getUniformLocation( _sprite.program, \"opacity\" );\r\n\r\n\t\t_sprite.uniforms.useScreenCoordinates = _gl.getUniformLocation( _sprite.program, \"useScreenCoordinates\" );\r\n\t\t_sprite.uniforms.sizeAttenuation   \t  = _gl.getUniformLocation( _sprite.program, \"sizeAttenuation\" );\r\n\t\t_sprite.uniforms.screenPosition    \t  = _gl.getUniformLocation( _sprite.program, \"screenPosition\" );\r\n\t\t_sprite.uniforms.modelViewMatrix      = _gl.getUniformLocation( _sprite.program, \"modelViewMatrix\" );\r\n\t\t_sprite.uniforms.projectionMatrix     = _gl.getUniformLocation( _sprite.program, \"projectionMatrix\" );\r\n\r\n\t\t_sprite.uniforms.fogType \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogType\" );\r\n\t\t_sprite.uniforms.fogDensity \t\t  = _gl.getUniformLocation( _sprite.program, \"fogDensity\" );\r\n\t\t_sprite.uniforms.fogNear \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogNear\" );\r\n\t\t_sprite.uniforms.fogFar \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogFar\" );\r\n\t\t_sprite.uniforms.fogColor \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogColor\" );\r\n\r\n\t\t_sprite.uniforms.alphaTest \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"alphaTest\" );\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera, viewportWidth, viewportHeight ) {\r\n\r\n\t\tvar sprites = scene.__webglSprites,\r\n\t\t\tnSprites = sprites.length;\r\n\r\n\t\tif ( ! nSprites ) return;\r\n\r\n\t\tvar attributes = _sprite.attributes,\r\n\t\t\tuniforms = _sprite.uniforms;\r\n\r\n\t\tvar invAspect = viewportHeight / viewportWidth;\r\n\r\n\t\tvar halfViewportWidth = viewportWidth * 0.5,\r\n\t\t\thalfViewportHeight = viewportHeight * 0.5;\r\n\r\n\t\t// setup gl\r\n\r\n\t\t_gl.useProgram( _sprite.program );\r\n\r\n\t\t_gl.enableVertexAttribArray( attributes.position );\r\n\t\t_gl.enableVertexAttribArray( attributes.uv );\r\n\r\n\t\t_gl.disable( _gl.CULL_FACE );\r\n\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _sprite.vertexBuffer );\r\n\t\t_gl.vertexAttribPointer( attributes.position, 2, _gl.FLOAT, false, 2 * 8, 0 );\r\n\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer );\r\n\r\n\t\t_gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\t_gl.activeTexture( _gl.TEXTURE0 );\r\n\t\t_gl.uniform1i( uniforms.map, 0 );\r\n\r\n\t\tvar oldFogType = 0;\r\n\t\tvar sceneFogType = 0;\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\tif ( fog ) {\r\n\r\n\t\t\t_gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\r\n\r\n\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.fogNear, fog.near );\r\n\t\t\t\t_gl.uniform1f( uniforms.fogFar, fog.far );\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.fogType, 1 );\r\n\t\t\t\toldFogType = 1;\r\n\t\t\t\tsceneFogType = 1;\r\n\r\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.fogDensity, fog.density );\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.fogType, 2 );\r\n\t\t\t\toldFogType = 2;\r\n\t\t\t\tsceneFogType = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.uniform1i( uniforms.fogType, 0 );\r\n\t\t\toldFogType = 0;\r\n\t\t\tsceneFogType = 0;\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// update positions and sort\r\n\r\n\t\tvar i, sprite, material, screenPosition, size, fogType, scale = [];\r\n\r\n\t\tfor( i = 0; i < nSprites; i ++ ) {\r\n\r\n\t\t\tsprite = sprites[ i ];\r\n\t\t\tmaterial = sprite.material;\r\n\r\n\t\t\tif ( ! sprite.visible || material.opacity === 0 ) continue;\r\n\r\n\t\t\tif ( ! material.useScreenCoordinates ) {\r\n\r\n\t\t\t\tsprite._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\r\n\t\t\t\tsprite.z = - sprite._modelViewMatrix.elements[ 14 ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsprite.z = - sprite.position.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsprites.sort( painterSortStable );\r\n\r\n\t\t// render all sprites\r\n\r\n\t\tfor( i = 0; i < nSprites; i ++ ) {\r\n\r\n\t\t\tsprite = sprites[ i ];\r\n\t\t\tmaterial = sprite.material;\r\n\r\n\t\t\tif ( ! sprite.visible || material.opacity === 0 ) continue;\r\n\r\n\t\t\tif ( material.map && material.map.image && material.map.image.width ) {\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.alphaTest, material.alphaTest );\r\n\r\n\t\t\t\tif ( material.useScreenCoordinates === true ) {\r\n\r\n\t\t\t\t\t_gl.uniform1i( uniforms.useScreenCoordinates, 1 );\r\n\t\t\t\t\t_gl.uniform3f(\r\n\t\t\t\t\t\tuniforms.screenPosition,\r\n\t\t\t\t\t\t( ( sprite.position.x * _renderer.devicePixelRatio ) - halfViewportWidth  ) / halfViewportWidth,\r\n\t\t\t\t\t\t( halfViewportHeight - ( sprite.position.y * _renderer.devicePixelRatio ) ) / halfViewportHeight,\r\n\t\t\t\t\t\tMath.max( 0, Math.min( 1, sprite.position.z ) )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tscale[ 0 ] = _renderer.devicePixelRatio;\r\n\t\t\t\t\tscale[ 1 ] = _renderer.devicePixelRatio;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.uniform1i( uniforms.useScreenCoordinates, 0 );\r\n\t\t\t\t\t_gl.uniform1i( uniforms.sizeAttenuation, material.sizeAttenuation ? 1 : 0 );\r\n\t\t\t\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements );\r\n\r\n\t\t\t\t\tscale[ 0 ] = 1;\r\n\t\t\t\t\tscale[ 1 ] = 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( scene.fog && material.fog ) {\r\n\r\n\t\t\t\t\tfogType = sceneFogType;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfogType = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( oldFogType !== fogType ) {\r\n\r\n\t\t\t\t\t_gl.uniform1i( uniforms.fogType, fogType );\r\n\t\t\t\t\toldFogType = fogType;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsize = 1 / ( material.scaleByViewport ? viewportHeight : 1 );\r\n\r\n\t\t\t\tscale[ 0 ] *= size * invAspect * sprite.scale.x\r\n\t\t\t\tscale[ 1 ] *= size * sprite.scale.y;\r\n\r\n\t\t\t\t_gl.uniform2f( uniforms.uvScale, material.uvScale.x, material.uvScale.y );\r\n\t\t\t\t_gl.uniform2f( uniforms.uvOffset, material.uvOffset.x, material.uvOffset.y );\r\n\t\t\t\t_gl.uniform2f( uniforms.alignment, material.alignment.x, material.alignment.y );\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.opacity, material.opacity );\r\n\t\t\t\t_gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\t\t\t\t_gl.uniform2fv( uniforms.scale, scale );\r\n\r\n\t\t\t\t_renderer.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\t\t_renderer.setDepthTest( material.depthTest );\r\n\t\t\t\t_renderer.setDepthWrite( material.depthWrite );\r\n\t\t\t\t_renderer.setTexture( material.map, 0 );\r\n\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t};\r\n\r\n\tfunction createProgram ( shader, precision ) {\r\n\r\n\t\tvar program = _gl.createProgram();\r\n\r\n\t\tvar fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );\r\n\t\tvar vertexShader = _gl.createShader( _gl.VERTEX_SHADER );\r\n\r\n\t\tvar prefix = \"precision \" + precision + \" float;\\n\";\r\n\r\n\t\t_gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\t_gl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\r\n\t\t_gl.compileShader( fragmentShader );\r\n\t\t_gl.compileShader( vertexShader );\r\n\r\n\t\t_gl.attachShader( program, fragmentShader );\r\n\t\t_gl.attachShader( program, vertexShader );\r\n\r\n\t\t_gl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn b.id - a.id;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DepthPassPlugin = function ( ) {\r\n\r\n\tthis.enabled = false;\r\n\tthis.renderTarget = null;\r\n\r\n\tvar _gl,\r\n\t_renderer,\r\n\t_depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\t_projScreenMatrix = new THREE.Matrix4();\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\r\n\t\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\r\n\r\n\t\t_depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );\r\n\t\t_depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );\r\n\t\t_depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );\r\n\t\t_depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );\r\n\r\n\t\t_depthMaterial._shadowPass = true;\r\n\t\t_depthMaterialMorph._shadowPass = true;\r\n\t\t_depthMaterialSkin._shadowPass = true;\r\n\t\t_depthMaterialMorphSkin._shadowPass = true;\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( ! this.enabled ) return;\r\n\r\n\t\tthis.update( scene, camera );\r\n\r\n\t};\r\n\r\n\tthis.update = function ( scene, camera ) {\r\n\r\n\t\tvar i, il, j, jl, n,\r\n\r\n\t\tprogram, buffer, material,\r\n\t\twebglObject, object, light,\r\n\t\trenderList,\r\n\r\n\t\tfog = null;\r\n\r\n\t\t// set GL state for depth map\r\n\r\n\t\t_gl.clearColor( 1, 1, 1, 1 );\r\n\t\t_gl.disable( _gl.BLEND );\r\n\r\n\t\t_renderer.setDepthTest( true );\r\n\r\n\t\t// update scene\r\n\r\n\t\tif ( _renderer.autoUpdateScene ) scene.updateMatrixWorld();\r\n\r\n\t\t// update camera matrices and frustum\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t// render depth map\r\n\r\n\t\t_renderer.setRenderTarget( this.renderTarget );\r\n\t\t_renderer.clear();\r\n\r\n\t\t// set object matrices & frustum culling\r\n\r\n\t\trenderList = scene.__webglObjects;\r\n\r\n\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ j ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\twebglObject.render = false;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tif ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\twebglObject.render = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// render regular objects\r\n\r\n\t\tvar objectMaterial, useMorphing, useSkinning;\r\n\r\n\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ j ];\r\n\r\n\t\t\tif ( webglObject.render ) {\r\n\r\n\t\t\t\tobject = webglObject.object;\r\n\t\t\t\tbuffer = webglObject.buffer;\r\n\r\n\t\t\t\t// todo: create proper depth material for particles\r\n\r\n\t\t\t\tif ( object instanceof THREE.ParticleSystem && !object.customDepthMaterial ) continue;\r\n\r\n\t\t\t\tobjectMaterial = getObjectMaterial( object );\r\n\r\n\t\t\t\tif ( objectMaterial ) _renderer.setMaterialFaces( object.material );\r\n\r\n\t\t\t\tuseMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;\r\n\t\t\t\tuseSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;\r\n\r\n\t\t\t\tif ( object.customDepthMaterial ) {\r\n\r\n\t\t\t\t\tmaterial = object.customDepthMaterial;\r\n\r\n\t\t\t\t} else if ( useSkinning ) {\r\n\r\n\t\t\t\t\tmaterial = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;\r\n\r\n\t\t\t\t} else if ( useMorphing ) {\r\n\r\n\t\t\t\t\tmaterial = _depthMaterialMorph;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial = _depthMaterial;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t_renderer.renderBufferDirect( camera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_renderer.renderBuffer( camera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// set matrices and render immediate objects\r\n\r\n\t\trenderList = scene.__webglObjectsImmediate;\r\n\r\n\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ j ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tobject._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t_renderer.renderImmediateObject( camera, scene.__lights, fog, _depthMaterial, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore GL state\r\n\r\n\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\tclearAlpha = _renderer.getClearAlpha();\r\n\r\n\t\t_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );\r\n\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t};\r\n\r\n\t// For the moment just ignore objects that have multiple materials with different animation methods\r\n\t// Only the first material will be taken into account for deciding which depth material to use\r\n\r\n\tfunction getObjectMaterial( object ) {\r\n\r\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\r\n\t\t\t? object.material.materials[ 0 ]\r\n\t\t\t: object.material;\r\n\r\n\t};\r\n\r\n};\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n *\r\n */\r\n\r\nTHREE.ShaderFlares = {\r\n\r\n\t'lensFlareVertexTexture': {\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\r\n\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\"if( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\r\n\r\n\t\t\t\t\t\"vVisibility = (       visibility.r / 9.0 ) *\",\r\n\t\t\t\t\t\t\t\t  \"( 1.0 - visibility.g / 9.0 ) *\",\r\n\t\t\t\t\t\t\t\t  \"(       visibility.b / 9.0 ) *\",\r\n\t\t\t\t\t\t\t\t  \"( 1.0 - visibility.a / 9.0 );\",\r\n\r\n\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t// pink square\r\n\r\n\t\t\t\t\"if( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\r\n\r\n\t\t\t\t// restore\r\n\r\n\t\t\t\t\"} else if( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t// flare\r\n\r\n\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\r\n\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\"\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\r\n\t'lensFlare': {\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\"if( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"precision mediump float;\",\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t// pink square\r\n\r\n\t\t\t\t\"if( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\",\r\n\r\n\t\t\t\t// restore\r\n\r\n\t\t\t\t\"} else if( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t// flare\r\n\r\n\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\",\r\n\t\t\t\t\t\t\t\t\t   \"texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\",\r\n\t\t\t\t\t\t\t\t\t   \"texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\",\r\n\t\t\t\t\t\t\t\t\t   \"texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\",\r\n\r\n\t\t\t\t\t\"visibility = ( 1.0 - visibility / 4.0 );\",\r\n\r\n\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\"texture.a *= opacity * visibility;\",\r\n\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n */\r\n\r\nTHREE.ShaderSprite = {\r\n\r\n\t'sprite': {\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform int useScreenCoordinates;\",\r\n\t\t\t\"uniform int sizeAttenuation;\",\r\n\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\"uniform mat4 modelViewMatrix;\",\r\n\t\t\t\"uniform mat4 projectionMatrix;\",\r\n\t\t\t\"uniform float rotation;\",\r\n\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\"uniform vec2 alignment;\",\r\n\t\t\t\"uniform vec2 uvOffset;\",\r\n\t\t\t\"uniform vec2 uvScale;\",\r\n\r\n\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vUV = uvOffset + uv * uvScale;\",\r\n\r\n\t\t\t\t\"vec2 alignedPosition = position + alignment;\",\r\n\r\n\t\t\t\t\"vec2 rotatedPosition;\",\r\n\t\t\t\t\"rotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\",\r\n\t\t\t\t\"rotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\",\r\n\r\n\t\t\t\t\"vec4 finalPosition;\",\r\n\r\n\t\t\t\t\"if( useScreenCoordinates != 0 ) {\",\r\n\r\n\t\t\t\t\t\"finalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\"finalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\",\r\n\t\t\t\t\t\"finalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_Position = finalPosition;\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 color;\",\r\n\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform int fogType;\",\r\n\t\t\t\"uniform vec3 fogColor;\",\r\n\t\t\t\"uniform float fogDensity;\",\r\n\t\t\t\"uniform float fogNear;\",\r\n\t\t\t\"uniform float fogFar;\",\r\n\t\t\t\"uniform float alphaTest;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t\"if ( texture.a < alphaTest ) discard;\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\",\r\n\r\n\t\t\t\t\"if ( fogType > 0 ) {\",\r\n\r\n\t\t\t\t\t\"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\t\t\t\t\t\"float fogFactor = 0.0;\",\r\n\r\n\t\t\t\t\t\"if ( fogType == 1 ) {\",\r\n\r\n\t\t\t\t\t\t\"fogFactor = smoothstep( fogNear, fogFar, depth );\",\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"const float LOG2 = 1.442695;\",\r\n\t\t\t\t\t\t\"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\",\r\n\t\t\t\t\t\t\"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Export the THREE object for **Node.js**, with\r\n// backwards-compatibility for the old `require()` API. If we're in\r\n// the browser, add `_` as a global object via a string identifier,\r\n// for Closure Compiler \"advanced\" mode.\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    exports = module.exports = THREE;\r\n  }\r\n  exports.THREE = THREE;\r\n} else {\r\n  this['THREE'] = THREE;\r\n}\r\n","/**\n * @author alteredq / http://alteredqualia.com/\n * @author mr.doob / http://mrdoob.com/\n */\n\nexport default {\n\n\tcanvas : !! window.CanvasRenderingContext2D,\n\twebgl : ( function () { try { return !! window.WebGLRenderingContext && !! document.createElement( 'canvas' ).getContext( 'experimental-webgl' ); } catch( e ) { return false; } } )(),\n\tworkers : !! window.Worker,\n\tfileapi : window.File && window.FileReader && window.FileList && window.Blob,\n\n\tgetWebGLErrorMessage : function () {\n\n\t\tlet domElement = document.createElement( 'div' );\n\n\t\tdomElement.style.fontFamily = 'monospace';\n\t\tdomElement.style.fontSize = '13px';\n\t\tdomElement.style.textAlign = 'center';\n\t\tdomElement.style.background = '#eee';\n\t\tdomElement.style.color = '#000';\n\t\tdomElement.style.padding = '1em';\n\t\tdomElement.style.width = '475px';\n\t\tdomElement.style.margin = '5em auto 0';\n\n\t\tif ( ! this.webgl ) {\n\n\t\t\tdomElement.innerHTML = window.WebGLRenderingContext ? [\n\t\t\t\t'Sorry, your graphics card doesn\\'t support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\">WebGL</a>'\n\t\t\t].join( '\\n' ) : [\n\t\t\t\t'Sorry, your browser doesn\\'t support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\">WebGL</a><br/>',\n\t\t\t\t'Please try with',\n\t\t\t\t'<a href=\"http://www.google.com/chrome\">Chrome 10</a>, ',\n\t\t\t\t'<a href=\"http://www.mozilla.com/en-US/firefox/all-beta.html\">Firefox 4</a> or',\n\t\t\t\t'<a href=\"http://nightly.webkit.org/\">Safari 6</a>'\n\t\t\t].join( '\\n' );\n\n\t\t}\n\n\t\treturn domElement;\n\n\t},\n\n\taddGetWebGLMessage : function ( parameters ) {\n\n\t\tlet parent, id, domElement;\n\n\t\tparameters = parameters || {};\n\n\t\tparent = parameters.parent !== undefined ? parameters.parent : document.body;\n\t\tid = parameters.id !== undefined ? parameters.id : 'oldie';\n\n\t\tdomElement = Detector.getWebGLErrorMessage();\n\t\tdomElement.id = id;\n\n\t\tparent.appendChild( domElement );\n\n\t}\n\n};\n"],"sourceRoot":""}