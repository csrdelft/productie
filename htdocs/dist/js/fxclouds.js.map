{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/fxclouds.js","webpack:////home/travis/build/csrdelft/csrdelft.nl/node_modules/three/three.js","webpack:///./js/lib/three.detector.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","THREE","window","Detector","self","REVISION","console","info","log","debug","warn","error","Int32Array","Array","Float32Array","String","startsWith","str","this","slice","length","endsWith","index","lastIndexOf","trim","replace","lastTime","vendors","x","requestAnimationFrame","cancelAnimationFrame","undefined","callback","element","currTime","Date","now","timeToCall","Math","max","id","setTimeout","clearTimeout","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","NoShading","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","MultiplyOperation","MixOperation","AddOperation","UVMapping","CubeReflectionMapping","CubeRefractionMapping","SphericalReflectionMapping","SphericalRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","Color","set","constructor","g","b","setHex","setStyle","hex","floor","setRGB","setHSV","h","v","f","q","style","test","color","exec","min","parseInt","ColorKeywords","copy","copyGammaToLinear","copyLinearToGamma","sqrt","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","toString","getStyle","getHSV","hsv","hue","saturation","delta","add","addColors","color1","color2","addScalar","multiply","multiplyScalar","lerp","alpha","clone","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","y","z","w","setFromEuler","order","c1","cos","c2","c3","s1","sin","s2","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","inverse","conjugate","normalize","lengthSq","multiplyQuaternions","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","multiplyVector3","vector","applyQuaternion","slerp","qb","cosHalfTheta","halfTheta","acos","sinHalfTheta","abs","ratioA","ratioB","equals","qa","qm","Vector2","setX","setY","setComponent","Error","getComponent","addVectors","sub","subVectors","divideScalar","clamp","negate","dot","distanceTo","distanceToSquared","dx","dy","setLength","oldLength","Vector3","setZ","multiplyVectors","applyMatrix3","e","applyMatrix4","applyProjection","qx","qy","qz","qw","ix","iy","iz","iw","applyEuler","eulerOrder","quaternion","__q1","applyAxisAngle","divide","lengthManhattan","cross","crossVectors","angleTo","dz","getPositionFromMatrix","setEulerFromRotationMatrix","asin","atan2","setEulerFromQuaternion","sqx","sqy","sqz","sqw","getScaleFromMatrix","sx","sy","sz","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","PI","xx","yy","zz","xy","xz","yz","Box2","Infinity","setFromPoints","points","point","il","makeEmpty","setFromCenterAndSize","center","size","halfSize","__v1","box","empty","optionalTarget","expandByPoint","expandByVector","expandByScalar","scalar","containsPoint","containsBox","getParameter","isIntersectionBox","clampPoint","distanceToPoint","intersect","union","translate","offset","Box3","getBoundingSphere","result","Sphere","radius","__v0","transform","matrix","newPoints","__v2","__v3","__v4","__v5","__v6","__v7","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","multiplyVector3Array","tmp","determinant","getInverse","throwOnInvertible","det","msg","transpose","transposeIntoArray","Matrix4","n14","n24","n34","n41","n42","n43","n44","setRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","setRotationFromQuaternion","x2","y2","z2","wx","wy","wz","lookAt","eye","target","up","multiplyMatrices","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","multiplyVector4","rotateAxis","vx","vy","vz","crossVector","flattenToArray","flat","flattenToArrayOffset","getPosition","setPosition","getColumnX","getColumnY","getColumnZ","compose","translation","rotation","scale","mRotation","__m1","mScale","__m2","makeScale","decompose","extractPosition","extractRotation","scaleX","scaleY","scaleZ","rotateX","m42","m43","rotateY","m41","rotateZ","rotateByAxis","oneMinusCosine","xs","ys","zs","r11","r21","r31","r12","r22","r32","r13","r23","r33","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","theta","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeFrustum","left","right","bottom","top","near","far","makePerspective","fov","aspect","ymax","degToRad","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","isIntersectionSphere","sphere","isIntersectionPlane","plane","normal","distanceToPlane","denominator","constant","intersectPlane","matrix4","setFromCenterAndPoints","maxRadiusSq","radiusSq","intersectsSphere","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p1","p2","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","matrixWorld","negRadius","geometry","boundingSphere","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","isIntersectionLine","startPoint","endPoint","startSign","endSign","intersectLine","coplanarPoint","optionalNormalMatrix","newNormal","newCoplanarPoint","__vZero","clampBottom","mapLinear","a1","a2","b1","b2","random16","random","randInt","low","high","randFloat","randFloatSpread","range","sign","degrees","__d2r","radToDeg","radians","__r2d","Spline","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","interpolate","t2","t3","v0","v1","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","position","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","j","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","push","ceil","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","Vertex","UV","Clock","autoStart","startTime","oldTime","elapsedTime","running","start","stop","getElapsedTime","getDelta","diff","newTime","EventDispatcher","listeners","addEventListener","type","listener","indexOf","removeEventListener","splice","dispatchEvent","event","listenerArray","Raycaster","localRay","facePlane","intersectPoint","inverseMatrix","descSort","distance","intersectObject","raycaster","intersects","Particle","face","Mesh","vertices","isFaceMaterial","material","MeshFaceMaterial","objectMaterials","materials","side","precision","matrixRotationWorld","fl","faces","materialIndex","planeDistance","planeSign","Face3","Face4","faceIndex","intersectDescendants","descendants","getDescendants","recursive","sort","intersectObjects","objects","Object3D","Object3DIdCount","properties","parent","children","defaultEulerOrder","renderDepth","rotationAutoUpdate","matrixAutoUpdate","matrixWorldNeedsUpdate","useQuaternion","visible","castShadow","receiveShadow","frustumCulled","_vector","applyMatrix","mat","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","scene","Scene","__addObject","__removeObject","traverse","getChildByName","child","array","apply","updateMatrix","updateMatrixWorld","force","Projector","_object","_objectCount","_vertex","_vertexCount","_face","_face3Count","_face4Count","_line","_lineCount","_particle","_particleCount","_modelMatrix","_objectPool","_objectPoolLength","_vertexPool","_vertexPoolLength","_face3Pool","_face3PoolLength","_face4Pool","_face4PoolLength","_linePool","_linePoolLength","_particlePool","_particlePoolLength","_renderData","sprites","lights","_vector3","_vector4","_clipBox","_boundingBox","_points3","_points4","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","_normalViewMatrix","_centroid","_frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","camera","matrixWorldInverse","projectionMatrix","unprojectVector","projectionMatrixInverse","pickingRay","end","getNextObjectInPool","RenderableObject","getNextVertexInPool","vertex","RenderableVertex","getNextFace3InPool","RenderableFace3","getNextFace4InPool","RenderableFace4","getNextLineInPool","line","RenderableLine","getNextParticleInPool","particle","RenderableParticle","painterSort","clipLine","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","projectScene","sortObjects","sortElements","ol","vl","nl","cl","ul","faceVertexNormals","faceVertexUvs","uvs","v2","v4","root","projectObject","Light","Line","Sprite","projectGraph","positionWorld","positionScreen","normalModel","normalModelView","centroidModel","centroid","vertexNormals","vertexNormalsModel","vertexNormalsModelView","vertexNormalsLength","step","LinePieces","vertexColors","vertexTangents","Geometry","GeometryIdCount","colors","normals","faceUvs","morphTargets","morphColors","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","hasTangents","dynamic","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","tangentsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","buffersNeedUpdate","normalMatrix","jl","computeCentroids","computeFaceNormals","vA","vB","vC","cb","ab","computeVertexNormals","areaWeighted","__tmpVertices","vD","db","dc","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","computeTangents","vertexIndex","uv","uvA","uvB","uvC","x1","y1","z1","t1","tan1","tan2","sdir","tdir","tmp2","handleTriangle","context","ua","ub","uc","computeLineDistances","computeBoundingBox","computeBoundingSphere","mergeVertices","indices","verticesMap","unique","changes","pow","round","join","faceIndicesToRemove","dupIndex","newFace","uvCopy","dispose","BufferGeometry","attributes","offsets","positionArray","normalArray","normalizeNormals","positions","bb","nVertexElements","itemSize","numItems","pA","pB","pC","count","nVertices","nTangentElements","xA","yA","zA","xB","yB","zB","xC","yC","zC","uA","uB","uC","tangents","iA","iB","iC","n2","handleVertex","Camera","OrthographicCamera","updateProjectionMatrix","PerspectiveCamera","setLens","focalLength","frameHeight","atan","setViewOffset","fullWidth","fullHeight","width","height","AmbientLight","AreaLight","intensity","constantAttenuation","linearAttenuation","quadraticAttenuation","DirectionalLight","onlyShadow","shadowCameraNear","shadowCameraFar","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowBias","shadowDarkness","shadowMapWidth","shadowMapHeight","shadowCascade","shadowCascadeOffset","shadowCascadeCount","shadowCascadeBias","shadowCascadeWidth","shadowCascadeHeight","shadowCascadeNearZ","shadowCascadeFarZ","shadowCascadeArray","shadowMap","shadowMapSize","shadowCamera","shadowMatrix","HemisphereLight","skyColorHex","groundColorHex","groundColor","PointLight","SpotLight","exponent","shadowCameraFov","Loader","showStatus","statusDomElement","addStatusElement","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","document","createElement","fontSize","textAlign","background","padding","zIndex","innerHTML","updateProgress","progress","message","loaded","toFixed","extractUrlBase","url","parts","split","pop","initMaterials","texturePath","createMaterial","needsTangents","ShaderMaterial","_this","is_pow2","LN2","nearest_pow2","create_texture","where","sourceFile","repeat","wrap","anisotropy","isCompressed","toLowerCase","fullPath","texture","ImageUtils","loadCompressedTexture","Texture","wrapS","wrapT","wrapMap","mirror","image","Image","onload","getContext","drawImage","needsUpdate","src","load_image","rgb2hex","rgb","mtype","mpars","opacity","map","lightMap","normalMap","bumpMap","wireframe","shading","blending","transparent","depthTest","depthWrite","flipSided","doubleSided","colorDiffuse","DbgColor","colorSpecular","specular","colorAmbient","ambient","transparency","specularCoef","shininess","mapDiffuse","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapLight","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapBump","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormal","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecular","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapBumpScale","bumpScale","shader","ShaderLib","uniforms","UniformsUtils","mapNormalFactor","specularMap","parameters","fragmentShader","vertexShader","fog","DbgName","ImageLoader","load","scope","content","JSONLoader","withCredentials","loadAjaxJSON","callbackProgress","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","responseText","json","JSON","parse","createModel","LOADING","getResponseHeader","HEADERS_RECEIVED","open","send","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","uvLayer","nUvLayers","parseModel","bones","animation","parseSkin","dstVertices","srcVertices","dstColors","srcColors","parseMorphing","LoadingMonitor","onLoad","loader","SceneLoader","callbackSync","geometryHandlerMap","hierarchyHandlerMap","addGeometryHandler","callbackFinished","typeID","loaderClass","addHierarchyHandler","light","counter_models","counter_textures","total_models","total_textures","urlBase","target_array","data","geometries","face_materials","textures","cameras","fogs","empties","groups","get_url","source_url","url_type","handle_objects","handle_children","dst","pos","rot","scl","quat","objID","objJSON","loading","reservedTypes","skin","morph","mirroredLoop","duration","loaderParameters","parType","options","urlBaseType","create_callback_hierachy","SkinnedMesh","MorphAnimMesh","time","targetName","groupID","handle_hierarchy","node","obj","create_callback_geometry","geo","handle_mesh","async_callback_gate","dae","create_callback_embed","totalModels","totalTextures","loadedModels","loadedTextures","ta","targetInverse","finalize","fogID","fogJSON","geoID","geoJSON","textureID","textureJSON","matID","matJSON","parID","generateTextureCallback","callbackTexture","Fog","FogExp2","density","CubeGeometry","depth","widthSegments","heightSegments","depthSegments","PlaneGeometry","SphereGeometry","CylinderGeometry","topRad","botRad","radSegs","heightSegs","TorusGeometry","tube","segmentsR","segmentsT","IcosahedronGeometry","subdivisions","modelJson","embeds","metadata","mapping","url_array","loadCompressedTextureCube","loadTextureCube","fullUrl","textureCallback","loadTexture","minFilter","magFilter","diffuse","normalScale","envMap","reflectivity","displacementMap","displacementBias","displacementScale","materialArray","label","defaults","currentCamera","TextureLoader","Material","MaterialIdCount","blendSrc","blendDst","blendEquation","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","alphaTest","overdraw","setValues","values","newValue","currentValue","LineBasicMaterial","linewidth","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","combine","refractionRatio","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","MeshLambertMaterial","emissive","wrapAround","wrapRGB","MeshPhongMaterial","metal","perPixel","MeshDepthMaterial","MeshNormalMaterial","ParticleBasicMaterial","sizeAttenuation","ParticleCanvasMaterial","program","defines","SpriteMaterial","useScreenCoordinates","scaleByViewport","alignment","SpriteAlignment","uvOffset","uvScale","topLeft","topCenter","topRight","centerLeft","centerRight","bottomLeft","bottomCenter","bottomRight","format","TextureIdCount","mipmaps","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","onUpdate","CompressedTexture","DataTexture","ParticleSystem","sortParticles","LineStrip","updateMorphTargets","morphTargetBase","morphTargetForcedOrder","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","Bone","belongsToSkin","skinMatrix","update","parentSkinMatrix","forceUpdate","useVertexTexture","bone","gbone","identityMatrix","boneMatrices","rotq","addBone","nBones","boneTextureWidth","boneTextureHeight","boneTexture","pose","boneInverses","bl","offsetMatrix","sw","lastKeyframe","currentKeyframe","directionBackwards","setFrameRange","startKeyframe","endKeyframe","setDirectionForward","setDirectionBackward","parseAnimations","animations","firstAnimation","pattern","match","setAnimationLabel","playAnimation","fps","updateAnimation","frameTime","keyframe","mix","Ribbon","LOD","LODs","addLevel","object3D","visibleAtDistance","rotation3d","overrideMaterial","__objects","__lights","__objectsAdded","__objectsRemoved","ai","CanvasRenderer","_elements","_lights","_canvasWidth","_canvasHeight","_canvasWidthHalf","_canvasHeightHalf","_v1","_v2","_v3","_v4","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_near","_far","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_pixelMap","_pixelMapContext","_pixelMapImage","_pixelMapData","_gradientMap","_gradientMapContext","_projector","_canvas","canvas","_context","_clearColor","_clearOpacity","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_v5","_v6","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_imagedatas","_clearBox","_elemBox","_enableLighting","_ambientLight","_directionalLights","_pointLights","_gradientMapQuality","setOpacity","globalAlpha","setBlending","globalCompositeOperation","setLineWidth","lineWidth","setLineCap","lineCap","setLineJoin","lineJoin","setStrokeStyle","strokeStyle","setFillStyle","fillStyle","fillRect","getImageData","domElement","devicePixelRatio","autoClear","render","supportsVertexTextures","setFaceCulling","setSize","setClearColor","setClearColorHex","getMaxAnisotropy","clear","setTransform","clearRect","ll","lightColor","calculateLights","el","renderParticle","renderLine","expand","renderFace3","renderFace4","calculateLight","lightPosition","amount","bitmap","bitmapWidth","bitmapHeight","save","rotate","restore","beginPath","moveTo","lineTo","stroke","uv1","uv2","uv3","drawTriangle","getGradientTexture","clipImage","strokePath","fillPath","patternPath","smoothstep","v5","v6","drawQuad","x0","y0","closePath","x3","y3","fill","u0","u1","u2","repeatX","repeatY","createPattern","idet","offsetX","offsetY","clip","color3","color4","putImageData","ShaderChunk","fog_pars_fragment","fog_fragment","envmap_pars_fragment","envmap_fragment","envmap_pars_vertex","worldpos_vertex","envmap_vertex","map_particle_pars_fragment","map_particle_fragment","map_pars_vertex","map_pars_fragment","map_vertex","map_fragment","lightmap_pars_fragment","lightmap_pars_vertex","lightmap_fragment","lightmap_vertex","bumpmap_pars_fragment","normalmap_pars_fragment","specularmap_pars_fragment","specularmap_fragment","lights_lambert_pars_vertex","lights_lambert_vertex","lights_phong_pars_vertex","lights_phong_vertex","lights_phong_pars_fragment","lights_phong_fragment","color_pars_fragment","color_fragment","color_pars_vertex","color_vertex","skinning_pars_vertex","skinbase_vertex","skinning_vertex","morphtarget_pars_vertex","morphtarget_vertex","default_vertex","morphnormal_vertex","skinnormal_vertex","defaultnormal_vertex","shadowmap_pars_fragment","shadowmap_fragment","shadowmap_pars_vertex","shadowmap_vertex","alphatest_fragment","linear_to_gamma_fragment","merge","merged","uniforms_src","parameter_src","uniforms_dst","UniformsLib","common","offsetRepeat","flipEnvMap","useRefract","bump","normalmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLightDirection","directionalLightColor","hemisphereLightDirection","hemisphereLightSkyColor","hemisphereLightGroundColor","pointLightColor","pointLightPosition","pointLightDistance","spotLightColor","spotLightPosition","spotLightDirection","spotLightDistance","spotLightAngleCos","spotLightExponent","psColor","shadowmap","basic","lambert","phong","particle_basic","dashed","totalSize","mNear","mFar","enableAO","enableDiffuse","enableSpecular","enableReflection","enableDisplacement","tDisplacement","tDiffuse","tCube","tNormal","tSpecular","tAO","uNormalScale","uDisplacementBias","uDisplacementScale","uDiffuseColor","uSpecularColor","uAmbientColor","uShininess","uOpacity","uRefractionRatio","uReflectivity","uOffset","uRepeat","cube","tFlip","depthRGBA","WebGLRenderer","_precision","_alpha","_premultipliedAlpha","premultipliedAlpha","_antialias","antialias","_stencil","stencil","_preserveDrawingBuffer","preserveDrawingBuffer","clearColor","_clearAlpha","clearAlpha","autoClearColor","autoClearDepth","autoClearStencil","autoUpdateObjects","autoUpdateScene","gammaInput","gammaOutput","physicallyBasedShading","shadowMapEnabled","shadowMapAutoUpdate","shadowMapType","shadowMapCullFace","shadowMapDebug","shadowMapCascade","maxMorphTargets","maxMorphNormals","autoScaleCubemaps","renderPluginsPre","renderPluginsPost","memory","programs","calls","_gl","_glExtensionTextureFloat","_glExtensionStandardDerivatives","_glExtensionTextureFilterAnisotropic","_glExtensionCompressedTextureS3TC","_programs","_programs_counter","_currentProgram","_currentFramebuffer","_currentMaterialId","_currentGeometryGroupHash","_currentCamera","_geometryGroupCounter","_usedTextureUnits","_oldDoubleSided","_oldFlipSided","_oldBlending","_oldBlendEquation","_oldBlendSrc","_oldBlendDst","_oldDepthTest","_oldDepthWrite","_oldPolygonOffset","_oldPolygonOffsetFactor","_oldPolygonOffsetUnits","_oldLineWidth","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_currentWidth","_currentHeight","_enabledAttributes","_projScreenMatrix","_projScreenMatrixPS","_direction","_lightsNeedUpdate","directional","distances","spot","directions","anglesCos","exponents","hemi","skyColors","groundColors","getExtension","initGL","clearDepth","clearStencil","enable","DEPTH_TEST","depthFunc","LEQUAL","frontFace","CCW","cullFace","BACK","CULL_FACE","BLEND","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","_maxTextures","MAX_TEXTURE_IMAGE_UNITS","_maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","_maxCubemapSize","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","_maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","_supportsVertexTextures","_supportsBoneTextures","_vertexShaderPrecisionHighpFloat","COMPRESSED_TEXTURE_FORMATS","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","_vertexShaderPrecisionMediumpFloat","MEDIUM_FLOAT","_fragmentShaderPrecisionHighpFloat","LOW_FLOAT","FRAGMENT_SHADER","_fragmentShaderPrecisionMediumpFloat","highpAvailable","HIGH_INT","MEDIUM_INT","LOW_INT","mediumpAvailable","createMeshBuffers","geometryGroup","__webglVertexBuffer","createBuffer","__webglNormalBuffer","__webglTangentBuffer","__webglColorBuffer","__webglUVBuffer","__webglUV2Buffer","__webglSkinIndicesBuffer","__webglSkinWeightsBuffer","__webglFaceBuffer","__webglLineBuffer","numMorphTargets","__webglMorphTargetsBuffers","numMorphNormals","__webglMorphNormalsBuffers","supportsFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","getPrecision","setViewport","viewport","setScissor","scissor","enableScissorTest","SCISSOR_TEST","disable","getClearColor","getClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","renderTarget","setRenderTarget","addPostPlugin","plugin","init","addPrePlugin","updateShadowMap","shadowMapPlugin","onGeometryDispose","deallocateGeometry","onTextureDispose","deallocateTexture","onRenderTargetDispose","deallocateRenderTarget","onMaterialDispose","deallocateMaterial","__webglInit","deleteBuffer","__webglLineDistanceBuffer","geometryGroups","deleteCustomAttributesBuffers","__webglTextureCube","deleteTexture","__webglTexture","WebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","deleteRenderbuffer","__webglRenderbuffer","programInfo","deleteProgram","usedTimes","newPrograms","__webglCustomAttributesList","buffer","initCustomAttributes","nvertices","attribute","__webglInitialized","createUniqueBuffers","belongsToAttribute","initMeshBuffers","faces3","faces4","ntris","nlines","getBufferMaterial","uvType","bufferGuessUVType","normalType","bufferGuessNormalType","vertexColorType","bufferGuessVertexColorType","__vertexArray","__normalArray","__tangentArray","__colorArray","__uvArray","__uv2Array","__skinIndexArray","__skinWeightArray","__faceArray","Uint16Array","__lineArray","__morphTargetsArrays","__morphNormalsArrays","__webglFaceCount","__webglLineCount","originalAttribute","__original","__inittedArrays","materialNeedsSmoothNormals","initDirectBuffers","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","bindBuffer","bufferData","STATIC_DRAW","setMeshBuffers","hint","faceColor","t4","n1","n3","n4","c4","sw1","sw2","sw3","sw4","si1","si2","si3","si4","vn","uvi","uv2i","vk","vkl","vka","nka","chf","customAttribute","needsSmoothNormals","offset_uv","offset_uv2","offset_face","offset_normal","offset_tangent","offset_line","offset_color","offset_skin","offset_morphTarget","offset_custom","vertexArray","uvArray","uv2Array","tangentArray","colorArray","skinIndexArray","skinWeightArray","morphTargetsArrays","morphNormalsArrays","customAttributes","faceArray","lineArray","dirtyVertices","dirtyElements","dirtyUvs","dirtyNormals","dirtyTangents","dirtyColors","dirtyMorphTargets","morphTargetsNeedUpdate","chunk_faces3","chunk_faces4","obj_faces","obj_uvs","obj_uvs2","obj_skinIndices","obj_skinWeights","boundTo","pp","setDirectBuffers","tangent","enableAttribute","enableVertexAttribArray","disableAttributes","disableVertexAttribArray","painterSortStable","numericalSort","renderPlugins","plugins","renderObjects","renderList","reverse","materialType","useBlending","webglObject","setDepthTest","setDepthWrite","setPolygonOffset","setMaterialFaces","renderBufferDirect","renderBuffer","renderObjectsImmediate","renderImmediateObject","unrollImmediateBufferMaterial","globject","opaque","unrollBufferMaterial","meshMaterial","addObject","_modelViewMatrix","groupHash","hash_map","usesFaceMaterial","hash","counter","geometryGroupsList","sortFacesByMaterial","createRibbonBuffers","__webglVertexCount","initRibbonBuffers","createLineBuffers","__lineDistanceArray","initLineBuffers","createParticleBuffers","__sortArray","__webglParticleCount","initParticleBuffers","__webglActive","addBuffer","__webglObjects","ImmediateRenderObject","immediateRenderCallback","objlist","addBufferImmediate","__webglObjectsImmediate","__webglSprites","LensFlare","__webglFlares","updateObject","customAttributesDirty","DYNAMIC_DRAW","areCustomAttributesDirty","clearCustomAttributes","ca","cal","setRibbonBuffers","dl","lineDistanceArray","dirtyLineDistances","setLineBuffers","sortArray","setParticleBuffers","removeObject","removeInstances","removeInstancesDirect","setProgram","initMaterial","__webglMorphTargetInfluences","refreshMaterial","p_uniforms","m_uniforms","useProgram","uniformMatrix4fv","textureUnit","getTextureUnit","uniform1i","setTexture","boneGlobalMatrices","refreshUniformsFog","skyColor","intensitySq","zlights","dirColors","dirPositions","pointColors","pointPositions","pointDistances","spotColors","spotPositions","spotDistances","spotDirections","spotAnglesCos","spotExponents","hemiSkyColors","hemiGroundColors","hemiPositions","dirLength","pointLength","spotLength","hemiLength","dirCount","pointCount","spotCount","hemiCount","dirOffset","pointOffset","spotOffset","hemiOffset","setColorGamma","setColorLinear","setupLights","refreshUniformsLights","uvScaleMap","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","refreshUniformsParticle","refreshUniformsPhong","refreshUniformsLambert","_shadowPass","refreshUniformsShadow","uniform","location","uniform1f","uniform2f","uniform3f","uniform4f","uniform1iv","uniform3iv","uniform1fv","uniform3fv","_array","uniform2fv","uniform4fv","setCubeTexture","setCubeTextureDynamic","loadUniformsGeneric","uniformsList","cameraPosition","viewMatrix","modelViewMatrix","uniformMatrix3fv","loadUniformsMatrices","modelMatrix","setupMatrices","polygonoffset","factor","units","POLYGON_OFFSET_FILL","getShader","string","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","addLineNumbers","isPowerOfTwo","setTextureParameters","textureType","isImagePowerOfTwo","texParameteri","TEXTURE_WRAP_S","paramThreeToGL","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","filterFallback","__oldAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","clampToMaxSize","maxSize","maxDimension","newWidth","newHeight","slot","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","cubeImage","glFormat","glType","mipmap","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","texImage2D","generateMipmap","setupFrameBuffer","framebuffer","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","setupRenderBuffer","renderbuffer","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","NEAREST","LINEAR","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","renderBufferImmediate","hasPositions","hasNormals","hasUvs","__webglUvBuffer","hasColors","vertexAttribPointer","nx","ny","nz","nax","nbx","nay","nby","naz","nbz","drawArrays","TRIANGLES","updateBuffers","wireframeBit","geometryHash","startIndex","positionSize","normalSize","uvSize","colorSize","tangentSize","drawElements","POINTS","LINE_STRIP","primitives","geometryGroupHash","influences","numSupportedMorphTargets","influence","activeInfluenceIndices","numSupportedMorphNormals","influenceIndex","setupMorphTargets","skinIndex","skinWeight","lineDistance","LINES","TRIANGLE_STRIP","forceClear","initWebGLObjects","TEXTURE_2D","updateRenderTargetMipmap","maxLightCount","maxBones","maxShadows","shaderID","shaders","setMaterialShaders","dirLights","pointLights","spotLights","hemiLights","allocateLights","allocateShadows","nVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","nVertexMatrices","allocateBones","useFog","fogExp","maxDirLights","maxPointLights","maxSpotLights","maxHemiLights","pl","code","shadowMapTypeDefine","customDefines","chunk","generateDefines","createProgram","identifiers","prefix_vertex","glFragmentShader","glVertexShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","VALIDATE_STATUS","getError","deleteShader","getUniformLocation","cacheUniformLocations","getAttribLocation","cacheAttributeLocations","buildProgram","base","frontFaceDirection","CW","FRONT","FRONT_AND_BACK","depthMask","blendEquationSeparate","blendFuncSeparate","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isCube","isTargetPowerOfTwo","createFramebuffer","createRenderbuffer","shareDepthFrom","activeCubeFace","ShadowMapPlugin","SpritePlugin","LensFlarePlugin","WebGLRenderTarget","ColorUtils","adjustHSV","__hsv","GeometryUtils","geometry1","object2","vertexOffset","geometry2","vertices1","vertices2","faces1","faces2","uvs1","uvs2","vertexCopy","faceCopy","faceVertexColors","removeMaterials","materialIndexArray","materialIndexMap","newFaces","randomPointInTriangle","vectorA","vectorB","vectorC","randomPointInFace","useCachedAreas","area1","area2","_area1","_area2","triangleArea","randomPointsInGeometry","totalArea","cumulativeAreas","_area","binarySearchIndices","binarySearch","mid","stats","tmp1","normalizeUVs","uvSet","triangulateQuads","triA","triB","uvD","uvsTriA","uvsTriB","faceUv","setMaterialIndex","startFace","endFace","onError","request","response","dds","parseDDS","onerror","responseType","images","loadCount","generateCubeFaceCallback","rq","img","isCubemap","mipmapCount","loadMipmaps","fourCCToInt32","charCodeAt","blockBytes","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","header","fourCC","fromCharCode","int32ToFourCC","dataOffset","dataLength","Uint8Array","getNormalMap","subtract","imageData","createImageData","output","ly","uy","lx","ux","num_points","idx","generateDataTexture","SceneUtils","createMultiMaterialObject","group","detach","attach","FontUtils","divisions","getFace","loadFace","family","familyName","cssFontWeight","cssFontStyle","drawText","text","resolution","chars","fontPaths","path","Path","ret","extractGlyphPoints","paths","outline","cpx","cpy","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","pts","glyph","glyphs","_cachedOutline","quadraticCurveTo","Shape","Utils","bezierCurveTo","b3","ha","generateShapes","curveSegments","font","shapes","toShapes","namespace","contour","snip","verts","ax","ay","bx","by","cx","cy","px","py","aX","aY","bX","bY","cX","cY","Triangulate","vertIndices","nv","_typeface_js","Curve","getPointAt","getUtoTmapping","getPoints","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","cache","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","LineCurve","QuadraticBezierCurve","tangentQuadraticBezier","CubicBezierCurve","tangentCubicBezier","SplineCurve","EllipseCurve","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","deltaAngle","ArcCurve","aRadius","tangentSpline","getPointFunc","LineCurve3","QuadraticBezierCurve3","tz","CubicBezierCurve3","SplineCurve3","pt0","pt2","pt3","ClosedSplineCurve3","CurvePath","curves","bends","autoClose","curve","checkConnection","curveLengths","getCurveLengths","lens","cacheLengths","sums","maxX","maxY","maxZ","minX","minY","minZ","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","createPointsGeometry","createGeometry","createSpacedPointsGeometry","addWrapPath","bendpath","getTransformedPoints","segments","oldPts","getWrapPoints","getTransformedSpacedPoints","oldX","oldY","xNorm","bounds","pathPt","getNormalVector","Gyroscope","translationWorld","rotationWorld","scaleWorld","translationObject","rotationObject","scaleObject","actions","fromPoints","PathActions","MOVE_TO","LINE_TO","QUADRATIC_CURVE_TO","BEZIER_CURVE_TO","CSPLINE_THRU","ARC","ELLIPSE","vectors","vlen","args","arguments","action","lastargs","aCPx","aCPy","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","arc","absarc","absellipse","ellipse","lastPoint","closedPath","useSpacedPoints","item","spts","concat","spline","tdivisions","subPaths","lastPath","tmpPath","tmpShape","holesFirst","isClockWise","holes","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","getSpacedPointsHoles","extractAllPoints","shape","extractPoints","extractAllSpacedPoints","removeHoles","prevShapeVert","prevHoleVert","holeIndex","shapeIndex","h2","hole","shortest","pts1","pts2","tmpShape1","tmpShape2","tmpHole1","tmpHole2","allpoints","dist","areaapts","areaa","areabpts","areab","oldShapeIndex","oldHoleIndex","areaa2","trianglea","triangleb","isolatedPts","triangulateShape","shapeWithoutHoles","triangles","allPointsMap","b2p0","b2p1","b2p2","b3p0","b3p1","b3p2","b3p3","AnimationHandler","playing","library","that","deltaTimeMS","addToUpdate","removeFromUpdate","initData","hierarchy","parseRecurseHierarchy","initialized","keys","usedMorphTargets","morphTargetName","morphTargetsInfluences","lengthInFrames","JIT","CATMULLROM","CATMULLROM_FORWARD","Animation","interpolationType","currentTime","timeScale","isPlaying","isPaused","loop","play","startTimeMS","hl","animationCache","prevKey","nextKey","originalMatrix","getNextKeyWith","pause","prevXYZ","nextXYZ","unloopedCurrentTime","currentPoint","forwardPoint","types","getPrevKeyWith","interpolateCatmullRom","KeyFrameAnimation","JITCompile","sids","sid","next","startTimeMs","endTime","original","frame","looped","JIThierarchy","lastIndex","prev","hasTarget","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","updateCubeMap","renderer","CombinedCamera","orthoNear","orthoFar","cameraO","cameraP","zoom","toPerspective","inPerspectiveMode","inOrthographicMode","toOrthographic","hyperfocus","halfHeight","halfWidth","setFov","setZoom","toFrontView","toBackView","toLeftView","toRightView","toTopView","toBottomView","AsteriskGeometry","innerRadius","outerRadius","sd2","ed2","rays","CircleGeometry","thetaStart","thetaLength","centerUV","width_half","height_half","depth_half","buildPlane","udir","vdir","gridX","gridY","gridX1","gridY1","segment_width","segment_height","radiusTop","radiusBottom","radiusSegments","openEnded","heightHalf","segmentsX","segmentsY","verticesRow","uvsRow","na","nb","tanTheta","uv4","shapebb","addShapeList","addShape","extrudePts","splineTube","binormal","position2","ahole","bevelThickness","bevelSize","bevelSegments","bevelEnabled","steps","extrudePath","extrudeByPath","extrudeMaterial","uvgen","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapesOffset","shapePoints","scalePt2","pt","vec","bs","vert","flen","getBevelVec","pt_i","pt_j","pt_k","v_dot_w_hat","q_sub_p_dot_w_hat","v_hat","w_hat","anglea","angleb","anglec","getBevelVec1","getBevelVec2","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","sidewalls","layeroffset","slen1","slen2","f4","f3","isBottom","generateBottomUV","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","layer","buildLidFaces","buildSideFaces","extrudedShape","extrudeOptions","indexA","indexB","indexC","indexD","az","bz","cz","LatheGeometry","phiStart","phiLength","inversePointLength","inverseSegments","phi","np","gridZ","gridZ1","TextGeometry","textShapes","radialSegments","tubularSegments","TorusKnotGeometry","heightScale","grid","tang","bitan","getPos","ip","jp","uva","uvb","uvc","uvd","in_q","in_p","cu","su","quOverP","cs","closed","numpoints","pos2","ArrowHelper","smallest","epsilon","MAX_VALUE","initialNormal3","PolyhedronGeometry","detail","prepare","midpoints","make","azimuth","inclination","azi","correctUV","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","func","slices","stacks","useTris","sliceCount","ConvexGeometry","addPoint","vertexId","mag","randomOffset","edge","boundary","equalEdge","va","vb","vc","ea","eb","vertexUv","newId","AxisHelper","dir","lineGeometry","coneGeometry","cone","setDirection","setColor","CameraHelper","pointMap","addLine","setPoint","__v","__projector","__c","DirectionalLightHelper","sphereSize","hexColor","bulbGeometry","raysGeometry","bulbMaterial","raysMaterial","lightSphere","lightRays","isGizmo","gizmoSubject","gizmoRoot","targetSphere","targetGeo","targetMaterial","lineMaterial","targetLine","HemisphereLightHelper","arrowLength","domeSize","hexColorGround","bulbGroundGeometry","bulbSkyMaterial","bulbGroundMaterial","lightArrow","lightArrowGround","joint","PointLightHelper","distanceGeometry","distanceMaterial","lightDistance","SpotLightHelper","coneMatrix","coneMaterial","lightCone","coneLength","coneWidth","gyroscope","renderCallback","lensFlares","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","MorphBlendMesh","animationsMap","animationsList","numFrames","endFrame","createAnimation","setAnimationWeight","startFrame","lastFrame","currentFrame","active","autoCreateAnimations","frameRanges","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","stopAnimation","_renderer","_lensFlare","prefix","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","hasVertexTexture","ShaderFlares","renderType","occlusionMap","screenPosition","viewportWidth","viewportHeight","flares","nFlares","sprite","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","TEXTURE1","copyTexImage2D","_depthMaterial","_depthMaterialMorph","_depthMaterialSkin","_depthMaterialMorphSkin","_min","_max","createVirtualLight","cascade","virtualLight","isVirtual","pointsWorld","pointsFrustum","nearZ","farZ","updateVirtualLight","updateShadowCamera","getObjectMaterial","depthShader","depthUniforms","originalCamera","gyro","shadowFilter","pars","cameraHelper","objectMaterial","useMorphing","useSkinning","customDepthMaterial","_sprite","ShaderSprite","fogType","nSprites","oldFogType","sceneFogType","DepthPassPlugin","enabled","lensFlareVertexTexture","lensFlare","CanvasRenderingContext2D","webgl","WebGLRenderingContext","workers","Worker","fileapi","File","FileReader","FileList","Blob","getWebGLErrorMessage","fontFamily","margin","addGetWebGLMessage","body","appendChild"],"mappings":"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","file":"js/fxclouds.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 342);\n","import * as THREE from 'three';\nimport Detector from './lib/three.detector';\n\nwindow.THREE = THREE;\nwindow['Detector'] = Detector;\n","\r\nvar window = window || {};\r\nvar self = self || {};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author Larry Battle / http://bateru.com/news\r\n */\r\n\r\nvar THREE = THREE || { REVISION: '55' };\r\n\r\nself.console = self.console || {\r\n\r\n\tinfo: function () {},\r\n\tlog: function () {},\r\n\tdebug: function () {},\r\n\twarn: function () {},\r\n\terror: function () {}\r\n\r\n};\r\n\r\nself.Int32Array = self.Int32Array || Array;\r\nself.Float32Array = self.Float32Array || Array;\r\n\r\n// Shims for \"startsWith\", \"endsWith\", and \"trim\" for browsers where this is not yet implemented\r\n// not sure we should have this, or at least not have it here\r\n\r\n// http://stackoverflow.com/questions/646628/javascript-startswith\r\n// http://stackoverflow.com/questions/498970/how-do-i-trim-a-string-in-javascript\r\n// http://wiki.ecmascript.org/doku.php?id=harmony%3astring_extras\r\n\r\nString.prototype.startsWith = String.prototype.startsWith || function ( str ) {\r\n\r\n\treturn this.slice( 0, str.length ) === str;\r\n\r\n};\r\n\r\nString.prototype.endsWith = String.prototype.endsWith || function ( str ) {\r\n\r\n\tvar t = String( str );\r\n\tvar index = this.lastIndexOf( t );\r\n\treturn ( -1 < index && index ) === (this.length - t.length);\r\n\r\n};\r\n\r\nString.prototype.trim = String.prototype.trim || function () {\r\n\r\n\treturn this.replace( /^\\s+|\\s+$/g, '' );\r\n\r\n};\r\n\r\n\r\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\r\n\r\n// requestAnimationFrame polyfill by Erik Möller\r\n// fixes from Paul Irish and Tino Zijdel\r\n\r\n( function () {\r\n\r\n\tvar lastTime = 0;\r\n\tvar vendors = [ 'ms', 'moz', 'webkit', 'o' ];\r\n\r\n\tfor ( var x = 0; x < vendors.length && !window.requestAnimationFrame; ++ x ) {\r\n\r\n\t\twindow.requestAnimationFrame = window[ vendors[ x ] + 'RequestAnimationFrame' ];\r\n\t\twindow.cancelAnimationFrame = window[ vendors[ x ] + 'CancelAnimationFrame' ] || window[ vendors[ x ] + 'CancelRequestAnimationFrame' ];\r\n\r\n\t}\r\n\r\n\tif ( window.requestAnimationFrame === undefined ) {\r\n\r\n\t\twindow.requestAnimationFrame = function ( callback, element ) {\r\n\r\n\t\t\tvar currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );\r\n\t\t\tvar id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );\r\n\t\t\tlastTime = currTime + timeToCall;\r\n\t\t\treturn id;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\twindow.cancelAnimationFrame = window.cancelAnimationFrame || function ( id ) { window.clearTimeout( id ) };\r\n\r\n}() );\r\n\r\n// GL STATE CONSTANTS\r\n\r\nTHREE.CullFaceNone = 0;\r\nTHREE.CullFaceBack = 1;\r\nTHREE.CullFaceFront = 2;\r\nTHREE.CullFaceFrontBack = 3;\r\n\r\nTHREE.FrontFaceDirectionCW = 0;\r\nTHREE.FrontFaceDirectionCCW = 1;\r\n\r\n// SHADOWING TYPES\r\n\r\nTHREE.BasicShadowMap = 0;\r\nTHREE.PCFShadowMap = 1;\r\nTHREE.PCFSoftShadowMap = 2;\r\n\r\n// MATERIAL CONSTANTS\r\n\r\n// side\r\n\r\nTHREE.FrontSide = 0;\r\nTHREE.BackSide = 1;\r\nTHREE.DoubleSide = 2;\r\n\r\n// shading\r\n\r\nTHREE.NoShading = 0;\r\nTHREE.FlatShading = 1;\r\nTHREE.SmoothShading = 2;\r\n\r\n// colors\r\n\r\nTHREE.NoColors = 0;\r\nTHREE.FaceColors = 1;\r\nTHREE.VertexColors = 2;\r\n\r\n// blending modes\r\n\r\nTHREE.NoBlending = 0;\r\nTHREE.NormalBlending = 1;\r\nTHREE.AdditiveBlending = 2;\r\nTHREE.SubtractiveBlending = 3;\r\nTHREE.MultiplyBlending = 4;\r\nTHREE.CustomBlending = 5;\r\n\r\n// custom blending equations\r\n// (numbers start from 100 not to clash with other\r\n//  mappings to OpenGL constants defined in Texture.js)\r\n\r\nTHREE.AddEquation = 100;\r\nTHREE.SubtractEquation = 101;\r\nTHREE.ReverseSubtractEquation = 102;\r\n\r\n// custom blending destination factors\r\n\r\nTHREE.ZeroFactor = 200;\r\nTHREE.OneFactor = 201;\r\nTHREE.SrcColorFactor = 202;\r\nTHREE.OneMinusSrcColorFactor = 203;\r\nTHREE.SrcAlphaFactor = 204;\r\nTHREE.OneMinusSrcAlphaFactor = 205;\r\nTHREE.DstAlphaFactor = 206;\r\nTHREE.OneMinusDstAlphaFactor = 207;\r\n\r\n// custom blending source factors\r\n\r\n//THREE.ZeroFactor = 200;\r\n//THREE.OneFactor = 201;\r\n//THREE.SrcAlphaFactor = 204;\r\n//THREE.OneMinusSrcAlphaFactor = 205;\r\n//THREE.DstAlphaFactor = 206;\r\n//THREE.OneMinusDstAlphaFactor = 207;\r\nTHREE.DstColorFactor = 208;\r\nTHREE.OneMinusDstColorFactor = 209;\r\nTHREE.SrcAlphaSaturateFactor = 210;\r\n\r\n\r\n// TEXTURE CONSTANTS\r\n\r\nTHREE.MultiplyOperation = 0;\r\nTHREE.MixOperation = 1;\r\nTHREE.AddOperation = 2;\r\n\r\n// Mapping modes\r\n\r\nTHREE.UVMapping = function () {};\r\n\r\nTHREE.CubeReflectionMapping = function () {};\r\nTHREE.CubeRefractionMapping = function () {};\r\n\r\nTHREE.SphericalReflectionMapping = function () {};\r\nTHREE.SphericalRefractionMapping = function () {};\r\n\r\n// Wrapping modes\r\n\r\nTHREE.RepeatWrapping = 1000;\r\nTHREE.ClampToEdgeWrapping = 1001;\r\nTHREE.MirroredRepeatWrapping = 1002;\r\n\r\n// Filters\r\n\r\nTHREE.NearestFilter = 1003;\r\nTHREE.NearestMipMapNearestFilter = 1004;\r\nTHREE.NearestMipMapLinearFilter = 1005;\r\nTHREE.LinearFilter = 1006;\r\nTHREE.LinearMipMapNearestFilter = 1007;\r\nTHREE.LinearMipMapLinearFilter = 1008;\r\n\r\n// Data types\r\n\r\nTHREE.UnsignedByteType = 1009;\r\nTHREE.ByteType = 1010;\r\nTHREE.ShortType = 1011;\r\nTHREE.UnsignedShortType = 1012;\r\nTHREE.IntType = 1013;\r\nTHREE.UnsignedIntType = 1014;\r\nTHREE.FloatType = 1015;\r\n\r\n// Pixel types\r\n\r\n//THREE.UnsignedByteType = 1009;\r\nTHREE.UnsignedShort4444Type = 1016;\r\nTHREE.UnsignedShort5551Type = 1017;\r\nTHREE.UnsignedShort565Type = 1018;\r\n\r\n// Pixel formats\r\n\r\nTHREE.AlphaFormat = 1019;\r\nTHREE.RGBFormat = 1020;\r\nTHREE.RGBAFormat = 1021;\r\nTHREE.LuminanceFormat = 1022;\r\nTHREE.LuminanceAlphaFormat = 1023;\r\n\r\n// Compressed texture formats\r\n\r\nTHREE.RGB_S3TC_DXT1_Format = 2001;\r\nTHREE.RGBA_S3TC_DXT1_Format = 2002;\r\nTHREE.RGBA_S3TC_DXT3_Format = 2003;\r\nTHREE.RGBA_S3TC_DXT5_Format = 2004;\r\n\r\n/*\r\n// Potential future PVRTC compressed texture formats\r\nTHREE.RGB_PVRTC_4BPPV1_Format = 2100;\r\nTHREE.RGB_PVRTC_2BPPV1_Format = 2101;\r\nTHREE.RGBA_PVRTC_4BPPV1_Format = 2102;\r\nTHREE.RGBA_PVRTC_2BPPV1_Format = 2103;\r\n*/\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Color = function ( value ) {\r\n\r\n\tif ( value !== undefined ) this.set( value );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Color.prototype = {\r\n\r\n\tconstructor: THREE.Color,\r\n\r\n\tr: 1, g: 1, b: 1,\r\n\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tswitch ( typeof value ) {\r\n\r\n\t\t\tcase \"number\":\r\n\t\t\t\tthis.setHex( value );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"string\":\r\n\t\t\t\tthis.setStyle( value );\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tsetHex: function ( hex ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetHSV: function ( h, s, v ) {\r\n\r\n\t\t// based on MochiKit implementation by Bob Ippolito\r\n\t\t// h,s,v ranges are < 0.0 - 1.0 >\r\n\r\n\t\tvar i, f, p, q, t;\r\n\r\n\t\tif ( v === 0 ) {\r\n\r\n\t\t\tthis.r = this.g = this.b = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ti = Math.floor( h * 6 );\r\n\t\t\tf = ( h * 6 ) - i;\r\n\t\t\tp = v * ( 1 - s );\r\n\t\t\tq = v * ( 1 - ( s * f ) );\r\n\t\t\tt = v * ( 1 - ( s * ( 1 - f ) ) );\r\n\r\n\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\tthis.r = v;\r\n\t\t\t\tthis.g = t;\r\n\t\t\t\tthis.b = p;\r\n\r\n\t\t\t} else if ( i === 1 ) {\r\n\r\n\t\t\t\tthis.r = q;\r\n\t\t\t\tthis.g = v;\r\n\t\t\t\tthis.b = p;\r\n\r\n\t\t\t} else if ( i === 2 ) {\r\n\r\n\t\t\t\tthis.r = p;\r\n\t\t\t\tthis.g = v;\r\n\t\t\t\tthis.b = t;\r\n\r\n\t\t\t} else if ( i === 3 ) {\r\n\r\n\t\t\t\tthis.r = p;\r\n\t\t\t\tthis.g = q;\r\n\t\t\t\tthis.b = v;\r\n\r\n\t\t\t} else if ( i === 4 ) {\r\n\r\n\t\t\t\tthis.r = t;\r\n\t\t\t\tthis.g = p;\r\n\t\t\t\tthis.b = v;\r\n\r\n\t\t\t} else if ( i === 5 ) {\r\n\r\n\t\t\t\tthis.r = v;\r\n\t\t\t\tthis.g = p;\r\n\t\t\t\tthis.b = q;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetStyle: function ( style ) {\r\n\r\n\t\t// rgb(255,0,0)\r\n\r\n\t\tif ( /^rgb\\((\\d+),(\\d+),(\\d+)\\)$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^rgb\\((\\d+),(\\d+),(\\d+)\\)$/i.exec( style );\r\n\r\n\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// rgb(100%,0%,0%)\r\n\r\n\t\tif ( /^rgb\\((\\d+)\\%,(\\d+)\\%,(\\d+)\\%\\)$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^rgb\\((\\d+)\\%,(\\d+)\\%,(\\d+)\\%\\)$/i.exec( style );\r\n\r\n\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// #ff0000\r\n\r\n\t\tif ( /^\\#([0-9a-f]{6})$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^\\#([0-9a-f]{6})$/i.exec( style );\r\n\r\n\t\t\tthis.setHex( parseInt( color[ 1 ], 16 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// #f00\r\n\r\n\t\tif ( /^\\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test( style ) ) {\r\n\r\n\t\t\tvar color = /^\\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec( style );\r\n\r\n\t\t\tthis.setHex( parseInt( color[ 1 ] + color[ 1 ] + color[ 2 ] + color[ 2 ] + color[ 3 ] + color[ 3 ], 16 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t// red\r\n\r\n\t\tif ( /^(\\w+)$/i.test( style ) ) {\r\n\r\n\t\t\tthis.setHex( THREE.ColorKeywords[ style ] );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\r\n\t},\r\n\r\n\tcopy: function ( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyGammaToLinear: function ( color ) {\r\n\r\n\t\tthis.r = color.r * color.r;\r\n\t\tthis.g = color.g * color.g;\r\n\t\tthis.b = color.b * color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyLinearToGamma: function ( color ) {\r\n\r\n\t\tthis.r = Math.sqrt( color.r );\r\n\t\tthis.g = Math.sqrt( color.g );\r\n\t\tthis.b = Math.sqrt( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertGammaToLinear: function () {\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tthis.r = r * r;\r\n\t\tthis.g = g * g;\r\n\t\tthis.b = b * b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertLinearToGamma: function () {\r\n\r\n\t\tthis.r = Math.sqrt( this.r );\r\n\t\tthis.g = Math.sqrt( this.g );\r\n\t\tthis.b = Math.sqrt( this.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetHex: function () {\r\n\r\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t},\r\n\r\n\tgetHexString: function () {\r\n\r\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t},\r\n\r\n\tgetStyle: function () {\r\n\r\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 )  + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t},\r\n\r\n\tgetHSV: function ( hsv ) {\r\n\r\n\t\t// based on MochiKit implementation by Bob Ippolito\r\n\t\t// h,s,v ranges are < 0.0 - 1.0 >\r\n\r\n\t\tvar r = this.r;\r\n\t\tvar g = this.g;\r\n\t\tvar b = this.b;\r\n\r\n\t\tvar max = Math.max( Math.max( r, g ), b );\r\n\t\tvar min = Math.min( Math.min( r, g ), b );\r\n\r\n\t\tvar hue;\r\n\t\tvar saturation;\r\n\t\tvar value = max;\r\n\r\n\t\tif ( min === max )\t{\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar delta = ( max - min );\r\n\t\t\tsaturation = delta / max;\r\n\r\n\t\t\tif ( r === max ) {\r\n\r\n\t\t\t\thue = ( g - b ) / delta;\r\n\r\n\t\t\t} else if ( g === max ) {\r\n\r\n\t\t\t\thue = 2 + ( ( b - r ) / delta );\r\n\r\n\t\t\t} else\t{\r\n\r\n\t\t\t\thue = 4 + ( ( r - g ) / delta );\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t\tif ( hue < 0 ) {\r\n\r\n\t\t\t\thue += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hue > 1 ) {\r\n\r\n\t\t\t\thue -= 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( hsv === undefined ) {\r\n\r\n\t\t\thsv = { h: 0, s: 0, v: 0 };\r\n\r\n\t\t}\r\n\r\n\t\thsv.h = hue;\r\n\t\thsv.s = saturation;\r\n\t\thsv.v = value;\r\n\r\n\t\treturn hsv;\r\n\r\n\t},\r\n\r\n\tadd: function ( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddColors: function ( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Color().setRGB( this.r, this.g, this.b );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ColorKeywords = { \"aliceblue\": 0xF0F8FF, \"antiquewhite\": 0xFAEBD7, \"aqua\": 0x00FFFF, \"aquamarine\": 0x7FFFD4, \"azure\": 0xF0FFFF,\r\n\"beige\": 0xF5F5DC, \"bisque\": 0xFFE4C4, \"black\": 0x000000, \"blanchedalmond\": 0xFFEBCD, \"blue\": 0x0000FF, \"blueviolet\": 0x8A2BE2,\r\n\"brown\": 0xA52A2A, \"burlywood\": 0xDEB887, \"cadetblue\": 0x5F9EA0, \"chartreuse\": 0x7FFF00, \"chocolate\": 0xD2691E, \"coral\": 0xFF7F50,\r\n\"cornflowerblue\": 0x6495ED, \"cornsilk\": 0xFFF8DC, \"crimson\": 0xDC143C, \"cyan\": 0x00FFFF, \"darkblue\": 0x00008B, \"darkcyan\": 0x008B8B,\r\n\"darkgoldenrod\": 0xB8860B, \"darkgray\": 0xA9A9A9, \"darkgreen\": 0x006400, \"darkgrey\": 0xA9A9A9, \"darkkhaki\": 0xBDB76B, \"darkmagenta\": 0x8B008B,\r\n\"darkolivegreen\": 0x556B2F, \"darkorange\": 0xFF8C00, \"darkorchid\": 0x9932CC, \"darkred\": 0x8B0000, \"darksalmon\": 0xE9967A, \"darkseagreen\": 0x8FBC8F,\r\n\"darkslateblue\": 0x483D8B, \"darkslategray\": 0x2F4F4F, \"darkslategrey\": 0x2F4F4F, \"darkturquoise\": 0x00CED1, \"darkviolet\": 0x9400D3,\r\n\"deeppink\": 0xFF1493, \"deepskyblue\": 0x00BFFF, \"dimgray\": 0x696969, \"dimgrey\": 0x696969, \"dodgerblue\": 0x1E90FF, \"firebrick\": 0xB22222,\r\n\"floralwhite\": 0xFFFAF0, \"forestgreen\": 0x228B22, \"fuchsia\": 0xFF00FF, \"gainsboro\": 0xDCDCDC, \"ghostwhite\": 0xF8F8FF, \"gold\": 0xFFD700,\r\n\"goldenrod\": 0xDAA520, \"gray\": 0x808080, \"green\": 0x008000, \"greenyellow\": 0xADFF2F, \"grey\": 0x808080, \"honeydew\": 0xF0FFF0, \"hotpink\": 0xFF69B4,\r\n\"indianred\": 0xCD5C5C, \"indigo\": 0x4B0082, \"ivory\": 0xFFFFF0, \"khaki\": 0xF0E68C, \"lavender\": 0xE6E6FA, \"lavenderblush\": 0xFFF0F5, \"lawngreen\": 0x7CFC00,\r\n\"lemonchiffon\": 0xFFFACD, \"lightblue\": 0xADD8E6, \"lightcoral\": 0xF08080, \"lightcyan\": 0xE0FFFF, \"lightgoldenrodyellow\": 0xFAFAD2, \"lightgray\": 0xD3D3D3,\r\n\"lightgreen\": 0x90EE90, \"lightgrey\": 0xD3D3D3, \"lightpink\": 0xFFB6C1, \"lightsalmon\": 0xFFA07A, \"lightseagreen\": 0x20B2AA, \"lightskyblue\": 0x87CEFA,\r\n\"lightslategray\": 0x778899, \"lightslategrey\": 0x778899, \"lightsteelblue\": 0xB0C4DE, \"lightyellow\": 0xFFFFE0, \"lime\": 0x00FF00, \"limegreen\": 0x32CD32,\r\n\"linen\": 0xFAF0E6, \"magenta\": 0xFF00FF, \"maroon\": 0x800000, \"mediumaquamarine\": 0x66CDAA, \"mediumblue\": 0x0000CD, \"mediumorchid\": 0xBA55D3,\r\n\"mediumpurple\": 0x9370DB, \"mediumseagreen\": 0x3CB371, \"mediumslateblue\": 0x7B68EE, \"mediumspringgreen\": 0x00FA9A, \"mediumturquoise\": 0x48D1CC,\r\n\"mediumvioletred\": 0xC71585, \"midnightblue\": 0x191970, \"mintcream\": 0xF5FFFA, \"mistyrose\": 0xFFE4E1, \"moccasin\": 0xFFE4B5, \"navajowhite\": 0xFFDEAD,\r\n\"navy\": 0x000080, \"oldlace\": 0xFDF5E6, \"olive\": 0x808000, \"olivedrab\": 0x6B8E23, \"orange\": 0xFFA500, \"orangered\": 0xFF4500, \"orchid\": 0xDA70D6,\r\n\"palegoldenrod\": 0xEEE8AA, \"palegreen\": 0x98FB98, \"paleturquoise\": 0xAFEEEE, \"palevioletred\": 0xDB7093, \"papayawhip\": 0xFFEFD5, \"peachpuff\": 0xFFDAB9,\r\n\"peru\": 0xCD853F, \"pink\": 0xFFC0CB, \"plum\": 0xDDA0DD, \"powderblue\": 0xB0E0E6, \"purple\": 0x800080, \"red\": 0xFF0000, \"rosybrown\": 0xBC8F8F,\r\n\"royalblue\": 0x4169E1, \"saddlebrown\": 0x8B4513, \"salmon\": 0xFA8072, \"sandybrown\": 0xF4A460, \"seagreen\": 0x2E8B57, \"seashell\": 0xFFF5EE,\r\n\"sienna\": 0xA0522D, \"silver\": 0xC0C0C0, \"skyblue\": 0x87CEEB, \"slateblue\": 0x6A5ACD, \"slategray\": 0x708090, \"slategrey\": 0x708090, \"snow\": 0xFFFAFA,\r\n\"springgreen\": 0x00FF7F, \"steelblue\": 0x4682B4, \"tan\": 0xD2B48C, \"teal\": 0x008080, \"thistle\": 0xD8BFD8, \"tomato\": 0xFF6347, \"turquoise\": 0x40E0D0,\r\n\"violet\": 0xEE82EE, \"wheat\": 0xF5DEB3, \"white\": 0xFFFFFF, \"whitesmoke\": 0xF5F5F5, \"yellow\": 0xFFFF00, \"yellowgreen\": 0x9ACD32 };\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Quaternion = function( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Quaternion.prototype = {\r\n\r\n\tconstructor: THREE.Quaternion,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( q ) {\r\n\r\n\t\tthis.x = q.x;\r\n\t\tthis.y = q.y;\r\n\t\tthis.z = q.z;\r\n\t\tthis.w = q.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromEuler: function ( v, order ) {\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tvar c1 = Math.cos( v.x / 2 );\r\n\t\tvar c2 = Math.cos( v.y / 2 );\r\n\t\tvar c3 = Math.cos( v.z / 2 );\r\n\t\tvar s1 = Math.sin( v.x / 2 );\r\n\t\tvar s2 = Math.sin( v.y / 2 );\r\n\t\tvar s3 = Math.sin( v.z / 2 );\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis.x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis.y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis.z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis.w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\t\t// axis have to be normalized\r\n\r\n\t\tvar halfAngle = angle / 2,\r\n\t\t\ts = Math.sin( halfAngle );\r\n\r\n\t\tthis.x = axis.x * s;\r\n\t\tthis.y = axis.y * s;\r\n\t\tthis.z = axis.z * s;\r\n\t\tthis.w = Math.cos( halfAngle );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements,\r\n\r\n\t\t\tm11 = te[0], m12 = te[4], m13 = te[8],\r\n\t\t\tm21 = te[1], m22 = te[5], m23 = te[9],\r\n\t\t\tm31 = te[2], m32 = te[6], m33 = te[10],\r\n\r\n\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\ts;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis.w = 0.25 / s;\r\n\t\t\tthis.x = ( m32 - m23 ) * s;\r\n\t\t\tthis.y = ( m13 - m31 ) * s;\r\n\t\t\tthis.z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis.w = (m32 - m23 ) / s;\r\n\t\t\tthis.x = 0.25 * s;\r\n\t\t\tthis.y = (m12 + m21 ) / s;\r\n\t\t\tthis.z = (m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis.w = (m13 - m31 ) / s;\r\n\t\t\tthis.x = (m12 + m21 ) / s;\r\n\t\t\tthis.y = 0.25 * s;\r\n\t\t\tthis.z = (m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis.w = ( m21 - m12 ) / s;\r\n\t\t\tthis.x = ( m13 + m31 ) / s;\r\n\t\t\tthis.y = ( m23 + m32 ) / s;\r\n\t\t\tthis.z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tinverse: function () {\r\n\r\n\t\tthis.conjugate().normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconjugate: function () {\r\n\r\n\t\tthis.x *= -1;\r\n\t\tthis.y *= -1;\r\n\t\tthis.z *= -1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tvar l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis.x = this.x * l;\r\n\t\t\tthis.y = this.y * l;\r\n\t\t\tthis.z = this.z * l;\r\n\t\t\tthis.w = this.w * l;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( q, p ) {\r\n\r\n\t\tif ( p !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Quaternion\\'s .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t},\r\n\r\n\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tvar qax = a.x, qay = a.y, qaz = a.z, qaw = a.w;\r\n\t\tvar qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;\r\n\r\n\t\tthis.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Quaternion\\'s .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\treturn vector.applyQuaternion( this );\r\n\r\n\t},\r\n\r\n\tslerp: function ( qb, t ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tvar cosHalfTheta = w * qb.w + x * qb.x + y * qb.y + z * qb.z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis.w = -qb.w;\r\n\t\t\tthis.x = -qb.x;\r\n\t\t\tthis.y = -qb.y;\r\n\t\t\tthis.z = -qb.z;\r\n\r\n\t\t\tcosHalfTheta = -cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis.w = w;\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar halfTheta = Math.acos( cosHalfTheta );\r\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\r\n\r\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\r\n\r\n\t\t\tthis.w = 0.5 * ( w + this.w );\r\n\t\t\tthis.x = 0.5 * ( x + this.x );\r\n\t\t\tthis.y = 0.5 * ( y + this.y );\r\n\t\t\tthis.z = 0.5 * ( z + this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis.w = ( w * ratioA + this.w * ratioB );\r\n\t\tthis.x = ( x * ratioA + this.x * ratioB );\r\n\t\tthis.y = ( y * ratioA + this.y * ratioB );\r\n\t\tthis.z = ( z * ratioA + this.z * ratioB );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Quaternion( this.x, this.y, this.z, this.w );\r\n\r\n\t}\r\n\r\n}\r\n\r\nTHREE.Quaternion.slerp = function ( qa, qb, qm, t ) {\r\n\r\n\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n}\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author egraether / http://egraether.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.Vector2 = function ( x, y ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\r\n};\r\n\r\nTHREE.Vector2.prototype = {\r\n\r\n\tconstructor: THREE.Vector2,\r\n\r\n\tset: function ( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector2\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector2\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.x *= s;\r\n\t\tthis.y *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( s ) {\r\n\r\n\t\tif ( s !== 0 ) {\r\n\r\n\t\t\tthis.x /= s;\r\n\t\t\tthis.y /= s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.set( 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tif ( this.x > v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y > v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tif ( this.x < v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tif ( this.x < min.x ) {\r\n\r\n\t\t\tthis.x = min.x;\r\n\r\n\t\t} else if ( this.x > max.x ) {\r\n\r\n\t\t\tthis.x = max.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < min.y ) {\r\n\r\n\t\t\tthis.y = min.y;\r\n\r\n\t\t} else if ( this.y > max.y ) {\r\n\r\n\t\t\tthis.y = max.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function() {\r\n\r\n\t\treturn this.multiplyScalar( - 1 );\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t},\r\n\r\n\tsetLength: function ( l ) {\r\n\r\n\t\tvar oldLength = this.length();\r\n\r\n\t\tif ( oldLength !== 0 && l !== oldLength ) {\r\n\r\n\t\t\tthis.multiplyScalar( l / oldLength );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Vector2( this.x, this.y );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author *kile / http://kile.stravaganza.org/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector3 = function ( x, y, z ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\r\n};\r\n\r\n\r\nTHREE.Vector3.prototype = {\r\n\r\n\tconstructor: THREE.Vector3,\r\n\r\n\tset: function ( x, y, z ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.x *= s;\r\n\t\tthis.y *= s;\r\n\t\tthis.z *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\r\n\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\r\n\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[0] * x + e[4] * y + e[8]  * z + e[12];\r\n\t\tthis.y = e[1] * x + e[5] * y + e[9]  * z + e[13];\r\n\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyProjection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 projection matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\t\tvar d = 1 / ( e[3] * x + e[7] * y + e[11] * z + e[15] ); // perspective divide\r\n\r\n\t\tthis.x = ( e[0] * x + e[4] * y + e[8]  * z + e[12] ) * d;\r\n\t\tthis.y = ( e[1] * x + e[5] * y + e[9]  * z + e[13] ) * d;\r\n\t\tthis.z = ( e[2] * x + e[6] * y + e[10] * z + e[14] ) * d;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyQuaternion: function ( q ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\r\n\t\tvar qx = q.x;\r\n\t\tvar qy = q.y;\r\n\t\tvar qz = q.z;\r\n\t\tvar qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tvar ix =  qw * x + qy * z - qz * y;\r\n\t\tvar iy =  qw * y + qz * x - qx * z;\r\n\t\tvar iz =  qw * z + qx * y - qy * x;\r\n\t\tvar iw = -qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyEuler: function ( v, eulerOrder ) {\r\n\r\n\t\tvar quaternion = THREE.Vector3.__q1.setFromEuler( v, eulerOrder );\r\n\r\n\t\tthis.applyQuaternion( quaternion );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyAxisAngle: function ( axis, angle ) {\r\n\r\n\t\tvar quaternion = THREE.Vector3.__q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.applyQuaternion( quaternion );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( s ) {\r\n\r\n\t\tif ( s !== 0 ) {\r\n\r\n\t\t\tthis.x /= s;\r\n\t\t\tthis.y /= s;\r\n\t\t\tthis.z /= s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tif ( this.x > v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y > v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z > v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tif ( this.x < v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tif ( this.x < min.x ) {\r\n\r\n\t\t\tthis.x = min.x;\r\n\r\n\t\t} else if ( this.x > max.x ) {\r\n\r\n\t\t\tthis.x = max.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < min.y ) {\r\n\r\n\t\t\tthis.y = min.y;\r\n\r\n\t\t} else if ( this.y > max.y ) {\r\n\r\n\t\t\tthis.y = max.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < min.z ) {\r\n\r\n\t\t\tthis.z = min.z;\r\n\r\n\t\t} else if ( this.z > max.z ) {\r\n\r\n\t\t\tthis.z = max.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function() {\r\n\r\n\t\treturn this.multiplyScalar( - 1 );\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( l ) {\r\n\r\n\t\tvar oldLength = this.length();\r\n\r\n\t\tif ( oldLength !== 0 && l !== oldLength  ) {\r\n\r\n\t\t\tthis.multiplyScalar( l / oldLength );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcross: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector3\\'s .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tthis.x = y * v.z - z * v.y;\r\n\t\tthis.y = z * v.x - x * v.z;\r\n\t\tthis.z = x * v.y - y * v.x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.y * b.z - a.z * b.y;\r\n\t\tthis.y = a.z * b.x - a.x * b.z;\r\n\t\tthis.z = a.x * b.y - a.y * b.x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tangleTo: function ( v ) {\r\n\r\n\t\treturn Math.acos( this.dot( v ) / this.length() / v.length() );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x;\r\n\t\tvar dy = this.y - v.y;\r\n\t\tvar dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t},\r\n\r\n\tgetPositionFromMatrix: function ( m ) {\r\n\r\n\t\tthis.x = m.elements[12];\r\n\t\tthis.y = m.elements[13];\r\n\t\tthis.z = m.elements[14];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetEulerFromRotationMatrix: function ( m, order ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\tfunction clamp( x ) {\r\n\r\n\t\t\treturn Math.min( Math.max( x, -1 ), 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = m.elements;\r\n\t\tvar m11 = te[0], m12 = te[4], m13 = te[8];\r\n\t\tvar m21 = te[1], m22 = te[5], m23 = te[9];\r\n\t\tvar m31 = te[2], m32 = te[6], m33 = te[10];\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tthis.y = Math.asin( clamp( m13 ) );\r\n\r\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis.z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis.x = Math.asin( - clamp( m23 ) );\r\n\r\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.y = Math.atan2( m13, m33 );\r\n\t\t\t\tthis.z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.y = Math.atan2( - m31, m11 );\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis.x = Math.asin( clamp( m32 ) );\r\n\r\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.y = Math.atan2( - m31, m33 );\r\n\t\t\t\tthis.z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis.y = Math.asin( - clamp( m31 ) );\r\n\r\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( m32, m33 );\r\n\t\t\t\tthis.z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis.z = Math.asin( clamp( m21 ) );\r\n\r\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( - m23, m22 );\r\n\t\t\t\tthis.y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis.z = Math.asin( - clamp( m12 ) );\r\n\r\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis.x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis.y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis.y = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetEulerFromQuaternion: function ( q, order ) {\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\tfunction clamp( x ) {\r\n\r\n\t\t\treturn Math.min( Math.max( x, -1 ), 1 );\r\n\r\n\t\t}\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\r\n\r\n\t\tvar sqx = q.x * q.x;\r\n\t\tvar sqy = q.y * q.y;\r\n\t\tvar sqz = q.z * q.z;\r\n\t\tvar sqw = q.w * q.w;\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.y = Math.asin(  clamp( 2 * ( q.x * q.z + q.y * q.w ) ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );\r\n\r\n\t\t} else if ( order ===  'YXZ' ) {\r\n\r\n\t\t\tthis.x = Math.asin(  clamp( 2 * ( q.x * q.w - q.y * q.z ) ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis.x = Math.asin(  clamp( 2 * ( q.x * q.w + q.y * q.z ) ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );\r\n\t\t\tthis.y = Math.asin(  clamp( 2 * ( q.y * q.w - q.x * q.z ) ) );\r\n\t\t\tthis.z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );\r\n\t\t\tthis.z = Math.asin(  clamp( 2 * ( q.x * q.y + q.z * q.w ) ) );\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis.x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );\r\n\t\t\tthis.y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );\r\n\t\t\tthis.z = Math.asin(  clamp( 2 * ( q.z * q.w - q.x * q.y ) ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetScaleFromMatrix: function ( m ) {\r\n\r\n\t\tvar sx = this.set( m.elements[0], m.elements[1], m.elements[2] ).length();\r\n\t\tvar sy = this.set( m.elements[4], m.elements[5], m.elements[6] ).length();\r\n\t\tvar sz = this.set( m.elements[8], m.elements[9], m.elements[10] ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Vector3( this.x, this.y, this.z );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Vector3.__q1 = new THREE.Quaternion();\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector4 = function ( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Vector4.prototype = {\r\n\r\n\tconstructor: THREE.Vector4,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( \"index is out of range: \" + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector4\\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Vector4\\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.x *= s;\r\n\t\tthis.y *= s;\r\n\t\tthis.z *= s;\r\n\t\tthis.w *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\t\tvar w = this.w;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\r\n\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\r\n\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\r\n\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( s ) {\r\n\r\n\t\tif ( s !== 0 ) {\r\n\r\n\t\t\tthis.x /= s;\r\n\t\t\tthis.y /= s;\r\n\t\t\tthis.z /= s;\r\n\t\t\tthis.w /= s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 1;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tif ( this.x > v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y > v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z > v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.w > v.w ) {\r\n\r\n\t\t\tthis.w = v.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tif ( this.x < v.x ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < v.y ) {\r\n\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < v.z ) {\r\n\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.w < v.w ) {\r\n\r\n\t\t\tthis.w = v.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tif ( this.x < min.x ) {\r\n\r\n\t\t\tthis.x = min.x;\r\n\r\n\t\t} else if ( this.x > max.x ) {\r\n\r\n\t\t\tthis.x = max.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.y < min.y ) {\r\n\r\n\t\t\tthis.y = min.y;\r\n\r\n\t\t} else if ( this.y > max.y ) {\r\n\r\n\t\t\tthis.y = max.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.z < min.z ) {\r\n\r\n\t\t\tthis.z = min.z;\r\n\r\n\t\t} else if ( this.z > max.z ) {\r\n\r\n\t\t\tthis.z = max.z;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.w < min.w ) {\r\n\r\n\t\t\tthis.w = min.w;\r\n\r\n\t\t} else if ( this.w > max.w ) {\r\n\r\n\t\t\tthis.w = max.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function() {\r\n\r\n\t\treturn this.multiplyScalar( -1 );\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( l ) {\r\n\r\n\t\tvar oldLength = this.length();\r\n\r\n\t\tif ( oldLength !== 0 && l !== oldLength ) {\r\n\r\n\t\t\tthis.multiplyScalar( l / oldLength );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Vector4( this.x, this.y, this.z, this.w );\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t this.x = 1;\r\n\t\t\t this.y = 0;\r\n\t\t\t this.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t this.x = q.x / s;\r\n\t\t\t this.y = q.y / s;\r\n\t\t\t this.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[0], m12 = te[4], m13 = te[8],\r\n\t\t\tm21 = te[1], m22 = te[5], m23 = te[9],\r\n\t\t\tm31 = te[2], m32 = te[6], m33 = te[10];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon )\r\n\t\t  && ( Math.abs( m13 - m31 ) < epsilon )\r\n\t\t  && ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 )\r\n\t\t\t  && ( Math.abs( m13 + m31 ) < epsilon2 )\r\n\t\t\t  && ( Math.abs( m23 + m32 ) < epsilon2 )\r\n\t\t\t  && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) { // m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) { // m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else { // m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )\r\n\t\t\t\t\t\t + ( m13 - m31 ) * ( m13 - m31 )\r\n\t\t\t\t\t\t + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Box2 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( -Infinity, -Infinity );\r\n\r\n};\r\n\r\nTHREE.Box2.prototype = {\r\n\r\n\tconstructor: THREE.Box2,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\tvar point = points[ 0 ];\r\n\r\n\t\t\tthis.min.copy( point );\r\n\t\t\tthis.max.copy( point );\r\n\r\n\t\t\tfor ( var i = 1, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tpoint = points[ i ];\r\n\r\n\t\t\t\tif ( point.x < this.min.x ) {\r\n\r\n\t\t\t\t\tthis.min.x = point.x;\r\n\r\n\t\t\t\t} else if ( point.x > this.max.x ) {\r\n\r\n\t\t\t\t\tthis.max.x = point.x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( point.y < this.min.y ) {\r\n\r\n\t\t\t\t\tthis.min.y = point.y;\r\n\r\n\t\t\t\t} else if ( point.y > this.max.y ) {\r\n\r\n\t\t\t\t\tthis.max.y = point.y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\tvar halfSize = THREE.Box2.__v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = Infinity;\r\n\t\tthis.max.x = this.max.y = -Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( -scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn new THREE.Vector2(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\tvar clampedPoint = THREE.Box2.__v1.copy( point ).clamp( this.min, this.max );\r\n\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t},\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Box2().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Box2.__v1 = new THREE.Vector2();\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Box3 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( -Infinity, -Infinity, -Infinity );\r\n\r\n};\r\n\r\nTHREE.Box3.prototype = {\r\n\r\n\tconstructor: THREE.Box3,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\tvar point = points[ 0 ];\r\n\r\n\t\t\tthis.min.copy( point );\r\n\t\t\tthis.max.copy( point );\r\n\r\n\t\t\tfor ( var i = 1, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tpoint = points[ i ];\r\n\r\n\t\t\t\tif ( point.x < this.min.x ) {\r\n\r\n\t\t\t\t\tthis.min.x = point.x;\r\n\r\n\t\t\t\t} else if ( point.x > this.max.x ) {\r\n\r\n\t\t\t\t\tthis.max.x = point.x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( point.y < this.min.y ) {\r\n\r\n\t\t\t\t\tthis.min.y = point.y;\r\n\r\n\t\t\t\t} else if ( point.y > this.max.y ) {\r\n\r\n\t\t\t\t\tthis.max.y = point.y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( point.z < this.min.z ) {\r\n\r\n\t\t\t\t\tthis.min.z = point.z;\r\n\r\n\t\t\t\t} else if ( point.z > this.max.z ) {\r\n\r\n\t\t\t\t\tthis.max.z = point.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\tvar halfSize = THREE.Box3.__v1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( -scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ||\r\n\t\t     point.z < this.min.z || point.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\r\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t     box.max.z < this.min.z || box.min.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn new THREE.Vector3().copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\tvar clampedPoint = THREE.Box3.__v1.copy( point ).clamp( this.min, this.max );\r\n\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t},\r\n\r\n\tgetBoundingSphere: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Sphere();\r\n\r\n\t\tresult.center = this.center();\r\n\t\tresult.radius = this.size( THREE.Box3.__v0 ).length() * 0.5;\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix ) {\r\n\r\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\tvar newPoints = [\r\n\t\t\tTHREE.Box3.__v0.set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ),\r\n\t\t\tTHREE.Box3.__v0.set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ), // 000\r\n\t\t\tTHREE.Box3.__v1.set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ), // 001\r\n\t\t\tTHREE.Box3.__v2.set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ), // 010\r\n\t\t\tTHREE.Box3.__v3.set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ), // 011\r\n\t\t\tTHREE.Box3.__v4.set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ), // 100\r\n\t\t\tTHREE.Box3.__v5.set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ), // 101\r\n\t\t\tTHREE.Box3.__v6.set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ), // 110\r\n\t\t\tTHREE.Box3.__v7.set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix )  // 111\r\n\t\t];\r\n\r\n\t\tthis.makeEmpty();\r\n\t\tthis.setFromPoints( newPoints );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Box3().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Box3.__v0 = new THREE.Vector3();\r\nTHREE.Box3.__v1 = new THREE.Vector3();\r\nTHREE.Box3.__v2 = new THREE.Vector3();\r\nTHREE.Box3.__v3 = new THREE.Vector3();\r\nTHREE.Box3.__v4 = new THREE.Vector3();\r\nTHREE.Box3.__v5 = new THREE.Vector3();\r\nTHREE.Box3.__v6 = new THREE.Vector3();\r\nTHREE.Box3.__v7 = new THREE.Vector3();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Matrix3 = function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\tthis.elements = new Float32Array(9);\r\n\r\n\tthis.set(\r\n\r\n\t\t( n11 !== undefined ) ? n11 : 1, n12 || 0, n13 || 0,\r\n\t\tn21 || 0, ( n22 !== undefined ) ? n22 : 1, n23 || 0,\r\n\t\tn31 || 0, n32 || 0, ( n33 !== undefined ) ? n33 : 1\r\n\r\n\t);\r\n};\r\n\r\nTHREE.Matrix3.prototype = {\r\n\r\n\tconstructor: THREE.Matrix3,\r\n\r\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] = n11; te[3] = n12; te[6] = n13;\r\n\t\tte[1] = n21; te[4] = n22; te[7] = n23;\r\n\t\tte[2] = n31; te[5] = n32; te[8] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[0], me[3], me[6],\r\n\t\t\tme[1], me[4], me[7],\r\n\t\t\tme[2], me[5], me[8]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Matrix3\\'s .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix3( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector3Array: function ( a ) {\r\n\r\n\t\tvar tmp = THREE.Matrix3.__v1;\r\n\r\n\t\tfor ( var i = 0, il = a.length; i < il; i += 3 ) {\r\n\r\n\t\t\ttmp.x = a[ i ];\r\n\t\t\ttmp.y = a[ i + 1 ];\r\n\t\t\ttmp.z = a[ i + 2 ];\r\n\r\n\t\t\ttmp.applyMatrix3(this);\r\n\r\n\t\t\ta[ i ]     = tmp.x;\r\n\t\t\ta[ i + 1 ] = tmp.y;\r\n\t\t\ta[ i + 2 ] = tmp.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] *= s; te[3] *= s; te[6] *= s;\r\n\t\tte[1] *= s; te[4] *= s; te[7] *= s;\r\n\t\tte[2] *= s; te[5] *= s; te[8] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a = te[0], b = te[1], c = te[2],\r\n\t\t\td = te[3], e = te[4], f = te[5],\r\n\t\t\tg = te[6], h = te[7], i = te[8];\r\n\r\n\t\treturn a*e*i - a*f*h - b*d*i + b*f*g + c*d*h - c*e*g;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( matrix, throwOnInvertible ) {\r\n\r\n\t\t// input: THREE.Matrix4\r\n\t\t// ( based on http://code.google.com/p/webgl-mjs/ )\r\n\r\n\t\tvar me = matrix.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] =   me[10] * me[5] - me[6] * me[9];\r\n\t\tte[ 1 ] = - me[10] * me[1] + me[2] * me[9];\r\n\t\tte[ 2 ] =   me[6] * me[1] - me[2] * me[5];\r\n\t\tte[ 3 ] = - me[10] * me[4] + me[6] * me[8];\r\n\t\tte[ 4 ] =   me[10] * me[0] - me[2] * me[8];\r\n\t\tte[ 5 ] = - me[6] * me[0] + me[2] * me[4];\r\n\t\tte[ 6 ] =   me[9] * me[4] - me[5] * me[8];\r\n\t\tte[ 7 ] = - me[9] * me[0] + me[1] * me[8];\r\n\t\tte[ 8 ] =   me[5] * me[0] - me[1] * me[4];\r\n\r\n\t\tvar det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];\r\n\r\n\t\t// no inverse\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"Matrix3.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnInvertible || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg ); \r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.identity();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tthis.multiplyScalar( 1.0 / det );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar tmp, m = this.elements;\r\n\r\n\t\ttmp = m[1]; m[1] = m[3]; m[3] = tmp;\r\n\t\ttmp = m[2]; m[2] = m[6]; m[6] = tmp;\r\n\t\ttmp = m[5]; m[5] = m[7]; m[7] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\r\n\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\tvar m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\treturn new THREE.Matrix3(\r\n\r\n\t\t\tte[0], te[3], te[6],\r\n\t\t\tte[1], te[4], te[7],\r\n\t\t\tte[2], te[5], te[8]\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix3.__v1 = new THREE.Vector3();\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author jordi_ros / http://plattsoft.com\r\n * @author D1plo1d / http://github.com/D1plo1d\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author timknip / http://www.floorplanner.com/\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\n\r\nTHREE.Matrix4 = function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\tthis.elements = new Float32Array( 16 );\r\n\r\n\tthis.set(\r\n\r\n\t\t( n11 !== undefined ) ? n11 : 1, n12 || 0, n13 || 0, n14 || 0,\r\n\t\tn21 || 0, ( n22 !== undefined ) ? n22 : 1, n23 || 0, n24 || 0,\r\n\t\tn31 || 0, n32 || 0, ( n33 !== undefined ) ? n33 : 1, n34 || 0,\r\n\t\tn41 || 0, n42 || 0, n43 || 0, ( n44 !== undefined ) ? n44 : 1\r\n\r\n\t);\r\n\r\n};\r\n\r\nTHREE.Matrix4.prototype = {\r\n\r\n\tconstructor: THREE.Matrix4,\r\n\r\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;\r\n\t\tte[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;\r\n\t\tte[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;\r\n\t\tte[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[0], me[4], me[8], me[12],\r\n\t\t\tme[1], me[5], me[9], me[13],\r\n\t\t\tme[2], me[6], me[10], me[14],\r\n\t\t\tme[3], me[7], me[11], me[15]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRotationFromEuler: function ( v, order ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( order === undefined || order === 'XYZ' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = - c * f;\r\n\t\t\tte[8] = d;\r\n\r\n\t\t\tte[1] = af + be * d;\r\n\t\t\tte[5] = ae - bf * d;\r\n\t\t\tte[9] = - b * c;\r\n\r\n\t\t\tte[2] = bf - ae * d;\r\n\t\t\tte[6] = be + af * d;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[0] = ce + df * b;\r\n\t\t\tte[4] = de * b - cf;\r\n\t\t\tte[8] = a * d;\r\n\r\n\t\t\tte[1] = a * f;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = - b;\r\n\r\n\t\t\tte[2] = cf * b - de;\r\n\t\t\tte[6] = df + ce * b;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[0] = ce - df * b;\r\n\t\t\tte[4] = - a * f;\r\n\t\t\tte[8] = de + cf * b;\r\n\r\n\t\t\tte[1] = cf + de * b;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = df - ce * b;\r\n\r\n\t\t\tte[2] = - a * d;\r\n\t\t\tte[6] = b;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = be * d - af;\r\n\t\t\tte[8] = ae * d + bf;\r\n\r\n\t\t\tte[1] = c * f;\r\n\t\t\tte[5] = bf * d + ae;\r\n\t\t\tte[9] = af * d - be;\r\n\r\n\t\t\tte[2] = - d;\r\n\t\t\tte[6] = b * c;\r\n\t\t\tte[10] = a * c;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = bd - ac * f;\r\n\t\t\tte[8] = bc * f + ad;\r\n\r\n\t\t\tte[1] = f;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = - b * e;\r\n\r\n\t\t\tte[2] = - d * e;\r\n\t\t\tte[6] = ad * f + bc;\r\n\t\t\tte[10] = ac - bd * f;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[0] = c * e;\r\n\t\t\tte[4] = - f;\r\n\t\t\tte[8] = d * e;\r\n\r\n\t\t\tte[1] = ac * f + bd;\r\n\t\t\tte[5] = a * e;\r\n\t\t\tte[9] = ad * f - bc;\r\n\r\n\t\t\tte[2] = bc * f - ad;\r\n\t\t\tte[6] = b * e;\r\n\t\t\tte[10] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\r\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\r\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tte[0] = 1 - ( yy + zz );\r\n\t\tte[4] = xy - wz;\r\n\t\tte[8] = xz + wy;\r\n\r\n\t\tte[1] = xy + wz;\r\n\t\tte[5] = 1 - ( xx + zz );\r\n\t\tte[9] = yz - wx;\r\n\r\n\t\tte[2] = xz - wy;\r\n\t\tte[6] = yz + wx;\r\n\t\tte[10] = 1 - ( xx + yy );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlookAt: function ( eye, target, up ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = THREE.Matrix4.__v1;\r\n\t\tvar y = THREE.Matrix4.__v2;\r\n\t\tvar z = THREE.Matrix4.__v3;\r\n\r\n\t\tz.subVectors( eye, target ).normalize();\r\n\r\n\t\tif ( z.length() === 0 ) {\r\n\r\n\t\t\tz.z = 1;\r\n\r\n\t\t}\r\n\r\n\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\tif ( x.length() === 0 ) {\r\n\r\n\t\t\tz.x += 0.0001;\r\n\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t}\r\n\r\n\t\ty.crossVectors( z, x );\r\n\r\n\r\n\t\tte[0] = x.x; te[4] = y.x; te[8] = z.x;\r\n\t\tte[1] = x.y; te[5] = y.y; te[9] = z.y;\r\n\t\tte[2] = x.z; te[6] = y.z; te[10] = z.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( m, n ) {\r\n\r\n\t\tif ( n !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'DEPRECATED: Matrix4\\'s .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t},\r\n\r\n\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\tvar ae = a.elements;\r\n\t\tvar be = b.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];\r\n\t\tvar a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];\r\n\t\tvar a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];\r\n\t\tvar a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];\r\n\r\n\t\tvar b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];\r\n\t\tvar b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];\r\n\t\tvar b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];\r\n\t\tvar b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];\r\n\r\n\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyToArray: function ( a, b, r ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tthis.multiplyMatrices( a, b );\r\n\r\n\t\tr[ 0 ] = te[0]; r[ 1 ] = te[1]; r[ 2 ] = te[2]; r[ 3 ] = te[3];\r\n\t\tr[ 4 ] = te[4]; r[ 5 ] = te[5]; r[ 6 ] = te[6]; r[ 7 ] = te[7];\r\n\t\tr[ 8 ]  = te[8]; r[ 9 ]  = te[9]; r[ 10 ] = te[10]; r[ 11 ] = te[11];\r\n\t\tr[ 12 ] = te[12]; r[ 13 ] = te[13]; r[ 14 ] = te[14]; r[ 15 ] = te[15];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[0] *= s; te[4] *= s; te[8] *= s; te[12] *= s;\r\n\t\tte[1] *= s; te[5] *= s; te[9] *= s; te[13] *= s;\r\n\t\tte[2] *= s; te[6] *= s; te[10] *= s; te[14] *= s;\r\n\t\tte[3] *= s; te[7] *= s; te[11] *= s; te[15] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Matrix4\\'s .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\r\n\t\treturn vector.applyProjection( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector4: function ( vector ) {\r\n\r\n\t\tconsole.warn( 'DEPRECATED: Matrix4\\'s .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix4( this );\r\n\r\n\t},\r\n\r\n\tmultiplyVector3Array: function ( a ) {\r\n\r\n\t\tvar tmp = THREE.Matrix4.__v1;\r\n\r\n\t\tfor ( var i = 0, il = a.length; i < il; i += 3 ) {\r\n\r\n\t\t\ttmp.x = a[ i ];\r\n\t\t\ttmp.y = a[ i + 1 ];\r\n\t\t\ttmp.z = a[ i + 2 ];\r\n\r\n\t\t\ttmp.applyProjection( this );\r\n\r\n\t\t\ta[ i ]     = tmp.x;\r\n\t\t\ta[ i + 1 ] = tmp.y;\r\n\t\t\ta[ i + 2 ] = tmp.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t},\r\n\r\n\trotateAxis: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar vx = v.x, vy = v.y, vz = v.z;\r\n\r\n\t\tv.x = vx * te[0] + vy * te[4] + vz * te[8];\r\n\t\tv.y = vx * te[1] + vy * te[5] + vz * te[9];\r\n\t\tv.z = vx * te[2] + vy * te[6] + vz * te[10];\r\n\r\n\t\tv.normalize();\r\n\r\n\t\treturn v;\r\n\r\n\t},\r\n\r\n\tcrossVector: function ( a ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar v = new THREE.Vector4();\r\n\r\n\t\tv.x = te[0] * a.x + te[4] * a.y + te[8] * a.z + te[12] * a.w;\r\n\t\tv.y = te[1] * a.x + te[5] * a.y + te[9] * a.z + te[13] * a.w;\r\n\t\tv.z = te[2] * a.x + te[6] * a.y + te[10] * a.z + te[14] * a.w;\r\n\r\n\t\tv.w = ( a.w ) ? te[3] * a.x + te[7] * a.y + te[11] * a.z + te[15] * a.w : 1;\r\n\r\n\t\treturn v;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];\r\n\t\tvar n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];\r\n\t\tvar n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];\r\n\t\tvar n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+n14 * n23 * n32\r\n\t\t\t\t-n13 * n24 * n32\r\n\t\t\t\t-n14 * n22 * n33\r\n\t\t\t\t+n12 * n24 * n33\r\n\t\t\t\t+n13 * n22 * n34\r\n\t\t\t\t-n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+n11 * n23 * n34\r\n\t\t\t\t-n11 * n24 * n33\r\n\t\t\t\t+n14 * n21 * n33\r\n\t\t\t\t-n13 * n21 * n34\r\n\t\t\t\t+n13 * n24 * n31\r\n\t\t\t\t-n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+n11 * n24 * n32\r\n\t\t\t\t-n11 * n22 * n34\r\n\t\t\t\t-n14 * n21 * n32\r\n\t\t\t\t+n12 * n21 * n34\r\n\t\t\t\t+n14 * n22 * n31\r\n\t\t\t\t-n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t-n13 * n22 * n31\r\n\t\t\t\t-n11 * n23 * n32\r\n\t\t\t\t+n11 * n22 * n33\r\n\t\t\t\t+n13 * n21 * n32\r\n\t\t\t\t-n12 * n21 * n33\r\n\t\t\t\t+n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar tmp;\r\n\r\n\t\ttmp = te[1]; te[1] = te[4]; te[4] = tmp;\r\n\t\ttmp = te[2]; te[2] = te[8]; te[8] = tmp;\r\n\t\ttmp = te[6]; te[6] = te[9]; te[9] = tmp;\r\n\r\n\t\ttmp = te[3]; te[3] = te[12]; te[12] = tmp;\r\n\t\ttmp = te[7]; te[7] = te[13]; te[13] = tmp;\r\n\t\ttmp = te[11]; te[11] = te[14]; te[14] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArray: function ( flat ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tflat[ 0 ] = te[0]; flat[ 1 ] = te[1]; flat[ 2 ] = te[2]; flat[ 3 ] = te[3];\r\n\t\tflat[ 4 ] = te[4]; flat[ 5 ] = te[5]; flat[ 6 ] = te[6]; flat[ 7 ] = te[7];\r\n\t\tflat[ 8 ] = te[8]; flat[ 9 ] = te[9]; flat[ 10 ] = te[10]; flat[ 11 ] = te[11];\r\n\t\tflat[ 12 ] = te[12]; flat[ 13 ] = te[13]; flat[ 14 ] = te[14]; flat[ 15 ] = te[15];\r\n\r\n\t\treturn flat;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function( flat, offset ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tflat[ offset ] = te[0];\r\n\t\tflat[ offset + 1 ] = te[1];\r\n\t\tflat[ offset + 2 ] = te[2];\r\n\t\tflat[ offset + 3 ] = te[3];\r\n\r\n\t\tflat[ offset + 4 ] = te[4];\r\n\t\tflat[ offset + 5 ] = te[5];\r\n\t\tflat[ offset + 6 ] = te[6];\r\n\t\tflat[ offset + 7 ] = te[7];\r\n\r\n\t\tflat[ offset + 8 ]  = te[8];\r\n\t\tflat[ offset + 9 ]  = te[9];\r\n\t\tflat[ offset + 10 ] = te[10];\r\n\t\tflat[ offset + 11 ] = te[11];\r\n\r\n\t\tflat[ offset + 12 ] = te[12];\r\n\t\tflat[ offset + 13 ] = te[13];\r\n\t\tflat[ offset + 14 ] = te[14];\r\n\t\tflat[ offset + 15 ] = te[15];\r\n\r\n\t\treturn flat;\r\n\r\n\t},\r\n\r\n\tgetPosition: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[12], te[13], te[14] );\r\n\r\n\t},\r\n\r\n\tsetPosition: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[12] = v.x;\r\n\t\tte[13] = v.y;\r\n\t\tte[14] = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetColumnX: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[0], te[1], te[2] );\r\n\r\n\t},\r\n\r\n\tgetColumnY: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[4], te[5], te[6] );\r\n\r\n\t},\r\n\r\n\tgetColumnZ: function() {\r\n\r\n\t\tvar te = this.elements;\r\n\t\treturn THREE.Matrix4.__v1.set( te[8], te[9], te[10] );\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( m, throwOnInvertible ) {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tvar n11 = me[0], n12 = me[4], n13 = me[8], n14 = me[12];\r\n\t\tvar n21 = me[1], n22 = me[5], n23 = me[9], n24 = me[13];\r\n\t\tvar n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];\r\n\t\tvar n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];\r\n\r\n\t\tte[0] = n23*n34*n42 - n24*n33*n42 + n24*n32*n43 - n22*n34*n43 - n23*n32*n44 + n22*n33*n44;\r\n\t\tte[4] = n14*n33*n42 - n13*n34*n42 - n14*n32*n43 + n12*n34*n43 + n13*n32*n44 - n12*n33*n44;\r\n\t\tte[8] = n13*n24*n42 - n14*n23*n42 + n14*n22*n43 - n12*n24*n43 - n13*n22*n44 + n12*n23*n44;\r\n\t\tte[12] = n14*n23*n32 - n13*n24*n32 - n14*n22*n33 + n12*n24*n33 + n13*n22*n34 - n12*n23*n34;\r\n\t\tte[1] = n24*n33*n41 - n23*n34*n41 - n24*n31*n43 + n21*n34*n43 + n23*n31*n44 - n21*n33*n44;\r\n\t\tte[5] = n13*n34*n41 - n14*n33*n41 + n14*n31*n43 - n11*n34*n43 - n13*n31*n44 + n11*n33*n44;\r\n\t\tte[9] = n14*n23*n41 - n13*n24*n41 - n14*n21*n43 + n11*n24*n43 + n13*n21*n44 - n11*n23*n44;\r\n\t\tte[13] = n13*n24*n31 - n14*n23*n31 + n14*n21*n33 - n11*n24*n33 - n13*n21*n34 + n11*n23*n34;\r\n\t\tte[2] = n22*n34*n41 - n24*n32*n41 + n24*n31*n42 - n21*n34*n42 - n22*n31*n44 + n21*n32*n44;\r\n\t\tte[6] = n14*n32*n41 - n12*n34*n41 - n14*n31*n42 + n11*n34*n42 + n12*n31*n44 - n11*n32*n44;\r\n\t\tte[10] = n12*n24*n41 - n14*n22*n41 + n14*n21*n42 - n11*n24*n42 - n12*n21*n44 + n11*n22*n44;\r\n\t\tte[14] = n14*n22*n31 - n12*n24*n31 - n14*n21*n32 + n11*n24*n32 + n12*n21*n34 - n11*n22*n34;\r\n\t\tte[3] = n23*n32*n41 - n22*n33*n41 - n23*n31*n42 + n21*n33*n42 + n22*n31*n43 - n21*n32*n43;\r\n\t\tte[7] = n12*n33*n41 - n13*n32*n41 + n13*n31*n42 - n11*n33*n42 - n12*n31*n43 + n11*n32*n43;\r\n\t\tte[11] = n13*n22*n41 - n12*n23*n41 - n13*n21*n42 + n11*n23*n42 + n12*n21*n43 - n11*n22*n43;\r\n\t\tte[15] = n12*n23*n31 - n13*n22*n31 + n13*n21*n32 - n11*n23*n32 - n12*n21*n33 + n11*n22*n33;\r\n\r\n\t\tvar det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 4 ] + me[ 2 ] * te[ 8 ] + me[ 3 ] * te[ 12 ];\r\n\r\n\t\tif ( det == 0 ) {\r\n\r\n\t\t\tvar msg = \"Matrix4.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnInvertible || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg ); \r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.identity();\r\n\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tthis.multiplyScalar( 1 / det );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcompose: function ( translation, rotation, scale ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar mRotation = THREE.Matrix4.__m1;\r\n\t\tvar mScale = THREE.Matrix4.__m2;\r\n\r\n\t\tmRotation.identity();\r\n\t\tmRotation.setRotationFromQuaternion( rotation );\r\n\r\n\t\tmScale.makeScale( scale.x, scale.y, scale.z );\r\n\r\n\t\tthis.multiplyMatrices( mRotation, mScale );\r\n\r\n\t\tte[12] = translation.x;\r\n\t\tte[13] = translation.y;\r\n\t\tte[14] = translation.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdecompose: function ( translation, rotation, scale ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\t// grab the axis vectors\r\n\t\tvar x = THREE.Matrix4.__v1;\r\n\t\tvar y = THREE.Matrix4.__v2;\r\n\t\tvar z = THREE.Matrix4.__v3;\r\n\r\n\t\tx.set( te[0], te[1], te[2] );\r\n\t\ty.set( te[4], te[5], te[6] );\r\n\t\tz.set( te[8], te[9], te[10] );\r\n\r\n\t\ttranslation = ( translation instanceof THREE.Vector3 ) ? translation : new THREE.Vector3();\r\n\t\trotation = ( rotation instanceof THREE.Quaternion ) ? rotation : new THREE.Quaternion();\r\n\t\tscale = ( scale instanceof THREE.Vector3 ) ? scale : new THREE.Vector3();\r\n\r\n\t\tscale.x = x.length();\r\n\t\tscale.y = y.length();\r\n\t\tscale.z = z.length();\r\n\r\n\t\ttranslation.x = te[12];\r\n\t\ttranslation.y = te[13];\r\n\t\ttranslation.z = te[14];\r\n\r\n\t\t// scale the rotation part\r\n\r\n\t\tvar matrix = THREE.Matrix4.__m1;\r\n\r\n\t\tmatrix.copy( this );\r\n\r\n\t\tmatrix.elements[0] /= scale.x;\r\n\t\tmatrix.elements[1] /= scale.x;\r\n\t\tmatrix.elements[2] /= scale.x;\r\n\r\n\t\tmatrix.elements[4] /= scale.y;\r\n\t\tmatrix.elements[5] /= scale.y;\r\n\t\tmatrix.elements[6] /= scale.y;\r\n\r\n\t\tmatrix.elements[8] /= scale.z;\r\n\t\tmatrix.elements[9] /= scale.z;\r\n\t\tmatrix.elements[10] /= scale.z;\r\n\r\n\t\trotation.setFromRotationMatrix( matrix );\r\n\r\n\t\treturn [ translation, rotation, scale ];\r\n\r\n\t},\r\n\r\n\textractPosition: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tte[12] = me[12];\r\n\t\tte[13] = me[13];\r\n\t\tte[14] = me[14];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractRotation: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tvar vector = THREE.Matrix4.__v1;\r\n\r\n\t\tvar scaleX = 1 / vector.set( me[0], me[1], me[2] ).length();\r\n\t\tvar scaleY = 1 / vector.set( me[4], me[5], me[6] ).length();\r\n\t\tvar scaleZ = 1 / vector.set( me[8], me[9], me[10] ).length();\r\n\r\n\t\tte[0] = me[0] * scaleX;\r\n\t\tte[1] = me[1] * scaleX;\r\n\t\tte[2] = me[2] * scaleX;\r\n\r\n\t\tte[4] = me[4] * scaleY;\r\n\t\tte[5] = me[5] * scaleY;\r\n\t\tte[6] = me[6] * scaleY;\r\n\r\n\t\tte[8] = me[8] * scaleZ;\r\n\t\tte[9] = me[9] * scaleZ;\r\n\t\tte[10] = me[10] * scaleZ;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\ttranslate: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[12] = te[0] * x + te[4] * y + te[8] * z + te[12];\r\n\t\tte[13] = te[1] * x + te[5] * y + te[9] * z + te[13];\r\n\t\tte[14] = te[2] * x + te[6] * y + te[10] * z + te[14];\r\n\t\tte[15] = te[3] * x + te[7] * y + te[11] * z + te[15];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function ( angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar m12 = te[4];\r\n\t\tvar m22 = te[5];\r\n\t\tvar m32 = te[6];\r\n\t\tvar m42 = te[7];\r\n\t\tvar m13 = te[8];\r\n\t\tvar m23 = te[9];\r\n\t\tvar m33 = te[10];\r\n\t\tvar m43 = te[11];\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\r\n\t\tte[4] = c * m12 + s * m13;\r\n\t\tte[5] = c * m22 + s * m23;\r\n\t\tte[6] = c * m32 + s * m33;\r\n\t\tte[7] = c * m42 + s * m43;\r\n\r\n\t\tte[8] = c * m13 - s * m12;\r\n\t\tte[9] = c * m23 - s * m22;\r\n\t\tte[10] = c * m33 - s * m32;\r\n\t\tte[11] = c * m43 - s * m42;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateY: function ( angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar m11 = te[0];\r\n\t\tvar m21 = te[1];\r\n\t\tvar m31 = te[2];\r\n\t\tvar m41 = te[3];\r\n\t\tvar m13 = te[8];\r\n\t\tvar m23 = te[9];\r\n\t\tvar m33 = te[10];\r\n\t\tvar m43 = te[11];\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\r\n\t\tte[0] = c * m11 - s * m13;\r\n\t\tte[1] = c * m21 - s * m23;\r\n\t\tte[2] = c * m31 - s * m33;\r\n\t\tte[3] = c * m41 - s * m43;\r\n\r\n\t\tte[8] = c * m13 + s * m11;\r\n\t\tte[9] = c * m23 + s * m21;\r\n\t\tte[10] = c * m33 + s * m31;\r\n\t\tte[11] = c * m43 + s * m41;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateZ: function ( angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar m11 = te[0];\r\n\t\tvar m21 = te[1];\r\n\t\tvar m31 = te[2];\r\n\t\tvar m41 = te[3];\r\n\t\tvar m12 = te[4];\r\n\t\tvar m22 = te[5];\r\n\t\tvar m32 = te[6];\r\n\t\tvar m42 = te[7];\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\r\n\t\tte[0] = c * m11 + s * m12;\r\n\t\tte[1] = c * m21 + s * m22;\r\n\t\tte[2] = c * m31 + s * m32;\r\n\t\tte[3] = c * m41 + s * m42;\r\n\r\n\t\tte[4] = c * m12 - s * m11;\r\n\t\tte[5] = c * m22 - s * m21;\r\n\t\tte[6] = c * m32 - s * m31;\r\n\t\tte[7] = c * m42 - s * m41;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateByAxis: function ( axis, angle ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\t// optimize by checking axis\r\n\r\n\t\tif ( axis.x === 1 && axis.y === 0 && axis.z === 0 ) {\r\n\r\n\t\t\treturn this.rotateX( angle );\r\n\r\n\t\t} else if ( axis.x === 0 && axis.y === 1 && axis.z === 0 ) {\r\n\r\n\t\t\treturn this.rotateY( angle );\r\n\r\n\t\t} else if ( axis.x === 0 && axis.y === 0 && axis.z === 1 ) {\r\n\r\n\t\t\treturn this.rotateZ( angle );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar n = Math.sqrt(x * x + y * y + z * z);\r\n\r\n\t\tx /= n;\r\n\t\ty /= n;\r\n\t\tz /= n;\r\n\r\n\t\tvar xx = x * x, yy = y * y, zz = z * z;\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar oneMinusCosine = 1 - c;\r\n\t\tvar xy = x * y * oneMinusCosine;\r\n\t\tvar xz = x * z * oneMinusCosine;\r\n\t\tvar yz = y * z * oneMinusCosine;\r\n\t\tvar xs = x * s;\r\n\t\tvar ys = y * s;\r\n\t\tvar zs = z * s;\r\n\r\n\t\tvar r11 = xx + (1 - xx) * c;\r\n\t\tvar r21 = xy + zs;\r\n\t\tvar r31 = xz - ys;\r\n\t\tvar r12 = xy - zs;\r\n\t\tvar r22 = yy + (1 - yy) * c;\r\n\t\tvar r32 = yz + xs;\r\n\t\tvar r13 = xz + ys;\r\n\t\tvar r23 = yz - xs;\r\n\t\tvar r33 = zz + (1 - zz) * c;\r\n\r\n\t\tvar m11 = te[0], m21 = te[1], m31 = te[2], m41 = te[3];\r\n\t\tvar m12 = te[4], m22 = te[5], m32 = te[6], m42 = te[7];\r\n\t\tvar m13 = te[8], m23 = te[9], m33 = te[10], m43 = te[11];\r\n\t\tvar m14 = te[12], m24 = te[13], m34 = te[14], m44 = te[15];\r\n\r\n\t\tte[0] = r11 * m11 + r21 * m12 + r31 * m13;\r\n\t\tte[1] = r11 * m21 + r21 * m22 + r31 * m23;\r\n\t\tte[2] = r11 * m31 + r21 * m32 + r31 * m33;\r\n\t\tte[3] = r11 * m41 + r21 * m42 + r31 * m43;\r\n\r\n\t\tte[4] = r12 * m11 + r22 * m12 + r32 * m13;\r\n\t\tte[5] = r12 * m21 + r22 * m22 + r32 * m23;\r\n\t\tte[6] = r12 * m31 + r22 * m32 + r32 * m33;\r\n\t\tte[7] = r12 * m41 + r22 * m42 + r32 * m43;\r\n\r\n\t\tte[8] = r13 * m11 + r23 * m12 + r33 * m13;\r\n\t\tte[9] = r13 * m21 + r23 * m22 + r33 * m23;\r\n\t\tte[10] = r13 * m31 + r23 * m32 + r33 * m33;\r\n\t\tte[11] = r13 * m41 + r23 * m42 + r33 * m43;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tscale: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[0] *= x; te[4] *= y; te[8] *= z;\r\n\t\tte[1] *= x; te[5] *= y; te[9] *= z;\r\n\t\tte[2] *= x; te[6] *= y; te[10] *= z;\r\n\t\tte[3] *= x; te[7] *= y; te[11] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\r\n\t\tvar scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\r\n\t\tvar scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, Math.max( scaleYSq, scaleZSq ) ) );\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, x,\r\n\t\t\t0, 1, 0, y,\r\n\t\t\t0, 0, 1, z,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationX: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0,  0, 0,\r\n\t\t\t0, c, -s, 0,\r\n\t\t\t0, s,  c, 0,\r\n\t\t\t0, 0,  0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationY: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t-s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, -s, 0, 0,\r\n\t\t\ts,  c, 0, 0,\r\n\t\t\t0,  0, 1, 0,\r\n\t\t\t0,  0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar t = 1 - c;\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\t return this;\r\n\r\n\t},\r\n\r\n\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = 2 * near / ( right - left );\r\n\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\tvar a = ( right + left ) / ( right - left );\r\n\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\tte[0] = x;\tte[4] = 0;\tte[8] = a;\tte[12] = 0;\r\n\t\tte[1] = 0;\tte[5] = y;\tte[9] = b;\tte[13] = 0;\r\n\t\tte[2] = 0;\tte[6] = 0;\tte[10] = c;\tte[14] = d;\r\n\t\tte[3] = 0;\tte[7] = 0;\tte[11] = - 1;\tte[15] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakePerspective: function ( fov, aspect, near, far ) {\r\n\r\n\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\r\n\t\tvar ymin = - ymax;\r\n\t\tvar xmin = ymin * aspect;\r\n\t\tvar xmax = ymax * aspect;\r\n\r\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\r\n\r\n\t},\r\n\r\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar w = right - left;\r\n\t\tvar h = top - bottom;\r\n\t\tvar p = far - near;\r\n\r\n\t\tvar x = ( right + left ) / w;\r\n\t\tvar y = ( top + bottom ) / h;\r\n\t\tvar z = ( far + near ) / p;\r\n\r\n\t\tte[0] = 2 / w;\tte[4] = 0;\tte[8] = 0;\tte[12] = -x;\r\n\t\tte[1] = 0;\tte[5] = 2 / h;\tte[9] = 0;\tte[13] = -y;\r\n\t\tte[2] = 0;\tte[6] = 0;\tte[10] = -2/p;\tte[14] = -z;\r\n\t\tte[3] = 0;\tte[7] = 0;\tte[11] = 0;\tte[15] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\treturn new THREE.Matrix4(\r\n\r\n\t\t\tte[0], te[4], te[8], te[12],\r\n\t\t\tte[1], te[5], te[9], te[13],\r\n\t\t\tte[2], te[6], te[10], te[14],\r\n\t\t\tte[3], te[7], te[11], te[15]\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix4.__v1 = new THREE.Vector3();\r\nTHREE.Matrix4.__v2 = new THREE.Vector3();\r\nTHREE.Matrix4.__v3 = new THREE.Vector3();\r\n\r\nTHREE.Matrix4.__m1 = new THREE.Matrix4();\r\nTHREE.Matrix4.__m2 = new THREE.Matrix4();\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Ray = function ( origin, direction ) {\r\n\r\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\r\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Ray.prototype = {\r\n\r\n\tconstructor: THREE.Ray,\r\n\r\n\tset: function ( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tat: function( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t},\r\n\r\n\trecast: function ( t ) {\r\n\r\n\t\tthis.origin.copy( this.at( t, THREE.Ray.__v1 ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclosestPointToPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.subVectors( point, this.origin );\r\n\t\tvar directionDistance = result.dot( this.direction );\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\tvar directionDistance = THREE.Ray.__v1.subVectors( point, this.origin ).dot( this.direction );\r\n\t\tTHREE.Ray.__v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\treturn THREE.Ray.__v1.distanceTo( point );\r\n\r\n\t},\r\n\r\n\tisIntersectionSphere: function( sphere ) {\r\n\r\n\t\treturn ( this.distanceToPoint( sphere.center ) <= sphere.radius );\r\n\r\n\t},\r\n\r\n\tisIntersectionPlane: function ( plane ) {\r\n\r\n\t\t// check if the line and plane are non-perpendicular, if they\r\n\t\t// eventually they will intersect.\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\tif ( denominator != 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// line is coplanar, return origin\r\n\t\tif( plane.distanceToPoint( this.origin ) == 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\tif ( denominator == 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif( plane.distanceToPoint( this.origin ) == 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\treturn t;\r\n\r\n\t},\r\n\r\n\tintersectPlane: function ( plane, optionalTarget ) {\r\n\r\n\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\tif( t === undefined ) {\r\n\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn this.at( t, optionalTarget );\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix4 ) {\r\n\r\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.sub( this.origin );\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tequals: function ( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Ray().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Ray.__v1 = new THREE.Vector3();\r\nTHREE.Ray.__v2 = new THREE.Vector3();\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Sphere = function ( center, radius ) {\r\n\r\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\r\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n};\r\n\r\nTHREE.Sphere.prototype = {\r\n\r\n\tconstructor: THREE.Sphere,\r\n\r\n\tset: function ( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tsetFromCenterAndPoints: function ( center, points ) {\r\n\r\n\t\tvar maxRadiusSq = 0;\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar radiusSq = center.distanceToSquared( points[ i ] );\r\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, radiusSq );\r\n\r\n\t\t}\r\n\r\n\t\tthis.center = center;\r\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\treturn ( this.radius <= 0 );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\tresult.sub( this.center ).normalize();\r\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tgetBoundingBox: function ( optionalTarget ) {\r\n\r\n\t\tvar box = optionalTarget || new THREE.Box3();\r\n\r\n\t\tbox.set( this.center, this.center );\r\n\t\tbox.expandByScalar( this.radius );\r\n\r\n\t\treturn box;\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Sphere().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\tthis.planes = [\r\n\r\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\r\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\r\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\r\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\r\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\r\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\r\n\r\n\t];\r\n\r\n};\r\n\r\nTHREE.Frustum.prototype = {\r\n\r\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tplanes[0].copy( p0 );\r\n\t\tplanes[1].copy( p1 );\r\n\t\tplanes[2].copy( p2 );\r\n\t\tplanes[3].copy( p3 );\r\n\t\tplanes[4].copy( p4 );\r\n\t\tplanes[5].copy( p5 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( frustum ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tplanes[i].copy( frustum.planes[i] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix: function ( m ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar me = m.elements;\r\n\t\tvar me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];\r\n\t\tvar me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];\r\n\t\tvar me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];\r\n\t\tvar me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];\r\n\r\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tintersectsObject: function ( object ) {\r\n\r\n\t\t// this method is expanded inlined for performance reasons.\r\n\t\tvar matrix = object.matrixWorld;\r\n\t\tvar planes = this.planes;\r\n\t\tvar center = matrix.getPosition();\r\n\t\tvar negRadius = - object.geometry.boundingSphere.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar center = sphere.center;\r\n\t\tvar negRadius = -sphere.radius;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tif( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Frustum().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Plane = function ( normal, constant ) {\r\n\r\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\r\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n};\r\n\r\nTHREE.Plane.prototype = {\r\n\r\n\tconstructor: THREE.Plane,\r\n\r\n\tset: function ( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCoplanarPoints: function ( a, b, c ) {\r\n\r\n\t\tvar normal = THREE.Plane.__v1.subVectors( c, b ).cross( THREE.Plane.__v2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.constant *= -1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t},\r\n\r\n\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t},\r\n\r\n\tprojectPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\r\n\r\n\t},\r\n\r\n\torthoPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\r\n\r\n\t},\r\n\r\n\tisIntersectionLine: function ( startPoint, endPoint ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tvar startSign = this.distanceToPoint( startPoint );\r\n\t\tvar endSign = this.distanceToPoint( endPoint );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t},\r\n\r\n\tintersectLine: function ( startPoint, endPoint, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tvar direction = THREE.Plane.__v1.subVectors( endPoint, startPoint );\r\n\r\n\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\tif ( denominator == 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif( this.distanceToPoint( startPoint ) == 0 ) {\r\n\r\n\t\t\t\treturn result.copy( startPoint );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( startPoint.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\tif( t < 0 || t > 1 ) {\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t\treturn result.copy( direction ).multiplyScalar( t ).add( startPoint );\r\n\r\n\t},\r\n\r\n\tcoplanarPoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t},\r\n\r\n\ttransform: function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t// compute new normal based on theory here:\r\n\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\r\n\t\toptionalNormalMatrix = optionalNormalMatrix || new THREE.Matrix3().getInverse( matrix ).transpose();\r\n\t\tvar newNormal = THREE.Plane.__v1.copy( this.normal ).applyMatrix3( optionalNormalMatrix );\r\n\r\n\t\tvar newCoplanarPoint = this.coplanarPoint( THREE.Plane.__v2 );\r\n\t\tnewCoplanarPoint.applyMatrix4( matrix );\r\n\r\n\t\tthis.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.constant = this.constant - offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant == this.constant );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Plane().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Plane.__vZero = new THREE.Vector3( 0, 0, 0 );\r\nTHREE.Plane.__v1 = new THREE.Vector3();\r\nTHREE.Plane.__v2 = new THREE.Vector3();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Math = {\r\n\r\n\t// Clamp value to range <a, b>\r\n\r\n\tclamp: function ( x, a, b ) {\r\n\r\n\t\treturn ( x < a ) ? a : ( ( x > b ) ? b : x );\r\n\r\n\t},\r\n\r\n\t// Clamp value to range <a, inf)\r\n\r\n\tclampBottom: function ( x, a ) {\r\n\r\n\t\treturn x < a ? a : x;\r\n\r\n\t},\r\n\r\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t},\r\n\r\n\t// Random float from <0, 1> with 16 bits of randomness\r\n\t// (standard Math.random() creates repetitive patterns when applied over larger space)\r\n\r\n\trandom16: function () {\r\n\r\n\t\treturn ( 65280 * Math.random() + 255 * Math.random() ) / 65535;\r\n\r\n\t},\r\n\r\n\t// Random integer from <low, high> interval\r\n\r\n\trandInt: function ( low, high ) {\r\n\r\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t},\r\n\r\n\t// Random float from <low, high> interval\r\n\r\n\trandFloat: function ( low, high ) {\r\n\r\n\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t},\r\n\r\n\t// Random float from <-range/2, range/2> interval\r\n\r\n\trandFloatSpread: function ( range ) {\r\n\r\n\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t},\r\n\r\n\tsign: function ( x ) {\r\n\r\n\t\treturn ( x < 0 ) ? -1 : ( ( x > 0 ) ? 1 : 0 );\r\n\r\n\t},\r\n\r\n\tdegToRad: function ( degrees ) {\r\n\r\n\t\treturn degrees * THREE.Math.__d2r;\r\n\r\n\t},\r\n\r\n\tradToDeg: function ( radians ) {\r\n\r\n\t\treturn radians * THREE.Math.__r2d;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Math.__d2r =  Math.PI / 180;\r\nTHREE.Math.__r2d =  180 / Math.PI;\r\n/**\r\n * Spline from Tween.js, slightly optimized (and trashed)\r\n * http://sole.github.com/tween.js/examples/05_spline.html\r\n *\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Spline = function ( points ) {\r\n\r\n\tthis.points = points;\r\n\r\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\r\n\tpoint, intPoint, weight, w2, w3,\r\n\tpa, pb, pc, pd;\r\n\r\n\tthis.initFromArray = function( a ) {\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0; i < a.length; i++ ) {\r\n\r\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getPoint = function ( k ) {\r\n\r\n\t\tpoint = ( this.points.length - 1 ) * k;\r\n\t\tintPoint = Math.floor( point );\r\n\t\tweight = point - intPoint;\r\n\r\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\t\tc[ 1 ] = intPoint;\r\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\r\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\r\n\r\n\t\tpa = this.points[ c[ 0 ] ];\r\n\t\tpb = this.points[ c[ 1 ] ];\r\n\t\tpc = this.points[ c[ 2 ] ];\r\n\t\tpd = this.points[ c[ 3 ] ];\r\n\r\n\t\tw2 = weight * weight;\r\n\t\tw3 = weight * w2;\r\n\r\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\r\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\r\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\r\n\r\n\t\treturn v3;\r\n\r\n\t};\r\n\r\n\tthis.getControlPointsArray = function () {\r\n\r\n\t\tvar i, p, l = this.points.length,\r\n\t\t\tcoords = [];\r\n\r\n\t\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\t\tp = this.points[ i ];\r\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\r\n\r\n\t\t}\r\n\r\n\t\treturn coords;\r\n\r\n\t};\r\n\r\n\t// approximate length by summing linear segments\r\n\r\n\tthis.getLength = function ( nSubDivisions ) {\r\n\r\n\t\tvar i, index, nSamples, position,\r\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\r\n\t\t\toldPosition = new THREE.Vector3(),\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tchunkLengths = [],\r\n\t\t\ttotalLength = 0;\r\n\r\n\t\t// first point has 0 length\r\n\r\n\t\tchunkLengths[ 0 ] = 0;\r\n\r\n\t\tif ( !nSubDivisions ) nSubDivisions = 100;\r\n\r\n\t\tnSamples = this.points.length * nSubDivisions;\r\n\r\n\t\toldPosition.copy( this.points[ 0 ] );\r\n\r\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\r\n\r\n\t\t\tindex = i / nSamples;\r\n\r\n\t\t\tposition = this.getPoint( index );\r\n\t\t\ttmpVec.copy( position );\r\n\r\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\r\n\r\n\t\t\toldPosition.copy( position );\r\n\r\n\t\t\tpoint = ( this.points.length - 1 ) * index;\r\n\t\t\tintPoint = Math.floor( point );\r\n\r\n\t\t\tif ( intPoint != oldIntPoint ) {\r\n\r\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\r\n\t\t\t\toldIntPoint = intPoint;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// last point ends with total length\r\n\r\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\r\n\r\n\t\treturn { chunks: chunkLengths, total: totalLength };\r\n\r\n\t};\r\n\r\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\r\n\r\n\t\tvar i, j,\r\n\t\t\tindex, indexCurrent, indexNext,\r\n\t\t\tlinearDistance, realDistance,\r\n\t\t\tsampling, position,\r\n\t\t\tnewpoints = [],\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tsl = this.getLength();\r\n\r\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\r\n\r\n\t\tfor ( i = 1; i < this.points.length; i++ ) {\r\n\r\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\r\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\r\n\r\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\r\n\r\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\r\n\r\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\r\n\t\t\tindexNext = i / ( this.points.length - 1 );\r\n\r\n\t\t\tfor ( j = 1; j < sampling - 1; j++ ) {\r\n\r\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\r\n\r\n\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.points = newpoints;\r\n\r\n\t};\r\n\r\n\t// Catmull-Rom\r\n\r\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\r\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author bhouston / http://exocortex.com\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Triangle = function ( a, b, c ) {\r\n\r\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\r\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\r\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Triangle.normal = function( a, b, c, optionalTarget ) {\r\n\r\n\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\tresult.subVectors( c, b );\r\n\tTHREE.Triangle.__v0.subVectors( a, b );\r\n\tresult.cross( THREE.Triangle.__v0 );\r\n\r\n\tvar resultLengthSq = result.lengthSq();\r\n\tif( resultLengthSq > 0 ) {\r\n\r\n\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\r\n\r\n\t}\r\n\r\n\treturn result.set( 0, 0, 0 );\r\n\r\n};\r\n\r\n// static/instance method to calculate barycoordinates\r\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\nTHREE.Triangle.barycoordFromPoint = function ( point, a, b, c, optionalTarget ) {\r\n\r\n\tTHREE.Triangle.__v0.subVectors( c, a );\r\n\tTHREE.Triangle.__v1.subVectors( b, a );\r\n\tTHREE.Triangle.__v2.subVectors( point, a );\r\n\r\n\tvar dot00 = THREE.Triangle.__v0.dot( THREE.Triangle.__v0 );\r\n\tvar dot01 = THREE.Triangle.__v0.dot( THREE.Triangle.__v1 );\r\n\tvar dot02 = THREE.Triangle.__v0.dot( THREE.Triangle.__v2 );\r\n\tvar dot11 = THREE.Triangle.__v1.dot( THREE.Triangle.__v1 );\r\n\tvar dot12 = THREE.Triangle.__v1.dot( THREE.Triangle.__v2 );\r\n\r\n\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t// colinear or singular triangle\r\n\tif( denom == 0 ) {\r\n\t\t// arbitrary location outside of triangle?\r\n\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\treturn result.set( -2, -1, -1 );\r\n\t}\r\n\r\n\tvar invDenom = 1 / denom;\r\n\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t// barycoordinates must always sum to 1\r\n\treturn result.set( 1 - u - v, v, u );\r\n\r\n};\r\n\r\nTHREE.Triangle.containsPoint = function ( point, a, b, c ) {\r\n\r\n\t// NOTE: need to use __v3 here because __v0, __v1 and __v2 are used in barycoordFromPoint.\r\n\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, THREE.Triangle.__v3 );\r\n\r\n\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\r\n\r\n};\r\n\r\nTHREE.Triangle.prototype = {\r\n\r\n\tconstructor: THREE.Triangle,\r\n\r\n\tset: function ( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[i0] );\r\n\t\tthis.b.copy( points[i1] );\r\n\t\tthis.c.copy( points[i2] );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tarea: function () {\r\n\r\n\t\tTHREE.Triangle.__v0.subVectors( this.c, this.b );\r\n\t\tTHREE.Triangle.__v1.subVectors( this.a, this.b );\r\n\r\n\t\treturn THREE.Triangle.__v0.cross( THREE.Triangle.__v1 ).length() * 0.5;\r\n\r\n\t},\r\n\r\n\tmidpoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t},\r\n\r\n\tnormal: function ( optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tplane: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Plane();\r\n\r\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tequals: function ( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Triangle().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Triangle.__v0 = new THREE.Vector3();\r\nTHREE.Triangle.__v1 = new THREE.Vector3();\r\nTHREE.Triangle.__v2 = new THREE.Vector3();\r\nTHREE.Triangle.__v3 = new THREE.Vector3();\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Vertex = function ( v ) {\r\n\r\n\tconsole.warn( 'THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.')\r\n\treturn v;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.UV = function ( u, v ) {\r\n\r\n\tconsole.warn( 'THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.')\r\n\treturn new THREE.Vector2( u, v );\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Clock = function ( autoStart ) {\r\n\r\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.oldTime = 0;\r\n\tthis.elapsedTime = 0;\r\n\r\n\tthis.running = false;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype.start = function () {\r\n\r\n\tthis.startTime = Date.now();\r\n\tthis.oldTime = this.startTime;\r\n\r\n\tthis.running = true;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype.stop = function () {\r\n\r\n\tthis.getElapsedTime();\r\n\r\n\tthis.running = false;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype.getElapsedTime = function () {\r\n\r\n\tthis.getDelta();\r\n\r\n\treturn this.elapsedTime;\r\n\r\n};\r\n\r\n\r\nTHREE.Clock.prototype.getDelta = function () {\r\n\r\n\tvar diff = 0;\r\n\r\n\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\tthis.start();\r\n\r\n\t}\r\n\r\n\tif ( this.running ) {\r\n\r\n\t\tvar newTime = Date.now();\r\n\t\tdiff = 0.001 * ( newTime - this.oldTime );\r\n\t\tthis.oldTime = newTime;\r\n\r\n\t\tthis.elapsedTime += diff;\r\n\r\n\t}\r\n\r\n\treturn diff;\r\n\r\n};/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\r\n\r\nTHREE.EventDispatcher = function () {\r\n\r\n\tvar listeners = {};\r\n\r\n\tthis.addEventListener = function ( type, listener ) {\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.removeEventListener = function ( type, listener ) {\r\n\r\n\t\tvar index = listeners[ type ].indexOf( listener );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.dispatchEvent = function ( event ) {\r\n\r\n\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\tfor ( var i = 0, l = listenerArray.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tlistenerArray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author bhouston / http://exocortex.com/\r\n */\r\n\r\n( function ( THREE ) {\r\n\r\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new THREE.Ray( origin, direction );\r\n\t\t\r\n\t\t// normalized ray.direction required for accurate distance calculations\r\n\t\tif( this.ray.direction.length() > 0 ) {\r\n\r\n\t\t\tthis.ray.direction.normalize();\r\n\r\n\t\t}\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\r\n\t};\r\n\r\n\tvar sphere = new THREE.Sphere();\r\n\tvar localRay = new THREE.Ray();\r\n\tvar facePlane = new THREE.Plane();\r\n\tvar intersectPoint = new THREE.Vector3();\r\n\r\n\tvar inverseMatrix = new THREE.Matrix4();\r\n\r\n\tvar descSort = function ( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t};\r\n\r\n\tvar intersectObject = function ( object, raycaster, intersects ) {\r\n\r\n\t\tif ( object instanceof THREE.Particle ) {\r\n\r\n\t\t\tvar distance = raycaster.ray.distanceToPoint( object.matrixWorld.getPosition() );\r\n\r\n\t\t\tif ( distance > object.scale.x ) {\r\n\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tpoint: object.position,\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: object\r\n\r\n\t\t\t} );\r\n\r\n\t\t} else if ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\t\t\tsphere.set(\r\n\t\t\t\tobject.matrixWorld.getPosition(),\r\n\t\t\t\tobject.geometry.boundingSphere.radius* object.matrixWorld.getMaxScaleOnAxis() );\r\n\r\n\t\t\tif ( ! raycaster.ray.isIntersectionSphere( sphere ) ) {\r\n\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Checking faces\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\tvar isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;\r\n\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material.materials : null;\r\n\r\n\t\t\tvar side = object.material.side;\r\n\r\n\t\t\tvar a, b, c, d;\r\n\t\t\tvar precision = raycaster.precision;\r\n\r\n\t\t\tobject.matrixRotationWorld.extractRotation( object.matrixWorld );\r\n\r\n\t\t\tinverseMatrix.getInverse( object.matrixWorld );\r\n\r\n\t\t\tlocalRay.copy( raycaster.ray ).transform( inverseMatrix );\r\n\t\r\n\t\t\tfor ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tvar face = geometry.faces[ f ];\r\n\r\n\t\t\t\tvar material = isFaceMaterial === true ? objectMaterials[ face.materialIndex ] : object.material;\r\n\r\n\t\t\t\tif ( material === undefined ) continue;\r\n\t\t\t\t\r\n\t\t\t\tfacePlane.setFromNormalAndCoplanarPoint( face.normal, vertices[face.a] );\r\n\r\n\t\t\t\tvar planeDistance = localRay.distanceToPlane( facePlane );\r\n\t\r\n\t\t\t\t// bail if raycaster and plane are parallel\r\n\t\t\t\tif ( Math.abs( planeDistance ) < precision ) continue;\r\n\t\r\n\t\t\t\t// if negative distance, then plane is behind raycaster\r\n\t\t\t\tif ( planeDistance < 0 ) continue;\r\n\r\n\t\t\t\t// check if we hit the wrong side of a single sided face\r\n\t\t\t\tside = material.side;\r\n\t\t\t\tif( side !== THREE.DoubleSide ) {\r\n\r\n\t\t\t\t\tvar planeSign = localRay.direction.dot( facePlane.normal );\r\n\r\n\t\t\t\t\tif( ! ( side === THREE.FrontSide ? planeSign < 0 : planeSign > 0 ) ) continue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// this can be done using the planeDistance from localRay because localRay wasn't normalized, but ray was\r\n\t\t\t\tif ( planeDistance < raycaster.near || planeDistance > raycaster.far ) continue;\r\n\t\t\t\t\r\n\t\t\t\tintersectPoint = localRay.at( planeDistance, intersectPoint ); // passing in intersectPoint avoids a copy\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\ta = vertices[ face.a ];\r\n\t\t\t\t\tb = vertices[ face.b ];\r\n\t\t\t\t\tc = vertices[ face.c ];\r\n\r\n\t\t\t\t\tif ( ! THREE.Triangle.containsPoint( intersectPoint, a, b, c ) ) continue;\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\ta = vertices[ face.a ];\r\n\t\t\t\t\tb = vertices[ face.b ];\r\n\t\t\t\t\tc = vertices[ face.c ];\r\n\t\t\t\t\td = vertices[ face.d ];\r\n\r\n\t\t\t\t\tif ( ( ! THREE.Triangle.containsPoint( intersectPoint, a, b, d ) ) &&\r\n\t\t\t\t\t\t ( ! THREE.Triangle.containsPoint( intersectPoint, b, c, d ) ) ) continue;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// This is added because if we call out of this if/else group when none of the cases\r\n\t\t\t\t\t//    match it will add a point to the intersection list erroneously.\r\n\t\t\t\t\tthrow Error( \"face type not supported\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\tdistance: planeDistance,\t// this works because the original ray was normalized, and the transformed localRay wasn't\r\n\t\t\t\t\tpoint: raycaster.ray.at( planeDistance ),\r\n\t\t\t\t\tface: face,\r\n\t\t\t\t\tfaceIndex: f,\r\n\t\t\t\t\tobject: object\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar intersectDescendants = function ( object, raycaster, intersects ) {\r\n\r\n\t\tvar descendants = object.getDescendants();\r\n\r\n\t\tfor ( var i = 0, l = descendants.length; i < l; i ++ ) {\r\n\r\n\t\t\tintersectObject( descendants[ i ], raycaster, intersects );\r\n\r\n\t\t}\r\n\t};\r\n\r\n\t//\r\n\r\n\tTHREE.Raycaster.prototype.precision = 0.0001;\r\n\r\n\tTHREE.Raycaster.prototype.set = function ( origin, direction ) {\r\n\r\n\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t// normalized ray.direction required for accurate distance calculations\r\n\t\tif( this.ray.direction.length() > 0 ) {\r\n\r\n\t\t\tthis.ray.direction.normalize();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tTHREE.Raycaster.prototype.intersectObject = function ( object, recursive ) {\r\n\r\n\t\tvar intersects = [];\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tintersectDescendants( object, this, intersects );\r\n\r\n\t\t}\r\n\r\n\t\tintersectObject( object, this, intersects );\r\n\r\n\t\tintersects.sort( descSort );\r\n\r\n\t\treturn intersects;\r\n\r\n\t};\r\n\r\n\tTHREE.Raycaster.prototype.intersectObjects = function ( objects, recursive ) {\r\n\r\n\t\tvar intersects = [];\r\n\r\n\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\tintersectObject( objects[ i ], this, intersects );\r\n\r\n\t\t\tif ( recursive === true ) {\r\n\r\n\t\t\t\tintersectDescendants( objects[ i ], this, intersects );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tintersects.sort( descSort );\r\n\r\n\t\treturn intersects;\r\n\r\n\t};\r\n\r\n}( THREE ) );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Object3D = function () {\r\n\r\n\tthis.id = THREE.Object3DIdCount ++;\r\n\r\n\tthis.name = '';\r\n\tthis.properties = {};\r\n\r\n\tthis.parent = undefined;\r\n\tthis.children = [];\r\n\r\n\tthis.up = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\tthis.position = new THREE.Vector3();\r\n\tthis.rotation = new THREE.Vector3();\r\n\tthis.eulerOrder = THREE.Object3D.defaultEulerOrder;\r\n\tthis.scale = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tthis.renderDepth = null;\r\n\r\n\tthis.rotationAutoUpdate = true;\r\n\r\n\tthis.matrix = new THREE.Matrix4();\r\n\tthis.matrixWorld = new THREE.Matrix4();\r\n\tthis.matrixRotationWorld = new THREE.Matrix4();\r\n\r\n\tthis.matrixAutoUpdate = true;\r\n\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\tthis.quaternion = new THREE.Quaternion();\r\n\tthis.useQuaternion = false;\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.receiveShadow = false;\r\n\r\n\tthis.frustumCulled = true;\r\n\r\n\tthis._vector = new THREE.Vector3();\r\n\r\n};\r\n\r\n\r\nTHREE.Object3D.prototype = {\r\n\r\n\tconstructor: THREE.Object3D,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\r\n\t\tthis.scale.getScaleFromMatrix( this.matrix );\r\n\r\n\t\tvar mat = new THREE.Matrix4().extractRotation( this.matrix );\r\n\t\tthis.rotation.setEulerFromRotationMatrix( mat, this.eulerOrder );\r\n\r\n\t\tthis.position.getPositionFromMatrix( this.matrix );\r\n\r\n\t},\r\n\r\n\ttranslate: function ( distance, axis ) {\r\n\r\n\t\tthis.matrix.rotateAxis( axis );\r\n\t\tthis.position.add( axis.multiplyScalar( distance ) );\r\n\r\n\t},\r\n\r\n\ttranslateX: function ( distance ) {\r\n\r\n\t\tthis.translate( distance, this._vector.set( 1, 0, 0 ) );\r\n\r\n\t},\r\n\r\n\ttranslateY: function ( distance ) {\r\n\r\n\t\tthis.translate( distance, this._vector.set( 0, 1, 0 ) );\r\n\r\n\t},\r\n\r\n\ttranslateZ: function ( distance ) {\r\n\r\n\t\tthis.translate( distance, this._vector.set( 0, 0, 1 ) );\r\n\r\n\t},\r\n\r\n\tlocalToWorld: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tworldToLocal: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( THREE.Object3D.__m1.getInverse( this.matrixWorld ) );\r\n\r\n\t},\r\n\r\n\tlookAt: function ( vector ) {\r\n\r\n\t\t// TODO: Add hierarchy support.\r\n\r\n\t\tthis.matrix.lookAt( vector, this.position, this.up );\r\n\r\n\t\tif ( this.rotationAutoUpdate ) {\r\n\r\n\t\t\tif ( this.useQuaternion === false )  {\r\n\r\n\t\t\t\tthis.rotation.setEulerFromRotationMatrix( this.matrix, this.eulerOrder );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.quaternion.copy( this.matrix.decompose()[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tadd: function ( object ) {\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D.add: An object can\\'t be added as a child of itself.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object instanceof THREE.Object3D ) {\r\n\r\n\t\t\tif ( object.parent !== undefined ) {\r\n\r\n\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.parent = this;\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t\t// add to scene\r\n\r\n\t\t\tvar scene = this;\r\n\r\n\t\t\twhile ( scene.parent !== undefined ) {\r\n\r\n\t\t\t\tscene = scene.parent;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( scene !== undefined && scene instanceof THREE.Scene )  {\r\n\r\n\t\t\t\tscene.__addObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tremove: function ( object ) {\r\n\r\n\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = undefined;\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\t// remove from scene\r\n\r\n\t\t\tvar scene = this;\r\n\r\n\t\t\twhile ( scene.parent !== undefined ) {\r\n\r\n\t\t\t\tscene = scene.parent;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( scene !== undefined && scene instanceof THREE.Scene ) {\r\n\r\n\t\t\t\tscene.__removeObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverse: function ( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetChildByName: function ( name, recursive ) {\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\r\n\t\t\tif ( child.name === name ) {\r\n\r\n\t\t\t\treturn child;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( recursive === true ) {\r\n\r\n\t\t\t\tchild = child.getChildByName( name, recursive );\r\n\r\n\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\treturn child;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t},\r\n\r\n\tgetDescendants: function ( array ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\r\n\t\tArray.prototype.push.apply( array, this.children );\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].getDescendants( array );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tupdateMatrix: function () {\r\n\r\n\t\tthis.matrix.setPosition( this.position );\r\n\r\n\t\tif ( this.useQuaternion === false )  {\r\n\r\n\t\t\tthis.matrix.setRotationFromEuler( this.rotation, this.eulerOrder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrix.setRotationFromQuaternion( this.quaternion );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.scale.x !== 1 || this.scale.y !== 1 || this.scale.z !== 1 ) {\r\n\r\n\t\t\tthis.matrix.scale( this.scale );\r\n\r\n\t\t}\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\r\n\r\n\t\t\tif ( this.parent === undefined ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function ( object ) {\r\n\r\n\t\tif ( object === undefined ) object = new THREE.Object3D();\r\n\r\n\t\tobject.name = this.name;\r\n\r\n\t\tobject.up.copy( this.up );\r\n\r\n\t\tobject.position.copy( this.position );\r\n\t\tif ( object.rotation instanceof THREE.Vector3 ) object.rotation.copy( this.rotation ); // because of Sprite madness\r\n\t\tobject.eulerOrder = this.eulerOrder;\r\n\t\tobject.scale.copy( this.scale );\r\n\r\n\t\tobject.renderDepth = this.renderDepth;\r\n\r\n\t\tobject.rotationAutoUpdate = this.rotationAutoUpdate;\r\n\r\n\t\tobject.matrix.copy( this.matrix );\r\n\t\tobject.matrixWorld.copy( this.matrixWorld );\r\n\t\tobject.matrixRotationWorld.copy( this.matrixRotationWorld );\r\n\r\n\t\tobject.matrixAutoUpdate = this.matrixAutoUpdate;\r\n\t\tobject.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;\r\n\r\n\t\tobject.quaternion.copy( this.quaternion );\r\n\t\tobject.useQuaternion = this.useQuaternion;\r\n\r\n\t\tobject.visible = this.visible;\r\n\r\n\t\tobject.castShadow = this.castShadow;\r\n\t\tobject.receiveShadow = this.receiveShadow;\r\n\r\n\t\tobject.frustumCulled = this.frustumCulled;\r\n\r\n\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\t\t\tobject.add( child.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Object3D.__m1 = new THREE.Matrix4();\r\nTHREE.Object3D.defaultEulerOrder = 'XYZ',\r\n\r\nTHREE.Object3DIdCount = 0;\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author julianwa / https://github.com/julianwa\r\n */\r\n\r\nTHREE.Projector = function() {\r\n\r\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\r\n\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\r\n\t_face, _face3Count, _face3Pool = [], _face3PoolLength = 0,\r\n\t_face4Count, _face4Pool = [], _face4PoolLength = 0,\r\n\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\r\n\t_particle, _particleCount, _particlePool = [], _particlePoolLength = 0,\r\n\r\n\t_renderData = { objects: [], sprites: [], lights: [], elements: [] },\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\t_vector4 = new THREE.Vector4(),\r\n\r\n\t_clipBox = new THREE.Box3( new THREE.Vector3( -1, -1, -1 ), new THREE.Vector3( 1, 1, 1 ) ),\r\n\t_boundingBox = new THREE.Box3(),\r\n\t_points3 = new Array( 3 ),\r\n\t_points4 = new Array( 4 ),\r\n\r\n\t_viewMatrix = new THREE.Matrix4(),\r\n\t_viewProjectionMatrix = new THREE.Matrix4(),\r\n\r\n\t_modelMatrix,\r\n\t_modelViewProjectionMatrix = new THREE.Matrix4(),\r\n\r\n\t_normalMatrix = new THREE.Matrix3(),\r\n\t_normalViewMatrix = new THREE.Matrix3(),\r\n\r\n\t_centroid = new THREE.Vector3(),\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t_clippedVertex1PositionScreen = new THREE.Vector4(),\r\n\t_clippedVertex2PositionScreen = new THREE.Vector4(),\r\n\r\n\t_face3VertexNormals;\r\n\r\n\tthis.projectVector = function ( vector, camera ) {\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\r\n\t\treturn vector.applyProjection( _viewProjectionMatrix );\r\n\r\n\t};\r\n\r\n\tthis.unprojectVector = function ( vector, camera ) {\r\n\r\n\t\tcamera.projectionMatrixInverse.getInverse( camera.projectionMatrix );\r\n\r\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.matrixWorld, camera.projectionMatrixInverse );\r\n\r\n\t\treturn vector.applyProjection( _viewProjectionMatrix );\r\n\r\n\t};\r\n\r\n\tthis.pickingRay = function ( vector, camera ) {\r\n\r\n\t\t// set two vectors with opposing z values\r\n\t\tvector.z = -1.0;\r\n\t\tvar end = new THREE.Vector3( vector.x, vector.y, 1.0 );\r\n\r\n\t\tthis.unprojectVector( vector, camera );\r\n\t\tthis.unprojectVector( end, camera );\r\n\r\n\t\t// find direction from vector to end\r\n\t\tend.sub( vector ).normalize();\r\n\r\n\t\treturn new THREE.Raycaster( vector, end );\r\n\r\n\t};\r\n\r\n\tvar projectGraph = function ( root, sortObjects ) {\r\n\r\n\t\t_objectCount = 0;\r\n\r\n\t\t_renderData.objects.length = 0;\r\n\t\t_renderData.sprites.length = 0;\r\n\t\t_renderData.lights.length = 0;\r\n\r\n\t\tvar projectObject = function ( parent ) {\r\n\r\n\t\t\tfor ( var c = 0, cl = parent.children.length; c < cl; c ++ ) {\r\n\r\n\t\t\t\tvar object = parent.children[ c ];\r\n\r\n\t\t\t\tif ( object.visible === false ) continue;\r\n\r\n\t\t\t\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\t\t\t\t_renderData.lights.push( object );\r\n\r\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {\r\n\r\n\t\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\r\n\t\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t\t_object.object = object;\r\n\r\n\t\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t\t_object.z = object.renderDepth;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t\t\t_object.z = _vector3.z;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_renderData.objects.push( _object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object instanceof THREE.Sprite || object instanceof THREE.Particle ) {\r\n\r\n\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t_object.object = object;\r\n\r\n\t\t\t\t\t// TODO: Find an elegant and performant solution and remove this dupe code.\r\n\r\n\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t_object.z = object.renderDepth;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t\t_object.z = _vector3.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_renderData.sprites.push( _object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t_object.object = object;\r\n\r\n\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t_object.z = object.renderDepth;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t\t_object.z = _vector3.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_renderData.objects.push( _object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprojectObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tprojectObject( root );\r\n\r\n\t\tif ( sortObjects === true ) _renderData.objects.sort( painterSort );\r\n\r\n\t\treturn _renderData;\r\n\r\n\t};\r\n\r\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\r\n\r\n\t\tvar visible = false,\r\n\t\to, ol, v, vl, f, fl, n, nl, c, cl, u, ul, object,\r\n\t\tgeometry, vertices, vertex, vertexPositionScreen,\r\n\t\tfaces, face, faceVertexNormals, faceVertexUvs, uvs,\r\n\t\tv1, v2, v3, v4, isFaceMaterial, objectMaterials;\r\n\r\n\t\t_face3Count = 0;\r\n\t\t_face4Count = 0;\r\n\t\t_lineCount = 0;\r\n\t\t_particleCount = 0;\r\n\r\n\t\t_renderData.elements.length = 0;\r\n\r\n\t\tscene.updateMatrixWorld();\r\n\r\n\t\tif ( camera.parent === undefined ) camera.updateMatrixWorld();\r\n\r\n\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\r\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\r\n\r\n\t\t_normalViewMatrix.getInverse( _viewMatrix );\r\n\t\t_normalViewMatrix.transpose();\r\n\r\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\r\n\r\n\t\t_renderData = projectGraph( scene, sortObjects );\r\n\r\n\t\tfor ( o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\r\n\r\n\t\t\tobject = _renderData.objects[ o ].object;\r\n\r\n\t\t\t_modelMatrix = object.matrixWorld;\r\n\r\n\t\t\t_vertexCount = 0;\r\n\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tvertices = geometry.vertices;\r\n\t\t\t\tfaces = geometry.faces;\r\n\t\t\t\tfaceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\t\t\t_normalMatrix.getInverse( _modelMatrix );\r\n\t\t\t\t_normalMatrix.transpose();\r\n\r\n\t\t\t\tisFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;\r\n\t\t\t\tobjectMaterials = isFaceMaterial === true ? object.material : null;\r\n\r\n\t\t\t\tfor ( v = 0, vl = vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\t_vertex = getNextVertexInPool();\r\n\r\n\t\t\t\t\t_vertex.positionWorld.copy( vertices[ v ] ).applyMatrix4( _modelMatrix );\r\n\t\t\t\t\t_vertex.positionScreen.copy( _vertex.positionWorld ).applyMatrix4( _viewProjectionMatrix );\r\n\r\n\t\t\t\t\t_vertex.positionScreen.x /= _vertex.positionScreen.w;\r\n\t\t\t\t\t_vertex.positionScreen.y /= _vertex.positionScreen.w;\r\n\t\t\t\t\t_vertex.positionScreen.z /= _vertex.positionScreen.w;\r\n\r\n\t\t\t\t\t_vertex.visible = ! ( _vertex.positionScreen.x < -1 || _vertex.positionScreen.x > 1 ||\r\n\t\t\t\t\t\t\t      _vertex.positionScreen.y < -1 || _vertex.positionScreen.y > 1 ||\r\n\t\t\t\t\t\t\t      _vertex.positionScreen.z < -1 || _vertex.positionScreen.z > 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = faces[ f ];\r\n\r\n\t\t\t\t\tvar material = isFaceMaterial === true\r\n\t\t\t\t\t\t? objectMaterials.materials[ face.materialIndex ]\r\n\t\t\t\t\t\t: object.material;\r\n\r\n\t\t\t\t\tif ( material === undefined ) continue;\r\n\r\n\t\t\t\t\tvar side = material.side;\r\n\r\n\t\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\t\tv1 = _vertexPool[ face.a ];\r\n\t\t\t\t\t\tv2 = _vertexPool[ face.b ];\r\n\t\t\t\t\t\tv3 = _vertexPool[ face.c ];\r\n\r\n\t\t\t\t\t\t_points3[ 0 ] = v1.positionScreen;\r\n\t\t\t\t\t\t_points3[ 1 ] = v2.positionScreen;\r\n\t\t\t\t\t\t_points3[ 2 ] = v3.positionScreen;\r\n\r\n\t\t\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ||\r\n\t\t\t\t\t\t\t_clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points3 ) ) ) {\r\n\r\n\t\t\t\t\t\t\tvisible = ( ( v3.positionScreen.x - v1.positionScreen.x ) * ( v2.positionScreen.y - v1.positionScreen.y ) -\r\n\t\t\t\t\t\t\t\t( v3.positionScreen.y - v1.positionScreen.y ) * ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\r\n\r\n\t\t\t\t\t\t\tif ( side === THREE.DoubleSide || visible === ( side === THREE.FrontSide ) ) {\r\n\r\n\t\t\t\t\t\t\t\t_face = getNextFace3InPool();\r\n\r\n\t\t\t\t\t\t\t\t_face.v1.copy( v1 );\r\n\t\t\t\t\t\t\t\t_face.v2.copy( v2 );\r\n\t\t\t\t\t\t\t\t_face.v3.copy( v3 );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\t\tv1 = _vertexPool[ face.a ];\r\n\t\t\t\t\t\tv2 = _vertexPool[ face.b ];\r\n\t\t\t\t\t\tv3 = _vertexPool[ face.c ];\r\n\t\t\t\t\t\tv4 = _vertexPool[ face.d ];\r\n\r\n\t\t\t\t\t\t_points4[ 0 ] = v1.positionScreen;\r\n\t\t\t\t\t\t_points4[ 1 ] = v2.positionScreen;\r\n\t\t\t\t\t\t_points4[ 2 ] = v3.positionScreen;\r\n\t\t\t\t\t\t_points4[ 3 ] = v4.positionScreen;\r\n\r\n\t\t\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true || v4.visible === true ||\r\n\t\t\t\t\t\t\t_clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points4 ) ) ) {\r\n\r\n\t\t\t\t\t\t\tvisible = ( v4.positionScreen.x - v1.positionScreen.x ) * ( v2.positionScreen.y - v1.positionScreen.y ) -\r\n\t\t\t\t\t\t\t\t( v4.positionScreen.y - v1.positionScreen.y ) * ( v2.positionScreen.x - v1.positionScreen.x ) < 0 ||\r\n\t\t\t\t\t\t\t\t( v2.positionScreen.x - v3.positionScreen.x ) * ( v4.positionScreen.y - v3.positionScreen.y ) -\r\n\t\t\t\t\t\t\t\t( v2.positionScreen.y - v3.positionScreen.y ) * ( v4.positionScreen.x - v3.positionScreen.x ) < 0;\r\n\r\n\r\n\t\t\t\t\t\t\tif ( side === THREE.DoubleSide || visible === ( side === THREE.FrontSide ) ) {\r\n\r\n\t\t\t\t\t\t\t\t_face = getNextFace4InPool();\r\n\r\n\t\t\t\t\t\t\t\t_face.v1.copy( v1 );\r\n\t\t\t\t\t\t\t\t_face.v2.copy( v2 );\r\n\t\t\t\t\t\t\t\t_face.v3.copy( v3 );\r\n\t\t\t\t\t\t\t\t_face.v4.copy( v4 );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.normalModel.copy( face.normal );\r\n\r\n\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\r\n\t\t\t\t\t\t_face.normalModel.negate();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t_face.normalModelView.copy( _face.normalModel ).applyMatrix3( _normalViewMatrix );\r\n\r\n\t\t\t\t\t_face.centroidModel.copy( face.centroid ).applyMatrix4( _modelMatrix );\r\n\r\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\t\tfor ( n = 0, nl = faceVertexNormals.length; n < nl; n ++ ) {\r\n\r\n\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\r\n\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\r\n\r\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\r\n\t\t\t\t\t\t\tnormalModel.negate();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t\tvar normalModelView = _face.vertexNormalsModelView[ n ];\r\n\t\t\t\t\t\tnormalModelView.copy( normalModel ).applyMatrix3( _normalViewMatrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\r\n\r\n\t\t\t\t\tfor ( c = 0, cl = faceVertexUvs.length; c < cl; c ++ ) {\r\n\r\n\t\t\t\t\t\tuvs = faceVertexUvs[ c ][ f ];\r\n\r\n\t\t\t\t\t\tif ( uvs === undefined ) continue;\r\n\r\n\t\t\t\t\t\tfor ( u = 0, ul = uvs.length; u < ul; u ++ ) {\r\n\r\n\t\t\t\t\t\t\t_face.uvs[ c ][ u ] = uvs[ u ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_face.color = face.color;\r\n\t\t\t\t\t_face.material = material;\r\n\r\n\t\t\t\t\t_centroid.copy( _face.centroidModel ).applyProjection( _viewProjectionMatrix );\r\n\r\n\t\t\t\t\t_face.z = _centroid.z;\r\n\r\n\t\t\t\t\t_renderData.elements.push( _face );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\r\n\r\n\t\t\t\tvertices = object.geometry.vertices;\r\n\r\n\t\t\t\tv1 = getNextVertexInPool();\r\n\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\r\n\t\t\t\t// Handle LineStrip and LinePieces\r\n\t\t\t\tvar step = object.type === THREE.LinePieces ? 2 : 1;\r\n\r\n\t\t\t\tfor ( v = 1, vl = vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\tv1 = getNextVertexInPool();\r\n\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\r\n\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\r\n\r\n\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\r\n\r\n\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\r\n\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\r\n\r\n\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\r\n\r\n\t\t\t\t\t\t// Perform the perspective divide\r\n\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\r\n\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\r\n\r\n\t\t\t\t\t\t_line = getNextLineInPool();\r\n\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\r\n\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\r\n\r\n\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\r\n\r\n\t\t\t\t\t\t_line.material = object.material;\r\n\r\n\t\t\t\t\t\t_renderData.elements.push( _line );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( o = 0, ol = _renderData.sprites.length; o < ol; o++ ) {\r\n\r\n\t\t\tobject = _renderData.sprites[ o ].object;\r\n\r\n\t\t\t_modelMatrix = object.matrixWorld;\r\n\r\n\t\t\tif ( object instanceof THREE.Particle ) {\r\n\r\n\t\t\t\t_vector4.set( _modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1 );\r\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\r\n\r\n\t\t\t\t_vector4.z /= _vector4.w;\r\n\r\n\t\t\t\tif ( _vector4.z > 0 && _vector4.z < 1 ) {\r\n\r\n\t\t\t\t\t_particle = getNextParticleInPool();\r\n\t\t\t\t\t_particle.object = object;\r\n\t\t\t\t\t_particle.x = _vector4.x / _vector4.w;\r\n\t\t\t\t\t_particle.y = _vector4.y / _vector4.w;\r\n\t\t\t\t\t_particle.z = _vector4.z;\r\n\r\n\t\t\t\t\t_particle.rotation = object.rotation.z;\r\n\r\n\t\t\t\t\t_particle.scale.x = object.scale.x * Math.abs( _particle.x - ( _vector4.x + camera.projectionMatrix.elements[0] ) / ( _vector4.w + camera.projectionMatrix.elements[12] ) );\r\n\t\t\t\t\t_particle.scale.y = object.scale.y * Math.abs( _particle.y - ( _vector4.y + camera.projectionMatrix.elements[5] ) / ( _vector4.w + camera.projectionMatrix.elements[13] ) );\r\n\r\n\t\t\t\t\t_particle.material = object.material;\r\n\r\n\t\t\t\t\t_renderData.elements.push( _particle );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( sortElements === true ) _renderData.elements.sort( painterSort );\r\n\r\n\t\treturn _renderData;\r\n\r\n\t};\r\n\r\n\t// Pools\r\n\r\n\tfunction getNextObjectInPool() {\r\n\r\n\t\tif ( _objectCount === _objectPoolLength ) {\r\n\r\n\t\t\tvar object = new THREE.RenderableObject();\r\n\t\t\t_objectPool.push( object );\r\n\t\t\t_objectPoolLength ++;\r\n\t\t\t_objectCount ++;\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t\treturn _objectPool[ _objectCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextVertexInPool() {\r\n\r\n\t\tif ( _vertexCount === _vertexPoolLength ) {\r\n\r\n\t\t\tvar vertex = new THREE.RenderableVertex();\r\n\t\t\t_vertexPool.push( vertex );\r\n\t\t\t_vertexPoolLength ++;\r\n\t\t\t_vertexCount ++;\r\n\t\t\treturn vertex;\r\n\r\n\t\t}\r\n\r\n\t\treturn _vertexPool[ _vertexCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextFace3InPool() {\r\n\r\n\t\tif ( _face3Count === _face3PoolLength ) {\r\n\r\n\t\t\tvar face = new THREE.RenderableFace3();\r\n\t\t\t_face3Pool.push( face );\r\n\t\t\t_face3PoolLength ++;\r\n\t\t\t_face3Count ++;\r\n\t\t\treturn face;\r\n\r\n\t\t}\r\n\r\n\t\treturn _face3Pool[ _face3Count ++ ];\r\n\r\n\r\n\t}\r\n\r\n\tfunction getNextFace4InPool() {\r\n\r\n\t\tif ( _face4Count === _face4PoolLength ) {\r\n\r\n\t\t\tvar face = new THREE.RenderableFace4();\r\n\t\t\t_face4Pool.push( face );\r\n\t\t\t_face4PoolLength ++;\r\n\t\t\t_face4Count ++;\r\n\t\t\treturn face;\r\n\r\n\t\t}\r\n\r\n\t\treturn _face4Pool[ _face4Count ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextLineInPool() {\r\n\r\n\t\tif ( _lineCount === _linePoolLength ) {\r\n\r\n\t\t\tvar line = new THREE.RenderableLine();\r\n\t\t\t_linePool.push( line );\r\n\t\t\t_linePoolLength ++;\r\n\t\t\t_lineCount ++\r\n\t\t\treturn line;\r\n\r\n\t\t}\r\n\r\n\t\treturn _linePool[ _lineCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextParticleInPool() {\r\n\r\n\t\tif ( _particleCount === _particlePoolLength ) {\r\n\r\n\t\t\tvar particle = new THREE.RenderableParticle();\r\n\t\t\t_particlePool.push( particle );\r\n\t\t\t_particlePoolLength ++;\r\n\t\t\t_particleCount ++\r\n\t\t\treturn particle;\r\n\r\n\t\t}\r\n\r\n\t\treturn _particlePool[ _particleCount ++ ];\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction painterSort( a, b ) {\r\n\r\n\t\treturn b.z - a.z;\r\n\r\n\t}\r\n\r\n\tfunction clipLine( s1, s2 ) {\r\n\r\n\t\tvar alpha1 = 0, alpha2 = 1,\r\n\r\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\r\n\t\t// Z = -1 and Z = +1, respectively.\r\n\t\tbc1near =  s1.z + s1.w,\r\n\t\tbc2near =  s2.z + s2.w,\r\n\t\tbc1far =  - s1.z + s1.w,\r\n\t\tbc2far =  - s2.z + s2.w;\r\n\r\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\r\n\r\n\t\t\t// Both vertices lie entirely within all clip planes.\r\n\t\t\treturn true;\r\n\r\n\t\t} else if ( ( bc1near < 0 && bc2near < 0) || (bc1far < 0 && bc2far < 0 ) ) {\r\n\r\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\r\n\t\t\treturn false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// The line segment spans at least one clip plane.\r\n\r\n\t\t\tif ( bc1near < 0 ) {\r\n\r\n\t\t\t\t// v1 lies outside the near plane, v2 inside\r\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\r\n\r\n\t\t\t} else if ( bc2near < 0 ) {\r\n\r\n\t\t\t\t// v2 lies outside the near plane, v1 inside\r\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( bc1far < 0 ) {\r\n\r\n\t\t\t\t// v1 lies outside the far plane, v2 inside\r\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\r\n\r\n\t\t\t} else if ( bc2far < 0 ) {\r\n\r\n\t\t\t\t// v2 lies outside the far plane, v2 inside\r\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( alpha2 < alpha1 ) {\r\n\r\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\r\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\r\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\r\n\t\t\t\ts1.lerp( s2, alpha1 );\r\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\r\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\tthis.vertexNormals = normal instanceof Array ? normal : [ ];\r\n\r\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\tthis.vertexColors = color instanceof Array ? color : [];\r\n\r\n\tthis.vertexTangents = [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n\tthis.centroid = new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Face3.prototype = {\r\n\r\n\tconstructor: THREE.Face3,\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar face = new THREE.Face3( this.a, this.b, this.c );\r\n\r\n\t\tface.normal.copy( this.normal );\r\n\t\tface.color.copy( this.color );\r\n\t\tface.centroid.copy( this.centroid );\r\n\r\n\t\tface.materialIndex = this.materialIndex;\r\n\r\n\t\tvar i, il;\r\n\t\tfor ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();\r\n\r\n\t\treturn face;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\tthis.d = d;\r\n\r\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\tthis.vertexNormals = normal instanceof Array ? normal : [ ];\r\n\r\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\tthis.vertexColors = color instanceof Array ? color : [];\r\n\r\n\tthis.vertexTangents = [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n\tthis.centroid = new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Face4.prototype = {\r\n\r\n\tconstructor: THREE.Face4,\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar face = new THREE.Face4( this.a, this.b, this.c, this.d );\r\n\r\n\t\tface.normal.copy( this.normal );\r\n\t\tface.color.copy( this.color );\r\n\t\tface.centroid.copy( this.centroid );\r\n\r\n\t\tface.materialIndex = this.materialIndex;\r\n\r\n\t\tvar i, il;\r\n\t\tfor ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();\r\n\t\tfor ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();\r\n\r\n\t\treturn face;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\nTHREE.Geometry = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.GeometryIdCount ++;\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.vertices = [];\r\n\tthis.colors = [];  // one-to-one vertex colors, used in ParticleSystem, Line and Ribbon\r\n\tthis.normals = []; // one-to-one vertex normals, used in Ribbon\r\n\r\n\tthis.faces = [];\r\n\r\n\tthis.faceUvs = [[]];\r\n\tthis.faceVertexUvs = [[]];\r\n\r\n\tthis.morphTargets = [];\r\n\tthis.morphColors = [];\r\n\tthis.morphNormals = [];\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\tthis.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.hasTangents = false;\r\n\r\n\tthis.dynamic = true; // the intermediate typed arrays will be deleted when set to false\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.elementsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.tangentsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.lineDistancesNeedUpdate = false;\r\n\r\n\tthis.buffersNeedUpdate = false;\r\n\r\n};\r\n\r\nTHREE.Geometry.prototype = {\r\n\r\n\tconstructor: THREE.Geometry,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar normalMatrix = new THREE.Matrix3().getInverse( matrix ).transpose();\r\n\r\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tface.centroid.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeCentroids: function () {\r\n\r\n\t\tvar f, fl, face;\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\t\t\tface.centroid.set( 0, 0, 0 );\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tface.centroid.add( this.vertices[ face.a ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.b ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.c ] );\r\n\t\t\t\tface.centroid.divideScalar( 3 );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tface.centroid.add( this.vertices[ face.a ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.b ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.c ] );\r\n\t\t\t\tface.centroid.add( this.vertices[ face.d ] );\r\n\t\t\t\tface.centroid.divideScalar( 4 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tvar n, nl, v, vl, vertex, f, fl, face, vA, vB, vC,\r\n\t\tcb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\tcb.subVectors( vC, vB );\r\n\t\t\tab.subVectors( vA, vB );\r\n\t\t\tcb.cross( ab );\r\n\r\n\t\t\tcb.normalize();\r\n\r\n\t\t\tface.normal.copy( cb );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\t// create internal buffers for reuse when calling this method repeatedly\r\n\t\t// (otherwise memory allocation / deallocation every frame is big resource hog)\r\n\r\n\t\tif ( this.__tmpVertices === undefined ) {\r\n\r\n\t\t\tthis.__tmpVertices = new Array( this.vertices.length );\r\n\t\t\tvertices = this.__tmpVertices;\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ] = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tface.vertexNormals = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\tface.vertexNormals = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvertices = this.__tmpVertices;\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ].set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\tvar vA, vB, vC, vD;\r\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3(),\r\n\t\t\t\tdb = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\t\t\t\t\tvD = this.vertices[ face.d ];\r\n\r\n\t\t\t\t\t// abd\r\n\r\n\t\t\t\t\tdb.subVectors( vD, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tdb.cross( ab );\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( db );\r\n\t\t\t\t\tvertices[ face.b ].add( db );\r\n\t\t\t\t\tvertices[ face.d ].add( db );\r\n\r\n\t\t\t\t\t// bcd\r\n\r\n\t\t\t\t\tdc.subVectors( vD, vC );\r\n\t\t\t\t\tbc.subVectors( vB, vC );\r\n\t\t\t\t\tdc.cross( bc );\r\n\r\n\t\t\t\t\tvertices[ face.b ].add( dc );\r\n\t\t\t\t\tvertices[ face.c ].add( dc );\r\n\t\t\t\t\tvertices[ face.d ].add( dc );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.d ].add( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tface.vertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tface.vertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tface.vertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tface.vertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tface.vertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tface.vertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\t\t\t\tface.vertexNormals[ 3 ].copy( vertices[ face.d ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeMorphNormals: function () {\r\n\r\n\t\tvar i, il, f, fl, face;\r\n\r\n\t\t// save original normals\r\n\t\t// - create temp variables on first access\r\n\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\r\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\tvar tmpGeo = new THREE.Geometry();\r\n\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t// create on first access\r\n\r\n\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\r\n\r\n\t\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3(), d: new THREE.Vector3() };\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t// set vertices to morph target\r\n\r\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t// compute morph normals\r\n\r\n\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t// store morph normals\r\n\r\n\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\t\t\t\t\tvertexNormals.d.copy( face.vertexNormals[ 3 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore original normals\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\t// based on http://www.terathon.com/code/tangent.html\r\n\t\t// tangents go to vertices\r\n\r\n\t\tvar f, fl, v, vl, i, il, vertexIndex,\r\n\t\t\tface, uv, vA, vB, vC, uvA, uvB, uvC,\r\n\t\t\tx1, x2, y1, y2, z1, z2,\r\n\t\t\ts1, s2, t1, t2, r, t, test,\r\n\t\t\ttan1 = [], tan2 = [],\r\n\t\t\tsdir = new THREE.Vector3(), tdir = new THREE.Vector3(),\r\n\t\t\ttmp = new THREE.Vector3(), tmp2 = new THREE.Vector3(),\r\n\t\t\tn = new THREE.Vector3(), w;\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\ttan1[ v ] = new THREE.Vector3();\r\n\t\t\ttan2[ v ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tfunction handleTriangle( context, a, b, c, ua, ub, uc ) {\r\n\r\n\t\t\tvA = context.vertices[ a ];\r\n\t\t\tvB = context.vertices[ b ];\r\n\t\t\tvC = context.vertices[ c ];\r\n\r\n\t\t\tuvA = uv[ ua ];\r\n\t\t\tuvB = uv[ ub ];\r\n\t\t\tuvC = uv[ uc ];\r\n\r\n\t\t\tx1 = vB.x - vA.x;\r\n\t\t\tx2 = vC.x - vA.x;\r\n\t\t\ty1 = vB.y - vA.y;\r\n\t\t\ty2 = vC.y - vA.y;\r\n\t\t\tz1 = vB.z - vA.z;\r\n\t\t\tz2 = vC.z - vA.z;\r\n\r\n\t\t\ts1 = uvB.x - uvA.x;\r\n\t\t\ts2 = uvC.x - uvA.x;\r\n\t\t\tt1 = uvB.y - uvA.y;\r\n\t\t\tt2 = uvC.y - uvA.y;\r\n\r\n\t\t\tr = 1.0 / ( s1 * t2 - s2 * t1 );\r\n\t\t\tsdir.set( ( t2 * x1 - t1 * x2 ) * r,\r\n\t\t\t\t\t  ( t2 * y1 - t1 * y2 ) * r,\r\n\t\t\t\t\t  ( t2 * z1 - t1 * z2 ) * r );\r\n\t\t\ttdir.set( ( s1 * x2 - s2 * x1 ) * r,\r\n\t\t\t\t\t  ( s1 * y2 - s2 * y1 ) * r,\r\n\t\t\t\t\t  ( s1 * z2 - s2 * z1 ) * r );\r\n\r\n\t\t\ttan1[ a ].add( sdir );\r\n\t\t\ttan1[ b ].add( sdir );\r\n\t\t\ttan1[ c ].add( sdir );\r\n\r\n\t\t\ttan2[ a ].add( tdir );\r\n\t\t\ttan2[ b ].add( tdir );\r\n\t\t\ttan2[ c ].add( tdir );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\t\t\tuv = this.faceVertexUvs[ 0 ][ f ]; // use UV layer 0 for tangents\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\thandleTriangle( this, face.a, face.b, face.c, 0, 1, 2 );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\thandleTriangle( this, face.a, face.b, face.d, 0, 1, 3 );\r\n\t\t\t\thandleTriangle( this, face.b, face.c, face.d, 1, 2, 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar faceIndex = [ 'a', 'b', 'c', 'd' ];\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tfor ( i = 0; i < face.vertexNormals.length; i++ ) {\r\n\r\n\t\t\t\tn.copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\tvertexIndex = face[ faceIndex[ i ] ];\r\n\r\n\t\t\t\tt = tan1[ vertexIndex ];\r\n\r\n\t\t\t\t// Gram-Schmidt orthogonalize\r\n\r\n\t\t\t\ttmp.copy( t );\r\n\t\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\r\n\r\n\t\t\t\t// Calculate handedness\r\n\r\n\t\t\t\ttmp2.crossVectors( face.vertexNormals[ i ], t );\r\n\t\t\t\ttest = tmp2.dot( tan2[ vertexIndex ] );\r\n\t\t\t\tw = (test < 0.0) ? -1.0 : 1.0;\r\n\r\n\t\t\t\tface.vertexTangents[ i ] = new THREE.Vector4( tmp.x, tmp.y, tmp.z, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.hasTangents = true;\r\n\r\n\t},\r\n\r\n\tcomputeLineDistances: function ( ) {\r\n\r\n\t\tvar d = 0;\r\n\t\tvar vertices = this.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tif ( i > 0 ) {\r\n\r\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.lineDistances[ i ] = d;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.setFromCenterAndPoints( this.boundingSphere.center, this.vertices );\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Checks for duplicate vertices with hashmap.\r\n\t * Duplicated vertices are removed\r\n\t * and faces' vertices are updated.\r\n\t */\r\n\r\n\tmergeVertices: function () {\r\n\r\n\t\tvar verticesMap = {}; // Hashmap for looking up vertice by position coordinates (and making sure they are unique)\r\n\t\tvar unique = [], changes = [];\r\n\r\n\t\tvar v, key;\r\n\t\tvar precisionPoints = 4; // number of decimal points, eg. 4 for epsilon of 0.0001\r\n\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\tvar i,il, face;\r\n\t\tvar indices, k, j, jl, u;\r\n\r\n\t\t// reset cache of vertices as it now will be changing.\r\n\t\tthis.__tmpVertices = undefined;\r\n\r\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tv = this.vertices[ i ];\r\n\t\t\tkey = [ Math.round( v.x * precision ), Math.round( v.y * precision ), Math.round( v.z * precision ) ].join( '_' );\r\n\r\n\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t// have to remove them from the geometry.\r\n\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\tfor( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\t\tvar dupIndex = -1;\r\n\r\n\t\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\t\t\t\t\tif ( indices[ n ] == indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\t\tdupIndex = n;\r\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\t\t\t\tface.d = changes[ face.d ];\r\n\r\n\t\t\t\t// check dups in (a, b, c, d) and convert to -> face3\r\n\r\n\t\t\t\tindices = [ face.a, face.b, face.c, face.d ];\r\n\r\n\t\t\t\tvar dupIndex = -1;\r\n\r\n\t\t\t\tfor ( var n = 0; n < 4; n ++ ) {\r\n\r\n\t\t\t\t\tif ( indices[ n ] == indices[ ( n + 1 ) % 4 ] ) {\r\n\r\n\t\t\t\t\t\t// if more than one duplicated vertex is found\r\n\t\t\t\t\t\t// we can't generate any valid Face3's, thus\r\n\t\t\t\t\t\t// we need to remove this face complete.\r\n\t\t\t\t\t\tif ( dupIndex >= 0 ) {\r\n\r\n\t\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdupIndex = n;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( dupIndex >= 0 ) {\r\n\r\n\t\t\t\t\tindices.splice( dupIndex, 1 );\r\n\r\n\t\t\t\t\tvar newFace = new THREE.Face3( indices[0], indices[1], indices[2], face.normal, face.color, face.materialIndex );\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tu = this.faceVertexUvs[ j ][ i ];\r\n\r\n\t\t\t\t\t\tif ( u ) {\r\n\t\t\t\t\t\t\tu.splice( dupIndex, 1 );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif( face.vertexNormals && face.vertexNormals.length > 0) {\r\n\r\n\t\t\t\t\t\tnewFace.vertexNormals = face.vertexNormals;\r\n\t\t\t\t\t\tnewFace.vertexNormals.splice( dupIndex, 1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif( face.vertexColors && face.vertexColors.length > 0 ) {\r\n\r\n\t\t\t\t\t\tnewFace.vertexColors = face.vertexColors;\r\n\t\t\t\t\t\tnewFace.vertexColors.splice( dupIndex, 1 );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.faces[ i ] = newFace;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\tthis.faces.splice( i, 1 );\r\n\r\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ j ].splice( i, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Use unique set of vertices\r\n\r\n\t\tvar diff = this.vertices.length - unique.length;\r\n\t\tthis.vertices = unique;\r\n\t\treturn diff;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar geometry = new THREE.Geometry();\r\n\r\n\t\tvar vertices = this.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tgeometry.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = this.faces;\r\n\r\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tgeometry.faces.push( faces[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\r\n\t\tfor ( var i = 0, il = uvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs[ i ], uvCopy = [];\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.faceVertexUvs[ 0 ].push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.GeometryIdCount = 0;\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.BufferGeometry = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.GeometryIdCount ++;\r\n\r\n\t// attributes\r\n\r\n\tthis.attributes = {};\r\n\r\n\t// attributes typed arrays are kept only if dynamic flag is set\r\n\r\n\tthis.dynamic = false;\r\n\r\n\t// offsets for chunks when using indexed elements\r\n\r\n\tthis.offsets = [];\r\n\r\n\t// boundings\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.hasTangents = false;\r\n\r\n\t// for compatibility\r\n\r\n\tthis.morphTargets = [];\r\n\r\n};\r\n\r\nTHREE.BufferGeometry.prototype = {\r\n\r\n\tconstructor : THREE.BufferGeometry,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar positionArray;\r\n\t\tvar normalArray;\r\n\r\n\t\tif ( this.attributes[ \"position\" ] ) positionArray = this.attributes[ \"position\" ].array;\r\n\t\tif ( this.attributes[ \"normal\" ] ) normalArray = this.attributes[ \"normal\" ].array;\r\n\r\n\t\tif ( positionArray !== undefined ) {\r\n\r\n\t\t\tmatrix.multiplyVector3Array( positionArray );\r\n\t\t\tthis.verticesNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( normalArray !== undefined ) {\r\n\r\n\t\t\tvar normalMatrix = new THREE.Matrix3();\r\n\t\t\tnormalMatrix.getInverse( matrix ).transpose();\r\n\r\n\t\t\tnormalMatrix.multiplyVector3Array( normalArray );\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\r\n\t\tif ( positions ) {\r\n\r\n\t\t\tvar bb = this.boundingBox;\r\n\t\t\tvar x, y, z;\r\n\r\n\t\t\tif( positions.length >= 3 ) {\r\n\t\t\t\tbb.min.x = bb.max.x = positions[ 0 ];\r\n\t\t\t\tbb.min.y = bb.max.y = positions[ 1 ];\r\n\t\t\t\tbb.min.z = bb.max.z = positions[ 2 ];\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 3, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\tx = positions[ i ];\r\n\t\t\t\ty = positions[ i + 1 ];\r\n\t\t\t\tz = positions[ i + 2 ];\r\n\r\n\t\t\t\t// bounding box\r\n\r\n\t\t\t\tif ( x < bb.min.x ) {\r\n\r\n\t\t\t\t\tbb.min.x = x;\r\n\r\n\t\t\t\t} else if ( x > bb.max.x ) {\r\n\r\n\t\t\t\t\tbb.max.x = x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( y < bb.min.y ) {\r\n\r\n\t\t\t\t\tbb.min.y = y;\r\n\r\n\t\t\t\t} else if ( y > bb.max.y ) {\r\n\r\n\t\t\t\t\tbb.max.y = y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( z < bb.min.z ) {\r\n\r\n\t\t\t\t\tbb.min.z = z;\r\n\r\n\t\t\t\t} else if ( z > bb.max.z ) {\r\n\r\n\t\t\t\t\tbb.max.z = z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( positions === undefined || positions.length === 0 ) {\r\n\r\n\t\t\tthis.boundingBox.min.set( 0, 0, 0 );\r\n\t\t\tthis.boundingBox.max.set( 0, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\r\n\t\tif ( positions ) {\r\n\r\n\t\t\tvar radiusSq, maxRadiusSq = 0;\r\n\t\t\tvar x, y, z;\r\n\r\n\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\tx = positions[ i ];\r\n\t\t\t\ty = positions[ i + 1 ];\r\n\t\t\t\tz = positions[ i + 2 ];\r\n\r\n\t\t\t\tradiusSq =  x * x + y * y + z * z;\r\n\t\t\t\tif ( radiusSq > maxRadiusSq ) maxRadiusSq = radiusSq;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tif ( this.attributes[ \"position\" ] ) {\r\n\r\n\t\t\tvar i, il;\r\n\t\t\tvar j, jl;\r\n\r\n\t\t\tvar nVertexElements = this.attributes[ \"position\" ].array.length;\r\n\r\n\t\t\tif ( this.attributes[ \"normal\" ] === undefined ) {\r\n\r\n\t\t\t\tthis.attributes[ \"normal\" ] = {\r\n\r\n\t\t\t\t\titemSize: 3,\r\n\t\t\t\t\tarray: new Float32Array( nVertexElements ),\r\n\t\t\t\t\tnumItems: nVertexElements\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tfor ( i = 0, il = this.attributes[ \"normal\" ].array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tthis.attributes[ \"normal\" ].array[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\t\t\tvar normals = this.attributes[ \"normal\" ].array;\r\n\r\n\t\t\tvar vA, vB, vC, x, y, z,\r\n\r\n\t\t\tpA = new THREE.Vector3(),\r\n\t\t\tpB = new THREE.Vector3(),\r\n\t\t\tpC = new THREE.Vector3(),\r\n\r\n\t\t\tcb = new THREE.Vector3(),\r\n\t\t\tab = new THREE.Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( this.attributes[ \"index\" ] ) {\r\n\r\n\t\t\t\tvar indices = this.attributes[ \"index\" ].array;\r\n\r\n\t\t\t\tvar offsets = this.offsets;\r\n\r\n\t\t\t\tfor ( j = 0, jl = offsets.length; j < jl; ++ j ) {\r\n\r\n\t\t\t\t\tvar start = offsets[ j ].start;\r\n\t\t\t\t\tvar count = offsets[ j ].count;\r\n\t\t\t\t\tvar index = offsets[ j ].index;\r\n\r\n\t\t\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = index + indices[ i ];\r\n\t\t\t\t\t\tvB = index + indices[ i + 1 ];\r\n\t\t\t\t\t\tvC = index + indices[ i + 2 ];\r\n\r\n\t\t\t\t\t\tx = positions[ vA * 3 ];\r\n\t\t\t\t\t\ty = positions[ vA * 3 + 1 ];\r\n\t\t\t\t\t\tz = positions[ vA * 3 + 2 ];\r\n\t\t\t\t\t\tpA.set( x, y, z );\r\n\r\n\t\t\t\t\t\tx = positions[ vB * 3 ];\r\n\t\t\t\t\t\ty = positions[ vB * 3 + 1 ];\r\n\t\t\t\t\t\tz = positions[ vB * 3 + 2 ];\r\n\t\t\t\t\t\tpB.set( x, y, z );\r\n\r\n\t\t\t\t\t\tx = positions[ vC * 3 ];\r\n\t\t\t\t\t\ty = positions[ vC * 3 + 1 ];\r\n\t\t\t\t\t\tz = positions[ vC * 3 + 2 ];\r\n\t\t\t\t\t\tpC.set( x, y, z );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA * 3 ]     += cb.x;\r\n\t\t\t\t\t\tnormals[ vA * 3 + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA * 3 + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB * 3 ]     += cb.x;\r\n\t\t\t\t\t\tnormals[ vB * 3 + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB * 3 + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC * 3 ]     += cb.x;\r\n\t\t\t\t\t\tnormals[ vC * 3 + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC * 3 + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tx = positions[ i ];\r\n\t\t\t\t\ty = positions[ i + 1 ];\r\n\t\t\t\t\tz = positions[ i + 2 ];\r\n\t\t\t\t\tpA.set( x, y, z );\r\n\r\n\t\t\t\t\tx = positions[ i + 3 ];\r\n\t\t\t\t\ty = positions[ i + 4 ];\r\n\t\t\t\t\tz = positions[ i + 5 ];\r\n\t\t\t\t\tpB.set( x, y, z );\r\n\r\n\t\t\t\t\tx = positions[ i + 6 ];\r\n\t\t\t\t\ty = positions[ i + 7 ];\r\n\t\t\t\t\tz = positions[ i + 8 ];\r\n\t\t\t\t\tpC.set( x, y, z );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormals[ i ] \t = cb.x;\r\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tnormalizeNormals: function () {\r\n\r\n\t\tvar normals = this.attributes[ \"normal\" ].array;\r\n\r\n\t\tvar x, y, z, n;\r\n\r\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\r\n\r\n\t\t\tx = normals[ i ];\r\n\t\t\ty = normals[ i + 1 ];\r\n\t\t\tz = normals[ i + 2 ];\r\n\r\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tnormals[ i ] \t *= n;\r\n\t\t\tnormals[ i + 1 ] *= n;\r\n\t\t\tnormals[ i + 2 ] *= n;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\t// based on http://www.terathon.com/code/tangent.html\r\n\t\t// (per vertex tangents)\r\n\r\n\t\tif ( this.attributes[ \"index\" ] === undefined ||\r\n\t\t\t this.attributes[ \"position\" ] === undefined ||\r\n\t\t\t this.attributes[ \"normal\" ] === undefined ||\r\n\t\t\t this.attributes[ \"uv\" ] === undefined ) {\r\n\r\n\t\t\tconsole.warn( \"Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()\" );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar indices = this.attributes[ \"index\" ].array;\r\n\t\tvar positions = this.attributes[ \"position\" ].array;\r\n\t\tvar normals = this.attributes[ \"normal\" ].array;\r\n\t\tvar uvs = this.attributes[ \"uv\" ].array;\r\n\r\n\t\tvar nVertices = positions.length / 3;\r\n\r\n\t\tif ( this.attributes[ \"tangent\" ] === undefined ) {\r\n\r\n\t\t\tvar nTangentElements = 4 * nVertices;\r\n\r\n\t\t\tthis.attributes[ \"tangent\" ] = {\r\n\r\n\t\t\t\titemSize: 4,\r\n\t\t\t\tarray: new Float32Array( nTangentElements ),\r\n\t\t\t\tnumItems: nTangentElements\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar tangents = this.attributes[ \"tangent\" ].array;\r\n\r\n\t\tvar tan1 = [], tan2 = [];\r\n\r\n\t\tfor ( var k = 0; k < nVertices; k ++ ) {\r\n\r\n\t\t\ttan1[ k ] = new THREE.Vector3();\r\n\t\t\ttan2[ k ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tvar xA, yA, zA,\r\n\t\t\txB, yB, zB,\r\n\t\t\txC, yC, zC,\r\n\r\n\t\t\tuA, vA,\r\n\t\t\tuB, vB,\r\n\t\t\tuC, vC,\r\n\r\n\t\t\tx1, x2, y1, y2, z1, z2,\r\n\t\t\ts1, s2, t1, t2, r;\r\n\r\n\t\tvar sdir = new THREE.Vector3(), tdir = new THREE.Vector3();\r\n\r\n\t\tfunction handleTriangle( a, b, c ) {\r\n\r\n\t\t\txA = positions[ a * 3 ];\r\n\t\t\tyA = positions[ a * 3 + 1 ];\r\n\t\t\tzA = positions[ a * 3 + 2 ];\r\n\r\n\t\t\txB = positions[ b * 3 ];\r\n\t\t\tyB = positions[ b * 3 + 1 ];\r\n\t\t\tzB = positions[ b * 3 + 2 ];\r\n\r\n\t\t\txC = positions[ c * 3 ];\r\n\t\t\tyC = positions[ c * 3 + 1 ];\r\n\t\t\tzC = positions[ c * 3 + 2 ];\r\n\r\n\t\t\tuA = uvs[ a * 2 ];\r\n\t\t\tvA = uvs[ a * 2 + 1 ];\r\n\r\n\t\t\tuB = uvs[ b * 2 ];\r\n\t\t\tvB = uvs[ b * 2 + 1 ];\r\n\r\n\t\t\tuC = uvs[ c * 2 ];\r\n\t\t\tvC = uvs[ c * 2 + 1 ];\r\n\r\n\t\t\tx1 = xB - xA;\r\n\t\t\tx2 = xC - xA;\r\n\r\n\t\t\ty1 = yB - yA;\r\n\t\t\ty2 = yC - yA;\r\n\r\n\t\t\tz1 = zB - zA;\r\n\t\t\tz2 = zC - zA;\r\n\r\n\t\t\ts1 = uB - uA;\r\n\t\t\ts2 = uC - uA;\r\n\r\n\t\t\tt1 = vB - vA;\r\n\t\t\tt2 = vC - vA;\r\n\r\n\t\t\tr = 1.0 / ( s1 * t2 - s2 * t1 );\r\n\r\n\t\t\tsdir.set(\r\n\t\t\t\t( t2 * x1 - t1 * x2 ) * r,\r\n\t\t\t\t( t2 * y1 - t1 * y2 ) * r,\r\n\t\t\t\t( t2 * z1 - t1 * z2 ) * r\r\n\t\t\t);\r\n\r\n\t\t\ttdir.set(\r\n\t\t\t\t( s1 * x2 - s2 * x1 ) * r,\r\n\t\t\t\t( s1 * y2 - s2 * y1 ) * r,\r\n\t\t\t\t( s1 * z2 - s2 * z1 ) * r\r\n\t\t\t);\r\n\r\n\t\t\ttan1[ a ].add( sdir );\r\n\t\t\ttan1[ b ].add( sdir );\r\n\t\t\ttan1[ c ].add( sdir );\r\n\r\n\t\t\ttan2[ a ].add( tdir );\r\n\t\t\ttan2[ b ].add( tdir );\r\n\t\t\ttan2[ c ].add( tdir );\r\n\r\n\t\t}\r\n\r\n\t\tvar i, il;\r\n\t\tvar j, jl;\r\n\t\tvar iA, iB, iC;\r\n\r\n\t\tvar offsets = this.offsets;\r\n\r\n\t\tfor ( j = 0, jl = offsets.length; j < jl; ++ j ) {\r\n\r\n\t\t\tvar start = offsets[ j ].start;\r\n\t\t\tvar count = offsets[ j ].count;\r\n\t\t\tvar index = offsets[ j ].index;\r\n\r\n\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\tiA = index + indices[ i ];\r\n\t\t\t\tiB = index + indices[ i + 1 ];\r\n\t\t\t\tiC = index + indices[ i + 2 ];\r\n\r\n\t\t\t\thandleTriangle( iA, iB, iC );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();\r\n\t\tvar n = new THREE.Vector3(), n2 = new THREE.Vector3();\r\n\t\tvar w, t, test;\r\n\t\tvar nx, ny, nz;\r\n\r\n\t\tfunction handleVertex( v ) {\r\n\r\n\t\t\tn.x = normals[ v * 3 ];\r\n\t\t\tn.y = normals[ v * 3 + 1 ];\r\n\t\t\tn.z = normals[ v * 3 + 2 ];\r\n\r\n\t\t\tn2.copy( n );\r\n\r\n\t\t\tt = tan1[ v ];\r\n\r\n\t\t\t// Gram-Schmidt orthogonalize\r\n\r\n\t\t\ttmp.copy( t );\r\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\r\n\r\n\t\t\t// Calculate handedness\r\n\r\n\t\t\ttmp2.crossVectors( n2, t );\r\n\t\t\ttest = tmp2.dot( tan2[ v ] );\r\n\t\t\tw = ( test < 0.0 ) ? -1.0 : 1.0;\r\n\r\n\t\t\ttangents[ v * 4 ] \t  = tmp.x;\r\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\r\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\r\n\t\t\ttangents[ v * 4 + 3 ] = w;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( j = 0, jl = offsets.length; j < jl; ++ j ) {\r\n\r\n\t\t\tvar start = offsets[ j ].start;\r\n\t\t\tvar count = offsets[ j ].count;\r\n\t\t\tvar index = offsets[ j ].index;\r\n\r\n\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\tiA = index + indices[ i ];\r\n\t\t\t\tiB = index + indices[ i + 1 ];\r\n\t\t\t\tiC = index + indices[ i + 2 ];\r\n\r\n\t\t\t\thandleVertex( iA );\r\n\t\t\t\thandleVertex( iB );\r\n\t\t\t\thandleVertex( iC );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.hasTangents = true;\r\n\t\tthis.tangentsNeedUpdate = true;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\nTHREE.Camera = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.matrixWorldInverse = new THREE.Matrix4();\r\n\r\n\tthis.projectionMatrix = new THREE.Matrix4();\r\n\tthis.projectionMatrixInverse = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Camera.prototype.lookAt = function ( vector ) {\r\n\r\n\t// TODO: Add hierarchy support.\r\n\r\n\tthis.matrix.lookAt( this.position, vector, this.up );\r\n\r\n\tif ( this.rotationAutoUpdate === true ) {\r\n\r\n\t\tif ( this.useQuaternion === false )  {\r\n\r\n\t\t\tthis.rotation.setEulerFromRotationMatrix( this.matrix, this.eulerOrder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.quaternion.copy( this.matrix.decompose()[ 1 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.left = left;\r\n\tthis.right = right;\r\n\tthis.top = top;\r\n\tthis.bottom = bottom;\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\r\nTHREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {\r\n\r\n\tthis.projectionMatrix.makeOrthographic( this.left, this.right, this.top, this.bottom, this.near, this.far );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author greggman / http://games.greggman.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.fov = fov !== undefined ? fov : 50;\r\n\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\tthis.near = near !== undefined ? near : 0.1;\r\n\tthis.far = far !== undefined ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\r\n\r\n/**\r\n * Uses Focal Length (in mm) to estimate and set FOV\r\n * 35mm (fullframe) camera is used if frame size is not specified;\r\n * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\r\n */\r\n\r\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {\r\n\r\n\tif ( frameHeight === undefined ) frameHeight = 24;\r\n\r\n\tthis.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\r\n\tthis.updateProjectionMatrix();\r\n\r\n}\r\n\r\n\r\n/**\r\n * Sets an offset in a larger frustum. This is useful for multi-window or\r\n * multi-monitor/multi-machine setups.\r\n *\r\n * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n * the monitors are in grid like this\r\n *\r\n *   +---+---+---+\r\n *   | A | B | C |\r\n *   +---+---+---+\r\n *   | D | E | F |\r\n *   +---+---+---+\r\n *\r\n * then for each monitor you would call it like this\r\n *\r\n *   var w = 1920;\r\n *   var h = 1080;\r\n *   var fullWidth = w * 3;\r\n *   var fullHeight = h * 2;\r\n *\r\n *   --A--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n *   --B--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n *   --C--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n *   --D--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n *   --E--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n *   --F--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n *\r\n *   Note there is no reason monitors have to be the same size or in a grid.\r\n */\r\n\r\nTHREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\tthis.fullWidth = fullWidth;\r\n\tthis.fullHeight = fullHeight;\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\n\r\nTHREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {\r\n\r\n\tif ( this.fullWidth ) {\r\n\r\n\t\tvar aspect = this.fullWidth / this.fullHeight;\r\n\t\tvar top = Math.tan( THREE.Math.degToRad( this.fov * 0.5 ) ) * this.near;\r\n\t\tvar bottom = -top;\r\n\t\tvar left = aspect * bottom;\r\n\t\tvar right = aspect * top;\r\n\t\tvar width = Math.abs( right - left );\r\n\t\tvar height = Math.abs( top - bottom );\r\n\r\n\t\tthis.projectionMatrix.makeFrustum(\r\n\t\t\tleft + this.x * width / this.fullWidth,\r\n\t\t\tleft + ( this.x + this.width ) * width / this.fullWidth,\r\n\t\t\ttop - ( this.y + this.height ) * height / this.fullHeight,\r\n\t\t\ttop - this.y * height / this.fullHeight,\r\n\t\t\tthis.near,\r\n\t\t\tthis.far\r\n\t\t);\r\n\r\n\t} else {\r\n\r\n\t\tthis.projectionMatrix.makePerspective( this.fov, this.aspect, this.near, this.far );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n \r\nTHREE.Light = function ( hex ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.color = new THREE.Color( hex );\r\n\r\n};\r\n\r\nTHREE.Light.prototype = Object.create( THREE.Object3D.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AmbientLight = function ( hex ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n};\r\n\r\nTHREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author MPanknin / http://www.redplant.de/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.AreaLight = function ( hex, intensity ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.normal = new THREE.Vector3( 0, -1, 0 );\r\n\tthis.right = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n\tthis.width = 1.0;\r\n\tthis.height = 1.0;\r\n\r\n\tthis.constantAttenuation = 1.5;\r\n\tthis.linearAttenuation = 0.5;\r\n\tthis.quadraticAttenuation = 0.1;\r\n\r\n};\r\n\r\nTHREE.AreaLight.prototype = Object.create( THREE.Light.prototype );\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DirectionalLight = function ( hex, intensity ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 1, 0 );\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.onlyShadow = false;\r\n\r\n\t//\r\n\r\n\tthis.shadowCameraNear = 50;\r\n\tthis.shadowCameraFar = 5000;\r\n\r\n\tthis.shadowCameraLeft = -500;\r\n\tthis.shadowCameraRight = 500;\r\n\tthis.shadowCameraTop = 500;\r\n\tthis.shadowCameraBottom = -500;\r\n\r\n\tthis.shadowCameraVisible = false;\r\n\r\n\tthis.shadowBias = 0;\r\n\tthis.shadowDarkness = 0.5;\r\n\r\n\tthis.shadowMapWidth = 512;\r\n\tthis.shadowMapHeight = 512;\r\n\r\n\t//\r\n\r\n\tthis.shadowCascade = false;\r\n\r\n\tthis.shadowCascadeOffset = new THREE.Vector3( 0, 0, -1000 );\r\n\tthis.shadowCascadeCount = 2;\r\n\r\n\tthis.shadowCascadeBias = [ 0, 0, 0 ];\r\n\tthis.shadowCascadeWidth = [ 512, 512, 512 ];\r\n\tthis.shadowCascadeHeight = [ 512, 512, 512 ];\r\n\r\n\tthis.shadowCascadeNearZ = [ -1.000, 0.990, 0.998 ];\r\n\tthis.shadowCascadeFarZ  = [  0.990, 0.998, 1.000 ];\r\n\r\n\tthis.shadowCascadeArray = [];\r\n\r\n\t//\r\n\r\n\tthis.shadowMap = null;\r\n\tthis.shadowMapSize = null;\r\n\tthis.shadowCamera = null;\r\n\tthis.shadowMatrix = null;\r\n\r\n};\r\n\r\nTHREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.HemisphereLight = function ( skyColorHex, groundColorHex, intensity ) {\r\n\r\n\tTHREE.Light.call( this, skyColorHex );\r\n\r\n\tthis.groundColor = new THREE.Color( groundColorHex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 100, 0 );\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\r\n};\r\n\r\nTHREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.PointLight = function ( hex, intensity, distance ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 0, 0 );\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\r\n};\r\n\r\nTHREE.PointLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpotLight = function ( hex, intensity, distance, angle, exponent ) {\r\n\r\n\tTHREE.Light.call( this, hex );\r\n\r\n\tthis.position = new THREE.Vector3( 0, 1, 0 );\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 2;\r\n\tthis.exponent = ( exponent !== undefined ) ? exponent : 10;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.onlyShadow = false;\r\n\r\n\t//\r\n\r\n\tthis.shadowCameraNear = 50;\r\n\tthis.shadowCameraFar = 5000;\r\n\tthis.shadowCameraFov = 50;\r\n\r\n\tthis.shadowCameraVisible = false;\r\n\r\n\tthis.shadowBias = 0;\r\n\tthis.shadowDarkness = 0.5;\r\n\r\n\tthis.shadowMapWidth = 512;\r\n\tthis.shadowMapHeight = 512;\r\n\r\n\t//\r\n\r\n\tthis.shadowMap = null;\r\n\tthis.shadowMapSize = null;\r\n\tthis.shadowCamera = null;\r\n\tthis.shadowMatrix = null;\r\n\r\n};\r\n\r\nTHREE.SpotLight.prototype = Object.create( THREE.Light.prototype );\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Loader = function ( showStatus ) {\r\n\r\n\tthis.showStatus = showStatus;\r\n\tthis.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;\r\n\r\n\tthis.onLoadStart = function () {};\r\n\tthis.onLoadProgress = function () {};\r\n\tthis.onLoadComplete = function () {};\r\n\r\n};\r\n\r\nTHREE.Loader.prototype = {\r\n\r\n\tconstructor: THREE.Loader,\r\n\r\n\tcrossOrigin: 'anonymous',\r\n\r\n\taddStatusElement: function () {\r\n\r\n\t\tvar e = document.createElement( \"div\" );\r\n\r\n\t\te.style.position = \"absolute\";\r\n\t\te.style.right = \"0px\";\r\n\t\te.style.top = \"0px\";\r\n\t\te.style.fontSize = \"0.8em\";\r\n\t\te.style.textAlign = \"left\";\r\n\t\te.style.background = \"rgba(0,0,0,0.25)\";\r\n\t\te.style.color = \"#fff\";\r\n\t\te.style.width = \"120px\";\r\n\t\te.style.padding = \"0.5em 0.5em 0.5em 0.5em\";\r\n\t\te.style.zIndex = 1000;\r\n\r\n\t\te.innerHTML = \"Loading ...\";\r\n\r\n\t\treturn e;\r\n\r\n\t},\r\n\r\n\tupdateProgress: function ( progress ) {\r\n\r\n\t\tvar message = \"Loaded \";\r\n\r\n\t\tif ( progress.total ) {\r\n\r\n\t\t\tmessage += ( 100 * progress.loaded / progress.total ).toFixed(0) + \"%\";\r\n\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmessage += ( progress.loaded / 1000 ).toFixed(2) + \" KB\";\r\n\r\n\t\t}\r\n\r\n\t\tthis.statusDomElement.innerHTML = message;\r\n\r\n\t},\r\n\r\n\textractUrlBase: function ( url ) {\r\n\r\n\t\tvar parts = url.split( '/' );\r\n\t\tparts.pop();\r\n\t\treturn ( parts.length < 1 ? '.' : parts.join( '/' ) ) + '/';\r\n\r\n\t},\r\n\r\n\tinitMaterials: function ( materials, texturePath ) {\r\n\r\n\t\tvar array = [];\r\n\r\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\r\n\r\n\t\t\tarray[ i ] = THREE.Loader.prototype.createMaterial( materials[ i ], texturePath );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tneedsTangents: function ( materials ) {\r\n\r\n\t\tfor( var i = 0, il = materials.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar m = materials[ i ];\r\n\r\n\t\t\tif ( m instanceof THREE.ShaderMaterial ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tcreateMaterial: function ( m, texturePath ) {\r\n\r\n\t\tvar _this = this;\r\n\r\n\t\tfunction is_pow2( n ) {\r\n\r\n\t\t\tvar l = Math.log( n ) / Math.LN2;\r\n\t\t\treturn Math.floor( l ) == l;\r\n\r\n\t\t}\r\n\r\n\t\tfunction nearest_pow2( n ) {\r\n\r\n\t\t\tvar l = Math.log( n ) / Math.LN2;\r\n\t\t\treturn Math.pow( 2, Math.round(  l ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction load_image( where, url ) {\r\n\r\n\t\t\tvar image = new Image();\r\n\r\n\t\t\timage.onload = function () {\r\n\r\n\t\t\t\tif ( !is_pow2( this.width ) || !is_pow2( this.height ) ) {\r\n\r\n\t\t\t\t\tvar width = nearest_pow2( this.width );\r\n\t\t\t\t\tvar height = nearest_pow2( this.height );\r\n\r\n\t\t\t\t\twhere.image.width = width;\r\n\t\t\t\t\twhere.image.height = height;\r\n\t\t\t\t\twhere.image.getContext( '2d' ).drawImage( this, 0, 0, width, height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\twhere.image = this;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhere.needsUpdate = true;\r\n\r\n\t\t\t};\r\n\r\n\t\t\timage.crossOrigin = _this.crossOrigin;\r\n\t\t\timage.src = url;\r\n\r\n\t\t}\r\n\r\n\t\tfunction create_texture( where, name, sourceFile, repeat, offset, wrap, anisotropy ) {\r\n\r\n\t\t\tvar isCompressed = sourceFile.toLowerCase().endsWith( \".dds\" );\r\n\t\t\tvar fullPath = texturePath + \"/\" + sourceFile;\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\tvar texture = THREE.ImageUtils.loadCompressedTexture( fullPath );\r\n\r\n\t\t\t\twhere[ name ] = texture;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar texture = document.createElement( 'canvas' );\r\n\r\n\t\t\t\twhere[ name ] = new THREE.Texture( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhere[ name ].sourceFile = sourceFile;\r\n\r\n\t\t\tif( repeat ) {\r\n\r\n\t\t\t\twhere[ name ].repeat.set( repeat[ 0 ], repeat[ 1 ] );\r\n\r\n\t\t\t\tif ( repeat[ 0 ] !== 1 ) where[ name ].wrapS = THREE.RepeatWrapping;\r\n\t\t\t\tif ( repeat[ 1 ] !== 1 ) where[ name ].wrapT = THREE.RepeatWrapping;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset ) {\r\n\r\n\t\t\t\twhere[ name ].offset.set( offset[ 0 ], offset[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( wrap ) {\r\n\r\n\t\t\t\tvar wrapMap = {\r\n\t\t\t\t\t\"repeat\": THREE.RepeatWrapping,\r\n\t\t\t\t\t\"mirror\": THREE.MirroredRepeatWrapping\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( wrapMap[ wrap[ 0 ] ] !== undefined ) where[ name ].wrapS = wrapMap[ wrap[ 0 ] ];\r\n\t\t\t\tif ( wrapMap[ wrap[ 1 ] ] !== undefined ) where[ name ].wrapT = wrapMap[ wrap[ 1 ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( anisotropy ) {\r\n\r\n\t\t\t\twhere[ name ].anisotropy = anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! isCompressed ) {\r\n\r\n\t\t\t\tload_image( where[ name ], fullPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction rgb2hex( rgb ) {\r\n\r\n\t\t\treturn ( rgb[ 0 ] * 255 << 16 ) + ( rgb[ 1 ] * 255 << 8 ) + rgb[ 2 ] * 255;\r\n\r\n\t\t}\r\n\r\n\t\t// defaults\r\n\r\n\t\tvar mtype = \"MeshLambertMaterial\";\r\n\t\tvar mpars = { color: 0xeeeeee, opacity: 1.0, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: false };\r\n\r\n\t\t// parameters from model file\r\n\r\n\t\tif ( m.shading ) {\r\n\r\n\t\t\tvar shading = m.shading.toLowerCase();\r\n\r\n\t\t\tif ( shading === \"phong\" ) mtype = \"MeshPhongMaterial\";\r\n\t\t\telse if ( shading === \"basic\" ) mtype = \"MeshBasicMaterial\";\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.blending !== undefined && THREE[ m.blending ] !== undefined ) {\r\n\r\n\t\t\tmpars.blending = THREE[ m.blending ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.transparent !== undefined || m.opacity < 1.0 ) {\r\n\r\n\t\t\tmpars.transparent = m.transparent;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.depthTest !== undefined ) {\r\n\r\n\t\t\tmpars.depthTest = m.depthTest;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.depthWrite !== undefined ) {\r\n\r\n\t\t\tmpars.depthWrite = m.depthWrite;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.visible !== undefined ) {\r\n\r\n\t\t\tmpars.visible = m.visible;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.flipSided !== undefined ) {\r\n\r\n\t\t\tmpars.side = THREE.BackSide;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.doubleSided !== undefined ) {\r\n\r\n\t\t\tmpars.side = THREE.DoubleSide;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.wireframe !== undefined ) {\r\n\r\n\t\t\tmpars.wireframe = m.wireframe;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.vertexColors !== undefined ) {\r\n\r\n\t\t\tif ( m.vertexColors === \"face\" ) {\r\n\r\n\t\t\t\tmpars.vertexColors = THREE.FaceColors;\r\n\r\n\t\t\t} else if ( m.vertexColors ) {\r\n\r\n\t\t\t\tmpars.vertexColors = THREE.VertexColors;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// colors\r\n\r\n\t\tif ( m.colorDiffuse ) {\r\n\r\n\t\t\tmpars.color = rgb2hex( m.colorDiffuse );\r\n\r\n\t\t} else if ( m.DbgColor ) {\r\n\r\n\t\t\tmpars.color = m.DbgColor;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.colorSpecular ) {\r\n\r\n\t\t\tmpars.specular = rgb2hex( m.colorSpecular );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.colorAmbient ) {\r\n\r\n\t\t\tmpars.ambient = rgb2hex( m.colorAmbient );\r\n\r\n\t\t}\r\n\r\n\t\t// modifiers\r\n\r\n\t\tif ( m.transparency ) {\r\n\r\n\t\t\tmpars.opacity = m.transparency;\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.specularCoef ) {\r\n\r\n\t\t\tmpars.shininess = m.specularCoef;\r\n\r\n\t\t}\r\n\r\n\t\t// textures\r\n\r\n\t\tif ( m.mapDiffuse && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"map\", m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapLight && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"lightMap\", m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapBump && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"bumpMap\", m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapNormal && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"normalMap\", m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.mapSpecular && texturePath ) {\r\n\r\n\t\t\tcreate_texture( mpars, \"specularMap\", m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( m.mapBumpScale ) {\r\n\r\n\t\t\tmpars.bumpScale = m.mapBumpScale;\r\n\r\n\t\t}\r\n\r\n\t\t// special case for normal mapped material\r\n\r\n\t\tif ( m.mapNormal ) {\r\n\r\n\t\t\tvar shader = THREE.ShaderLib[ \"normalmap\" ];\r\n\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\t\tuniforms[ \"tNormal\" ].value = mpars.normalMap;\r\n\r\n\t\t\tif ( m.mapNormalFactor ) {\r\n\r\n\t\t\t\tuniforms[ \"uNormalScale\" ].value.set( m.mapNormalFactor, m.mapNormalFactor );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mpars.map ) {\r\n\r\n\t\t\t\tuniforms[ \"tDiffuse\" ].value = mpars.map;\r\n\t\t\t\tuniforms[ \"enableDiffuse\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mpars.specularMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tSpecular\" ].value = mpars.specularMap;\r\n\t\t\t\tuniforms[ \"enableSpecular\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mpars.lightMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tAO\" ].value = mpars.lightMap;\r\n\t\t\t\tuniforms[ \"enableAO\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// for the moment don't handle displacement texture\r\n\r\n\t\t\tuniforms[ \"uDiffuseColor\" ].value.setHex( mpars.color );\r\n\t\t\tuniforms[ \"uSpecularColor\" ].value.setHex( mpars.specular );\r\n\t\t\tuniforms[ \"uAmbientColor\" ].value.setHex( mpars.ambient );\r\n\r\n\t\t\tuniforms[ \"uShininess\" ].value = mpars.shininess;\r\n\r\n\t\t\tif ( mpars.opacity !== undefined ) {\r\n\r\n\t\t\t\tuniforms[ \"uOpacity\" ].value = mpars.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };\r\n\t\t\tvar material = new THREE.ShaderMaterial( parameters );\r\n\r\n\t\t\tif ( mpars.transparent ) {\r\n\r\n\t\t\t\tmaterial.transparent = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar material = new THREE[ mtype ]( mpars );\r\n\r\n\t\t}\r\n\r\n\t\tif ( m.DbgName !== undefined ) material.name = m.DbgName;\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ImageLoader = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.crossOrigin = null;\r\n\r\n};\r\n\r\nTHREE.ImageLoader.prototype = {\r\n\r\n\tconstructor: THREE.ImageLoader,\r\n\r\n\tload: function ( url, image ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tif ( image === undefined ) image = new Image();\r\n\r\n\t\timage.addEventListener( 'load', function () {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'load', content: image } );\r\n\r\n\t\t}, false );\r\n\r\n\t\timage.addEventListener( 'error', function () {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'error', message: 'Couldn\\'t load URL [' + url + ']' } );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( scope.crossOrigin ) image.crossOrigin = scope.crossOrigin;\r\n\r\n\t\timage.src = url;\r\n\r\n\t}\r\n\r\n}\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.JSONLoader = function ( showStatus ) {\r\n\r\n\tTHREE.Loader.call( this, showStatus );\r\n\r\n\tthis.withCredentials = false;\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype = Object.create( THREE.Loader.prototype );\r\n\r\nTHREE.JSONLoader.prototype.load = function ( url, callback, texturePath ) {\r\n\r\n\tvar scope = this;\r\n\r\n\t// todo: unify load API to for easier SceneLoader use\r\n\r\n\ttexturePath = texturePath && ( typeof texturePath === \"string\" ) ? texturePath : this.extractUrlBase( url );\r\n\r\n\tthis.onLoadStart();\r\n\tthis.loadAjaxJSON( this, url, callback, texturePath );\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, callbackProgress ) {\r\n\r\n\tvar xhr = new XMLHttpRequest();\r\n\r\n\tvar length = 0;\r\n\r\n\txhr.onreadystatechange = function () {\r\n\r\n\t\tif ( xhr.readyState === xhr.DONE ) {\r\n\r\n\t\t\tif ( xhr.status === 200 || xhr.status === 0 ) {\r\n\r\n\t\t\t\tif ( xhr.responseText ) {\r\n\r\n\t\t\t\t\tvar json = JSON.parse( xhr.responseText );\r\n\t\t\t\t\tcontext.createModel( json, callback, texturePath );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.JSONLoader: [\" + url + \"] seems to be unreachable or file there is empty\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// in context of more complex asset initialization\r\n\t\t\t\t// do not block on single failed file\r\n\t\t\t\t// maybe should go even one more level up\r\n\r\n\t\t\t\tcontext.onLoadComplete();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( \"THREE.JSONLoader: Couldn't load [\" + url + \"] [\" + xhr.status + \"]\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( xhr.readyState === xhr.LOADING ) {\r\n\r\n\t\t\tif ( callbackProgress ) {\r\n\r\n\t\t\t\tif ( length === 0 ) {\r\n\r\n\t\t\t\t\tlength = xhr.getResponseHeader( \"Content-Length\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallbackProgress( { total: length, loaded: xhr.responseText.length } );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( xhr.readyState === xhr.HEADERS_RECEIVED ) {\r\n\r\n\t\t\tlength = xhr.getResponseHeader( \"Content-Length\" );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\txhr.open( \"GET\", url, true );\r\n\txhr.withCredentials = this.withCredentials;\r\n\txhr.send( null );\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype.createModel = function ( json, callback, texturePath ) {\r\n\r\n\tvar scope = this,\r\n\tgeometry = new THREE.Geometry(),\r\n\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\r\n\r\n\tparseModel( scale );\r\n\r\n\tparseSkin();\r\n\tparseMorphing( scale );\r\n\r\n\tgeometry.computeCentroids();\r\n\tgeometry.computeFaceNormals();\r\n\r\n\tfunction parseModel( scale ) {\r\n\r\n\t\tfunction isBitSet( value, position ) {\r\n\r\n\t\t\treturn value & ( 1 << position );\r\n\r\n\t\t}\r\n\r\n\t\tvar i, j, fi,\r\n\r\n\t\toffset, zLength, nVertices,\r\n\r\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\r\n\r\n\t\ttype,\r\n\t\tisQuad,\r\n\t\thasMaterial,\r\n\t\thasFaceUv, hasFaceVertexUv,\r\n\t\thasFaceNormal, hasFaceVertexNormal,\r\n\t\thasFaceColor, hasFaceVertexColor,\r\n\r\n\t\tvertex, face, color, normal,\r\n\r\n\t\tuvLayer, uvs, u, v,\r\n\r\n\t\tfaces = json.faces,\r\n\t\tvertices = json.vertices,\r\n\t\tnormals = json.normals,\r\n\t\tcolors = json.colors,\r\n\r\n\t\tnUvLayers = 0;\r\n\r\n\t\t// disregard empty arrays\r\n\r\n\t\tfor ( i = 0; i < json.uvs.length; i++ ) {\r\n\r\n\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0; i < nUvLayers; i++ ) {\r\n\r\n\t\t\tgeometry.faceUvs[ i ] = [];\r\n\t\t\tgeometry.faceVertexUvs[ i ] = [];\r\n\r\n\t\t}\r\n\r\n\t\toffset = 0;\r\n\t\tzLength = vertices.length;\r\n\r\n\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\tvertex = new THREE.Vector3();\r\n\r\n\t\t\tvertex.x = vertices[ offset ++ ] * scale;\r\n\t\t\tvertex.y = vertices[ offset ++ ] * scale;\r\n\t\t\tvertex.z = vertices[ offset ++ ] * scale;\r\n\r\n\t\t\tgeometry.vertices.push( vertex );\r\n\r\n\t\t}\r\n\r\n\t\toffset = 0;\r\n\t\tzLength = faces.length;\r\n\r\n\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\ttype = faces[ offset ++ ];\r\n\r\n\r\n\t\t\tisQuad          \t= isBitSet( type, 0 );\r\n\t\t\thasMaterial         = isBitSet( type, 1 );\r\n\t\t\thasFaceUv           = isBitSet( type, 2 );\r\n\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\r\n\t\t\thasFaceNormal       = isBitSet( type, 4 );\r\n\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\r\n\t\t\thasFaceColor\t    = isBitSet( type, 6 );\r\n\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\r\n\r\n\t\t\t//console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceUv, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\r\n\r\n\t\t\tif ( isQuad ) {\r\n\r\n\t\t\t\tface = new THREE.Face4();\r\n\r\n\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\tface.c = faces[ offset ++ ];\r\n\t\t\t\tface.d = faces[ offset ++ ];\r\n\r\n\t\t\t\tnVertices = 4;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface = new THREE.Face3();\r\n\r\n\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\tface.c = faces[ offset ++ ];\r\n\r\n\t\t\t\tnVertices = 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\tif ( hasFaceUv ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nUvLayers; i++ ) {\r\n\r\n\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\tgeometry.faceUvs[ i ][ fi ] = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nUvLayers; i++ ) {\r\n\r\n\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\tuvs = [];\r\n\r\n\t\t\t\t\tfor ( j = 0; j < nVertices; j ++ ) {\r\n\r\n\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\tuvs[ j ] = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = uvs;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\tnormal = new THREE.Vector3();\r\n\r\n\t\t\t\tnormal.x = normals[ normalIndex ++ ];\r\n\t\t\t\tnormal.y = normals[ normalIndex ++ ];\r\n\t\t\t\tnormal.z = normals[ normalIndex ];\r\n\r\n\t\t\t\tface.normal = normal;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nVertices; i++ ) {\r\n\r\n\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\tnormal = new THREE.Vector3();\r\n\r\n\t\t\t\t\tnormal.x = normals[ normalIndex ++ ];\r\n\t\t\t\t\tnormal.y = normals[ normalIndex ++ ];\r\n\t\t\t\t\tnormal.z = normals[ normalIndex ];\r\n\r\n\t\t\t\t\tface.vertexNormals.push( normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\tcolor = new THREE.Color( colors[ colorIndex ] );\r\n\t\t\t\tface.color = color;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < nVertices; i++ ) {\r\n\r\n\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tcolor = new THREE.Color( colors[ colorIndex ] );\r\n\t\t\t\t\tface.vertexColors.push( color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.faces.push( face );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction parseSkin() {\r\n\r\n\t\tvar i, l, x, y, z, w, a, b, c, d;\r\n\r\n\t\tif ( json.skinWeights ) {\r\n\r\n\t\t\tfor ( i = 0, l = json.skinWeights.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\tx = json.skinWeights[ i     ];\r\n\t\t\t\ty = json.skinWeights[ i + 1 ];\r\n\t\t\t\tz = 0;\r\n\t\t\t\tw = 0;\r\n\r\n\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.skinIndices ) {\r\n\r\n\t\t\tfor ( i = 0, l = json.skinIndices.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\ta = json.skinIndices[ i     ];\r\n\t\t\t\tb = json.skinIndices[ i + 1 ];\r\n\t\t\t\tc = 0;\r\n\t\t\t\td = 0;\r\n\r\n\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.bones = json.bones;\r\n\t\tgeometry.animation = json.animation;\r\n\r\n\t};\r\n\r\n\tfunction parseMorphing( scale ) {\r\n\r\n\t\tif ( json.morphTargets !== undefined ) {\r\n\r\n\t\t\tvar i, l, v, vl, dstVertices, srcVertices;\r\n\r\n\t\t\tfor ( i = 0, l = json.morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tgeometry.morphTargets[ i ] = {};\r\n\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\r\n\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\r\n\r\n\t\t\t\tdstVertices = geometry.morphTargets[ i ].vertices;\r\n\t\t\t\tsrcVertices = json.morphTargets [ i ].vertices;\r\n\r\n\t\t\t\tfor( v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\r\n\r\n\t\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\r\n\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\r\n\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\r\n\r\n\t\t\t\t\tdstVertices.push( vertex );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.morphColors !== undefined ) {\r\n\r\n\t\t\tvar i, l, c, cl, dstColors, srcColors, color;\r\n\r\n\t\t\tfor ( i = 0, l = json.morphColors.length; i < l; i++ ) {\r\n\r\n\t\t\t\tgeometry.morphColors[ i ] = {};\r\n\t\t\t\tgeometry.morphColors[ i ].name = json.morphColors[ i ].name;\r\n\t\t\t\tgeometry.morphColors[ i ].colors = [];\r\n\r\n\t\t\t\tdstColors = geometry.morphColors[ i ].colors;\r\n\t\t\t\tsrcColors = json.morphColors [ i ].colors;\r\n\r\n\t\t\t\tfor ( c = 0, cl = srcColors.length; c < cl; c += 3 ) {\r\n\r\n\t\t\t\t\tcolor = new THREE.Color( 0xffaa00 );\r\n\t\t\t\t\tcolor.setRGB( srcColors[ c ], srcColors[ c + 1 ], srcColors[ c + 2 ] );\r\n\t\t\t\t\tdstColors.push( color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar materials = this.initMaterials( json.materials, texturePath );\r\n\r\n\tif ( this.needsTangents( materials ) ) geometry.computeTangents();\r\n\r\n\tcallback( geometry, materials );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LoadingMonitor = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tvar loaded = 0;\r\n\tvar total = 0;\r\n\r\n\tvar onLoad = function ( event ) {\r\n\r\n\t\tloaded ++;\r\n\r\n\t\tscope.dispatchEvent( { type: 'progress', loaded: loaded, total: total } );\r\n\r\n\t\tif ( loaded === total ) {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'load' } );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.add = function ( loader ) {\r\n\r\n\t\ttotal ++;\r\n\r\n\t\tloader.addEventListener( 'load', onLoad, false );\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SceneLoader = function () {\r\n\r\n\tthis.onLoadStart = function () {};\r\n\tthis.onLoadProgress = function() {};\r\n\tthis.onLoadComplete = function () {};\r\n\r\n\tthis.callbackSync = function () {};\r\n\tthis.callbackProgress = function () {};\r\n\r\n\tthis.geometryHandlerMap = {};\r\n\tthis.hierarchyHandlerMap = {};\r\n\r\n\tthis.addGeometryHandler( \"ascii\", THREE.JSONLoader );\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.constructor = THREE.SceneLoader;\r\n\r\nTHREE.SceneLoader.prototype.load = function ( url, callbackFinished ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar xhr = new XMLHttpRequest();\r\n\r\n\txhr.onreadystatechange = function () {\r\n\r\n\t\tif ( xhr.readyState === 4 ) {\r\n\r\n\t\t\tif ( xhr.status === 200 || xhr.status === 0 ) {\r\n\r\n\t\t\t\tvar json = JSON.parse( xhr.responseText );\r\n\t\t\t\tscope.parse( json, callbackFinished, url );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( \"THREE.SceneLoader: Couldn't load [\" + url + \"] [\" + xhr.status + \"]\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\txhr.open( \"GET\", url, true );\r\n\txhr.send( null );\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.addGeometryHandler = function ( typeID, loaderClass ) {\r\n\r\n\tthis.geometryHandlerMap[ typeID ] = { \"loaderClass\": loaderClass };\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.addHierarchyHandler = function ( typeID, loaderClass ) {\r\n\r\n\tthis.hierarchyHandlerMap[ typeID ] = { \"loaderClass\": loaderClass };\r\n\r\n};\r\n\r\nTHREE.SceneLoader.prototype.parse = function ( json, callbackFinished, url ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar urlBase = THREE.Loader.prototype.extractUrlBase( url );\r\n\r\n\tvar geometry, material, camera, fog,\r\n\t\ttexture, images, color,\r\n\t\tlight, hex, intensity,\r\n\t\tcounter_models, counter_textures,\r\n\t\ttotal_models, total_textures,\r\n\t\tresult;\r\n\r\n\tvar target_array = [];\r\n\r\n\tvar data = json;\r\n\r\n\t// async geometry loaders\r\n\r\n\tfor ( var typeID in this.geometryHandlerMap ) {\r\n\r\n\t\tvar loaderClass = this.geometryHandlerMap[ typeID ][ \"loaderClass\" ];\r\n\t\tthis.geometryHandlerMap[ typeID ][ \"loaderObject\" ] = new loaderClass();\r\n\r\n\t}\r\n\r\n\t// async hierachy loaders\r\n\r\n\tfor ( var typeID in this.hierarchyHandlerMap ) {\r\n\r\n\t\tvar loaderClass = this.hierarchyHandlerMap[ typeID ][ \"loaderClass\" ];\r\n\t\tthis.hierarchyHandlerMap[ typeID ][ \"loaderObject\" ] = new loaderClass();\r\n\r\n\t}\r\n\r\n\tcounter_models = 0;\r\n\tcounter_textures = 0;\r\n\r\n\tresult = {\r\n\r\n\t\tscene: new THREE.Scene(),\r\n\t\tgeometries: {},\r\n\t\tface_materials: {},\r\n\t\tmaterials: {},\r\n\t\ttextures: {},\r\n\t\tobjects: {},\r\n\t\tcameras: {},\r\n\t\tlights: {},\r\n\t\tfogs: {},\r\n\t\tempties: {},\r\n\t\tgroups: {}\r\n\r\n\t};\r\n\r\n\tif ( data.transform ) {\r\n\r\n\t\tvar position = data.transform.position,\r\n\t\t\trotation = data.transform.rotation,\r\n\t\t\tscale = data.transform.scale;\r\n\r\n\t\tif ( position )\r\n\t\t\tresult.scene.position.set( position[ 0 ], position[ 1 ], position [ 2 ] );\r\n\r\n\t\tif ( rotation )\r\n\t\t\tresult.scene.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation [ 2 ] );\r\n\r\n\t\tif ( scale )\r\n\t\t\tresult.scene.scale.set( scale[ 0 ], scale[ 1 ], scale [ 2 ] );\r\n\r\n\t\tif ( position || rotation || scale ) {\r\n\r\n\t\t\tresult.scene.updateMatrix();\r\n\t\t\tresult.scene.updateMatrixWorld();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction get_url( source_url, url_type ) {\r\n\r\n\t\tif ( url_type == \"relativeToHTML\" ) {\r\n\r\n\t\t\treturn source_url;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn urlBase + \"/\" + source_url;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// toplevel loader function, delegates to handle_children\r\n\r\n\tfunction handle_objects() {\r\n\r\n\t\thandle_children( result.scene, data.objects );\r\n\r\n\t}\r\n\r\n\t// handle all the children from the loaded json and attach them to given parent\r\n\r\n\tfunction handle_children( parent, children ) {\r\n\r\n\t\tvar mat, dst, pos, rot, scl, quat;\r\n\r\n\t\tfor ( var objID in children ) {\r\n\r\n\t\t\t// check by id if child has already been handled,\r\n\t\t\t// if not, create new object\r\n\r\n\t\t\tif ( result.objects[ objID ] === undefined ) {\r\n\r\n\t\t\t\tvar objJSON = children[ objID ];\r\n\r\n\t\t\t\tvar object = null;\r\n\r\n\t\t\t\t// meshes\r\n\r\n\t\t\t\tif ( objJSON.type && ( objJSON.type in scope.hierarchyHandlerMap ) ) {\r\n\r\n\t\t\t\t\tif ( objJSON.loading === undefined ) {\r\n\r\n\t\t\t\t\t\tvar reservedTypes = { \"type\": 1, \"url\": 1, \"material\": 1,\r\n\t\t\t\t\t\t\t\t\t\t\t  \"position\": 1, \"rotation\": 1, \"scale\" : 1,\r\n\t\t\t\t\t\t\t\t\t\t\t  \"visible\": 1, \"children\": 1, \"properties\": 1,\r\n\t\t\t\t\t\t\t\t\t\t\t  \"skin\": 1, \"morph\": 1, \"mirroredLoop\": 1, \"duration\": 1 };\r\n\r\n\t\t\t\t\t\tvar loaderParameters = {};\r\n\r\n\t\t\t\t\t\tfor ( var parType in objJSON ) {\r\n\r\n\t\t\t\t\t\t\tif ( ! ( parType in reservedTypes ) ) {\r\n\r\n\t\t\t\t\t\t\t\tloaderParameters[ parType ] = objJSON[ parType ];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterial = result.materials[ objJSON.material ];\r\n\r\n\t\t\t\t\t\tobjJSON.loading = true;\r\n\r\n\t\t\t\t\t\tvar loader = scope.hierarchyHandlerMap[ objJSON.type ][ \"loaderObject\" ];\r\n\r\n\t\t\t\t\t\t// ColladaLoader\r\n\r\n\t\t\t\t\t\tif ( loader.options ) {\r\n\r\n\t\t\t\t\t\t\tloader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );\r\n\r\n\t\t\t\t\t\t// UTF8Loader\r\n\t\t\t\t\t\t// OBJLoader\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tloader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ), loaderParameters );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( objJSON.geometry !== undefined ) {\r\n\r\n\t\t\t\t\tgeometry = result.geometries[ objJSON.geometry ];\r\n\r\n\t\t\t\t\t// geometry already loaded\r\n\r\n\t\t\t\t\tif ( geometry ) {\r\n\r\n\t\t\t\t\t\tvar needsTangents = false;\r\n\r\n\t\t\t\t\t\tmaterial = result.materials[ objJSON.material ];\r\n\t\t\t\t\t\tneedsTangents = material instanceof THREE.ShaderMaterial;\r\n\r\n\t\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\t\trot = objJSON.rotation;\r\n\t\t\t\t\t\tscl = objJSON.scale;\r\n\t\t\t\t\t\tmat = objJSON.matrix;\r\n\t\t\t\t\t\tquat = objJSON.quaternion;\r\n\r\n\t\t\t\t\t\t// use materials from the model file\r\n\t\t\t\t\t\t// if there is no material specified in the object\r\n\r\n\t\t\t\t\t\tif ( ! objJSON.material ) {\r\n\r\n\t\t\t\t\t\t\tmaterial = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// use materials from the model file\r\n\t\t\t\t\t\t// if there is just empty face material\r\n\t\t\t\t\t\t// (must create new material as each model has its own face material)\r\n\r\n\t\t\t\t\t\tif ( ( material instanceof THREE.MeshFaceMaterial ) && material.materials.length === 0 ) {\r\n\r\n\t\t\t\t\t\t\tmaterial = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( material instanceof THREE.MeshFaceMaterial ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < material.materials.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tneedsTangents = needsTangents || ( material.materials[ i ] instanceof THREE.ShaderMaterial );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( needsTangents ) {\r\n\r\n\t\t\t\t\t\t\tgeometry.computeTangents();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( objJSON.skin ) {\r\n\r\n\t\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\t\t\t} else if ( objJSON.morph ) {\r\n\r\n\t\t\t\t\t\t\tobject = new THREE.MorphAnimMesh( geometry, material );\r\n\r\n\t\t\t\t\t\t\tif ( objJSON.duration !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.duration = objJSON.duration;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( objJSON.time !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.time = objJSON.time;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( objJSON.mirroredLoop !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.mirroredLoop = objJSON.mirroredLoop;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.computeMorphNormals();\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tobject.name = objID;\r\n\r\n\t\t\t\t\t\tif ( mat ) {\r\n\r\n\t\t\t\t\t\t\tobject.matrixAutoUpdate = false;\r\n\t\t\t\t\t\t\tobject.matrix.set(\r\n\t\t\t\t\t\t\t\tmat[0],  mat[1],  mat[2],  mat[3],\r\n\t\t\t\t\t\t\t\tmat[4],  mat[5],  mat[6],  mat[7],\r\n\t\t\t\t\t\t\t\tmat[8],  mat[9],  mat[10], mat[11],\r\n\t\t\t\t\t\t\t\tmat[12], mat[13], mat[14], mat[15]\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tobject.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\t\t\tif ( quat ) {\r\n\r\n\t\t\t\t\t\t\t\tobject.quaternion.set( quat[0], quat[1], quat[2], quat[3] );\r\n\t\t\t\t\t\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tobject.rotation.set( rot[0], rot[1], rot[2] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tobject.scale.set( scl[0], scl[1], scl[2] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tobject.visible = objJSON.visible;\r\n\t\t\t\t\t\tobject.castShadow = objJSON.castShadow;\r\n\t\t\t\t\t\tobject.receiveShadow = objJSON.receiveShadow;\r\n\r\n\t\t\t\t\t\tparent.add( object );\r\n\r\n\t\t\t\t\t\tresult.objects[ objID ] = object;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t// lights\r\n\r\n\t\t\t\t} else if ( objJSON.type === \"DirectionalLight\" || objJSON.type === \"PointLight\" || objJSON.type === \"AmbientLight\" ) {\r\n\r\n\t\t\t\t\thex = ( objJSON.color !== undefined ) ? objJSON.color : 0xffffff;\r\n\t\t\t\t\tintensity = ( objJSON.intensity !== undefined ) ? objJSON.intensity : 1;\r\n\r\n\t\t\t\t\tif ( objJSON.type === \"DirectionalLight\" ) {\r\n\r\n\t\t\t\t\t\tpos = objJSON.direction;\r\n\r\n\t\t\t\t\t\tlight = new THREE.DirectionalLight( hex, intensity );\r\n\t\t\t\t\t\tlight.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\t\tif ( objJSON.target ) {\r\n\r\n\t\t\t\t\t\t\ttarget_array.push( { \"object\": light, \"targetName\" : objJSON.target } );\r\n\r\n\t\t\t\t\t\t\t// kill existing default target\r\n\t\t\t\t\t\t\t// otherwise it gets added to scene when parent gets added\r\n\r\n\t\t\t\t\t\t\tlight.target = null;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( objJSON.type === \"PointLight\" ) {\r\n\r\n\t\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\t\tdst = objJSON.distance;\r\n\r\n\t\t\t\t\t\tlight = new THREE.PointLight( hex, intensity, dst );\r\n\t\t\t\t\t\tlight.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\t} else if ( objJSON.type === \"AmbientLight\" ) {\r\n\r\n\t\t\t\t\t\tlight = new THREE.AmbientLight( hex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tparent.add( light );\r\n\r\n\t\t\t\t\tlight.name = objID;\r\n\t\t\t\t\tresult.lights[ objID ] = light;\r\n\t\t\t\t\tresult.objects[ objID ] = light;\r\n\r\n\t\t\t\t// cameras\r\n\r\n\t\t\t\t} else if ( objJSON.type === \"PerspectiveCamera\" || objJSON.type === \"OrthographicCamera\" ) {\r\n\r\n\t\t\t\t\tif ( objJSON.type === \"PerspectiveCamera\" ) {\r\n\r\n\t\t\t\t\t\tcamera = new THREE.PerspectiveCamera( objJSON.fov, objJSON.aspect, objJSON.near, objJSON.far );\r\n\r\n\t\t\t\t\t} else if ( objJSON.type === \"OrthographicCamera\" ) {\r\n\r\n\t\t\t\t\t\tcamera = new THREE.OrthographicCamera( objJSON.left, objJSON.right, objJSON.top, objJSON.bottom, objJSON.near, objJSON.far );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\tcamera.position.set( pos[0], pos[1], pos[2] );\r\n\t\t\t\t\tparent.add( camera );\r\n\r\n\t\t\t\t\tcamera.name = objID;\r\n\t\t\t\t\tresult.cameras[ objID ] = camera;\r\n\t\t\t\t\tresult.objects[ objID ] = camera;\r\n\r\n\t\t\t\t// pure Object3D\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tpos = objJSON.position;\r\n\t\t\t\t\trot = objJSON.rotation;\r\n\t\t\t\t\tscl = objJSON.scale;\r\n\t\t\t\t\tquat = objJSON.quaternion;\r\n\r\n\t\t\t\t\tobject = new THREE.Object3D();\r\n\t\t\t\t\tobject.name = objID;\r\n\t\t\t\t\tobject.position.set( pos[0], pos[1], pos[2] );\r\n\r\n\t\t\t\t\tif ( quat ) {\r\n\r\n\t\t\t\t\t\tobject.quaternion.set( quat[0], quat[1], quat[2], quat[3] );\r\n\t\t\t\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject.rotation.set( rot[0], rot[1], rot[2] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.scale.set( scl[0], scl[1], scl[2] );\r\n\t\t\t\t\tobject.visible = ( objJSON.visible !== undefined ) ? objJSON.visible : false;\r\n\r\n\t\t\t\t\tparent.add( object );\r\n\r\n\t\t\t\t\tresult.objects[ objID ] = object;\r\n\t\t\t\t\tresult.empties[ objID ] = object;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( object ) {\r\n\r\n\t\t\t\t\tif ( objJSON.properties !== undefined )  {\r\n\r\n\t\t\t\t\t\tfor ( var key in objJSON.properties ) {\r\n\r\n\t\t\t\t\t\t\tvar value = objJSON.properties[ key ];\r\n\t\t\t\t\t\t\tobject.properties[ key ] = value;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( objJSON.groups !== undefined ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < objJSON.groups.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar groupID = objJSON.groups[ i ];\r\n\r\n\t\t\t\t\t\t\tif ( result.groups[ groupID ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tresult.groups[ groupID ] = [];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tresult.groups[ groupID ].push( objID );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( objJSON.children !== undefined ) {\r\n\r\n\t\t\t\t\t\thandle_children( object, objJSON.children );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction handle_mesh( geo, mat, id ) {\r\n\r\n\t\tresult.geometries[ id ] = geo;\r\n\t\tresult.face_materials[ id ] = mat;\r\n\t\thandle_objects();\r\n\r\n\t};\r\n\r\n\tfunction handle_hierarchy( node, id, parent, material, obj ) {\r\n\r\n\t\tvar p = obj.position;\r\n\t\tvar r = obj.rotation;\r\n\t\tvar q = obj.quaternion;\r\n\t\tvar s = obj.scale;\r\n\r\n\t\tnode.position.set( p[0], p[1], p[2] );\r\n\r\n\t\tif ( q ) {\r\n\r\n\t\t\tnode.quaternion.set( q[0], q[1], q[2], q[3] );\r\n\t\t\tnode.useQuaternion = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnode.rotation.set( r[0], r[1], r[2] );\r\n\r\n\t\t}\r\n\r\n\t\tnode.scale.set( s[0], s[1], s[2] );\r\n\r\n\t\t// override children materials\r\n\t\t// if object material was specified in JSON explicitly\r\n\r\n\t\tif ( material ) {\r\n\r\n\t\t\tnode.traverse( function ( child )  {\r\n\r\n\t\t\t\tchild.material = material;\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\t// override children visibility\r\n\t\t// with root node visibility as specified in JSON\r\n\r\n\t\tvar visible = ( obj.visible !== undefined ) ? obj.visible : true;\r\n\r\n\t\tnode.traverse( function ( child )  {\r\n\r\n\t\t\tchild.visible = visible;\r\n\r\n\t\t} );\r\n\r\n\t\tparent.add( node );\r\n\r\n\t\tnode.name = id;\r\n\r\n\t\tresult.objects[ id ] = node;\r\n\t\thandle_objects();\r\n\r\n\t};\r\n\r\n\tfunction create_callback_geometry( id ) {\r\n\r\n\t\treturn function( geo, mat ) {\r\n\r\n\t\t\thandle_mesh( geo, mat, id );\r\n\r\n\t\t\tcounter_models -= 1;\r\n\r\n\t\t\tscope.onLoadComplete();\r\n\r\n\t\t\tasync_callback_gate();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction create_callback_hierachy( id, parent, material, obj ) {\r\n\r\n\t\treturn function( event ) {\r\n\r\n\t\t\tvar result;\r\n\r\n\t\t\t// loaders which use EventDispatcher\r\n\r\n\t\t\tif ( event.content ) {\r\n\r\n\t\t\t\tresult = event.content;\r\n\r\n\t\t\t// ColladaLoader\r\n\r\n\t\t\t} else if ( event.dae ) {\r\n\r\n\t\t\t\tresult = event.scene;\r\n\r\n\r\n\t\t\t// UTF8Loader\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = event;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thandle_hierarchy( result, id, parent, material, obj );\r\n\r\n\t\t\tcounter_models -= 1;\r\n\r\n\t\t\tscope.onLoadComplete();\r\n\r\n\t\t\tasync_callback_gate();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction create_callback_embed( id ) {\r\n\r\n\t\treturn function( geo, mat ) {\r\n\r\n\t\t\tresult.geometries[ id ] = geo;\r\n\t\t\tresult.face_materials[ id ] = mat;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction async_callback_gate() {\r\n\r\n\t\tvar progress = {\r\n\r\n\t\t\ttotalModels : total_models,\r\n\t\t\ttotalTextures : total_textures,\r\n\t\t\tloadedModels : total_models - counter_models,\r\n\t\t\tloadedTextures : total_textures - counter_textures\r\n\r\n\t\t};\r\n\r\n\t\tscope.callbackProgress( progress, result );\r\n\r\n\t\tscope.onLoadProgress();\r\n\r\n\t\tif ( counter_models === 0 && counter_textures === 0 ) {\r\n\r\n\t\t\tfinalize();\r\n\t\t\tcallbackFinished( result );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction finalize() {\r\n\r\n\t\t// take care of targets which could be asynchronously loaded objects\r\n\r\n\t\tfor ( var i = 0; i < target_array.length; i ++ ) {\r\n\r\n\t\t\tvar ta = target_array[ i ];\r\n\r\n\t\t\tvar target = result.objects[ ta.targetName ];\r\n\r\n\t\t\tif ( target ) {\r\n\r\n\t\t\t\tta.object.target = target;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// if there was error and target of specified name doesn't exist in the scene file\r\n\t\t\t\t// create instead dummy target\r\n\t\t\t\t// (target must be added to scene explicitly as parent is already added)\r\n\r\n\t\t\t\tta.object.target = new THREE.Object3D();\r\n\t\t\t\tresult.scene.add( ta.object.target );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tta.object.target.properties.targetInverse = ta.object;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar callbackTexture = function ( count ) {\r\n\r\n\t\tcounter_textures -= count;\r\n\t\tasync_callback_gate();\r\n\r\n\t\tscope.onLoadComplete();\r\n\r\n\t};\r\n\r\n\t// must use this instead of just directly calling callbackTexture\r\n\t// because of closure in the calling context loop\r\n\r\n\tvar generateTextureCallback = function ( count ) {\r\n\r\n\t\treturn function() {\r\n\r\n\t\t\tcallbackTexture( count );\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t// first go synchronous elements\r\n\r\n\t// fogs\r\n\r\n\tvar fogID, fogJSON;\r\n\r\n\tfor ( fogID in data.fogs ) {\r\n\r\n\t\tfogJSON = data.fogs[ fogID ];\r\n\r\n\t\tif ( fogJSON.type === \"linear\" ) {\r\n\r\n\t\t\tfog = new THREE.Fog( 0x000000, fogJSON.near, fogJSON.far );\r\n\r\n\t\t} else if ( fogJSON.type === \"exp2\" ) {\r\n\r\n\t\t\tfog = new THREE.FogExp2( 0x000000, fogJSON.density );\r\n\r\n\t\t}\r\n\r\n\t\tcolor = fogJSON.color;\r\n\t\tfog.color.setRGB( color[0], color[1], color[2] );\r\n\r\n\t\tresult.fogs[ fogID ] = fog;\r\n\r\n\t}\r\n\r\n\t// now come potentially asynchronous elements\r\n\r\n\t// geometries\r\n\r\n\t// count how many geometries will be loaded asynchronously\r\n\r\n\tvar geoID, geoJSON;\r\n\r\n\tfor ( geoID in data.geometries ) {\r\n\r\n\t\tgeoJSON = data.geometries[ geoID ];\r\n\r\n\t\tif ( geoJSON.type in this.geometryHandlerMap ) {\r\n\r\n\t\t\tcounter_models += 1;\r\n\r\n\t\t\tscope.onLoadStart();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// count how many hierarchies will be loaded asynchronously\r\n\r\n\tvar objID, objJSON;\r\n\r\n\tfor ( objID in data.objects ) {\r\n\r\n\t\tobjJSON = data.objects[ objID ];\r\n\r\n\t\tif ( objJSON.type && ( objJSON.type in this.hierarchyHandlerMap ) ) {\r\n\r\n\t\t\tcounter_models += 1;\r\n\r\n\t\t\tscope.onLoadStart();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttotal_models = counter_models;\r\n\r\n\tfor ( geoID in data.geometries ) {\r\n\r\n\t\tgeoJSON = data.geometries[ geoID ];\r\n\r\n\t\tif ( geoJSON.type === \"cube\" ) {\r\n\r\n\t\t\tgeometry = new THREE.CubeGeometry( geoJSON.width, geoJSON.height, geoJSON.depth, geoJSON.widthSegments, geoJSON.heightSegments, geoJSON.depthSegments );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"plane\" ) {\r\n\r\n\t\t\tgeometry = new THREE.PlaneGeometry( geoJSON.width, geoJSON.height, geoJSON.widthSegments, geoJSON.heightSegments );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"sphere\" ) {\r\n\r\n\t\t\tgeometry = new THREE.SphereGeometry( geoJSON.radius, geoJSON.widthSegments, geoJSON.heightSegments );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"cylinder\" ) {\r\n\r\n\t\t\tgeometry = new THREE.CylinderGeometry( geoJSON.topRad, geoJSON.botRad, geoJSON.height, geoJSON.radSegs, geoJSON.heightSegs );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"torus\" ) {\r\n\r\n\t\t\tgeometry = new THREE.TorusGeometry( geoJSON.radius, geoJSON.tube, geoJSON.segmentsR, geoJSON.segmentsT );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type === \"icosahedron\" ) {\r\n\r\n\t\t\tgeometry = new THREE.IcosahedronGeometry( geoJSON.radius, geoJSON.subdivisions );\r\n\t\t\tresult.geometries[ geoID ] = geometry;\r\n\r\n\t\t} else if ( geoJSON.type in this.geometryHandlerMap ) {\r\n\r\n\t\t\tvar loaderParameters = {};\r\n\r\n\t\t\tfor ( var parType in geoJSON ) {\r\n\r\n\t\t\t\tif ( parType !== \"type\" && parType !== \"url\" ) {\r\n\r\n\t\t\t\t\tloaderParameters[ parType ] = geoJSON[ parType ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar loader = this.geometryHandlerMap[ geoJSON.type ][ \"loaderObject\" ];\r\n\t\t\tloader.load( get_url( geoJSON.url, data.urlBaseType ), create_callback_geometry( geoID ), loaderParameters );\r\n\r\n\t\t} else if ( geoJSON.type === \"embedded\" ) {\r\n\r\n\t\t\tvar modelJson = data.embeds[ geoJSON.id ],\r\n\t\t\t\ttexture_path = \"\";\r\n\r\n\t\t\t// pass metadata along to jsonLoader so it knows the format version\r\n\r\n\t\t\tmodelJson.metadata = data.metadata;\r\n\r\n\t\t\tif ( modelJson ) {\r\n\r\n\t\t\t\tvar jsonLoader = this.geometryHandlerMap[ \"ascii\" ][ \"loaderObject\" ];\r\n\t\t\t\tjsonLoader.createModel( modelJson, create_callback_embed( geoID ), texture_path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// textures\r\n\r\n\t// count how many textures will be loaded asynchronously\r\n\r\n\tvar textureID, textureJSON;\r\n\r\n\tfor ( textureID in data.textures ) {\r\n\r\n\t\ttextureJSON = data.textures[ textureID ];\r\n\r\n\t\tif ( textureJSON.url instanceof Array ) {\r\n\r\n\t\t\tcounter_textures += textureJSON.url.length;\r\n\r\n\t\t\tfor( var n = 0; n < textureJSON.url.length; n ++ ) {\r\n\r\n\t\t\t\tscope.onLoadStart();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcounter_textures += 1;\r\n\r\n\t\t\tscope.onLoadStart();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttotal_textures = counter_textures;\r\n\r\n\tfor ( textureID in data.textures ) {\r\n\r\n\t\ttextureJSON = data.textures[ textureID ];\r\n\r\n\t\tif ( textureJSON.mapping !== undefined && THREE[ textureJSON.mapping ] !== undefined  ) {\r\n\r\n\t\t\ttextureJSON.mapping = new THREE[ textureJSON.mapping ]();\r\n\r\n\t\t}\r\n\r\n\t\tif ( textureJSON.url instanceof Array ) {\r\n\r\n\t\t\tvar count = textureJSON.url.length;\r\n\t\t\tvar url_array = [];\r\n\r\n\t\t\tfor( var i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\turl_array[ i ] = get_url( textureJSON.url[ i ], data.urlBaseType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar isCompressed = url_array[ 0 ].endsWith( \".dds\" );\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadCompressedTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar isCompressed = textureJSON.url.toLowerCase().endsWith( \".dds\" );\r\n\t\t\tvar fullUrl = get_url( textureJSON.url, data.urlBaseType );\r\n\t\t\tvar textureCallback = generateTextureCallback( 1 );\r\n\r\n\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadCompressedTexture( fullUrl, textureJSON.mapping, textureCallback );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttexture = THREE.ImageUtils.loadTexture( fullUrl, textureJSON.mapping, textureCallback );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( THREE[ textureJSON.minFilter ] !== undefined )\r\n\t\t\t\ttexture.minFilter = THREE[ textureJSON.minFilter ];\r\n\r\n\t\t\tif ( THREE[ textureJSON.magFilter ] !== undefined )\r\n\t\t\t\ttexture.magFilter = THREE[ textureJSON.magFilter ];\r\n\r\n\t\t\tif ( textureJSON.anisotropy ) texture.anisotropy = textureJSON.anisotropy;\r\n\r\n\t\t\tif ( textureJSON.repeat ) {\r\n\r\n\t\t\t\ttexture.repeat.set( textureJSON.repeat[ 0 ], textureJSON.repeat[ 1 ] );\r\n\r\n\t\t\t\tif ( textureJSON.repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\tif ( textureJSON.repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureJSON.offset ) {\r\n\r\n\t\t\t\ttexture.offset.set( textureJSON.offset[ 0 ], textureJSON.offset[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// handle wrap after repeat so that default repeat can be overriden\r\n\r\n\t\t\tif ( textureJSON.wrap ) {\r\n\r\n\t\t\t\tvar wrapMap = {\r\n\t\t\t\t\"repeat\" \t: THREE.RepeatWrapping,\r\n\t\t\t\t\"mirror\"\t: THREE.MirroredRepeatWrapping\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( wrapMap[ textureJSON.wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ textureJSON.wrap[ 0 ] ];\r\n\t\t\t\tif ( wrapMap[ textureJSON.wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ textureJSON.wrap[ 1 ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tresult.textures[ textureID ] = texture;\r\n\r\n\t}\r\n\r\n\t// materials\r\n\r\n\tvar matID, matJSON;\r\n\tvar parID;\r\n\r\n\tfor ( matID in data.materials ) {\r\n\r\n\t\tmatJSON = data.materials[ matID ];\r\n\r\n\t\tfor ( parID in matJSON.parameters ) {\r\n\r\n\t\t\tif ( parID === \"envMap\" || parID === \"map\" || parID === \"lightMap\" || parID === \"bumpMap\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = result.textures[ matJSON.parameters[ parID ] ];\r\n\r\n\t\t\t} else if ( parID === \"shading\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = ( matJSON.parameters[ parID ] === \"flat\" ) ? THREE.FlatShading : THREE.SmoothShading;\r\n\r\n\t\t\t} else if ( parID === \"side\" ) {\r\n\r\n\t\t\t\tif ( matJSON.parameters[ parID ] == \"double\" ) {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.DoubleSide;\r\n\r\n\t\t\t\t} else if ( matJSON.parameters[ parID ] == \"back\" ) {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.BackSide;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.FrontSide;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( parID === \"blending\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.NormalBlending;\r\n\r\n\t\t\t} else if ( parID === \"combine\" ) {\r\n\r\n\t\t\t\tmatJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.MultiplyOperation;\r\n\r\n\t\t\t} else if ( parID === \"vertexColors\" ) {\r\n\r\n\t\t\t\tif ( matJSON.parameters[ parID ] == \"face\" ) {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.FaceColors;\r\n\r\n\t\t\t\t// default to vertex colors if \"vertexColors\" is anything else face colors or 0 / null / false\r\n\r\n\t\t\t\t} else if ( matJSON.parameters[ parID ] )   {\r\n\r\n\t\t\t\t\tmatJSON.parameters[ parID ] = THREE.VertexColors;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( parID === \"wrapRGB\" ) {\r\n\r\n\t\t\t\tvar v3 = matJSON.parameters[ parID ];\r\n\t\t\t\tmatJSON.parameters[ parID ] = new THREE.Vector3( v3[ 0 ], v3[ 1 ], v3[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( matJSON.parameters.opacity !== undefined && matJSON.parameters.opacity < 1.0 ) {\r\n\r\n\t\t\tmatJSON.parameters.transparent = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( matJSON.parameters.normalMap ) {\r\n\r\n\t\t\tvar shader = THREE.ShaderLib[ \"normalmap\" ];\r\n\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\t\tvar diffuse = matJSON.parameters.color;\r\n\t\t\tvar specular = matJSON.parameters.specular;\r\n\t\t\tvar ambient = matJSON.parameters.ambient;\r\n\t\t\tvar shininess = matJSON.parameters.shininess;\r\n\r\n\t\t\tuniforms[ \"tNormal\" ].value = result.textures[ matJSON.parameters.normalMap ];\r\n\r\n\t\t\tif ( matJSON.parameters.normalScale ) {\r\n\r\n\t\t\t\tuniforms[ \"uNormalScale\" ].value.set( matJSON.parameters.normalScale[ 0 ], matJSON.parameters.normalScale[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.map ) {\r\n\r\n\t\t\t\tuniforms[ \"tDiffuse\" ].value = matJSON.parameters.map;\r\n\t\t\t\tuniforms[ \"enableDiffuse\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.envMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tCube\" ].value = matJSON.parameters.envMap;\r\n\t\t\t\tuniforms[ \"enableReflection\" ].value = true;\r\n\t\t\t\tuniforms[ \"uReflectivity\" ].value = matJSON.parameters.reflectivity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.lightMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tAO\" ].value = matJSON.parameters.lightMap;\r\n\t\t\t\tuniforms[ \"enableAO\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.specularMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tSpecular\" ].value = result.textures[ matJSON.parameters.specularMap ];\r\n\t\t\t\tuniforms[ \"enableSpecular\" ].value = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( matJSON.parameters.displacementMap ) {\r\n\r\n\t\t\t\tuniforms[ \"tDisplacement\" ].value = result.textures[ matJSON.parameters.displacementMap ];\r\n\t\t\t\tuniforms[ \"enableDisplacement\" ].value = true;\r\n\r\n\t\t\t\tuniforms[ \"uDisplacementBias\" ].value = matJSON.parameters.displacementBias;\r\n\t\t\t\tuniforms[ \"uDisplacementScale\" ].value = matJSON.parameters.displacementScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms[ \"uDiffuseColor\" ].value.setHex( diffuse );\r\n\t\t\tuniforms[ \"uSpecularColor\" ].value.setHex( specular );\r\n\t\t\tuniforms[ \"uAmbientColor\" ].value.setHex( ambient );\r\n\r\n\t\t\tuniforms[ \"uShininess\" ].value = shininess;\r\n\r\n\t\t\tif ( matJSON.parameters.opacity ) {\r\n\r\n\t\t\t\tuniforms[ \"uOpacity\" ].value = matJSON.parameters.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };\r\n\r\n\t\t\tmaterial = new THREE.ShaderMaterial( parameters );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaterial = new THREE[ matJSON.type ]( matJSON.parameters );\r\n\r\n\t\t}\r\n\r\n\t\tresult.materials[ matID ] = material;\r\n\r\n\t}\r\n\r\n\t// second pass through all materials to initialize MeshFaceMaterials\r\n\t// that could be referring to other materials out of order\r\n\r\n\tfor ( matID in data.materials ) {\r\n\r\n\t\tmatJSON = data.materials[ matID ];\r\n\r\n\t\tif ( matJSON.parameters.materials ) {\r\n\r\n\t\t\tvar materialArray = [];\r\n\r\n\t\t\tfor ( var i = 0; i < matJSON.parameters.materials.length; i ++ ) {\r\n\r\n\t\t\t\tvar label = matJSON.parameters.materials[ i ];\r\n\t\t\t\tmaterialArray.push( result.materials[ label ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult.materials[ matID ].materials = materialArray;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// objects ( synchronous init of procedural primitives )\r\n\r\n\thandle_objects();\r\n\r\n\t// defaults\r\n\r\n\tif ( result.cameras && data.defaults.camera ) {\r\n\r\n\t\tresult.currentCamera = result.cameras[ data.defaults.camera ];\r\n\r\n\t}\r\n\r\n\tif ( result.fogs && data.defaults.fog ) {\r\n\r\n\t\tresult.scene.fog = result.fogs[ data.defaults.fog ];\r\n\r\n\t}\r\n\r\n\t// synchronous callback\r\n\r\n\tscope.callbackSync( result );\r\n\r\n\t// just in case there are no async elements\r\n\r\n\tasync_callback_gate();\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.TextureLoader = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.crossOrigin = null;\r\n\r\n};\r\n\r\nTHREE.TextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.TextureLoader,\r\n\r\n\tload: function ( url ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar image = new Image();\r\n\r\n\t\timage.addEventListener( 'load', function () {\r\n\r\n\t\t\tvar texture = new THREE.Texture( image );\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'load', content: texture } );\r\n\r\n\t\t}, false );\r\n\r\n\t\timage.addEventListener( 'error', function () {\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'error', message: 'Couldn\\'t load URL [' + url + ']' } );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( scope.crossOrigin ) image.crossOrigin = scope.crossOrigin;\r\n\r\n\t\timage.src = url;\r\n\r\n\t}\r\n\r\n}\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Material = function () {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.MaterialIdCount ++;\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.side = THREE.FrontSide;\r\n\r\n\tthis.opacity = 1;\r\n\tthis.transparent = false;\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.blendSrc = THREE.SrcAlphaFactor;\r\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\r\n\tthis.blendEquation = THREE.AddEquation;\r\n\r\n\tthis.depthTest = true;\r\n\tthis.depthWrite = true;\r\n\r\n\tthis.polygonOffset = false;\r\n\tthis.polygonOffsetFactor = 0;\r\n\tthis.polygonOffsetUnits = 0;\r\n\r\n\tthis.alphaTest = 0;\r\n\r\n\tthis.overdraw = false; // Boolean for fixing antialiasing gaps in CanvasRenderer\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis.needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.Material.prototype.setValues = function ( values ) {\r\n\r\n\tif ( values === undefined ) return;\r\n\r\n\tfor ( var key in values ) {\r\n\r\n\t\tvar newValue = values[ key ];\r\n\r\n\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\tif ( key in this ) {\r\n\r\n\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue instanceof THREE.Color && newValue instanceof THREE.Color ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else if ( currentValue instanceof THREE.Color ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Material.prototype.clone = function ( material ) {\r\n\r\n\tif ( material === undefined ) material = new THREE.Material();\r\n\r\n\tmaterial.name = this.name;\r\n\r\n\tmaterial.side = this.side;\r\n\r\n\tmaterial.opacity = this.opacity;\r\n\tmaterial.transparent = this.transparent;\r\n\r\n\tmaterial.blending = this.blending;\r\n\r\n\tmaterial.blendSrc = this.blendSrc;\r\n\tmaterial.blendDst = this.blendDst;\r\n\tmaterial.blendEquation = this.blendEquation;\r\n\r\n\tmaterial.depthTest = this.depthTest;\r\n\tmaterial.depthWrite = this.depthWrite;\r\n\r\n\tmaterial.polygonOffset = this.polygonOffset;\r\n\tmaterial.polygonOffsetFactor = this.polygonOffsetFactor;\r\n\tmaterial.polygonOffsetUnits = this.polygonOffsetUnits;\r\n\r\n\tmaterial.alphaTest = this.alphaTest;\r\n\r\n\tmaterial.overdraw = this.overdraw;\r\n\r\n\tmaterial.visible = this.visible;\r\n\r\n\treturn material;\r\n\r\n};\r\n\r\nTHREE.Material.prototype.dispose = function () {\r\n\r\n\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n};\r\n\r\nTHREE.MaterialIdCount = 0;\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  linewidth: <float>,\r\n *  linecap: \"round\",\r\n *  linejoin: \"round\",\r\n *\r\n *  vertexColors: <bool>\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.LineBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\tthis.linecap = 'round';\r\n\tthis.linejoin = 'round';\r\n\r\n\tthis.vertexColors = false;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.LineBasicMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.LineBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.linewidth = this.linewidth;\r\n\tmaterial.linecap = this.linecap;\r\n\tmaterial.linejoin = this.linejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  linewidth: <float>,\r\n *\r\n *  scale: <float>,\r\n *  dashSize: <float>,\r\n *  gapSize: <float>,\r\n *\r\n *  vertexColors: <bool>\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.LineDashedMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.scale = 1;\r\n\tthis.dashSize = 3;\r\n\tthis.gapSize = 1;\r\n\r\n\tthis.vertexColors = false;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.LineDashedMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.LineDashedMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.linewidth = this.linewidth;\r\n\r\n\tmaterial.scale = this.scale;\r\n\tmaterial.dashSize = this.dashSize;\r\n\tmaterial.gapSize = this.gapSize;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshBasicMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.lightMap = this.lightMap;\r\n\r\n\tmaterial.specularMap = this.specularMap;\r\n\r\n\tmaterial.envMap = this.envMap;\r\n\tmaterial.combine = this.combine;\r\n\tmaterial.reflectivity = this.reflectivity;\r\n\tmaterial.refractionRatio = this.refractionRatio;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\r\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  ambient: <hex>,\r\n *  emissive: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshLambertMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.ambient = new THREE.Color( 0xffffff );\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\r\n\tthis.wrapAround = false;\r\n\tthis.wrapRGB = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshLambertMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshLambertMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.ambient.copy( this.ambient );\r\n\tmaterial.emissive.copy( this.emissive );\r\n\r\n\tmaterial.wrapAround = this.wrapAround;\r\n\tmaterial.wrapRGB.copy( this.wrapRGB );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.lightMap = this.lightMap;\r\n\r\n\tmaterial.specularMap = this.specularMap;\r\n\r\n\tmaterial.envMap = this.envMap;\r\n\tmaterial.combine = this.combine;\r\n\tmaterial.reflectivity = this.reflectivity;\r\n\tmaterial.refractionRatio = this.refractionRatio;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\r\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\tmaterial.morphNormals = this.morphNormals;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  ambient: <hex>,\r\n *  emissive: <hex>,\r\n *  specular: <hex>,\r\n *  shininess: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshPhongMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.ambient = new THREE.Color( 0xffffff );\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.specular = new THREE.Color( 0x111111 );\r\n\tthis.shininess = 30;\r\n\r\n\tthis.metal = false;\r\n\tthis.perPixel = true;\r\n\r\n\tthis.wrapAround = false;\r\n\tthis.wrapRGB = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\r\n\tthis.bumpMap = null;\r\n\tthis.bumpScale = 1;\r\n\r\n\tthis.normalMap = null;\r\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshPhongMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshPhongMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.ambient.copy( this.ambient );\r\n\tmaterial.emissive.copy( this.emissive );\r\n\tmaterial.specular.copy( this.specular );\r\n\tmaterial.shininess = this.shininess;\r\n\r\n\tmaterial.metal = this.metal;\r\n\tmaterial.perPixel = this.perPixel;\r\n\r\n\tmaterial.wrapAround = this.wrapAround;\r\n\tmaterial.wrapRGB.copy( this.wrapRGB );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.lightMap = this.lightMap;\r\n\r\n\tmaterial.bumpMap = this.bumpMap;\r\n\tmaterial.bumpScale = this.bumpScale;\r\n\r\n\tmaterial.normalMap = this.normalMap;\r\n\tmaterial.normalScale.copy( this.normalScale );\r\n\r\n\tmaterial.specularMap = this.specularMap;\r\n\r\n\tmaterial.envMap = this.envMap;\r\n\tmaterial.combine = this.combine;\r\n\tmaterial.reflectivity = this.reflectivity;\r\n\tmaterial.refractionRatio = this.refractionRatio;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\r\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\tmaterial.morphNormals = this.morphNormals;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshDepthMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshDepthMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.LineBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  shading: THREE.FlatShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshNormalMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this, parameters );\r\n\r\n\tthis.shading = THREE.FlatShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.MeshNormalMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.MeshNormalMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MeshFaceMaterial = function ( materials ) {\r\n\r\n\tthis.materials = materials instanceof Array ? materials : [];\r\n\r\n};\r\n\r\nTHREE.MeshFaceMaterial.prototype.clone = function () {\r\n\r\n\treturn new THREE.MeshFaceMaterial( this.materials.slice( 0 ) );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  size: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  vertexColors: <bool>,\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.ParticleBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.size = 1;\r\n\tthis.sizeAttenuation = true;\r\n\r\n\tthis.vertexColors = false;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.ParticleBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.ParticleBasicMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.ParticleBasicMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.size = this.size;\r\n\tmaterial.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  program: <function>,\r\n *  opacity: <float>,\r\n *  blending: THREE.NormalBlending\r\n * }\r\n */\r\n\r\nTHREE.ParticleCanvasMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.program = function ( context, color ) {};\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.ParticleCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.ParticleCanvasMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.ParticleCanvasMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.program = this.program;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  fragmentShader: <string>,\r\n *  vertexShader: <string>,\r\n *\r\n *  uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } },\r\n *\r\n *  defines: { \"label\" : \"value\" },\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  lights: <bool>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.ShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.fragmentShader = \"void main() {}\";\r\n\tthis.vertexShader = \"void main() {}\";\r\n\tthis.uniforms = {};\r\n\tthis.defines = {};\r\n\tthis.attributes = null;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false; // set to use scene fog\r\n\r\n\tthis.lights = false; // set to use scene lights\r\n\r\n\tthis.vertexColors = THREE.NoColors; // set to use \"color\" attribute stream\r\n\r\n\tthis.skinning = false; // set to use skinning attribute streams\r\n\r\n\tthis.morphTargets = false; // set to use morph targets\r\n\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.ShaderMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.ShaderMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.fragmentShader = this.fragmentShader;\r\n\tmaterial.vertexShader = this.vertexShader;\r\n\r\n\tmaterial.uniforms = THREE.UniformsUtils.clone( this.uniforms );\r\n\r\n\tmaterial.attributes = this.attributes;\r\n\tmaterial.defines = this.defines;\r\n\r\n\tmaterial.shading = this.shading;\r\n\r\n\tmaterial.wireframe = this.wireframe;\r\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\tmaterial.lights = this.lights;\r\n\r\n\tmaterial.vertexColors = this.vertexColors;\r\n\r\n\tmaterial.skinning = this.skinning;\r\n\r\n\tmaterial.morphTargets = this.morphTargets;\r\n\tmaterial.morphNormals = this.morphNormals;\r\n\r\n\treturn material;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  useScreenCoordinates: <bool>,\r\n *  sizeAttenuation: <bool>,\r\n *  scaleByViewport: <bool>,\r\n *  alignment: THREE.SpriteAlignment.center,\r\n *\r\n *\tuvOffset: new THREE.Vector2(),\r\n *\tuvScale: new THREE.Vector2(),\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.SpriteMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\t// defaults\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.map = new THREE.Texture();\r\n\r\n\tthis.useScreenCoordinates = true;\r\n\tthis.depthTest = !this.useScreenCoordinates;\r\n\tthis.sizeAttenuation = !this.useScreenCoordinates;\r\n\tthis.scaleByViewport = !this.sizeAttenuation;\r\n\tthis.alignment = THREE.SpriteAlignment.center.clone();\r\n\r\n\tthis.fog = false;\r\n\r\n\tthis.uvOffset = new THREE.Vector2( 0, 0 );\r\n\tthis.uvScale  = new THREE.Vector2( 1, 1 );\r\n\r\n\t// set parameters\r\n\r\n\tthis.setValues( parameters );\r\n\r\n\t// override coupled defaults if not specified explicitly by parameters\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tif ( parameters.depthTest === undefined ) this.depthTest = !this.useScreenCoordinates;\r\n\tif ( parameters.sizeAttenuation === undefined ) this.sizeAttenuation = !this.useScreenCoordinates;\r\n\tif ( parameters.scaleByViewport === undefined ) this.scaleByViewport = !this.sizeAttenuation;\r\n\r\n};\r\n\r\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\r\nTHREE.SpriteMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.SpriteMaterial();\r\n\r\n\tTHREE.Material.prototype.clone.call( this, material );\r\n\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.map = this.map;\r\n\r\n\tmaterial.useScreenCoordinates = this.useScreenCoordinates;\r\n\tmaterial.sizeAttenuation = this.sizeAttenuation;\r\n\tmaterial.scaleByViewport = this.scaleByViewport;\r\n\tmaterial.alignment.copy( this.alignment );\r\n\r\n\tmaterial.uvOffset.copy( this.uvOffset );\r\n\tmaterial.uvScale.copy( this.uvScale );\r\n\r\n\tmaterial.fog = this.fog;\r\n\r\n\treturn material;\r\n\r\n};\r\n\r\n// Alignment enums\r\n\r\nTHREE.SpriteAlignment = {};\r\nTHREE.SpriteAlignment.topLeft = new THREE.Vector2( 1, -1 );\r\nTHREE.SpriteAlignment.topCenter = new THREE.Vector2( 0, -1 );\r\nTHREE.SpriteAlignment.topRight = new THREE.Vector2( -1, -1 );\r\nTHREE.SpriteAlignment.centerLeft = new THREE.Vector2( 1, 0 );\r\nTHREE.SpriteAlignment.center = new THREE.Vector2( 0, 0 );\r\nTHREE.SpriteAlignment.centerRight = new THREE.Vector2( -1, 0 );\r\nTHREE.SpriteAlignment.bottomLeft = new THREE.Vector2( 1, 1 );\r\nTHREE.SpriteAlignment.bottomCenter = new THREE.Vector2( 0, 1 );\r\nTHREE.SpriteAlignment.bottomRight = new THREE.Vector2( -1, 1 );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.id = THREE.TextureIdCount ++;\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.image = image;\r\n\tthis.mipmaps = [];\r\n\r\n\tthis.mapping = mapping !== undefined ? mapping : new THREE.UVMapping();\r\n\r\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\r\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\r\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\r\n\r\n\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.generateMipmaps = true;\r\n\tthis.premultiplyAlpha = false;\r\n\tthis.flipY = true;\r\n\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\tthis.needsUpdate = false;\r\n\tthis.onUpdate = null;\r\n\r\n};\r\n\r\nTHREE.Texture.prototype = {\r\n\r\n\tconstructor: THREE.Texture,\r\n\r\n\tclone: function ( texture ) {\r\n\r\n\t\tif ( texture === undefined ) texture = new THREE.Texture();\r\n\r\n\t\ttexture.image = this.image;\r\n\t\ttexture.mipmaps = this.mipmaps.slice(0);\r\n\r\n\t\ttexture.mapping = this.mapping;\r\n\r\n\t\ttexture.wrapS = this.wrapS;\r\n\t\ttexture.wrapT = this.wrapT;\r\n\r\n\t\ttexture.magFilter = this.magFilter;\r\n\t\ttexture.minFilter = this.minFilter;\r\n\r\n\t\ttexture.anisotropy = this.anisotropy;\r\n\r\n\t\ttexture.format = this.format;\r\n\t\ttexture.type = this.type;\r\n\r\n\t\ttexture.offset.copy( this.offset );\r\n\t\ttexture.repeat.copy( this.repeat );\r\n\r\n\t\ttexture.generateMipmaps = this.generateMipmaps;\r\n\t\ttexture.premultiplyAlpha = this.premultiplyAlpha;\r\n\t\ttexture.flipY = this.flipY;\r\n\t\ttexture.unpackAlignment = this.unpackAlignment;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.TextureIdCount = 0;\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.image = { width: width, height: height };\r\n\tthis.mipmaps = mipmaps;\r\n\r\n\tthis.generateMipmaps = false; // WebGL currently can't generate mipmaps for compressed textures, they must be embedded in DDS file\r\n\r\n};\r\n\r\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\r\nTHREE.CompressedTexture.prototype.clone = function () {\r\n\r\n\tvar texture = new THREE.CompressedTexture();\r\n\r\n\tTHREE.Texture.prototype.clone.call( this, texture );\r\n\r\n\treturn texture;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.image = { data: data, width: width, height: height };\r\n\r\n};\r\n\r\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\r\nTHREE.DataTexture.prototype.clone = function () {\r\n\r\n\tvar texture = new THREE.DataTexture();\r\n\r\n\tTHREE.Texture.prototype.clone.call( this, texture );\r\n\r\n\treturn texture;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Particle = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.material = material;\r\n\r\n};\r\n\r\nTHREE.Particle.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Particle.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Particle( this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ParticleSystem = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.ParticleBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\tthis.sortParticles = false;\r\n\r\n\tif ( this.geometry ) {\r\n\r\n\t\t// calc bound radius\r\n\r\n\t\tif( this.geometry.boundingSphere === null ) {\r\n\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.frustumCulled = false;\r\n\r\n};\r\n\r\nTHREE.ParticleSystem.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.ParticleSystem.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.ParticleSystem( this.geometry, this.material );\r\n\tobject.sortParticles = this.sortParticles;\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Line = function ( geometry, material, type ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\tthis.type = ( type !== undefined ) ? type : THREE.LineStrip;\r\n\r\n\tif ( this.geometry ) {\r\n\r\n\t\tif ( ! this.geometry.boundingSphere ) {\r\n\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LineStrip = 0;\r\nTHREE.LinePieces = 1;\r\n\r\nTHREE.Line.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Line.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Line( this.geometry, this.material, this.type );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author jonobr1 / http://jonobr1.com/\r\n */\r\n\r\nTHREE.Mesh = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff, wireframe: true } );\r\n\r\n\tif ( this.geometry !== undefined ) {\r\n\r\n\t\tif ( this.geometry.boundingSphere === null ) {\r\n\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Mesh.prototype.updateMorphTargets = function () {\r\n\r\n\tif ( this.geometry.morphTargets.length > 0 ) {\r\n\r\n\t\tthis.morphTargetBase = -1;\r\n\t\tthis.morphTargetForcedOrder = [];\r\n\t\tthis.morphTargetInfluences = [];\r\n\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\r\n\r\n\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {\r\n\r\n\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\r\n\r\n\t\treturn this.morphTargetDictionary[ name ];\r\n\r\n\t}\r\n\r\n\tconsole.log( \"THREE.Mesh.getMorphTargetIndexByName: morph target \" + name + \" does not exist. Returning 0.\" );\r\n\r\n\treturn 0;\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Mesh( this.geometry, this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Bone = function( belongsToSkin ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.skin = belongsToSkin;\r\n\tthis.skinMatrix = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.Bone.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Bone.prototype.update = function ( parentSkinMatrix, forceUpdate ) {\r\n\r\n\t// update local\r\n\r\n\tif ( this.matrixAutoUpdate ) {\r\n\r\n\t\tforceUpdate |= this.updateMatrix();\r\n\r\n\t}\r\n\r\n\t// update skin matrix\r\n\r\n\tif ( forceUpdate || this.matrixWorldNeedsUpdate ) {\r\n\r\n\t\tif( parentSkinMatrix ) {\r\n\r\n\t\t\tthis.skinMatrix.multiplyMatrices( parentSkinMatrix, this.matrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.skinMatrix.copy( this.matrix );\r\n\r\n\t\t}\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\t\tforceUpdate = true;\r\n\r\n\t}\r\n\r\n\t// update children\r\n\r\n\tvar child, i, l = this.children.length;\r\n\r\n\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\tthis.children[ i ].update( this.skinMatrix, forceUpdate );\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\t//\r\n\r\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\r\n\r\n\t// init bones\r\n\r\n\tthis.identityMatrix = new THREE.Matrix4();\r\n\r\n\tthis.bones = [];\r\n\tthis.boneMatrices = [];\r\n\r\n\tvar b, bone, gbone, p, q, s;\r\n\r\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\r\n\r\n\t\tfor ( b = 0; b < this.geometry.bones.length; b ++ ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tp = gbone.pos;\r\n\t\t\tq = gbone.rotq;\r\n\t\t\ts = gbone.scl;\r\n\r\n\t\t\tbone = this.addBone();\r\n\r\n\t\t\tbone.name = gbone.name;\r\n\t\t\tbone.position.set( p[0], p[1], p[2] );\r\n\t\t\tbone.quaternion.set( q[0], q[1], q[2], q[3] );\r\n\t\t\tbone.useQuaternion = true;\r\n\r\n\t\t\tif ( s !== undefined ) {\r\n\r\n\t\t\t\tbone.scale.set( s[0], s[1], s[2] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbone.scale.set( 1, 1, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( b = 0; b < this.bones.length; b ++ ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\t\t\tbone = this.bones[ b ];\r\n\r\n\t\t\tif ( gbone.parent === -1 ) {\r\n\r\n\t\t\t\tthis.add( bone );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.bones[ gbone.parent ].add( bone );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar nBones = this.bones.length;\r\n\r\n\t\tif ( this.useVertexTexture ) {\r\n\r\n\t\t\t// layout (1 matrix = 4 pixels)\r\n\t\t\t//\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t\t//  with  8x8  pixel texture max   16 bones  (8 * 8  / 4)\r\n\t\t\t//  \t 16x16 pixel texture max   64 bones (16 * 16 / 4)\r\n\t\t\t//  \t 32x32 pixel texture max  256 bones (32 * 32 / 4)\r\n\t\t\t//  \t 64x64 pixel texture max 1024 bones (64 * 64 / 4)\r\n\r\n\t\t\tvar size;\r\n\r\n\t\t\tif ( nBones > 256 )\r\n\t\t\t\tsize = 64;\r\n\t\t\telse if ( nBones > 64 )\r\n\t\t\t\tsize = 32;\r\n\t\t\telse if ( nBones > 16 )\r\n\t\t\t\tsize = 16;\r\n\t\t\telse\r\n\t\t\t\tsize = 8;\r\n\r\n\t\t\tthis.boneTextureWidth = size;\r\n\t\t\tthis.boneTextureHeight = size;\r\n\r\n\t\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\r\n\t\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\r\n\t\t\tthis.boneTexture.minFilter = THREE.NearestFilter;\r\n\t\t\tthis.boneTexture.magFilter = THREE.NearestFilter;\r\n\t\t\tthis.boneTexture.generateMipmaps = false;\r\n\t\t\tthis.boneTexture.flipY = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.boneMatrices = new Float32Array( 16 * nBones );\r\n\r\n\t\t}\r\n\r\n\t\tthis.pose();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\nTHREE.SkinnedMesh.prototype.addBone = function( bone ) {\r\n\r\n\tif ( bone === undefined ) {\r\n\r\n\t\tbone = new THREE.Bone( this );\r\n\r\n\t}\r\n\r\n\tthis.bones.push( bone );\r\n\r\n\treturn bone;\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\tthis.matrixAutoUpdate && this.updateMatrix();\r\n\r\n\t// update matrixWorld\r\n\r\n\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\tif ( this.parent ) {\r\n\r\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t}\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tforce = true;\r\n\r\n\t}\r\n\r\n\t// update children\r\n\r\n\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\tvar child = this.children[ i ];\r\n\r\n\t\tif ( child instanceof THREE.Bone ) {\r\n\r\n\t\t\tchild.update( this.identityMatrix, false );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tchild.updateMatrixWorld( true );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// make a snapshot of the bones' rest position\r\n\r\n\tif ( this.boneInverses == undefined ) {\r\n\r\n\t\tthis.boneInverses = [];\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\tvar inverse = new THREE.Matrix4();\r\n\r\n\t\t\tinverse.getInverse( this.bones[ b ].skinMatrix );\r\n\r\n\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// flatten bone matrices to array\r\n\r\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t// compute the offset between the current and the original transform;\r\n\r\n\t\t//TODO: we could get rid of this multiplication step if the skinMatrix\r\n\t\t// was already representing the offset; however, this requires some\r\n\t\t// major changes to the animation system\r\n\r\n\t\tTHREE.SkinnedMesh.offsetMatrix.multiplyMatrices( this.bones[ b ].skinMatrix, this.boneInverses[ b ] );\r\n\r\n\t\tTHREE.SkinnedMesh.offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );\r\n\r\n\t}\r\n\r\n\tif ( this.useVertexTexture ) {\r\n\r\n\t\tthis.boneTexture.needsUpdate = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.pose = function () {\r\n\r\n\tthis.updateMatrixWorld( true );\r\n\r\n\tfor ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {\r\n\r\n\t\t// normalize weights\r\n\r\n\t\tvar sw = this.geometry.skinWeights[ i ];\r\n\r\n\t\tvar scale = 1.0 / sw.lengthManhattan();\r\n\r\n\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\tsw.multiplyScalar( scale );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsw.set( 1 ); // this will be normalized by the shader anyway\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.SkinnedMesh( this.geometry, this.material, this.useVertexTexture );\r\n\r\n\tTHREE.Mesh.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.offsetMatrix = new THREE.Matrix4();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MorphAnimMesh = function ( geometry, material ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\t// API\r\n\r\n\tthis.duration = 1000; // milliseconds\r\n\tthis.mirroredLoop = false;\r\n\tthis.time = 0;\r\n\r\n\t// internals\r\n\r\n\tthis.lastKeyframe = 0;\r\n\tthis.currentKeyframe = 0;\r\n\r\n\tthis.direction = 1;\r\n\tthis.directionBackwards = false;\r\n\r\n\tthis.setFrameRange( 0, this.geometry.morphTargets.length - 1 );\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\nTHREE.MorphAnimMesh.prototype.setFrameRange = function ( start, end ) {\r\n\r\n\tthis.startKeyframe = start;\r\n\tthis.endKeyframe = end;\r\n\r\n\tthis.length = this.endKeyframe - this.startKeyframe + 1;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.setDirectionForward = function () {\r\n\r\n\tthis.direction = 1;\r\n\tthis.directionBackwards = false;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.setDirectionBackward = function () {\r\n\r\n\tthis.direction = -1;\r\n\tthis.directionBackwards = true;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.parseAnimations = function () {\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tif ( ! geometry.animations ) geometry.animations = {};\r\n\r\n\tvar firstAnimation, animations = geometry.animations;\r\n\r\n\tvar pattern = /([a-z]+)(\\d+)/;\r\n\r\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\tvar parts = morph.name.match( pattern );\r\n\r\n\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\tvar label = parts[ 1 ];\r\n\t\t\tvar num = parts[ 2 ];\r\n\r\n\t\t\tif ( ! animations[ label ] ) animations[ label ] = { start: Infinity, end: -Infinity };\r\n\r\n\t\t\tvar animation = animations[ label ];\r\n\r\n\t\t\tif ( i < animation.start ) animation.start = i;\r\n\t\t\tif ( i > animation.end ) animation.end = i;\r\n\r\n\t\t\tif ( ! firstAnimation ) firstAnimation = label;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.firstAnimation = firstAnimation;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.setAnimationLabel = function ( label, start, end ) {\r\n\r\n\tif ( ! this.geometry.animations ) this.geometry.animations = {};\r\n\r\n\tthis.geometry.animations[ label ] = { start: start, end: end };\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.playAnimation = function ( label, fps ) {\r\n\r\n\tvar animation = this.geometry.animations[ label ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tthis.setFrameRange( animation.start, animation.end );\r\n\t\tthis.duration = 1000 * ( ( animation.end - animation.start ) / fps );\r\n\t\tthis.time = 0;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( \"animation[\" + label + \"] undefined\" );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.updateAnimation = function ( delta ) {\r\n\r\n\tvar frameTime = this.duration / this.length;\r\n\r\n\tthis.time += this.direction * delta;\r\n\r\n\tif ( this.mirroredLoop ) {\r\n\r\n\t\tif ( this.time > this.duration || this.time < 0 ) {\r\n\r\n\t\t\tthis.direction *= -1;\r\n\r\n\t\t\tif ( this.time > this.duration ) {\r\n\r\n\t\t\t\tthis.time = this.duration;\r\n\t\t\t\tthis.directionBackwards = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.time < 0 ) {\r\n\r\n\t\t\t\tthis.time = 0;\r\n\t\t\t\tthis.directionBackwards = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tthis.time = this.time % this.duration;\r\n\r\n\t\tif ( this.time < 0 ) this.time += this.duration;\r\n\r\n\t}\r\n\r\n\tvar keyframe = this.startKeyframe + THREE.Math.clamp( Math.floor( this.time / frameTime ), 0, this.length - 1 );\r\n\r\n\tif ( keyframe !== this.currentKeyframe ) {\r\n\r\n\t\tthis.morphTargetInfluences[ this.lastKeyframe ] = 0;\r\n\t\tthis.morphTargetInfluences[ this.currentKeyframe ] = 1;\r\n\r\n\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\tthis.lastKeyframe = this.currentKeyframe;\r\n\t\tthis.currentKeyframe = keyframe;\r\n\r\n\t}\r\n\r\n\tvar mix = ( this.time % frameTime ) / frameTime;\r\n\r\n\tif ( this.directionBackwards ) {\r\n\r\n\t\tmix = 1 - mix;\r\n\r\n\t}\r\n\r\n\tthis.morphTargetInfluences[ this.currentKeyframe ] = mix;\r\n\tthis.morphTargetInfluences[ this.lastKeyframe ] = 1 - mix;\r\n\r\n};\r\n\r\nTHREE.MorphAnimMesh.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.MorphAnimMesh( this.geometry, this.material );\r\n\r\n\tobject.duration = this.duration;\r\n\tobject.mirroredLoop = this.mirroredLoop;\r\n\tobject.time = this.time;\r\n\r\n\tobject.lastKeyframe = this.lastKeyframe;\r\n\tobject.currentKeyframe = this.currentKeyframe;\r\n\r\n\tobject.direction = this.direction;\r\n\tobject.directionBackwards = this.directionBackwards;\r\n\r\n\tTHREE.Mesh.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Ribbon = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.geometry = geometry;\r\n\tthis.material = material;\r\n\r\n};\r\n\r\nTHREE.Ribbon.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Ribbon.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Ribbon( this.geometry, this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LOD = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.LODs = [];\r\n\r\n};\r\n\r\n\r\nTHREE.LOD.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.LOD.prototype.addLevel = function ( object3D, visibleAtDistance ) {\r\n\r\n\tif ( visibleAtDistance === undefined ) {\r\n\r\n\t\tvisibleAtDistance = 0;\r\n\r\n\t}\r\n\r\n\tvisibleAtDistance = Math.abs( visibleAtDistance );\r\n\r\n\tfor ( var l = 0; l < this.LODs.length; l ++ ) {\r\n\r\n\t\tif ( visibleAtDistance < this.LODs[ l ].visibleAtDistance ) {\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.LODs.splice( l, 0, { visibleAtDistance: visibleAtDistance, object3D: object3D } );\r\n\tthis.add( object3D );\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.update = function ( camera ) {\r\n\r\n\tif ( this.LODs.length > 1 ) {\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\tvar inverse  = camera.matrixWorldInverse;\r\n\t\tvar distance = -( inverse.elements[2] * this.matrixWorld.elements[12] + inverse.elements[6] * this.matrixWorld.elements[13] + inverse.elements[10] * this.matrixWorld.elements[14] + inverse.elements[14] );\r\n\r\n\t\tthis.LODs[ 0 ].object3D.visible = true;\r\n\r\n\t\tfor ( var l = 1; l < this.LODs.length; l ++ ) {\r\n\r\n\t\t\tif( distance >= this.LODs[ l ].visibleAtDistance ) {\r\n\r\n\t\t\t\tthis.LODs[ l - 1 ].object3D.visible = false;\r\n\t\t\t\tthis.LODs[ l     ].object3D.visible = true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor( ; l < this.LODs.length; l ++ ) {\r\n\r\n\t\t\tthis.LODs[ l ].object3D.visible = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.clone = function () {\r\n\r\n\t// TODO\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Sprite = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\r\n\r\n\tthis.rotation3d = this.rotation;\r\n\tthis.rotation = 0;\r\n\r\n};\r\n\r\nTHREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\n/*\r\n * Custom update matrix\r\n */\r\n\r\nTHREE.Sprite.prototype.updateMatrix = function () {\r\n\r\n\tthis.matrix.setPosition( this.position );\r\n\r\n\tthis.rotation3d.set( 0, 0, this.rotation );\r\n\tthis.matrix.setRotationFromEuler( this.rotation3d );\r\n\r\n\tif ( this.scale.x !== 1 || this.scale.y !== 1 ) {\r\n\r\n\t\tthis.matrix.scale( this.scale );\r\n\r\n\t}\r\n\r\n\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.Sprite.prototype.clone = function ( object ) {\r\n\r\n\tif ( object === undefined ) object = new THREE.Sprite( this.material );\r\n\r\n\tTHREE.Object3D.prototype.clone.call( this, object );\r\n\r\n\treturn object;\r\n\r\n};\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Scene = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.fog = null;\r\n\tthis.overrideMaterial = null;\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.__objects = [];\r\n\tthis.__lights = [];\r\n\r\n\tthis.__objectsAdded = [];\r\n\tthis.__objectsRemoved = [];\r\n\r\n};\r\n\r\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Scene.prototype.__addObject = function ( object ) {\r\n\r\n\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\tif ( this.__lights.indexOf( object ) === - 1 ) {\r\n\r\n\t\t\tthis.__lights.push( object );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.target && object.target.parent === undefined ) {\r\n\r\n\t\t\tthis.add( object.target );\r\n\r\n\t\t}\r\n\r\n\t} else if ( !( object instanceof THREE.Camera || object instanceof THREE.Bone ) ) {\r\n\r\n\t\tif ( this.__objects.indexOf( object ) === - 1 ) {\r\n\r\n\t\t\tthis.__objects.push( object );\r\n\t\t\tthis.__objectsAdded.push( object );\r\n\r\n\t\t\t// check if previously removed\r\n\r\n\t\t\tvar i = this.__objectsRemoved.indexOf( object );\r\n\r\n\t\t\tif ( i !== -1 ) {\r\n\r\n\t\t\t\tthis.__objectsRemoved.splice( i, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var c = 0; c < object.children.length; c ++ ) {\r\n\r\n\t\tthis.__addObject( object.children[ c ] );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Scene.prototype.__removeObject = function ( object ) {\r\n\r\n\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\tvar i = this.__lights.indexOf( object );\r\n\r\n\t\tif ( i !== -1 ) {\r\n\r\n\t\t\tthis.__lights.splice( i, 1 );\r\n\r\n\t\t}\r\n\r\n\t} else if ( !( object instanceof THREE.Camera ) ) {\r\n\r\n\t\tvar i = this.__objects.indexOf( object );\r\n\r\n\t\tif( i !== -1 ) {\r\n\r\n\t\t\tthis.__objects.splice( i, 1 );\r\n\t\t\tthis.__objectsRemoved.push( object );\r\n\r\n\t\t\t// check if previously added\r\n\r\n\t\t\tvar ai = this.__objectsAdded.indexOf( object );\r\n\r\n\t\t\tif ( ai !== -1 ) {\r\n\r\n\t\t\t\tthis.__objectsAdded.splice( ai, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var c = 0; c < object.children.length; c ++ ) {\r\n\r\n\t\tthis.__removeObject( object.children[ c ] );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Fog = function ( hex, near, far ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( hex );\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 1;\r\n\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n};\r\n\r\nTHREE.Fog.prototype.clone = function () {\r\n\r\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.FogExp2 = function ( hex, density ) {\r\n\r\n\tthis.name = '';\r\n\tthis.color = new THREE.Color( hex );\r\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n};\r\n\r\nTHREE.FogExp2.prototype.clone = function () {\r\n\r\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CanvasRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _this = this,\r\n\t_renderData, _elements, _lights,\r\n\t_projector = new THREE.Projector(),\r\n\r\n\t_canvas = parameters.canvas !== undefined\r\n\t\t\t? parameters.canvas\r\n\t\t\t: document.createElement( 'canvas' ),\r\n\r\n\t_canvasWidth, _canvasHeight, _canvasWidthHalf, _canvasHeightHalf,\r\n\t_context = _canvas.getContext( '2d' ),\r\n\r\n\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t_clearOpacity = 0,\r\n\r\n\t_contextGlobalAlpha = 1,\r\n\t_contextGlobalCompositeOperation = 0,\r\n\t_contextStrokeStyle = null,\r\n\t_contextFillStyle = null,\r\n\t_contextLineWidth = null,\r\n\t_contextLineCap = null,\r\n\t_contextLineJoin = null,\r\n\r\n\t_v1, _v2, _v3, _v4,\r\n\t_v5 = new THREE.RenderableVertex(),\r\n\t_v6 = new THREE.RenderableVertex(),\r\n\r\n\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\r\n\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\r\n\r\n\t_color = new THREE.Color(),\r\n\t_color1 = new THREE.Color(),\r\n\t_color2 = new THREE.Color(),\r\n\t_color3 = new THREE.Color(),\r\n\t_color4 = new THREE.Color(),\r\n\r\n\t_diffuseColor = new THREE.Color(),\r\n\t_emissiveColor = new THREE.Color(),\r\n\r\n\t_lightColor = new THREE.Color(),\r\n\r\n\t_patterns = {}, _imagedatas = {},\r\n\r\n\t_near, _far,\r\n\r\n\t_image, _uvs,\r\n\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\r\n\r\n\t_clipBox = new THREE.Box2(),\r\n\t_clearBox = new THREE.Box2(),\r\n\t_elemBox = new THREE.Box2(),\r\n\r\n\t_enableLighting = false,\r\n\t_ambientLight = new THREE.Color(),\r\n\t_directionalLights = new THREE.Color(),\r\n\t_pointLights = new THREE.Color(),\r\n\r\n\t_pi2 = Math.PI * 2,\r\n\t_vector3 = new THREE.Vector3(), // Needed for PointLight\r\n\r\n\t_pixelMap, _pixelMapContext, _pixelMapImage, _pixelMapData,\r\n\t_gradientMap, _gradientMapContext, _gradientMapQuality = 16;\r\n\r\n\t_pixelMap = document.createElement( 'canvas' );\r\n\t_pixelMap.width = _pixelMap.height = 2;\r\n\r\n\t_pixelMapContext = _pixelMap.getContext( '2d' );\r\n\t_pixelMapContext.fillStyle = 'rgba(0,0,0,1)';\r\n\t_pixelMapContext.fillRect( 0, 0, 2, 2 );\r\n\r\n\t_pixelMapImage = _pixelMapContext.getImageData( 0, 0, 2, 2 );\r\n\t_pixelMapData = _pixelMapImage.data;\r\n\r\n\t_gradientMap = document.createElement( 'canvas' );\r\n\t_gradientMap.width = _gradientMap.height = _gradientMapQuality;\r\n\r\n\t_gradientMapContext = _gradientMap.getContext( '2d' );\r\n\t_gradientMapContext.translate( - _gradientMapQuality / 2, - _gradientMapQuality / 2 );\r\n\t_gradientMapContext.scale( _gradientMapQuality, _gradientMapQuality );\r\n\r\n\t_gradientMapQuality --; // Fix UVs\r\n\r\n\tthis.domElement = _canvas;\r\n\r\n\tthis.devicePixelRatio = parameters.devicePixelRatio !== undefined\r\n\t\t\t\t? parameters.devicePixelRatio\r\n\t\t\t\t: window.devicePixelRatio !== undefined\r\n\t\t\t\t\t? window.devicePixelRatio\r\n\t\t\t\t\t: 1;\r\n\r\n\tthis.autoClear = true;\r\n\tthis.sortObjects = true;\r\n\tthis.sortElements = true;\r\n\r\n\tthis.info = {\r\n\r\n\t\trender: {\r\n\r\n\t\t\tvertices: 0,\r\n\t\t\tfaces: 0\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// WebGLRenderer compatibility\r\n\r\n\tthis.supportsVertexTextures = function () {};\r\n\tthis.setFaceCulling = function () {};\r\n\r\n\tthis.setSize = function ( width, height ) {\r\n\r\n\t\t_canvasWidth = width * this.devicePixelRatio;\r\n\t\t_canvasHeight = height * this.devicePixelRatio;\r\n\r\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\r\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\r\n\r\n\t\t_canvas.width = _canvasWidth;\r\n\t\t_canvas.height = _canvasHeight;\r\n\r\n\t\t_canvas.style.width = width + 'px';\r\n\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t_clipBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t\t_clearBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t\t_contextGlobalAlpha = 1;\r\n\t\t_contextGlobalCompositeOperation = 0;\r\n\t\t_contextStrokeStyle = null;\r\n\t\t_contextFillStyle = null;\r\n\t\t_contextLineWidth = null;\r\n\t\t_contextLineCap = null;\r\n\t\t_contextLineJoin = null;\r\n\r\n\t};\r\n\r\n\tthis.setClearColor = function ( color, opacity ) {\r\n\r\n\t\t_clearColor.copy( color );\r\n\t\t_clearOpacity = opacity !== undefined ? opacity : 1;\r\n\r\n\t\t_clearBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tthis.setClearColorHex = function ( hex, opacity ) {\r\n\r\n\t\t_clearColor.setHex( hex );\r\n\t\t_clearOpacity = opacity !== undefined ? opacity : 1;\r\n\r\n\t\t_clearBox.set(\r\n\t\t\tnew THREE.Vector2( - _canvasWidthHalf, - _canvasHeightHalf ),\r\n\t\t\tnew THREE.Vector2( _canvasWidthHalf, _canvasHeightHalf )\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tthis.getMaxAnisotropy  = function () {\r\n\r\n\t\treturn 0;\r\n\r\n\t};\r\n\r\n\tthis.clear = function () {\r\n\r\n\t\t_context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );\r\n\r\n\t\tif ( _clearBox.empty() === false ) {\r\n\r\n\t\t\t_clearBox.intersect( _clipBox );\r\n\t\t\t_clearBox.expandByScalar( 2 );\r\n\r\n\t\t\tif ( _clearOpacity < 1 ) {\r\n\r\n\t\t\t\t_context.clearRect(\r\n\t\t\t\t\t_clearBox.min.x | 0,\r\n\t\t\t\t\t_clearBox.min.y | 0,\r\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\r\n\t\t\t\t\t( _clearBox.max.y - _clearBox.min.y ) | 0\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _clearOpacity > 0 ) {\r\n\r\n\t\t\t\tsetBlending( THREE.NormalBlending );\r\n\t\t\t\tsetOpacity( 1 );\r\n\r\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearOpacity + ')' );\r\n\r\n\t\t\t\t_context.fillRect(\r\n\t\t\t\t\t_clearBox.min.x | 0,\r\n\t\t\t\t\t_clearBox.min.y | 0,\r\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\r\n\t\t\t\t\t( _clearBox.max.y - _clearBox.min.y ) | 0\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_clearBox.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.autoClear === true ) {\r\n\r\n\t\t\tthis.clear();\r\n\r\n\t\t}\r\n\r\n\t\t_context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );\r\n\r\n\t\t_this.info.render.vertices = 0;\r\n\t\t_this.info.render.faces = 0;\r\n\r\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\r\n\t\t_elements = _renderData.elements;\r\n\t\t_lights = _renderData.lights;\r\n\r\n\t\t/* DEBUG\r\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\r\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\r\n\t\t*/\r\n\r\n\t\t_enableLighting = _lights.length > 0;\r\n\r\n\t\tif ( _enableLighting === true ) {\r\n\r\n\t\t\t calculateLights();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var e = 0, el = _elements.length; e < el; e++ ) {\r\n\r\n\t\t\tvar element = _elements[ e ];\r\n\r\n\t\t\tvar material = element.material;\r\n\r\n\t\t\tif ( material === undefined || material.visible === false ) continue;\r\n\r\n\t\t\t_elemBox.makeEmpty();\r\n\r\n\t\t\tif ( element instanceof THREE.RenderableParticle ) {\r\n\r\n\t\t\t\t_v1 = element;\r\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\trenderParticle( _v1, element, material, scene );\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen ] );\r\n\r\n\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === true ) {\r\n\r\n\t\t\t\t\trenderLine( _v1, _v2, element, material, scene );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableFace3 ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\r\n\r\n\t\t\t\tif ( _v1.positionScreen.z < -1 || _v1.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v2.positionScreen.z < -1 || _v2.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v3.positionScreen.z < -1 || _v3.positionScreen.z > 1 ) continue;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\tif ( material.overdraw === true ) {\r\n\r\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen );\r\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen );\r\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ] );\r\n\r\n\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material, scene );\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableFace4 ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3; _v4 = element.v4;\r\n\r\n\t\t\t\tif ( _v1.positionScreen.z < -1 || _v1.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v2.positionScreen.z < -1 || _v2.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v3.positionScreen.z < -1 || _v3.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v4.positionScreen.z < -1 || _v4.positionScreen.z > 1 ) continue;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v4.positionScreen.x *= _canvasWidthHalf; _v4.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\t_v5.positionScreen.copy( _v2.positionScreen );\r\n\t\t\t\t_v6.positionScreen.copy( _v4.positionScreen );\r\n\r\n\t\t\t\tif ( material.overdraw === true ) {\r\n\r\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen );\r\n\t\t\t\t\texpand( _v2.positionScreen, _v4.positionScreen );\r\n\t\t\t\t\texpand( _v4.positionScreen, _v1.positionScreen );\r\n\r\n\t\t\t\t\texpand( _v3.positionScreen, _v5.positionScreen );\r\n\t\t\t\t\texpand( _v3.positionScreen, _v6.positionScreen );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen, _v4.positionScreen ] );\r\n\r\n\t\t\t\trenderFace4( _v1, _v2, _v3, _v4, _v5, _v6, element, material, scene );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* DEBUG\r\n\t\t\tsetLineWidth( 1 );\r\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\r\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\r\n\t\t\t*/\r\n\r\n\t\t\t_clearBox.union( _elemBox );\r\n\r\n\t\t}\r\n\r\n\t\t/* DEBUG\r\n\t\tsetLineWidth( 1 );\r\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\r\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\r\n\t\t*/\r\n\r\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\r\n\r\n\t\t//\r\n\r\n\t\tfunction calculateLights() {\r\n\r\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\r\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\r\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\r\n\r\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\t\tvar light = _lights[ l ];\r\n\t\t\t\tvar lightColor = light.color;\r\n\r\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\t\t_ambientLight.add( lightColor );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t\t// for particles\r\n\r\n\t\t\t\t\t_directionalLights.add( lightColor );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\t\t// for particles\r\n\r\n\t\t\t\t\t_pointLights.add( lightColor );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction calculateLight( position, normal, color ) {\r\n\r\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\t\tvar light = _lights[ l ];\r\n\r\n\t\t\t\t_lightColor.copy( light.color );\r\n\r\n\t\t\t\tif ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t\tvar lightPosition = light.matrixWorld.getPosition().normalize();\r\n\r\n\t\t\t\t\tvar amount = normal.dot( lightPosition );\r\n\r\n\t\t\t\t\tif ( amount <= 0 ) continue;\r\n\r\n\t\t\t\t\tamount *= light.intensity;\r\n\r\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\t\tvar lightPosition = light.matrixWorld.getPosition();\r\n\r\n\t\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\r\n\r\n\t\t\t\t\tif ( amount <= 0 ) continue;\r\n\r\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\r\n\r\n\t\t\t\t\tif ( amount == 0 ) continue;\r\n\r\n\t\t\t\t\tamount *= light.intensity;\r\n\r\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderParticle( v1, element, material, scene ) {\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\tvar width, height, scaleX, scaleY,\r\n\t\t\tbitmap, bitmapWidth, bitmapHeight;\r\n\r\n\t\t\tif ( material instanceof THREE.ParticleBasicMaterial ) {\r\n\r\n\t\t\t\tif ( material.map === null ) {\r\n\r\n\t\t\t\t\tscaleX = element.object.scale.x;\r\n\t\t\t\t\tscaleY = element.object.scale.y;\r\n\r\n\t\t\t\t\t// TODO: Be able to disable this\r\n\r\n\t\t\t\t\tscaleX *= element.scale.x * _canvasWidthHalf;\r\n\t\t\t\t\tscaleY *= element.scale.y * _canvasHeightHalf;\r\n\r\n\t\t\t\t\t_elemBox.min.set( v1.x - scaleX, v1.y - scaleY );\r\n\t\t\t\t\t_elemBox.max.set( v1.x + scaleX, v1.y + scaleY );\r\n\r\n\t\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\r\n\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsetFillStyle( material.color.getStyle() );\r\n\r\n\t\t\t\t\t_context.save();\r\n\t\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t\t_context.rotate( - element.rotation );\r\n\t\t\t\t\t_context.scale( scaleX, scaleY );\r\n\t\t\t\t\t_context.fillRect( -1, -1, 2, 2 );\r\n\t\t\t\t\t_context.restore();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbitmap = material.map.image;\r\n\t\t\t\t\tbitmapWidth = bitmap.width >> 1;\r\n\t\t\t\t\tbitmapHeight = bitmap.height >> 1;\r\n\r\n\t\t\t\t\tscaleX = element.scale.x * _canvasWidthHalf;\r\n\t\t\t\t\tscaleY = element.scale.y * _canvasHeightHalf;\r\n\r\n\t\t\t\t\twidth = scaleX * bitmapWidth;\r\n\t\t\t\t\theight = scaleY * bitmapHeight;\r\n\r\n\t\t\t\t\t// TODO: Rotations break this...\r\n\r\n\t\t\t\t\t_elemBox.min.set( v1.x - width, v1.y - height );\r\n\t\t\t\t\t_elemBox.max.set( v1.x + width, v1.y + height );\r\n\r\n\t\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\r\n\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_context.save();\r\n\t\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t\t_context.rotate( - element.rotation );\r\n\t\t\t\t\t_context.scale( scaleX, - scaleY );\r\n\r\n\t\t\t\t\t_context.translate( - bitmapWidth, - bitmapHeight );\r\n\t\t\t\t\t_context.drawImage( bitmap, 0, 0 );\r\n\t\t\t\t\t_context.restore();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* DEBUG\r\n\t\t\t\tsetStrokeStyle( 'rgb(255,255,0)' );\r\n\t\t\t\t_context.beginPath();\r\n\t\t\t\t_context.moveTo( v1.x - 10, v1.y );\r\n\t\t\t\t_context.lineTo( v1.x + 10, v1.y );\r\n\t\t\t\t_context.moveTo( v1.x, v1.y - 10 );\r\n\t\t\t\t_context.lineTo( v1.x, v1.y + 10 );\r\n\t\t\t\t_context.stroke();\r\n\t\t\t\t*/\r\n\r\n\t\t\t} else if ( material instanceof THREE.ParticleCanvasMaterial ) {\r\n\r\n\t\t\t\twidth = element.scale.x * _canvasWidthHalf;\r\n\t\t\t\theight = element.scale.y * _canvasHeightHalf;\r\n\r\n\t\t\t\t_elemBox.min.set( v1.x - width, v1.y - height );\r\n\t\t\t\t_elemBox.max.set( v1.x + width, v1.y + height );\r\n\r\n\t\t\t\tif ( _clipBox.isIntersectionBox( _elemBox ) === false ) {\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\t\t\t\tsetFillStyle( material.color.getStyle() );\r\n\r\n\t\t\t\t_context.save();\r\n\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t_context.rotate( - element.rotation );\r\n\t\t\t\t_context.scale( width, height );\r\n\r\n\t\t\t\tmaterial.program( _context );\r\n\r\n\t\t\t\t_context.restore();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderLine( v1, v2, element, material, scene ) {\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\r\n\t\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\r\n\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\t\tsetLineWidth( material.linewidth );\r\n\t\t\t\tsetLineCap( material.linecap );\r\n\t\t\t\tsetLineJoin( material.linejoin );\r\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\r\n\t\t\t\t_context.stroke();\r\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material, scene ) {\r\n\r\n\t\t\t_this.info.render.vertices += 3;\r\n\t\t\t_this.info.render.faces ++;\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\r\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\r\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\r\n\r\n\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\r\n\r\n\t\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null && material.map === null ) {\r\n\r\n\t\t\t\t_diffuseColor.copy( material.color );\r\n\t\t\t\t_emissiveColor.copy( material.emissive );\r\n\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t_diffuseColor.multiply( element.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _enableLighting === true ) {\r\n\r\n\t\t\t\t\tif ( material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 3 ) {\r\n\r\n\t\t\t\t\t\t_color1.copy( _ambientLight );\r\n\t\t\t\t\t\t_color2.copy( _ambientLight );\r\n\t\t\t\t\t\t_color3.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.v1.positionWorld, element.vertexNormalsModel[ 0 ], _color1 );\r\n\t\t\t\t\t\tcalculateLight( element.v2.positionWorld, element.vertexNormalsModel[ 1 ], _color2 );\r\n\t\t\t\t\t\tcalculateLight( element.v3.positionWorld, element.vertexNormalsModel[ 2 ], _color3 );\r\n\r\n\t\t\t\t\t\t_color1.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color2.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color3.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_color.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.centroidModel, element.normalModel, _color );\r\n\r\n\t\t\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\r\n\r\n\t\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( material.color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( material.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\tif ( material.map !== null ) {\r\n\r\n\t\t\t\t\tif ( material.map.mapping instanceof THREE.UVMapping ) {\r\n\r\n\t\t\t\t\t\t_uvs = element.uvs[ 0 ];\r\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t} else if ( material.envMap !== null ) {\r\n\r\n\t\t\t\t\tif ( material.envMap.mapping instanceof THREE.SphericalReflectionMapping ) {\r\n\r\n\t\t\t\t\t\t_vector3.copy( element.vertexNormalsModelView[ uv1 ] );\r\n\t\t\t\t\t\t_uv1x = 0.5 * _vector3.x + 0.5;\r\n\t\t\t\t\t\t_uv1y = 0.5 * _vector3.y + 0.5;\r\n\r\n\t\t\t\t\t\t_vector3.copy( element.vertexNormalsModelView[ uv2 ] );\r\n\t\t\t\t\t\t_uv2x = 0.5 * _vector3.x + 0.5;\r\n\t\t\t\t\t\t_uv2y = 0.5 * _vector3.y + 0.5;\r\n\r\n\t\t\t\t\t\t_vector3.copy( element.vertexNormalsModelView[ uv3 ] );\r\n\t\t\t\t\t\t_uv3x = 0.5 * _vector3.x + 0.5;\r\n\t\t\t\t\t\t_uv3y = 0.5 * _vector3.y + 0.5;\r\n\r\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\r\n\r\n\t\t\t\t\t}/* else if ( material.envMap.mapping == THREE.SphericalRefractionMapping ) {\r\n\r\n\r\n\r\n\t\t\t\t\t}*/\r\n\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_color.copy( material.color );\r\n\r\n\t\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t\t_color.multiply( element.color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\t_near = camera.near;\r\n\t\t\t\t_far = camera.far;\r\n\r\n\t\t\t\tvar depth;\r\n\r\n\t\t\t\tdepth = 1 - smoothstep( v1.positionScreen.z * v1.positionScreen.w, _near, _far );\r\n\t\t\t\t_color1.setRGB( depth, depth, depth );\r\n\r\n\t\t\t\tdepth = 1 - smoothstep( v2.positionScreen.z * v2.positionScreen.w, _near, _far )\r\n\t\t\t\t_color2.setRGB( depth, depth, depth );\r\n\r\n\t\t\t\tdepth = 1 - smoothstep( v3.positionScreen.z * v3.positionScreen.w, _near, _far );\r\n\t\t\t\t_color3.setRGB( depth, depth, depth );\r\n\r\n\t\t\t\t_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tvar normal;\r\n\r\n\t\t\t\tif ( material.shading == THREE.FlatShading ) {\r\n\r\n\t\t\t\t\tnormal = element.normalModelView;\r\n\r\n\t\t\t\t\t_color.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t} else if ( material.shading == THREE.SmoothShading ) {\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ uv1 ];\r\n\t\t\t\t\t_color1.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ uv2 ];\r\n\t\t\t\t\t_color2.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ uv3 ];\r\n\t\t\t\t\t_color3.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\t_color4.addColors( _color2, _color3 ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderFace4( v1, v2, v3, v4, v5, v6, element, material, scene ) {\r\n\r\n\t\t\t_this.info.render.vertices += 4;\r\n\t\t\t_this.info.render.faces ++;\r\n\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\r\n\t\t\tif ( ( material.map !== undefined && material.map !== null ) || ( material.envMap !== undefined && material.envMap !== null ) ) {\r\n\r\n\t\t\t\t// Let renderFace3() handle this\r\n\r\n\t\t\t\trenderFace3( v1, v2, v4, 0, 1, 3, element, material, scene );\r\n\t\t\t\trenderFace3( v5, v3, v6, 1, 2, 3, element, material, scene );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\r\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\r\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\r\n\t\t\t_v4x = v4.positionScreen.x; _v4y = v4.positionScreen.y;\r\n\t\t\t_v5x = v5.positionScreen.x; _v5y = v5.positionScreen.y;\r\n\t\t\t_v6x = v6.positionScreen.x; _v6y = v6.positionScreen.y;\r\n\r\n\t\t\tif ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\t_diffuseColor.copy( material.color );\r\n\t\t\t\t_emissiveColor.copy( material.emissive );\r\n\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t_diffuseColor.multiply( element.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _enableLighting === true ) {\r\n\r\n\t\t\t\t\tif ( material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 4 ) {\r\n\r\n\t\t\t\t\t\t_color1.copy( _ambientLight );\r\n\t\t\t\t\t\t_color2.copy( _ambientLight );\r\n\t\t\t\t\t\t_color3.copy( _ambientLight );\r\n\t\t\t\t\t\t_color4.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.v1.positionWorld, element.vertexNormalsModel[ 0 ], _color1 );\r\n\t\t\t\t\t\tcalculateLight( element.v2.positionWorld, element.vertexNormalsModel[ 1 ], _color2 );\r\n\t\t\t\t\t\tcalculateLight( element.v4.positionWorld, element.vertexNormalsModel[ 3 ], _color3 );\r\n\t\t\t\t\t\tcalculateLight( element.v3.positionWorld, element.vertexNormalsModel[ 2 ], _color4 );\r\n\r\n\t\t\t\t\t\t_color1.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color2.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color3.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\t\t\t\t\t_color4.multiply( _diffuseColor ).add( _emissiveColor );\r\n\r\n\t\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\t\t// TODO: UVs are incorrect, v4->v3?\r\n\r\n\t\t\t\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );\r\n\t\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t\t\tdrawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );\r\n\t\t\t\t\t\tclipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_color.copy( _ambientLight );\r\n\r\n\t\t\t\t\t\tcalculateLight( element.centroidModel, element.normalModel, _color );\r\n\r\n\t\t\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\r\n\r\n\t\t\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_color.addColors( _diffuseColor, _emissiveColor );\r\n\r\n\t\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial ) {\r\n\r\n\t\t\t\t_color.copy( material.color );\r\n\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t_color.multiply( element.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tvar normal;\r\n\r\n\t\t\t\tif ( material.shading == THREE.FlatShading ) {\r\n\r\n\t\t\t\t\tnormal = element.normalModelView;\r\n\t\t\t\t\t_color.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tdrawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );\r\n\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t: fillPath( _color );\r\n\r\n\t\t\t\t} else if ( material.shading == THREE.SmoothShading ) {\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 0 ];\r\n\t\t\t\t\t_color1.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 1 ];\r\n\t\t\t\t\t_color2.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 3 ];\r\n\t\t\t\t\t_color3.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\tnormal = element.vertexNormalsModelView[ 2 ];\r\n\t\t\t\t\t_color4.setRGB( normal.x, normal.y, normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );\r\n\t\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\t\tdrawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );\r\n\t\t\t\t\tclipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\t_near = camera.near;\r\n\t\t\t\t_far = camera.far;\r\n\r\n\t\t\t\t_color1.r = _color1.g = _color1.b = 1 - smoothstep( v1.positionScreen.z * v1.positionScreen.w, _near, _far );\r\n\t\t\t\t_color2.r = _color2.g = _color2.b = 1 - smoothstep( v2.positionScreen.z * v2.positionScreen.w, _near, _far );\r\n\t\t\t\t_color3.r = _color3.g = _color3.b = 1 - smoothstep( v4.positionScreen.z * v4.positionScreen.w, _near, _far );\r\n\t\t\t\t_color4.r = _color4.g = _color4.b = 1 - smoothstep( v3.positionScreen.z * v3.positionScreen.w, _near, _far );\r\n\r\n\t\t\t\t_image = getGradientTexture( _color1, _color2, _color3, _color4 );\r\n\r\n\t\t\t\t// TODO: UVs are incorrect, v4->v3?\r\n\r\n\t\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );\r\n\t\t\t\tclipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );\r\n\r\n\t\t\t\tdrawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );\r\n\t\t\t\tclipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\r\n\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( x0, y0 );\r\n\t\t\t_context.lineTo( x1, y1 );\r\n\t\t\t_context.lineTo( x2, y2 );\r\n\t\t\t_context.closePath();\r\n\r\n\t\t}\r\n\r\n\t\tfunction drawQuad( x0, y0, x1, y1, x2, y2, x3, y3 ) {\r\n\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( x0, y0 );\r\n\t\t\t_context.lineTo( x1, y1 );\r\n\t\t\t_context.lineTo( x2, y2 );\r\n\t\t\t_context.lineTo( x3, y3 );\r\n\t\t\t_context.closePath();\r\n\r\n\t\t}\r\n\r\n\t\tfunction strokePath( color, linewidth, linecap, linejoin ) {\r\n\r\n\t\t\tsetLineWidth( linewidth );\r\n\t\t\tsetLineCap( linecap );\r\n\t\t\tsetLineJoin( linejoin );\r\n\t\t\tsetStrokeStyle( color.getStyle() );\r\n\r\n\t\t\t_context.stroke();\r\n\r\n\t\t\t_elemBox.expandByScalar( linewidth * 2 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction fillPath( color ) {\r\n\r\n\t\t\tsetFillStyle( color.getStyle() );\r\n\t\t\t_context.fill();\r\n\r\n\t\t}\r\n\r\n\t\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\r\n\r\n\t\t\tif ( texture instanceof THREE.DataTexture || texture.image === undefined || texture.image.width == 0 ) return;\r\n\r\n\t\t\tif ( texture.needsUpdate === true ) {\r\n\r\n\t\t\t\tvar repeatX = texture.wrapS == THREE.RepeatWrapping;\r\n\t\t\t\tvar repeatY = texture.wrapT == THREE.RepeatWrapping;\r\n\r\n\t\t\t\t_patterns[ texture.id ] = _context.createPattern(\r\n\t\t\t\t\ttexture.image, repeatX === true && repeatY === true\r\n\t\t\t\t\t\t? 'repeat'\r\n\t\t\t\t\t\t: repeatX === true && repeatY === false\r\n\t\t\t\t\t\t\t? 'repeat-x'\r\n\t\t\t\t\t\t\t: repeatX === false && repeatY === true\r\n\t\t\t\t\t\t\t\t? 'repeat-y'\r\n\t\t\t\t\t\t\t\t: 'no-repeat'\r\n\t\t\t\t);\r\n\r\n\t\t\t\ttexture.needsUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_patterns[ texture.id ] === undefined\r\n\t\t\t\t? setFillStyle( 'rgba(0,0,0,1)' )\r\n\t\t\t\t: setFillStyle( _patterns[ texture.id ] );\r\n\r\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\r\n\t\t\tvar a, b, c, d, e, f, det, idet,\r\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\r\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\r\n\t\t\twidth = texture.image.width * texture.repeat.x,\r\n\t\t\theight = texture.image.height * texture.repeat.y;\r\n\r\n\t\t\tu0 = ( u0 + offsetX ) * width;\r\n\t\t\tv0 = ( 1.0 - v0 + offsetY ) * height;\r\n\r\n\t\t\tu1 = ( u1 + offsetX ) * width;\r\n\t\t\tv1 = ( 1.0 - v1 + offsetY ) * height;\r\n\r\n\t\t\tu2 = ( u2 + offsetX ) * width;\r\n\t\t\tv2 = ( 1.0 - v2 + offsetY ) * height;\r\n\r\n\t\t\tx1 -= x0; y1 -= y0;\r\n\t\t\tx2 -= x0; y2 -= y0;\r\n\r\n\t\t\tu1 -= u0; v1 -= v0;\r\n\t\t\tu2 -= u0; v2 -= v0;\r\n\r\n\t\t\tdet = u1 * v2 - u2 * v1;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tif ( _imagedatas[ texture.id ] === undefined ) {\r\n\r\n\t\t\t\t\tvar canvas = document.createElement( 'canvas' )\r\n\t\t\t\t\tcanvas.width = texture.image.width;\r\n\t\t\t\t\tcanvas.height = texture.image.height;\r\n\r\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\t\tcontext.drawImage( texture.image, 0, 0 );\r\n\r\n\t\t\t\t\t_imagedatas[ texture.id ] = context.getImageData( 0, 0, texture.image.width, texture.image.height ).data;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar data = _imagedatas[ texture.id ];\r\n\t\t\t\tvar index = ( Math.floor( u0 ) + Math.floor( v0 ) * texture.image.width ) * 4;\r\n\r\n\t\t\t\t_color.setRGB( data[ index ] / 255, data[ index + 1 ] / 255, data[ index + 2 ] / 255 );\r\n\t\t\t\tfillPath( _color );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tidet = 1 / det;\r\n\r\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\r\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\r\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\r\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\r\n\r\n\t\t\te = x0 - a * u0 - c * v0;\r\n\t\t\tf = y0 - b * u0 - d * v0;\r\n\r\n\t\t\t_context.save();\r\n\t\t\t_context.transform( a, b, c, d, e, f );\r\n\t\t\t_context.fill();\r\n\t\t\t_context.restore();\r\n\r\n\t\t}\r\n\r\n\t\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\r\n\r\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\r\n\t\t\tvar a, b, c, d, e, f, det, idet,\r\n\t\t\twidth = image.width - 1,\r\n\t\t\theight = image.height - 1;\r\n\r\n\t\t\tu0 *= width; v0 *= height;\r\n\t\t\tu1 *= width; v1 *= height;\r\n\t\t\tu2 *= width; v2 *= height;\r\n\r\n\t\t\tx1 -= x0; y1 -= y0;\r\n\t\t\tx2 -= x0; y2 -= y0;\r\n\r\n\t\t\tu1 -= u0; v1 -= v0;\r\n\t\t\tu2 -= u0; v2 -= v0;\r\n\r\n\t\t\tdet = u1 * v2 - u2 * v1;\r\n\r\n\t\t\tidet = 1 / det;\r\n\r\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\r\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\r\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\r\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\r\n\r\n\t\t\te = x0 - a * u0 - c * v0;\r\n\t\t\tf = y0 - b * u0 - d * v0;\r\n\r\n\t\t\t_context.save();\r\n\t\t\t_context.transform( a, b, c, d, e, f );\r\n\t\t\t_context.clip();\r\n\t\t\t_context.drawImage( image, 0, 0 );\r\n\t\t\t_context.restore();\r\n\r\n\t\t}\r\n\r\n\t\tfunction getGradientTexture( color1, color2, color3, color4 ) {\r\n\r\n\t\t\t// http://mrdoob.com/blog/post/710\r\n\r\n\t\t\t_pixelMapData[ 0 ] = ( color1.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 1 ] = ( color1.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 2 ] = ( color1.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapData[ 4 ] = ( color2.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 5 ] = ( color2.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 6 ] = ( color2.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapData[ 8 ] = ( color3.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 9 ] = ( color3.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 10 ] = ( color3.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapData[ 12 ] = ( color4.r * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 13 ] = ( color4.g * 255 ) | 0;\r\n\t\t\t_pixelMapData[ 14 ] = ( color4.b * 255 ) | 0;\r\n\r\n\t\t\t_pixelMapContext.putImageData( _pixelMapImage, 0, 0 );\r\n\t\t\t_gradientMapContext.drawImage( _pixelMap, 0, 0 );\r\n\r\n\t\t\treturn _gradientMap;\r\n\r\n\t\t}\r\n\r\n\t\tfunction smoothstep( value, min, max ) {\r\n\r\n\t\t\tvar x = ( value - min ) / ( max - min );\r\n\t\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t\t}\r\n\r\n\t\t// Hide anti-alias gaps\r\n\r\n\t\tfunction expand( v1, v2 ) {\r\n\r\n\t\t\tvar x = v2.x - v1.x, y =  v2.y - v1.y,\r\n\t\t\tdet = x * x + y * y, idet;\r\n\r\n\t\t\tif ( det === 0 ) return;\r\n\r\n\t\t\tidet = 1 / Math.sqrt( det );\r\n\r\n\t\t\tx *= idet; y *= idet;\r\n\r\n\t\t\tv2.x += x; v2.y += y;\r\n\t\t\tv1.x -= x; v1.y -= y;\r\n\r\n\t\t}\r\n\t};\r\n\r\n\t// Context cached methods.\r\n\r\n\tfunction setOpacity( value ) {\r\n\r\n\t\tif ( _contextGlobalAlpha !== value ) {\r\n\r\n\t\t\t_context.globalAlpha = value;\r\n\t\t\t_contextGlobalAlpha = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setBlending( value ) {\r\n\r\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\r\n\r\n\t\t\tif ( value === THREE.NormalBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\r\n\r\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\r\n\r\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'darker';\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_contextGlobalCompositeOperation = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineWidth( value ) {\r\n\r\n\t\tif ( _contextLineWidth !== value ) {\r\n\r\n\t\t\t_context.lineWidth = value;\r\n\t\t\t_contextLineWidth = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineCap( value ) {\r\n\r\n\t\t// \"butt\", \"round\", \"square\"\r\n\r\n\t\tif ( _contextLineCap !== value ) {\r\n\r\n\t\t\t_context.lineCap = value;\r\n\t\t\t_contextLineCap = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineJoin( value ) {\r\n\r\n\t\t// \"round\", \"bevel\", \"miter\"\r\n\r\n\t\tif ( _contextLineJoin !== value ) {\r\n\r\n\t\t\t_context.lineJoin = value;\r\n\t\t\t_contextLineJoin = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setStrokeStyle( value ) {\r\n\r\n\t\tif ( _contextStrokeStyle !== value ) {\r\n\r\n\t\t\t_context.strokeStyle = value;\r\n\t\t\t_contextStrokeStyle = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setFillStyle( value ) {\r\n\r\n\t\tif ( _contextFillStyle !== value ) {\r\n\r\n\t\t\t_context.fillStyle = value;\r\n\t\t\t_contextFillStyle = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\nTHREE.ShaderChunk = {\r\n\r\n\t// FOG\r\n\r\n\tfog_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_FOG\",\r\n\r\n\t\t\t\"uniform vec3 fogColor;\",\r\n\r\n\t\t\t\"#ifdef FOG_EXP2\",\r\n\r\n\t\t\t\t\"uniform float fogDensity;\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"uniform float fogNear;\",\r\n\t\t\t\t\"uniform float fogFar;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tfog_fragment: [\r\n\r\n\t\t\"#ifdef USE_FOG\",\r\n\r\n\t\t\t\"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\r\n\t\t\t\"#ifdef FOG_EXP2\",\r\n\r\n\t\t\t\t\"const float LOG2 = 1.442695;\",\r\n\t\t\t\t\"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\",\r\n\t\t\t\t\"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"float fogFactor = smoothstep( fogNear, fogFar, depth );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// ENVIRONMENT MAP\r\n\r\n\tenvmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_ENVMAP\",\r\n\r\n\t\t\t\"uniform float reflectivity;\",\r\n\t\t\t\"uniform samplerCube envMap;\",\r\n\t\t\t\"uniform float flipEnvMap;\",\r\n\t\t\t\"uniform int combine;\",\r\n\r\n\t\t\t\"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\t\"uniform bool useRefract;\",\r\n\t\t\t\t\"uniform float refractionRatio;\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"varying vec3 vReflect;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tenvmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_ENVMAP\",\r\n\r\n\t\t\t\"vec3 reflectVec;\",\r\n\r\n\t\t\t\"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\t\"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\",\r\n\r\n\t\t\t\t\"if ( useRefract ) {\",\r\n\r\n\t\t\t\t\t\"reflectVec = refract( cameraToVertex, normal, refractionRatio );\",\r\n\r\n\t\t\t\t\"} else { \",\r\n\r\n\t\t\t\t\t\"reflectVec = reflect( cameraToVertex, normal );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"reflectVec = vReflect;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\",\r\n\t\t\t\t\"vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\"cubeColor.xyz *= cubeColor.xyz;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"if ( combine == 1 ) {\",\r\n\r\n\t\t\t\t\"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\",\r\n\r\n\t\t\t\"} else if ( combine == 2 ) {\",\r\n\r\n\t\t\t\t\"gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\",\r\n\r\n\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\"gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tenvmap_pars_vertex: [\r\n\r\n\t\t\"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\"varying vec3 vReflect;\",\r\n\r\n\t\t\t\"uniform float refractionRatio;\",\r\n\t\t\t\"uniform bool useRefract;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tworldpos_vertex : [\r\n\r\n\t\t\"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\",\r\n\r\n\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * skinned;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tenvmap_vertex : [\r\n\r\n\t\t\"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\",\r\n\r\n\t\t\t\"vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\",\r\n\t\t\t\"worldNormal = normalize( worldNormal );\",\r\n\r\n\t\t\t\"vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\",\r\n\r\n\t\t\t\"if ( useRefract ) {\",\r\n\r\n\t\t\t\t\"vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\",\r\n\r\n\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\"vReflect = reflect( cameraToVertex, worldNormal );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// COLOR MAP (particles)\r\n\r\n\tmap_particle_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tmap_particle_fragment: [\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// COLOR MAP (triangles)\r\n\r\n\tmap_pars_vertex: [\r\n\r\n\t\t\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\r\n\r\n\t\t\t\"varying vec2 vUv;\",\r\n\t\t\t\"uniform vec4 offsetRepeat;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmap_pars_fragment: [\r\n\r\n\t\t\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\r\n\r\n\t\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmap_vertex: [\r\n\r\n\t\t\"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\",\r\n\r\n\t\t\t\"vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_MAP\",\r\n\r\n\t\t\t\"vec4 texelColor = texture2D( map, vUv );\",\r\n\r\n\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\"texelColor.xyz *= texelColor.xyz;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * texelColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LIGHT MAP\r\n\r\n\tlightmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"varying vec2 vUv2;\",\r\n\t\t\t\"uniform sampler2D lightMap;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlightmap_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"varying vec2 vUv2;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlightmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlightmap_vertex: [\r\n\r\n\t\t\"#ifdef USE_LIGHTMAP\",\r\n\r\n\t\t\t\"vUv2 = uv2;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// BUMP MAP\r\n\r\n\tbumpmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_BUMPMAP\",\r\n\r\n\t\t\t\"uniform sampler2D bumpMap;\",\r\n\t\t\t\"uniform float bumpScale;\",\r\n\r\n\t\t\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\r\n\t\t\t//\thttp://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\r\n\r\n\t\t\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\n\t\t\t\"vec2 dHdxy_fwd() {\",\r\n\r\n\t\t\t\t\"vec2 dSTdx = dFdx( vUv );\",\r\n\t\t\t\t\"vec2 dSTdy = dFdy( vUv );\",\r\n\r\n\t\t\t\t\"float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\",\r\n\t\t\t\t\"float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\",\r\n\t\t\t\t\"float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\",\r\n\r\n\t\t\t\t\"return vec2( dBx, dBy );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\",\r\n\r\n\t\t\t\t\"vec3 vSigmaX = dFdx( surf_pos );\",\r\n\t\t\t\t\"vec3 vSigmaY = dFdy( surf_pos );\",\r\n\t\t\t\t\"vec3 vN = surf_norm;\",\t\t// normalized\r\n\r\n\t\t\t\t\"vec3 R1 = cross( vSigmaY, vN );\",\r\n\t\t\t\t\"vec3 R2 = cross( vN, vSigmaX );\",\r\n\r\n\t\t\t\t\"float fDet = dot( vSigmaX, R1 );\",\r\n\r\n\t\t\t\t\"vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\",\r\n\t\t\t\t\"return normalize( abs( fDet ) * surf_norm - vGrad );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// NORMAL MAP\r\n\r\n\tnormalmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_NORMALMAP\",\r\n\r\n\t\t\t\"uniform sampler2D normalMap;\",\r\n\t\t\t\"uniform vec2 normalScale;\",\r\n\r\n\t\t\t// Per-Pixel Tangent Space Normal Mapping\r\n\t\t\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\r\n\r\n\t\t\t\"vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\",\r\n\r\n\t\t\t\t\"vec3 q0 = dFdx( eye_pos.xyz );\",\r\n\t\t\t\t\"vec3 q1 = dFdy( eye_pos.xyz );\",\r\n\t\t\t\t\"vec2 st0 = dFdx( vUv.st );\",\r\n\t\t\t\t\"vec2 st1 = dFdy( vUv.st );\",\r\n\r\n\t\t\t\t\"vec3 S = normalize(  q0 * st1.t - q1 * st0.t );\",\r\n\t\t\t\t\"vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\",\r\n\t\t\t\t\"vec3 N = normalize( surf_norm );\",\r\n\r\n\t\t\t\t\"vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\",\r\n\t\t\t\t\"mapN.xy = normalScale * mapN.xy;\",\r\n\t\t\t\t\"mat3 tsn = mat3( S, T, N );\",\r\n\t\t\t\t\"return normalize( tsn * mapN );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// SPECULAR MAP\r\n\r\n\tspecularmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_SPECULARMAP\",\r\n\r\n\t\t\t\"uniform sampler2D specularMap;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tspecularmap_fragment: [\r\n\r\n\t\t\"float specularStrength;\",\r\n\r\n\t\t\"#ifdef USE_SPECULARMAP\",\r\n\r\n\t\t\t\"vec4 texelSpecular = texture2D( specularMap, vUv );\",\r\n\t\t\t\"specularStrength = texelSpecular.r;\",\r\n\r\n\t\t\"#else\",\r\n\r\n\t\t\t\"specularStrength = 1.0;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LIGHTS LAMBERT\r\n\r\n\tlights_lambert_pars_vertex: [\r\n\r\n\t\t\"uniform vec3 ambient;\",\r\n\t\t\"uniform vec3 diffuse;\",\r\n\t\t\"uniform vec3 emissive;\",\r\n\r\n\t\t\"uniform vec3 ambientLightColor;\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\"uniform vec3 wrapRGB;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlights_lambert_vertex: [\r\n\r\n\t\t\"vLightFront = vec3( 0.0 );\",\r\n\r\n\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"vLightBack = vec3( 0.0 );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"transformedNormal = normalize( transformedNormal );\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\r\n\t\t\t\"vec3 dirVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\"float dotProduct = dot( transformedNormal, dirVector );\",\r\n\t\t\t\"vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\"vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\t\t\t\t\"directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"vLightFront += directionalLightColor[ i ] * directionalLightWeighting;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\"lVector = normalize( lVector );\",\r\n\t\t\t\t\"float dotProduct = dot( transformedNormal, lVector );\",\r\n\r\n\t\t\t\t\"vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\"vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\t\t\t\t\t\"pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\",\r\n\r\n\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\"pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\",\r\n\r\n\t\t\t\t\"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\r\n\r\n\t\t\t\t\t\"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\r\n\r\n\t\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\"lVector = normalize( lVector );\",\r\n\r\n\t\t\t\t\t\"float dotProduct = dot( transformedNormal, lVector );\",\r\n\t\t\t\t\t\"vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\"vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\"vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\",\r\n\t\t\t\t\t\t\"spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\t\"spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\t\"vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\"vec3 lVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t\"float dotProduct = dot( transformedNormal, lVector );\",\r\n\r\n\t\t\t\t\"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\r\n\t\t\t\t\"float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\",\r\n\r\n\t\t\t\t\"vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t\"vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\",\r\n\r\n\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LIGHTS PHONG\r\n\r\n\tlights_phong_pars_vertex: [\r\n\r\n\t\t\"#ifndef PHONG_PER_PIXEL\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tlights_phong_vertex: [\r\n\r\n\t\t\"#ifndef PHONG_PER_PIXEL\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\"vPointLight[ i ] = vec4( lVector, lDistance );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\"vec3 lVector = lPosition.xyz - mvPosition.xyz;\",\r\n\r\n\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\"vSpotLight[ i ] = vec4( lVector, lDistance );\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"vWorldPosition = worldPosition.xyz;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlights_phong_pars_fragment: [\r\n\r\n\t\t\"uniform vec3 ambientLightColor;\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\"uniform vec3 wrapRGB;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"varying vec3 vViewPosition;\",\r\n\t\t\"varying vec3 vNormal;\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tlights_phong_fragment: [\r\n\r\n\t\t\"vec3 normal = normalize( vNormal );\",\r\n\t\t\"vec3 viewPosition = normalize( vViewPosition );\",\r\n\r\n\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\"normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef USE_NORMALMAP\",\r\n\r\n\t\t\t\"normal = perturbNormal2Arb( -viewPosition, normal );\",\r\n\r\n\t\t\"#elif defined( USE_BUMPMAP )\",\r\n\r\n\t\t\t\"normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 pointDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 pointSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\"vec3 lVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\"lVector = normalize( lVector );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"vec3 lVector = normalize( vPointLight[ i ].xyz );\",\r\n\t\t\t\t\t\"float lDistance = vPointLight[ i ].w;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"float pointDiffuseWeightFull = max( dotProduct, 0.0 );\",\r\n\t\t\t\t\t\"float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"float pointDiffuseWeight = max( dotProduct, 0.0 );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\",\r\n\r\n\t\t\t\t// specular\r\n\r\n\t\t\t\t\"vec3 pointHalfVector = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\",\r\n\t\t\t\t\"float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 spotDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 spotSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"#ifdef PHONG_PER_PIXEL\",\r\n\r\n\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\"vec3 lVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\"float lDistance = 1.0;\",\r\n\t\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\"lVector = normalize( lVector );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"vec3 lVector = normalize( vSpotLight[ i ].xyz );\",\r\n\t\t\t\t\t\"float lDistance = vSpotLight[ i ].w;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\",\r\n\r\n\t\t\t\t\"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\r\n\r\n\t\t\t\t\t\"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\r\n\r\n\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\r\n\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\"float spotDiffuseWeightFull = max( dotProduct, 0.0 );\",\r\n\t\t\t\t\t\t\"float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"float spotDiffuseWeight = max( dotProduct, 0.0 );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\"vec3 spotHalfVector = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\t\"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\"float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 dirDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 dirSpecular = vec3( 0.0 );\" ,\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\"vec3 dirVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\"float dotProduct = dot( normal, dirVector );\",\r\n\r\n\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\"float dirDiffuseWeightFull = max( dotProduct, 0.0 );\",\r\n\t\t\t\t\t\"float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\"vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"float dirDiffuseWeight = max( dotProduct, 0.0 );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t// specular\r\n\r\n\t\t\t\t\"vec3 dirHalfVector = normalize( dirVector + viewPosition );\",\r\n\t\t\t\t\"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\",\r\n\t\t\t\t\"float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t// fresnel term from skin shader\r\n\t\t\t\t\t\"const float F0 = 0.128;\",\r\n\r\n\t\t\t\t\t\"float base = 1.0 - dot( viewPosition, dirHalfVector );\",\r\n\t\t\t\t\t\"float exponential = pow( base, 5.0 );\",\r\n\r\n\t\t\t\t\t\"float fresnel = exponential + F0 * ( 1.0 - exponential );\",\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t// fresnel term from fresnel shader\r\n\t\t\t\t\t\"const float mFresnelBias = 0.08;\",\r\n\t\t\t\t\t\"const float mFresnelScale = 0.3;\",\r\n\t\t\t\t\t\"const float mFresnelPower = 5.0;\",\r\n\r\n\t\t\t\t\t\"float fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\",\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t//\"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\",\r\n\r\n\t\t\t\t\t\"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"vec3 hemiDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\"vec3 hemiSpecular = vec3( 0.0 );\" ,\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\"vec3 lVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\t\t\t\t\"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\r\n\r\n\t\t\t\t\"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\r\n\r\n\t\t\t\t\"hemiDiffuse += diffuse * hemiColor;\",\r\n\r\n\t\t\t\t// specular (sky light)\r\n\r\n\t\t\t\t\"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\",\r\n\t\t\t\t\"float hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t// specular (ground light)\r\n\r\n\t\t\t\t\"vec3 lVectorGround = -lVector;\",\r\n\r\n\t\t\t\t\"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\",\r\n\t\t\t\t\"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\",\r\n\t\t\t\t\"float hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\",\r\n\r\n\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\"float dotProductGround = dot( normal, lVectorGround );\",\r\n\r\n\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\"float specularNormalization = ( shininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\"vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\",\r\n\t\t\t\t\t\"vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\",\r\n\t\t\t\t\t\"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"hemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"vec3 totalDiffuse = vec3( 0.0 );\",\r\n\t\t\"vec3 totalSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += dirDiffuse;\",\r\n\t\t\t\"totalSpecular += dirSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += hemiDiffuse;\",\r\n\t\t\t\"totalSpecular += hemiSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += pointDiffuse;\",\r\n\t\t\t\"totalSpecular += pointSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\"totalDiffuse += spotDiffuse;\",\r\n\t\t\t\"totalSpecular += spotSpecular;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef METAL\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\",\r\n\r\n\t\t\"#else\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// VERTEX COLORS\r\n\r\n\tcolor_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"varying vec3 vColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tcolor_fragment: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"gl_FragColor = gl_FragColor * vec4( vColor, opacity );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tcolor_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"varying vec3 vColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\r\n\tcolor_vertex: [\r\n\r\n\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\"vColor = color * color;\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"vColor = color;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// SKINNING\r\n\r\n\tskinning_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"#ifdef BONE_TEXTURE\",\r\n\r\n\t\t\t\t\"uniform sampler2D boneTexture;\",\r\n\r\n\t\t\t\t\"mat4 getBoneMatrix( const in float i ) {\",\r\n\r\n\t\t\t\t\t\"float j = i * 4.0;\",\r\n\t\t\t\t\t\"float x = mod( j, N_BONE_PIXEL_X );\",\r\n\t\t\t\t\t\"float y = floor( j / N_BONE_PIXEL_X );\",\r\n\r\n\t\t\t\t\t\"const float dx = 1.0 / N_BONE_PIXEL_X;\",\r\n\t\t\t\t\t\"const float dy = 1.0 / N_BONE_PIXEL_Y;\",\r\n\r\n\t\t\t\t\t\"y = dy * ( y + 0.5 );\",\r\n\r\n\t\t\t\t\t\"vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\",\r\n\t\t\t\t\t\"vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\",\r\n\t\t\t\t\t\"vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\",\r\n\t\t\t\t\t\"vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\",\r\n\r\n\t\t\t\t\t\"mat4 bone = mat4( v1, v2, v3, v4 );\",\r\n\r\n\t\t\t\t\t\"return bone;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\t\"uniform mat4 boneGlobalMatrices[ MAX_BONES ];\",\r\n\r\n\t\t\t\t\"mat4 getBoneMatrix( const in float i ) {\",\r\n\r\n\t\t\t\t\t\"mat4 bone = boneGlobalMatrices[ int(i) ];\",\r\n\t\t\t\t\t\"return bone;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tskinbase_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"mat4 boneMatX = getBoneMatrix( skinIndex.x );\",\r\n\t\t\t\"mat4 boneMatY = getBoneMatrix( skinIndex.y );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tskinning_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\"vec4 skinVertex = vec4( morphed, 1.0 );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\"vec4 skinVertex = vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\r\n\t\t\t\"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// MORPHING\r\n\r\n\tmorphtarget_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\"#ifndef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"uniform float morphTargetInfluences[ 8 ];\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\"uniform float morphTargetInfluences[ 4 ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmorphtarget_vertex: [\r\n\r\n\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\"vec3 morphed = vec3( 0.0 );\",\r\n\t\t\t\"morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\",\r\n\t\t\t\"morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\",\r\n\t\t\t\"morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\",\r\n\t\t\t\"morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\",\r\n\r\n\t\t\t\"#ifndef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\",\r\n\t\t\t\"morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\",\r\n\t\t\t\"morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\",\r\n\t\t\t\"morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"morphed += position;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tdefault_vertex : [\r\n\r\n\t\t\"vec4 mvPosition;\",\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"mvPosition = modelViewMatrix * skinned;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\",\r\n\r\n\t\t\t\"mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\",\r\n\r\n\t\t\t\"mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"gl_Position = projectionMatrix * mvPosition;\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tmorphnormal_vertex: [\r\n\r\n\t\t\"#ifdef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"vec3 morphedNormal = vec3( 0.0 );\",\r\n\r\n\t\t\t\"morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\",\r\n\t\t\t\"morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\",\r\n\t\t\t\"morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\",\r\n\t\t\t\"morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\",\r\n\r\n\t\t\t\"morphedNormal += normal;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tskinnormal_vertex: [\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"mat4 skinMatrix = skinWeight.x * boneMatX;\",\r\n\t\t\t\"skinMatrix \t+= skinWeight.y * boneMatY;\",\r\n\r\n\t\t\t\"#ifdef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\"vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\",\r\n\r\n\t\t\t\"#else\",\r\n\r\n\t\t\t\"vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tdefaultnormal_vertex: [\r\n\r\n\t\t\"vec3 objectNormal;\",\r\n\r\n\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\"objectNormal = skinnedNormal.xyz;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\",\r\n\r\n\t\t\t\"objectNormal = morphedNormal;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\",\r\n\r\n\t\t\t\"objectNormal = normal;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"#ifdef FLIP_SIDED\",\r\n\r\n\t\t\t\"objectNormal = -objectNormal;\",\r\n\r\n\t\t\"#endif\",\r\n\r\n\t\t\"vec3 transformedNormal = normalMatrix * objectNormal;\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// SHADOW MAP\r\n\r\n\t// based on SpiderGL shadow map and Fabien Sanglard's GLSL shadow mapping examples\r\n\t//  http://spidergl.org/example.php?id=6\r\n\t// \thttp://fabiensanglard.net/shadowmapping\r\n\r\n\tshadowmap_pars_fragment: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"uniform sampler2D shadowMap[ MAX_SHADOWS ];\",\r\n\t\t\t\"uniform vec2 shadowMapSize[ MAX_SHADOWS ];\",\r\n\r\n\t\t\t\"uniform float shadowDarkness[ MAX_SHADOWS ];\",\r\n\t\t\t\"uniform float shadowBias[ MAX_SHADOWS ];\",\r\n\r\n\t\t\t\"varying vec4 vShadowCoord[ MAX_SHADOWS ];\",\r\n\r\n\t\t\t\"float unpackDepth( const in vec4 rgba_depth ) {\",\r\n\r\n\t\t\t\t\"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\",\r\n\t\t\t\t\"float depth = dot( rgba_depth, bit_shift );\",\r\n\t\t\t\t\"return depth;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tshadowmap_fragment: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"#ifdef SHADOWMAP_DEBUG\",\r\n\r\n\t\t\t\t\"vec3 frustumColors[3];\",\r\n\t\t\t\t\"frustumColors[0] = vec3( 1.0, 0.5, 0.0 );\",\r\n\t\t\t\t\"frustumColors[1] = vec3( 0.0, 1.0, 0.8 );\",\r\n\t\t\t\t\"frustumColors[2] = vec3( 0.0, 0.5, 1.0 );\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef SHADOWMAP_CASCADE\",\r\n\r\n\t\t\t\t\"int inFrustumCount = 0;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"float fDepth;\",\r\n\t\t\t\"vec3 shadowColor = vec3( 1.0 );\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\",\r\n\r\n\t\t\t\t// \"if ( something && something )\" \t\t breaks ATI OpenGL shader compiler\r\n\t\t\t\t// \"if ( all( something, something ) )\"  using this instead\r\n\r\n\t\t\t\t\"bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\",\r\n\t\t\t\t\"bool inFrustum = all( inFrustumVec );\",\r\n\r\n\t\t\t\t// don't shadow pixels outside of light frustum\r\n\t\t\t\t// use just first frustum (for cascades)\r\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\r\n\r\n\t\t\t\t\"#ifdef SHADOWMAP_CASCADE\",\r\n\r\n\t\t\t\t\t\"inFrustumCount += int( inFrustum );\",\r\n\t\t\t\t\t\"bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"bool frustumTest = all( frustumTestVec );\",\r\n\r\n\t\t\t\t\"if ( frustumTest ) {\",\r\n\r\n\t\t\t\t\t\"shadowCoord.z += shadowBias[ i ];\",\r\n\r\n\t\t\t\t\t\"#if defined( SHADOWMAP_TYPE_PCF )\",\r\n\r\n\t\t\t\t\t\t// Percentage-close filtering\r\n\t\t\t\t\t\t// (9 pixel kernel)\r\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\r\n\r\n\t\t\t\t\t\t\"float shadow = 0.0;\",\r\n\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\r\n\t\t\t\t\t\t// must enroll loop manually\r\n\r\n\t\t\t\t\t\t\"for ( float y = -1.25; y <= 1.25; y += 1.25 )\",\r\n\t\t\t\t\t\t\t\"for ( float x = -1.25; x <= 1.25; x += 1.25 ) {\",\r\n\r\n\t\t\t\t\t\t\t\t\"vec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\",\r\n\r\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple \"texture2D\" lookup\r\n\t\t\t\t\t\t\t\t//\"vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\",\r\n\r\n\t\t\t\t\t\t\t\t\"float fDepth = unpackDepth( rgbaDepth );\",\r\n\r\n\t\t\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z )\",\r\n\t\t\t\t\t\t\t\t\t\"shadow += 1.0;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\t\"shadow /= 9.0;\",\r\n\r\n\t\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t\t\"const float shadowDelta = 1.0 / 9.0;\",\r\n\r\n\t\t\t\t\t\t\"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\",\r\n\t\t\t\t\t\t\"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\",\r\n\r\n\t\t\t\t\t\t\"float dx0 = -1.25 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy0 = -1.25 * yPixelOffset;\",\r\n\t\t\t\t\t\t\"float dx1 = 1.25 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy1 = 1.25 * yPixelOffset;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\",\r\n\r\n\t\t\t\t\t\t\"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\",\r\n\r\n\t\t\t\t\t\"#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\",\r\n\r\n\t\t\t\t\t\t// Percentage-close filtering\r\n\t\t\t\t\t\t// (9 pixel kernel)\r\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\r\n\r\n\t\t\t\t\t\t\"float shadow = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\",\r\n\t\t\t\t\t\t\"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\",\r\n\r\n\t\t\t\t\t\t\"float dx0 = -1.0 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy0 = -1.0 * yPixelOffset;\",\r\n\t\t\t\t\t\t\"float dx1 = 1.0 * xPixelOffset;\",\r\n\t\t\t\t\t\t\"float dy1 = 1.0 * yPixelOffset;\",\r\n\r\n\t\t\t\t\t\t\"mat3 shadowKernel;\",\r\n\t\t\t\t\t\t\"mat3 depthKernel;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[0][0] < shadowCoord.z ) shadowKernel[0][0] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[0][0] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[0][1] < shadowCoord.z ) shadowKernel[0][1] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[0][1] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[0][2] < shadowCoord.z ) shadowKernel[0][2] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[0][2] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[1][0] < shadowCoord.z ) shadowKernel[1][0] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[1][0] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[1][1] < shadowCoord.z ) shadowKernel[1][1] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[1][1] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[1][2] < shadowCoord.z ) shadowKernel[1][2] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[1][2] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[2][0] < shadowCoord.z ) shadowKernel[2][0] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[2][0] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[2][1] < shadowCoord.z ) shadowKernel[2][1] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[2][1] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\",\r\n\t\t\t\t\t\t\"if ( depthKernel[2][2] < shadowCoord.z ) shadowKernel[2][2] = 0.25;\",\r\n\t\t\t\t\t\t\"else shadowKernel[2][2] = 0.0;\",\r\n\r\n\t\t\t\t\t\t\"vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\",\r\n\r\n\t\t\t\t\t\t\"shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\",\r\n\t\t\t\t\t\t\"shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\",\r\n\r\n\t\t\t\t\t\t\"vec4 shadowValues;\",\r\n\t\t\t\t\t\t\"shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\",\r\n\t\t\t\t\t\t\"shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\",\r\n\t\t\t\t\t\t\"shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\",\r\n\t\t\t\t\t\t\"shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\",\r\n\r\n\t\t\t\t\t\t\"shadow = dot( shadowValues, vec4( 1.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\",\r\n\t\t\t\t\t\t\"float fDepth = unpackDepth( rgbaDepth );\",\r\n\r\n\t\t\t\t\t\t\"if ( fDepth < shadowCoord.z )\",\r\n\r\n\t\t\t\t\t\t\t// spot with multiple shadows is darker\r\n\r\n\t\t\t\t\t\t\t\"shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\",\r\n\r\n\t\t\t\t\t\t\t// spot with multiple shadows has the same color as single shadow spot\r\n\r\n\t\t\t\t\t\t\t//\"shadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\r\n\t\t\t\t\"#ifdef SHADOWMAP_DEBUG\",\r\n\r\n\t\t\t\t\t\"#ifdef SHADOWMAP_CASCADE\",\r\n\r\n\t\t\t\t\t\t\"if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"#ifdef GAMMA_OUTPUT\",\r\n\r\n\t\t\t\t\"shadowColor *= shadowColor;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tshadowmap_pars_vertex: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"varying vec4 vShadowCoord[ MAX_SHADOWS ];\",\r\n\t\t\t\"uniform mat4 shadowMatrix[ MAX_SHADOWS ];\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\tshadowmap_vertex: [\r\n\r\n\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\r\n\r\n\t\t\t\t\"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// ALPHATEST\r\n\r\n\talphatest_fragment: [\r\n\r\n\t\t\"#ifdef ALPHATEST\",\r\n\r\n\t\t\t\"if ( gl_FragColor.a < ALPHATEST ) discard;\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\"),\r\n\r\n\t// LINEAR SPACE\r\n\r\n\tlinear_to_gamma_fragment: [\r\n\r\n\t\t\"#ifdef GAMMA_OUTPUT\",\r\n\r\n\t\t\t\"gl_FragColor.xyz = sqrt( gl_FragColor.xyz );\",\r\n\r\n\t\t\"#endif\"\r\n\r\n\t].join(\"\\n\")\r\n\r\n\r\n};\r\n\r\nTHREE.UniformsUtils = {\r\n\r\n\tmerge: function ( uniforms ) {\r\n\r\n\t\tvar u, p, tmp, merged = {};\r\n\r\n\t\tfor ( u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\ttmp = this.clone( uniforms[ u ] );\r\n\r\n\t\t\tfor ( p in tmp ) {\r\n\r\n\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn merged;\r\n\r\n\t},\r\n\r\n\tclone: function ( uniforms_src ) {\r\n\r\n\t\tvar u, p, parameter, parameter_src, uniforms_dst = {};\r\n\r\n\t\tfor ( u in uniforms_src ) {\r\n\r\n\t\t\tuniforms_dst[ u ] = {};\r\n\r\n\t\t\tfor ( p in uniforms_src[ u ] ) {\r\n\r\n\t\t\t\tparameter_src = uniforms_src[ u ][ p ];\r\n\r\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\r\n\r\n\t\t\t\t} else if ( parameter_src instanceof Array ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms_dst;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.UniformsLib = {\r\n\r\n\tcommon: {\r\n\r\n\t\t\"diffuse\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\r\n\r\n\t\t\"map\" : { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\r\n\t\t\"lightMap\" : { type: \"t\", value: null },\r\n\t\t\"specularMap\" : { type: \"t\", value: null },\r\n\r\n\t\t\"envMap\" : { type: \"t\", value: null },\r\n\t\t\"flipEnvMap\" : { type: \"f\", value: -1 },\r\n\t\t\"useRefract\" : { type: \"i\", value: 0 },\r\n\t\t\"reflectivity\" : { type: \"f\", value: 1.0 },\r\n\t\t\"refractionRatio\" : { type: \"f\", value: 0.98 },\r\n\t\t\"combine\" : { type: \"i\", value: 0 },\r\n\r\n\t\t\"morphTargetInfluences\" : { type: \"f\", value: 0 }\r\n\r\n\t},\r\n\r\n\tbump: {\r\n\r\n\t\t\"bumpMap\" : { type: \"t\", value: null },\r\n\t\t\"bumpScale\" : { type: \"f\", value: 1 }\r\n\r\n\t},\r\n\r\n\tnormalmap: {\r\n\r\n\t\t\"normalMap\" : { type: \"t\", value: null },\r\n\t\t\"normalScale\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\r\n\t},\r\n\r\n\tfog : {\r\n\r\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\r\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\r\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\r\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tlights: {\r\n\r\n\t\t\"ambientLightColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"directionalLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"directionalLightColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"hemisphereLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"hemisphereLightSkyColor\" : { type: \"fv\", value: [] },\r\n\t\t\"hemisphereLightGroundColor\" : { type: \"fv\", value: [] },\r\n\r\n\t\t\"pointLightColor\" : { type: \"fv\", value: [] },\r\n\t\t\"pointLightPosition\" : { type: \"fv\", value: [] },\r\n\t\t\"pointLightDistance\" : { type: \"fv1\", value: [] },\r\n\r\n\t\t\"spotLightColor\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightPosition\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightDirection\" : { type: \"fv\", value: [] },\r\n\t\t\"spotLightDistance\" : { type: \"fv1\", value: [] },\r\n\t\t\"spotLightAngleCos\" : { type: \"fv1\", value: [] },\r\n\t\t\"spotLightExponent\" : { type: \"fv1\", value: [] }\r\n\r\n\t},\r\n\r\n\tparticle: {\r\n\r\n\t\t\"psColor\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\r\n\t\t\"size\" : { type: \"f\", value: 1.0 },\r\n\t\t\"scale\" : { type: \"f\", value: 1.0 },\r\n\t\t\"map\" : { type: \"t\", value: null },\r\n\r\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\r\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\r\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\r\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tshadowmap: {\r\n\r\n\t\t\"shadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"shadowMapSize\": { type: \"v2v\", value: [] },\r\n\r\n\t\t\"shadowBias\" : { type: \"fv1\", value: [] },\r\n\t\t\"shadowDarkness\": { type: \"fv1\", value: [] },\r\n\r\n\t\t\"shadowMatrix\" : { type: \"m4v\", value: [] }\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ShaderLib = {\r\n\r\n\t'basic': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\r\n\t\t\t\t\"#ifdef USE_ENVMAP\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( diffuse, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'lambert': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"ambient\"  : { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"#define LAMBERT\",\r\n\r\n\t\t\t\"varying vec3 vLightFront;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"varying vec3 vLightBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_lambert_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_lambert_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"varying vec3 vLightFront;\",\r\n\r\n\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\"varying vec3 vLightBack;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\r\n\t\t\t\t\"#ifdef DOUBLE_SIDED\",\r\n\r\n\t\t\t\t\t//\"float isFront = float( gl_FrontFacing );\",\r\n\t\t\t\t\t//\"gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;\",\r\n\r\n\t\t\t\t\t\"if ( gl_FrontFacing )\",\r\n\t\t\t\t\t\t\"gl_FragColor.xyz *= vLightFront;\",\r\n\t\t\t\t\t\"else\",\r\n\t\t\t\t\t\t\"gl_FragColor.xyz *= vLightBack;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz *= vLightFront;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'phong': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"bump\" ],\r\n\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"ambient\"  : { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\t\"shininess\": { type: \"f\", value: 30 },\r\n\t\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"#define PHONG\",\r\n\r\n\t\t\t\"varying vec3 vViewPosition;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\r\n\r\n\t\t\t\t\"vNormal = normalize( transformedNormal );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\t\"vViewPosition = -mvPosition.xyz;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform vec3 ambient;\",\r\n\t\t\t\"uniform vec3 emissive;\",\r\n\t\t\t\"uniform vec3 specular;\",\r\n\t\t\t\"uniform float shininess;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"bumpmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"normalmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'particle_basic': {\r\n\r\n\t\tuniforms:  THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"particle\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform float size;\",\r\n\t\t\t\"uniform float scale;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\t\"#ifdef USE_SIZEATTENUATION\",\r\n\t\t\t\t\t\"gl_PointSize = size * ( scale / length( mvPosition.xyz ) );\",\r\n\t\t\t\t\"#else\",\r\n\t\t\t\t\t\"gl_PointSize = size;\",\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 psColor;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"map_particle_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( psColor, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"map_particle_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'dashed': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"scale\":     { type: \"f\", value: 1 },\r\n\t\t\t\t\"dashSize\":  { type: \"f\", value: 1 },\r\n\t\t\t\t\"totalSize\": { type: \"f\", value: 2 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform float scale;\",\r\n\t\t\t\"attribute float lineDistance;\",\r\n\r\n\t\t\t\"varying float vLineDistance;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\r\n\r\n\t\t\t\t\"vLineDistance = scale * lineDistance;\",\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 diffuse;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform float dashSize;\",\r\n\t\t\t\"uniform float totalSize;\",\r\n\r\n\t\t\t\"varying float vLineDistance;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"if ( mod( vLineDistance, totalSize ) > dashSize ) {\",\r\n\r\n\t\t\t\t\t\"discard;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( diffuse, opacity );\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'depth': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"mNear\": { type: \"f\", value: 1.0 },\r\n\t\t\t\"mFar\" : { type: \"f\", value: 2000.0 },\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float mNear;\",\r\n\t\t\t\"uniform float mFar;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\t\t\t\t\"float color = 1.0 - smoothstep( mNear, mFar, depth );\",\r\n\t\t\t\t\"gl_FragColor = vec4( vec3( color ), opacity );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t'normal': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform float opacity;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tNormal map shader\r\n\t//\t\t- Blinn-Phong\r\n\t//\t\t- normal + diffuse + specular + AO + displacement + reflection + shadow maps\r\n\t//\t\t- point and directional lights (use with \"lights: true\" material option)\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'normalmap' : {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\r\n\r\n\t\t\t{\r\n\r\n\t\t\t\"enableAO\"\t\t  : { type: \"i\", value: 0 },\r\n\t\t\t\"enableDiffuse\"\t  : { type: \"i\", value: 0 },\r\n\t\t\t\"enableSpecular\"  : { type: \"i\", value: 0 },\r\n\t\t\t\"enableReflection\": { type: \"i\", value: 0 },\r\n\t\t\t\"enableDisplacement\": { type: \"i\", value: 0 },\r\n\r\n\t\t\t\"tDisplacement\": { type: \"t\", value: null }, // must go first as this is vertex texture\r\n\t\t\t\"tDiffuse\"\t   : { type: \"t\", value: null },\r\n\t\t\t\"tCube\"\t\t   : { type: \"t\", value: null },\r\n\t\t\t\"tNormal\"\t   : { type: \"t\", value: null },\r\n\t\t\t\"tSpecular\"\t   : { type: \"t\", value: null },\r\n\t\t\t\"tAO\"\t\t   : { type: \"t\", value: null },\r\n\r\n\t\t\t\"uNormalScale\": { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\r\n\r\n\t\t\t\"uDisplacementBias\": { type: \"f\", value: 0.0 },\r\n\t\t\t\"uDisplacementScale\": { type: \"f\", value: 1.0 },\r\n\r\n\t\t\t\"uDiffuseColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\"uSpecularColor\": { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\"uAmbientColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\t\"uShininess\": { type: \"f\", value: 30 },\r\n\t\t\t\"uOpacity\": { type: \"f\", value: 1 },\r\n\r\n\t\t\t\"useRefract\": { type: \"i\", value: 0 },\r\n\t\t\t\"uRefractionRatio\": { type: \"f\", value: 0.98 },\r\n\t\t\t\"uReflectivity\": { type: \"f\", value: 0.5 },\r\n\r\n\t\t\t\"uOffset\" : { type: \"v2\", value: new THREE.Vector2( 0, 0 ) },\r\n\t\t\t\"uRepeat\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\r\n\r\n\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\r\n\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 uAmbientColor;\",\r\n\t\t\t\"uniform vec3 uDiffuseColor;\",\r\n\t\t\t\"uniform vec3 uSpecularColor;\",\r\n\t\t\t\"uniform float uShininess;\",\r\n\t\t\t\"uniform float uOpacity;\",\r\n\r\n\t\t\t\"uniform bool enableDiffuse;\",\r\n\t\t\t\"uniform bool enableSpecular;\",\r\n\t\t\t\"uniform bool enableAO;\",\r\n\t\t\t\"uniform bool enableReflection;\",\r\n\r\n\t\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\t\"uniform sampler2D tNormal;\",\r\n\t\t\t\"uniform sampler2D tSpecular;\",\r\n\t\t\t\"uniform sampler2D tAO;\",\r\n\r\n\t\t\t\"uniform samplerCube tCube;\",\r\n\r\n\t\t\t\"uniform vec2 uNormalScale;\",\r\n\r\n\t\t\t\"uniform bool useRefract;\",\r\n\t\t\t\"uniform float uRefractionRatio;\",\r\n\t\t\t\"uniform float uReflectivity;\",\r\n\r\n\t\t\t\"varying vec3 vTangent;\",\r\n\t\t\t\"varying vec3 vBinormal;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\t\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\t\"uniform vec3 ambientLightColor;\",\r\n\r\n\t\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\r\n\t\t\t\t\"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\"uniform vec3 wrapRGB;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\t\t\t\"varying vec3 vViewPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( vec3( 1.0 ), uOpacity );\",\r\n\r\n\t\t\t\t\"vec3 specularTex = vec3( 1.0 );\",\r\n\r\n\t\t\t\t\"vec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\",\r\n\t\t\t\t\"normalTex.xy *= uNormalScale;\",\r\n\t\t\t\t\"normalTex = normalize( normalTex );\",\r\n\r\n\t\t\t\t\"if( enableDiffuse ) {\",\r\n\r\n\t\t\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\t\t\"vec4 texelColor = texture2D( tDiffuse, vUv );\",\r\n\t\t\t\t\t\t\"texelColor.xyz *= texelColor.xyz;\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor = gl_FragColor * texelColor;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"if( enableAO ) {\",\r\n\r\n\t\t\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\t\t\"vec4 aoColor = texture2D( tAO, vUv );\",\r\n\t\t\t\t\t\t\"aoColor.xyz *= aoColor.xyz;\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"if( enableSpecular )\",\r\n\t\t\t\t\t\"specularTex = texture2D( tSpecular, vUv ).xyz;\",\r\n\r\n\t\t\t\t\"mat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\",\r\n\t\t\t\t\"vec3 finalNormal = tsb * normalTex;\",\r\n\r\n\t\t\t\t\"#ifdef FLIP_SIDED\",\r\n\r\n\t\t\t\t\t\"finalNormal = -finalNormal;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"vec3 normal = normalize( finalNormal );\",\r\n\t\t\t\t\"vec3 viewPosition = normalize( vViewPosition );\",\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t\t\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 pointDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 pointSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\t\"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\t\"vec3 pointVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\t\"float pointDistance = 1.0;\",\r\n\t\t\t\t\t\t\"if ( pointLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\t\"pointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\t\"pointVector = normalize( pointVector );\",\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\"float pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\"float pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"float pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\"pointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\t\"vec3 pointHalfVector = normalize( pointVector + viewPosition );\",\r\n\t\t\t\t\t\t\"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\t\"float pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"pointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// spot lights\r\n\r\n\t\t\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 spotDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 spotSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\t\"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\r\n\t\t\t\t\t\t\"vec3 spotVector = lPosition.xyz + vViewPosition.xyz;\",\r\n\r\n\t\t\t\t\t\t\"float spotDistance = 1.0;\",\r\n\t\t\t\t\t\t\"if ( spotLightDistance[ i ] > 0.0 )\",\r\n\t\t\t\t\t\t\t\"spotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\",\r\n\r\n\t\t\t\t\t\t\"spotVector = normalize( spotVector );\",\r\n\r\n\t\t\t\t\t\t\"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\",\r\n\r\n\t\t\t\t\t\t\"if ( spotEffect > spotLightAngleCos[ i ] ) {\",\r\n\r\n\t\t\t\t\t\t\t\"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\t\"float spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\t\"float spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\t\"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\t\"float spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\t\"spotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\",\r\n\r\n\t\t\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\t\t\"vec3 spotHalfVector = normalize( spotVector + viewPosition );\",\r\n\t\t\t\t\t\t\t\"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\"float spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\t\"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\t\t\"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\",\r\n\r\n\t\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\t\"spotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\",\r\n\r\n\t\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t\t\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 dirDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 dirSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\t\"for( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\t\t\"vec3 dirVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\"#ifdef WRAP_AROUND\",\r\n\r\n\t\t\t\t\t\t\t\"float directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\",\r\n\t\t\t\t\t\t\t\"float directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"float dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\t\"dirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t// specular\r\n\r\n\t\t\t\t\t\t\"vec3 dirHalfVector = normalize( dirVector + viewPosition );\",\r\n\t\t\t\t\t\t\"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\",\r\n\t\t\t\t\t\t\"float dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"dirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t\t\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"vec3 hemiDiffuse  = vec3( 0.0 );\",\r\n\t\t\t\t\t\"vec3 hemiSpecular = vec3( 0.0 );\" ,\r\n\r\n\t\t\t\t\t\"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\r\n\t\t\t\t\t\t\"vec3 lVector = normalize( lDirection.xyz );\",\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\t\t\t\t\"float dotProduct = dot( normal, lVector );\",\r\n\t\t\t\t\t\t\"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\r\n\r\n\t\t\t\t\t\t\"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\r\n\r\n\t\t\t\t\t\t\"hemiDiffuse += uDiffuseColor * hemiColor;\",\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\r\n\t\t\t\t\t\t\"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\",\r\n\t\t\t\t\t\t\"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\",\r\n\t\t\t\t\t\t\"float hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\t\t\t\t\"vec3 lVectorGround = -lVector;\",\r\n\r\n\t\t\t\t\t\t\"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\",\r\n\t\t\t\t\t\t\"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\",\r\n\t\t\t\t\t\t\"float hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\",\r\n\r\n\t\t\t\t\t\t\"#ifdef PHYSICALLY_BASED_SHADING\",\r\n\r\n\t\t\t\t\t\t\t\"float dotProductGround = dot( normal, lVectorGround );\",\r\n\r\n\t\t\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\t\t\t\"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;\",\r\n\r\n\t\t\t\t\t\t\t\"vec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"vec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\",\r\n\t\t\t\t\t\t\t\"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"hemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\t\t\t\t\"vec3 totalDiffuse = vec3( 0.0 );\",\r\n\t\t\t\t\"vec3 totalSpecular = vec3( 0.0 );\",\r\n\r\n\t\t\t\t\"#if MAX_DIR_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += dirDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += dirSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#if MAX_HEMI_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += hemiDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += hemiSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#if MAX_POINT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += pointDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += pointSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#if MAX_SPOT_LIGHTS > 0\",\r\n\r\n\t\t\t\t\t\"totalDiffuse += spotDiffuse;\",\r\n\t\t\t\t\t\"totalSpecular += spotSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#ifdef METAL\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"if ( enableReflection ) {\",\r\n\r\n\t\t\t\t\t\"vec3 vReflect;\",\r\n\t\t\t\t\t\"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\",\r\n\r\n\t\t\t\t\t\"if ( useRefract ) {\",\r\n\r\n\t\t\t\t\t\t\"vReflect = refract( cameraToVertex, normal, uRefractionRatio );\",\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"vReflect = reflect( cameraToVertex, normal );\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"vec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\",\r\n\r\n\t\t\t\t\t\"#ifdef GAMMA_INPUT\",\r\n\r\n\t\t\t\t\t\t\"cubeColor.xyz *= cubeColor.xyz;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"attribute vec4 tangent;\",\r\n\r\n\t\t\t\"uniform vec2 uOffset;\",\r\n\t\t\t\"uniform vec2 uRepeat;\",\r\n\r\n\t\t\t\"uniform bool enableDisplacement;\",\r\n\r\n\t\t\t\"#ifdef VERTEX_TEXTURES\",\r\n\r\n\t\t\t\t\"uniform sampler2D tDisplacement;\",\r\n\t\t\t\t\"uniform float uDisplacementScale;\",\r\n\t\t\t\t\"uniform float uDisplacementBias;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"varying vec3 vTangent;\",\r\n\t\t\t\"varying vec3 vBinormal;\",\r\n\t\t\t\"varying vec3 vNormal;\",\r\n\t\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\t\t\t\"varying vec3 vViewPosition;\",\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\r\n\r\n\t\t\t\t// normal, tangent and binormal vectors\r\n\r\n\t\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\t\"vNormal = normalize( normalMatrix * skinnedNormal.xyz );\",\r\n\r\n\t\t\t\t\t\"vec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\",\r\n\t\t\t\t\t\"vTangent = normalize( normalMatrix * skinnedTangent.xyz );\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"vNormal = normalize( normalMatrix * normal );\",\r\n\t\t\t\t\t\"vTangent = normalize( normalMatrix * tangent.xyz );\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\",\r\n\r\n\t\t\t\t\"vUv = uv * uRepeat + uOffset;\",\r\n\r\n\t\t\t\t// displacement mapping\r\n\r\n\t\t\t\t\"vec3 displacedPosition;\",\r\n\r\n\t\t\t\t\"#ifdef VERTEX_TEXTURES\",\r\n\r\n\t\t\t\t\t\"if ( enableDisplacement ) {\",\r\n\r\n\t\t\t\t\t\t\"vec3 dv = texture2D( tDisplacement, uv ).xyz;\",\r\n\t\t\t\t\t\t\"float df = uDisplacementScale * dv.x + uDisplacementBias;\",\r\n\t\t\t\t\t\t\"displacedPosition = position + normalize( normal ) * df;\",\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 skinVertex = vec4( position, 1.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\r\n\t\t\t\t\t\t\t\"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\r\n\r\n\t\t\t\t\t\t\t\"displacedPosition  = skinned.xyz;\",\r\n\r\n\t\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\t\"displacedPosition = position;\",\r\n\r\n\t\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\t\t\"vec4 skinVertex = vec4( position, 1.0 );\",\r\n\r\n\t\t\t\t\t\t\"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;\",\r\n\t\t\t\t\t\t\"skinned \t  += boneMatY * skinVertex * skinWeight.y;\",\r\n\r\n\t\t\t\t\t\t\"displacedPosition  = skinned.xyz;\",\r\n\r\n\t\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\t\"displacedPosition = position;\",\r\n\r\n\t\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\",\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\t\"vWorldPosition = worldPosition.xyz;\",\r\n\t\t\t\t\"vViewPosition = -mvPosition.xyz;\",\r\n\r\n\t\t\t\t// shadows\r\n\r\n\t\t\t\t\"#ifdef USE_SHADOWMAP\",\r\n\r\n\t\t\t\t\t\"for( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\r\n\r\n\t\t\t\t\t\t\"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'cube': {\r\n\r\n\t\tuniforms: { \"tCube\": { type: \"t\", value: null },\r\n\t\t\t\t\t\"tFlip\": { type: \"f\", value: -1 } },\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\r\n\t\t\t\t\"vWorldPosition = worldPosition.xyz;\",\r\n\r\n\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform samplerCube tCube;\",\r\n\t\t\t\"uniform float tFlip;\",\r\n\r\n\t\t\t\"varying vec3 vWorldPosition;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t},\r\n\r\n\t// Depth encoding into RGBA texture\r\n\t// \tbased on SpiderGL shadow map example\r\n\t// \t\thttp://spidergl.org/example.php?id=6\r\n\t// \toriginally from\r\n\t//\t\thttp://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD\r\n\t// \tsee also here:\r\n\t//\t\thttp://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n\r\n\t'depthRGBA': {\r\n\r\n\t\tuniforms: {},\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\r\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\r\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\"),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"vec4 pack_depth( const in float depth ) {\",\r\n\r\n\t\t\t\t\"const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\r\n\t\t\t\t\"const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\r\n\t\t\t\t\"vec4 res = fract( depth * bit_shift );\",\r\n\t\t\t\t\"res -= res.xxyz * bit_mask;\",\r\n\t\t\t\t\"return res;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\",\r\n\r\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );\",\r\n\t\t\t\t//\"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );\",\r\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( z );\",\r\n\t\t\t\t//\"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join(\"\\n\")\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.WebGLRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\r\n\r\n\t_precision = parameters.precision !== undefined ? parameters.precision : 'highp',\r\n\r\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : true,\r\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\r\n\r\n\t_clearColor = parameters.clearColor !== undefined ? new THREE.Color( parameters.clearColor ) : new THREE.Color( 0x000000 ),\r\n\t_clearAlpha = parameters.clearAlpha !== undefined ? parameters.clearAlpha : 0;\r\n\r\n\t// public properties\r\n\r\n\tthis.domElement = _canvas;\r\n\tthis.context = null;\r\n\tthis.devicePixelRatio = parameters.devicePixelRatio !== undefined\r\n\t\t\t\t? parameters.devicePixelRatio\r\n\t\t\t\t: window.devicePixelRatio !== undefined\r\n\t\t\t\t\t? window.devicePixelRatio\r\n\t\t\t\t\t: 1;\r\n\r\n\t// clearing\r\n\r\n\tthis.autoClear = true;\r\n\tthis.autoClearColor = true;\r\n\tthis.autoClearDepth = true;\r\n\tthis.autoClearStencil = true;\r\n\r\n\t// scene graph\r\n\r\n\tthis.sortObjects = true;\r\n\r\n\tthis.autoUpdateObjects = true;\r\n\tthis.autoUpdateScene = true;\r\n\r\n\t// physically based shading\r\n\r\n\tthis.gammaInput = false;\r\n\tthis.gammaOutput = false;\r\n\tthis.physicallyBasedShading = false;\r\n\r\n\t// shadow map\r\n\r\n\tthis.shadowMapEnabled = false;\r\n\tthis.shadowMapAutoUpdate = true;\r\n\tthis.shadowMapType = THREE.PCFShadowMap;\r\n\tthis.shadowMapCullFace = THREE.CullFaceFront;\r\n\tthis.shadowMapDebug = false;\r\n\tthis.shadowMapCascade = false;\r\n\r\n\t// morphs\r\n\r\n\tthis.maxMorphTargets = 8;\r\n\tthis.maxMorphNormals = 4;\r\n\r\n\t// flags\r\n\r\n\tthis.autoScaleCubemaps = true;\r\n\r\n\t// custom render plugins\r\n\r\n\tthis.renderPluginsPre = [];\r\n\tthis.renderPluginsPost = [];\r\n\r\n\t// info\r\n\r\n\tthis.info = {\r\n\r\n\t\tmemory: {\r\n\r\n\t\t\tprograms: 0,\r\n\t\t\tgeometries: 0,\r\n\t\t\ttextures: 0\r\n\r\n\t\t},\r\n\r\n\t\trender: {\r\n\r\n\t\t\tcalls: 0,\r\n\t\t\tvertices: 0,\r\n\t\t\tfaces: 0,\r\n\t\t\tpoints: 0\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// internal properties\r\n\r\n\tvar _this = this,\r\n\r\n\t_programs = [],\r\n\t_programs_counter = 0,\r\n\r\n\t// internal state cache\r\n\r\n\t_currentProgram = null,\r\n\t_currentFramebuffer = null,\r\n\t_currentMaterialId = -1,\r\n\t_currentGeometryGroupHash = null,\r\n\t_currentCamera = null,\r\n\t_geometryGroupCounter = 0,\r\n\r\n\t_usedTextureUnits = 0,\r\n\r\n\t// GL state cache\r\n\r\n\t_oldDoubleSided = -1,\r\n\t_oldFlipSided = -1,\r\n\r\n\t_oldBlending = -1,\r\n\r\n\t_oldBlendEquation = -1,\r\n\t_oldBlendSrc = -1,\r\n\t_oldBlendDst = -1,\r\n\r\n\t_oldDepthTest = -1,\r\n\t_oldDepthWrite = -1,\r\n\r\n\t_oldPolygonOffset = null,\r\n\t_oldPolygonOffsetFactor = null,\r\n\t_oldPolygonOffsetUnits = null,\r\n\r\n\t_oldLineWidth = null,\r\n\r\n\t_viewportX = 0,\r\n\t_viewportY = 0,\r\n\t_viewportWidth = 0,\r\n\t_viewportHeight = 0,\r\n\t_currentWidth = 0,\r\n\t_currentHeight = 0,\r\n\r\n\t_enabledAttributes = {},\r\n\r\n\t// frustum\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t // camera matrices cache\r\n\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\t_projScreenMatrixPS = new THREE.Matrix4(),\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\r\n\t// light arrays cache\r\n\r\n\t_direction = new THREE.Vector3(),\r\n\r\n\t_lightsNeedUpdate = true,\r\n\r\n\t_lights = {\r\n\r\n\t\tambient: [ 0, 0, 0 ],\r\n\t\tdirectional: { length: 0, colors: new Array(), positions: new Array() },\r\n\t\tpoint: { length: 0, colors: new Array(), positions: new Array(), distances: new Array() },\r\n\t\tspot: { length: 0, colors: new Array(), positions: new Array(), distances: new Array(), directions: new Array(), anglesCos: new Array(), exponents: new Array() },\r\n\t\themi: { length: 0, skyColors: new Array(), groundColors: new Array(), positions: new Array() }\r\n\r\n\t};\r\n\r\n\t// initialize\r\n\r\n\tvar _gl;\r\n\r\n\tvar _glExtensionTextureFloat;\r\n\tvar _glExtensionStandardDerivatives;\r\n\tvar _glExtensionTextureFilterAnisotropic;\r\n\tvar _glExtensionCompressedTextureS3TC;\r\n\r\n\tinitGL();\r\n\r\n\tsetDefaultGLState();\r\n\r\n\tthis.context = _gl;\r\n\r\n\t// GPU capabilities\r\n\r\n\tvar _maxTextures = _gl.getParameter( _gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\tvar _maxVertexTextures = _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\tvar _maxTextureSize = _gl.getParameter( _gl.MAX_TEXTURE_SIZE );\r\n\tvar _maxCubemapSize = _gl.getParameter( _gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n\tvar _maxAnisotropy = _glExtensionTextureFilterAnisotropic ? _gl.getParameter( _glExtensionTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT ) : 0;\r\n\r\n\tvar _supportsVertexTextures = ( _maxVertexTextures > 0 );\r\n\tvar _supportsBoneTextures = _supportsVertexTextures && _glExtensionTextureFloat;\r\n\r\n\tvar _compressedTextureFormats = _glExtensionCompressedTextureS3TC ? _gl.getParameter( _gl.COMPRESSED_TEXTURE_FORMATS ) : [];\r\n\r\n\t//\r\n\r\n\tvar _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_FLOAT );\r\n\tvar _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT );\r\n\tvar _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_FLOAT );\r\n\r\n\tvar _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT );\r\n\tvar _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT );\r\n\tvar _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_FLOAT );\r\n\r\n\tvar _vertexShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_INT );\r\n\tvar _vertexShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_INT );\r\n\tvar _vertexShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_INT );\r\n\r\n\tvar _fragmentShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_INT );\r\n\tvar _fragmentShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_INT );\r\n\tvar _fragmentShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_INT );\r\n\r\n\t// clamp precision to maximum available\r\n\r\n\tvar highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;\r\n\tvar mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;\r\n\r\n\tif ( _precision === \"highp\" && ! highpAvailable ) {\r\n\r\n\t\tif ( mediumpAvailable ) {\r\n\r\n\t\t\t_precision = \"mediump\";\r\n\t\t\tconsole.warn( \"WebGLRenderer: highp not supported, using mediump\" );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_precision = \"lowp\";\r\n\t\t\tconsole.warn( \"WebGLRenderer: highp and mediump not supported, using lowp\" );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tif ( _precision === \"mediump\" && ! mediumpAvailable ) {\r\n\r\n\t\t_precision = \"lowp\";\r\n\t\tconsole.warn( \"WebGLRenderer: mediump not supported, using lowp\" );\r\n\r\n\t}\r\n\r\n\t// API\r\n\r\n\tthis.getContext = function () {\r\n\r\n\t\treturn _gl;\r\n\r\n\t};\r\n\r\n\tthis.supportsVertexTextures = function () {\r\n\r\n\t\treturn _supportsVertexTextures;\r\n\r\n\t};\r\n\r\n\tthis.supportsFloatTextures = function () {\r\n\r\n\t\treturn _glExtensionTextureFloat;\r\n\r\n\t};\r\n\t\r\n\tthis.supportsStandardDerivatives = function () {\r\n\r\n\t\treturn _glExtensionStandardDerivatives;\r\n\r\n\t};\r\n\t\r\n\tthis.supportsCompressedTextureS3TC = function () {\r\n\r\n\t\treturn _glExtensionCompressedTextureS3TC;\r\n\r\n\t};\r\n\t\r\n\tthis.getMaxAnisotropy  = function () {\r\n\r\n\t\treturn _maxAnisotropy;\r\n\r\n\t};\r\n\r\n\tthis.getPrecision = function () {\r\n\r\n\t\treturn _precision;\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height ) {\r\n\r\n\t\t_canvas.width = width * this.devicePixelRatio;\r\n\t\t_canvas.height = height * this.devicePixelRatio;\r\n\r\n\t\t_canvas.style.width = width + 'px';\r\n\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\tthis.setViewport( 0, 0, _canvas.width, _canvas.height );\r\n\r\n\t};\r\n\r\n\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\t_viewportX = x !== undefined ? x : 0;\r\n\t\t_viewportY = y !== undefined ? y : 0;\r\n\r\n\t\t_viewportWidth = width !== undefined ? width : _canvas.width;\r\n\t\t_viewportHeight = height !== undefined ? height : _canvas.height;\r\n\r\n\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\r\n\r\n\t};\r\n\r\n\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\t_gl.scissor( x, y, width, height );\r\n\r\n\t};\r\n\r\n\tthis.enableScissorTest = function ( enable ) {\r\n\r\n\t\tenable ? _gl.enable( _gl.SCISSOR_TEST ) : _gl.disable( _gl.SCISSOR_TEST );\r\n\r\n\t};\r\n\r\n\t// Clearing\r\n\r\n\tthis.setClearColorHex = function ( hex, alpha ) {\r\n\r\n\t\t_clearColor.setHex( hex );\r\n\t\t_clearAlpha = alpha;\r\n\r\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.setClearColor = function ( color, alpha ) {\r\n\r\n\t\t_clearColor.copy( color );\r\n\t\t_clearAlpha = alpha;\r\n\r\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.getClearColor = function () {\r\n\r\n\t\treturn _clearColor;\r\n\r\n\t};\r\n\r\n\tthis.getClearAlpha = function () {\r\n\r\n\t\treturn _clearAlpha;\r\n\r\n\t};\r\n\r\n\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\tvar bits = 0;\r\n\r\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\r\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n\t\t_gl.clear( bits );\r\n\r\n\t};\r\n\r\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\t\tthis.clear( color, depth, stencil );\r\n\r\n\t};\r\n\r\n\t// Plugins\r\n\r\n\tthis.addPostPlugin = function ( plugin ) {\r\n\r\n\t\tplugin.init( this );\r\n\t\tthis.renderPluginsPost.push( plugin );\r\n\r\n\t};\r\n\r\n\tthis.addPrePlugin = function ( plugin ) {\r\n\r\n\t\tplugin.init( this );\r\n\t\tthis.renderPluginsPre.push( plugin );\r\n\r\n\t};\r\n\r\n\t// Rendering\r\n\r\n\tthis.updateShadowMap = function ( scene, camera ) {\r\n\r\n\t\t_currentProgram = null;\r\n\t\t_oldBlending = -1;\r\n\t\t_oldDepthTest = -1;\r\n\t\t_oldDepthWrite = -1;\r\n\t\t_currentGeometryGroupHash = -1;\r\n\t\t_currentMaterialId = -1;\r\n\t\t_lightsNeedUpdate = true;\r\n\t\t_oldDoubleSided = -1;\r\n\t\t_oldFlipSided = -1;\r\n\r\n\t\tthis.shadowMapPlugin.update( scene, camera );\r\n\r\n\t};\r\n\r\n\t// Internal functions\r\n\r\n\t// Buffer allocation\r\n\r\n\tfunction createParticleBuffers ( geometry ) {\r\n\r\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\tfunction createLineBuffers ( geometry ) {\r\n\r\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglLineDistanceBuffer = _gl.createBuffer();\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\tfunction createRibbonBuffers ( geometry ) {\r\n\r\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\r\n\t\tgeometry.__webglNormalBuffer = _gl.createBuffer();\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\tfunction createMeshBuffers ( geometryGroup ) {\r\n\r\n\t\tgeometryGroup.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglNormalBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglTangentBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglColorBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglUVBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglUV2Buffer = _gl.createBuffer();\r\n\r\n\t\tgeometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();\r\n\r\n\t\tgeometryGroup.__webglFaceBuffer = _gl.createBuffer();\r\n\t\tgeometryGroup.__webglLineBuffer = _gl.createBuffer();\r\n\r\n\t\tvar m, ml;\r\n\r\n\t\tif ( geometryGroup.numMorphTargets ) {\r\n\r\n\t\t\tgeometryGroup.__webglMorphTargetsBuffers = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__webglMorphTargetsBuffers.push( _gl.createBuffer() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometryGroup.numMorphNormals ) {\r\n\r\n\t\t\tgeometryGroup.__webglMorphNormalsBuffers = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__webglMorphNormalsBuffers.push( _gl.createBuffer() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_this.info.memory.geometries ++;\r\n\r\n\t};\r\n\r\n\t// Events\r\n\r\n\tvar onGeometryDispose = function ( event ) {\r\n\r\n\t\tvar geometry = event.target;\r\n\r\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tdeallocateGeometry( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tvar onTextureDispose = function ( event ) {\r\n\r\n\t\tvar texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tdeallocateTexture( texture );\r\n\r\n\t\t_this.info.memory.textures --;\r\n\r\n\r\n\t};\r\n\r\n\tvar onRenderTargetDispose = function ( event ) {\r\n\r\n\t\tvar renderTarget = event.target;\r\n\r\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t_this.info.memory.textures --;\r\n\r\n\t};\r\n\r\n\tvar onMaterialDispose = function ( event ) {\r\n\r\n\t\tvar material = event.target;\r\n\r\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\tdeallocateMaterial( material );\r\n\r\n\t};\r\n\r\n\t// Buffer deallocation\r\n\r\n\tvar deallocateGeometry = function ( geometry ) {\r\n\r\n\t\tgeometry.__webglInit = undefined;\r\n\r\n\t\tif ( geometry.__webglVertexBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\tif ( geometry.__webglNormalBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglNormalBuffer );\r\n\t\tif ( geometry.__webglTangentBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglTangentBuffer );\r\n\t\tif ( geometry.__webglColorBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\t\tif ( geometry.__webglUVBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglUVBuffer );\r\n\t\tif ( geometry.__webglUV2Buffer !== undefined ) _gl.deleteBuffer( geometry.__webglUV2Buffer );\r\n\r\n\t\tif ( geometry.__webglSkinIndicesBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinIndicesBuffer );\r\n\t\tif ( geometry.__webglSkinWeightsBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinWeightsBuffer );\r\n\r\n\t\tif ( geometry.__webglFaceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglFaceBuffer );\r\n\t\tif ( geometry.__webglLineBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineBuffer );\r\n\r\n\t\tif ( geometry.__webglLineDistanceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineDistanceBuffer );\r\n\r\n\t\t// geometry groups\r\n\r\n\t\tif ( geometry.geometryGroups !== undefined ) {\r\n\r\n\t\t\tfor ( var g in geometry.geometryGroups ) {\r\n\r\n\t\t\t\tvar geometryGroup = geometry.geometryGroups[ g ];\r\n\r\n\t\t\t\tif ( geometryGroup.numMorphTargets !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometryGroup.numMorphNormals !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdeleteCustomAttributesBuffers( geometryGroup );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t};\r\n\r\n\tvar deallocateTexture = function ( texture ) {\r\n\r\n\t\tif ( texture.image && texture.image.__webglTextureCube ) {\r\n\r\n\t\t\t// cube texture\r\n\r\n\t\t\t_gl.deleteTexture( texture.image.__webglTextureCube );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// 2D texture\r\n\r\n\t\t\tif ( ! texture.__webglInit ) return;\r\n\r\n\t\t\ttexture.__webglInit = false;\r\n\t\t\t_gl.deleteTexture( texture.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar deallocateRenderTarget = function ( renderTarget ) {\r\n\r\n\t\tif ( !renderTarget || ! renderTarget.__webglTexture ) return;\r\n\r\n\t\t_gl.deleteTexture( renderTarget.__webglTexture );\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTarget.__webglFramebuffer[ i ] );\r\n\t\t\t\t_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.deleteFramebuffer( renderTarget.__webglFramebuffer );\r\n\t\t\t_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar deallocateMaterial = function ( material ) {\r\n\r\n\t\tvar program = material.program;\r\n\r\n\t\tif ( program === undefined ) return;\r\n\r\n\t\tmaterial.program = undefined;\r\n\r\n\t\t// only deallocate GL program if this was the last use of shared program\r\n\t\t// assumed there is only single copy of any program in the _programs list\r\n\t\t// (that's how it's constructed)\r\n\r\n\t\tvar i, il, programInfo;\r\n\t\tvar deleteProgram = false;\r\n\r\n\t\tfor ( i = 0, il = _programs.length; i < il; i ++ ) {\r\n\r\n\t\t\tprogramInfo = _programs[ i ];\r\n\r\n\t\t\tif ( programInfo.program === program ) {\r\n\r\n\t\t\t\tprogramInfo.usedTimes --;\r\n\r\n\t\t\t\tif ( programInfo.usedTimes === 0 ) {\r\n\r\n\t\t\t\t\tdeleteProgram = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( deleteProgram === true ) {\r\n\r\n\t\t\t// avoid using array.splice, this is costlier than creating new array from scratch\r\n\r\n\t\t\tvar newPrograms = [];\r\n\r\n\t\t\tfor ( i = 0, il = _programs.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tprogramInfo = _programs[ i ];\r\n\r\n\t\t\t\tif ( programInfo.program !== program ) {\r\n\r\n\t\t\t\t\tnewPrograms.push( programInfo );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_programs = newPrograms;\r\n\r\n\t\t\t_gl.deleteProgram( program );\r\n\r\n\t\t\t_this.info.memory.programs --;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\t/*\r\n\tfunction deleteParticleBuffers ( geometry ) {\r\n\r\n\t\t_gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tfunction deleteLineBuffers ( geometry ) {\r\n\r\n\t\t_gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglLineDistanceBuffer );\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tfunction deleteRibbonBuffers ( geometry ) {\r\n\r\n\t\t_gl.deleteBuffer( geometry.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglColorBuffer );\r\n\t\t_gl.deleteBuffer( geometry.__webglNormalBuffer );\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometry );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\r\n\tfunction deleteMeshBuffers ( geometryGroup ) {\r\n\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglVertexBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglNormalBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglTangentBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglColorBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglUVBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglUV2Buffer );\r\n\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglSkinIndicesBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglSkinWeightsBuffer );\r\n\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglFaceBuffer );\r\n\t\t_gl.deleteBuffer( geometryGroup.__webglLineBuffer );\r\n\r\n\t\tvar m, ml;\r\n\r\n\t\tif ( geometryGroup.numMorphTargets ) {\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometryGroup.numMorphNormals ) {\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdeleteCustomAttributesBuffers( geometryGroup );\r\n\r\n\t\t_this.info.memory.geometries --;\r\n\r\n\t};\r\n\t*/\r\n\r\n\tfunction deleteCustomAttributesBuffers( geometry ) {\r\n\r\n\t\tif ( geometry.__webglCustomAttributesList ) {\r\n\r\n\t\t\tfor ( var id in geometry.__webglCustomAttributesList ) {\r\n\r\n\t\t\t\t_gl.deleteBuffer( geometry.__webglCustomAttributesList[ id ].buffer );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Buffer initialization\r\n\r\n\tfunction initCustomAttributes ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tvar material = object.material;\r\n\r\n\t\tif ( material.attributes ) {\r\n\r\n\t\t\tif ( geometry.__webglCustomAttributesList === undefined ) {\r\n\r\n\t\t\t\tgeometry.__webglCustomAttributesList = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\t\tvar attribute = material.attributes[ a ];\r\n\r\n\t\t\t\tif ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {\r\n\r\n\t\t\t\t\tattribute.__webglInitialized = true;\r\n\r\n\t\t\t\t\tvar size = 1;\t\t// \"f\" and \"i\"\r\n\r\n\t\t\t\t\tif ( attribute.type === \"v2\" ) size = 2;\r\n\t\t\t\t\telse if ( attribute.type === \"v3\" ) size = 3;\r\n\t\t\t\t\telse if ( attribute.type === \"v4\" ) size = 4;\r\n\t\t\t\t\telse if ( attribute.type === \"c\"  ) size = 3;\r\n\r\n\t\t\t\t\tattribute.size = size;\r\n\r\n\t\t\t\t\tattribute.array = new Float32Array( nvertices * size );\r\n\r\n\t\t\t\t\tattribute.buffer = _gl.createBuffer();\r\n\t\t\t\t\tattribute.buffer.belongsToAttribute = a;\r\n\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.__webglCustomAttributesList.push( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction initParticleBuffers ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\tgeometry.__sortArray = [];\r\n\r\n\t\tgeometry.__webglParticleCount = nvertices;\r\n\r\n\t\tinitCustomAttributes ( geometry, object );\r\n\r\n\t};\r\n\r\n\tfunction initLineBuffers ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__lineDistanceArray = new Float32Array( nvertices * 1 );\r\n\r\n\t\tgeometry.__webglLineCount = nvertices;\r\n\r\n\t\tinitCustomAttributes ( geometry, object );\r\n\r\n\t};\r\n\r\n\tfunction initRibbonBuffers ( geometry, object ) {\r\n\r\n\t\tvar nvertices = geometry.vertices.length;\r\n\r\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\r\n\t\tgeometry.__normalArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\tgeometry.__webglVertexCount = nvertices;\r\n\r\n\t\tinitCustomAttributes ( geometry, object );\r\n\r\n\t};\r\n\r\n\tfunction initMeshBuffers ( geometryGroup, object ) {\r\n\r\n\t\tvar geometry = object.geometry,\r\n\t\t\tfaces3 = geometryGroup.faces3,\r\n\t\t\tfaces4 = geometryGroup.faces4,\r\n\r\n\t\t\tnvertices = faces3.length * 3 + faces4.length * 4,\r\n\t\t\tntris     = faces3.length * 1 + faces4.length * 2,\r\n\t\t\tnlines    = faces3.length * 3 + faces4.length * 4,\r\n\r\n\t\t\tmaterial = getBufferMaterial( object, geometryGroup ),\r\n\r\n\t\t\tuvType = bufferGuessUVType( material ),\r\n\t\t\tnormalType = bufferGuessNormalType( material ),\r\n\t\t\tvertexColorType = bufferGuessVertexColorType( material );\r\n\r\n\t\t//console.log( \"uvType\", uvType, \"normalType\", normalType, \"vertexColorType\", vertexColorType, object, geometryGroup, material );\r\n\r\n\t\tgeometryGroup.__vertexArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\tif ( normalType ) {\r\n\r\n\t\t\tgeometryGroup.__normalArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.hasTangents ) {\r\n\r\n\t\t\tgeometryGroup.__tangentArray = new Float32Array( nvertices * 4 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( vertexColorType ) {\r\n\r\n\t\t\tgeometryGroup.__colorArray = new Float32Array( nvertices * 3 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvType ) {\r\n\r\n\t\t\tif ( geometry.faceUvs.length > 0 || geometry.faceVertexUvs.length > 0 ) {\r\n\r\n\t\t\t\tgeometryGroup.__uvArray = new Float32Array( nvertices * 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.faceUvs.length > 1 || geometry.faceVertexUvs.length > 1 ) {\r\n\r\n\t\t\t\tgeometryGroup.__uv2Array = new Float32Array( nvertices * 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.geometry.skinWeights.length && object.geometry.skinIndices.length ) {\r\n\r\n\t\t\tgeometryGroup.__skinIndexArray = new Float32Array( nvertices * 4 );\r\n\t\t\tgeometryGroup.__skinWeightArray = new Float32Array( nvertices * 4 );\r\n\r\n\t\t}\r\n\r\n\t\tgeometryGroup.__faceArray = new Uint16Array( ntris * 3 );\r\n\t\tgeometryGroup.__lineArray = new Uint16Array( nlines * 2 );\r\n\r\n\t\tvar m, ml;\r\n\r\n\t\tif ( geometryGroup.numMorphTargets ) {\r\n\r\n\t\t\tgeometryGroup.__morphTargetsArrays = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__morphTargetsArrays.push( new Float32Array( nvertices * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometryGroup.numMorphNormals ) {\r\n\r\n\t\t\tgeometryGroup.__morphNormalsArrays = [];\r\n\r\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\r\n\r\n\t\t\t\tgeometryGroup.__morphNormalsArrays.push( new Float32Array( nvertices * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometryGroup.__webglFaceCount = ntris * 3;\r\n\t\tgeometryGroup.__webglLineCount = nlines * 2;\r\n\r\n\r\n\t\t// custom attributes\r\n\r\n\t\tif ( material.attributes ) {\r\n\r\n\t\t\tif ( geometryGroup.__webglCustomAttributesList === undefined ) {\r\n\r\n\t\t\t\tgeometryGroup.__webglCustomAttributesList = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\t\t// Do a shallow copy of the attribute object so different geometryGroup chunks use different\r\n\t\t\t\t// attribute buffers which are correctly indexed in the setMeshBuffers function\r\n\r\n\t\t\t\tvar originalAttribute = material.attributes[ a ];\r\n\r\n\t\t\t\tvar attribute = {};\r\n\r\n\t\t\t\tfor ( var property in originalAttribute ) {\r\n\r\n\t\t\t\t\tattribute[ property ] = originalAttribute[ property ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {\r\n\r\n\t\t\t\t\tattribute.__webglInitialized = true;\r\n\r\n\t\t\t\t\tvar size = 1;\t\t// \"f\" and \"i\"\r\n\r\n\t\t\t\t\tif( attribute.type === \"v2\" ) size = 2;\r\n\t\t\t\t\telse if( attribute.type === \"v3\" ) size = 3;\r\n\t\t\t\t\telse if( attribute.type === \"v4\" ) size = 4;\r\n\t\t\t\t\telse if( attribute.type === \"c\"  ) size = 3;\r\n\r\n\t\t\t\t\tattribute.size = size;\r\n\r\n\t\t\t\t\tattribute.array = new Float32Array( nvertices * size );\r\n\r\n\t\t\t\t\tattribute.buffer = _gl.createBuffer();\r\n\t\t\t\t\tattribute.buffer.belongsToAttribute = a;\r\n\r\n\t\t\t\t\toriginalAttribute.needsUpdate = true;\r\n\t\t\t\t\tattribute.__original = originalAttribute;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometryGroup.__webglCustomAttributesList.push( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometryGroup.__inittedArrays = true;\r\n\r\n\t};\r\n\r\n\tfunction getBufferMaterial( object, geometryGroup ) {\r\n\r\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\r\n\t\t\t? object.material.materials[ geometryGroup.materialIndex ]\r\n\t\t\t: object.material;\r\n\r\n\t};\r\n\r\n\tfunction materialNeedsSmoothNormals ( material ) {\r\n\r\n\t\treturn material && material.shading !== undefined && material.shading === THREE.SmoothShading;\r\n\r\n\t};\r\n\r\n\tfunction bufferGuessNormalType ( material ) {\r\n\r\n\t\t// only MeshBasicMaterial and MeshDepthMaterial don't need normals\r\n\r\n\t\tif ( ( material instanceof THREE.MeshBasicMaterial && !material.envMap ) || material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNeedsSmoothNormals( material ) ) {\r\n\r\n\t\t\treturn THREE.SmoothShading;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn THREE.FlatShading;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction bufferGuessVertexColorType ( material ) {\r\n\r\n\t\tif ( material.vertexColors ) {\r\n\r\n\t\t\treturn material.vertexColors;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n\tfunction bufferGuessUVType ( material ) {\r\n\r\n\t\t// material must use some texture to require uvs\r\n\r\n\t\tif ( material.map || material.lightMap || material.bumpMap || material.normalMap || material.specularMap || material instanceof THREE.ShaderMaterial ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction initDirectBuffers( geometry ) {\r\n\r\n\t\tvar a, attribute, type;\r\n\r\n\t\tfor ( a in geometry.attributes ) {\r\n\r\n\t\t\tif ( a === \"index\" ) {\r\n\r\n\t\t\t\ttype = _gl.ELEMENT_ARRAY_BUFFER;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttype = _gl.ARRAY_BUFFER;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tattribute = geometry.attributes[ a ];\r\n\r\n\t\t\tattribute.buffer = _gl.createBuffer();\r\n\r\n\t\t\t_gl.bindBuffer( type, attribute.buffer );\r\n\t\t\t_gl.bufferData( type, attribute.array, _gl.STATIC_DRAW );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Buffer setting\r\n\r\n\tfunction setParticleBuffers ( geometry, hint, object ) {\r\n\r\n\t\tvar v, c, vertex, offset, index, color,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tvl = vertices.length,\r\n\r\n\t\tcolors = geometry.colors,\r\n\t\tcl = colors.length,\r\n\r\n\t\tvertexArray = geometry.__vertexArray,\r\n\t\tcolorArray = geometry.__colorArray,\r\n\r\n\t\tsortArray = geometry.__sortArray,\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyElements = geometry.elementsNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\r\n\t\tcustomAttributes = geometry.__webglCustomAttributesList,\r\n\t\ti, il,\r\n\t\ta, ca, cal, value,\r\n\t\tcustomAttribute;\r\n\r\n\t\tif ( object.sortParticles ) {\r\n\r\n\t\t\t_projScreenMatrixPS.copy( _projScreenMatrix );\r\n\t\t\t_projScreenMatrixPS.multiply( object.matrixWorld );\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\t_vector3.copy( vertex );\r\n\t\t\t\t_vector3.applyProjection( _projScreenMatrixPS );\r\n\r\n\t\t\t\tsortArray[ v ] = [ _vector3.z, v ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsortArray.sort( numericalSort );\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ sortArray[v][1] ];\r\n\r\n\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\tcolor = colors[ sortArray[c][1] ];\r\n\r\n\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( customAttributes ) {\r\n\r\n\t\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\t\tif ( ! ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) ) continue;\r\n\r\n\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]     = value.r;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ]      = value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( dirtyColors ) {\r\n\r\n\t\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\t\tcolor = colors[ c ];\r\n\r\n\t\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( customAttributes ) {\r\n\r\n\t\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\t\tif ( customAttribute.needsUpdate &&\r\n\t\t\t\t\t\t ( customAttribute.boundTo === undefined ||\r\n\t\t\t\t\t\t   customAttribute.boundTo === \"vertices\") ) {\r\n\r\n\t\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.r;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]      = value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyVertices || object.sortParticles ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors || object.sortParticles ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( customAttribute.needsUpdate || object.sortParticles ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\tfunction setLineBuffers ( geometry, hint ) {\r\n\r\n\t\tvar v, c, d, vertex, offset, color,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tcolors = geometry.colors,\r\n\t\tlineDistances = geometry.lineDistances,\r\n\r\n\t\tvl = vertices.length,\r\n\t\tcl = colors.length,\r\n\t\tdl = lineDistances.length,\r\n\r\n\t\tvertexArray = geometry.__vertexArray,\r\n\t\tcolorArray = geometry.__colorArray,\r\n\t\tlineDistanceArray = geometry.__lineDistanceArray,\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\t\tdirtyLineDistances = geometry.lineDistancesNeedUpdate,\r\n\r\n\t\tcustomAttributes = geometry.__webglCustomAttributesList,\r\n\r\n\t\ti, il,\r\n\t\ta, ca, cal, value,\r\n\t\tcustomAttribute;\r\n\r\n\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors ) {\r\n\r\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\tcolor = colors[ c ];\r\n\r\n\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyLineDistances ) {\r\n\r\n\t\t\tfor ( d = 0; d < dl; d ++ ) {\r\n\r\n\t\t\t\tlineDistanceArray[ d ] = lineDistances[ d ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, lineDistanceArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( customAttribute.needsUpdate &&\r\n\t\t\t\t\t ( customAttribute.boundTo === undefined ||\r\n\t\t\t\t\t   customAttribute.boundTo === \"vertices\" ) ) {\r\n\r\n\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.r;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t = value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setRibbonBuffers ( geometry, hint ) {\r\n\r\n\t\tvar v, c, n, vertex, offset, color, normal,\r\n\r\n\t\ti, il, ca, cal, customAttribute, value,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tcolors = geometry.colors,\r\n\t\tnormals = geometry.normals,\r\n\r\n\t\tvl = vertices.length,\r\n\t\tcl = colors.length,\r\n\t\tnl = normals.length,\r\n\r\n\t\tvertexArray = geometry.__vertexArray,\r\n\t\tcolorArray = geometry.__colorArray,\r\n\t\tnormalArray = geometry.__normalArray,\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\t\tdirtyNormals = geometry.normalsNeedUpdate,\r\n\r\n\t\tcustomAttributes = geometry.__webglCustomAttributesList;\r\n\r\n\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertex = vertices[ v ];\r\n\r\n\t\t\t\toffset = v * 3;\r\n\r\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors ) {\r\n\r\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\r\n\r\n\t\t\t\tcolor = colors[ c ];\r\n\r\n\t\t\t\toffset = c * 3;\r\n\r\n\t\t\t\tcolorArray[ offset ]     = color.r;\r\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\r\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyNormals ) {\r\n\r\n\t\t\tfor ( n = 0; n < nl; n ++ ) {\r\n\r\n\t\t\t\tnormal = normals[ n ];\r\n\r\n\t\t\t\toffset = n * 3;\r\n\r\n\t\t\t\tnormalArray[ offset ]     = normal.x;\r\n\t\t\t\tnormalArray[ offset + 1 ] = normal.y;\r\n\t\t\t\tnormalArray[ offset + 2 ] = normal.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglNormalBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( customAttribute.needsUpdate &&\r\n\t\t\t\t\t ( customAttribute.boundTo === undefined ||\r\n\t\t\t\t\t   customAttribute.boundTo === \"vertices\" ) ) {\r\n\r\n\t\t\t\t\toffset = 0;\r\n\r\n\t\t\t\t\tcal = customAttribute.value.length;\r\n\r\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\r\n\t\t\t\t\t\t\toffset += 2;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.r;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t= value.x;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\r\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\r\n\r\n\t\t\t\t\t\t\t\toffset += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ] \t = value.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\r\n\r\n\t\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setMeshBuffers( geometryGroup, object, hint, dispose, material ) {\r\n\r\n\t\tif ( ! geometryGroup.__inittedArrays ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar normalType = bufferGuessNormalType( material ),\r\n\t\tvertexColorType = bufferGuessVertexColorType( material ),\r\n\t\tuvType = bufferGuessUVType( material ),\r\n\r\n\t\tneedsSmoothNormals = ( normalType === THREE.SmoothShading );\r\n\r\n\t\tvar f, fl, fi, face,\r\n\t\tvertexNormals, faceNormal, normal,\r\n\t\tvertexColors, faceColor,\r\n\t\tvertexTangents,\r\n\t\tuv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4,\r\n\t\tc1, c2, c3, c4,\r\n\t\tsw1, sw2, sw3, sw4,\r\n\t\tsi1, si2, si3, si4,\r\n\t\tsa1, sa2, sa3, sa4,\r\n\t\tsb1, sb2, sb3, sb4,\r\n\t\tm, ml, i, il,\r\n\t\tvn, uvi, uv2i,\r\n\t\tvk, vkl, vka,\r\n\t\tnka, chf, faceVertexNormals,\r\n\t\ta,\r\n\r\n\t\tvertexIndex = 0,\r\n\r\n\t\toffset = 0,\r\n\t\toffset_uv = 0,\r\n\t\toffset_uv2 = 0,\r\n\t\toffset_face = 0,\r\n\t\toffset_normal = 0,\r\n\t\toffset_tangent = 0,\r\n\t\toffset_line = 0,\r\n\t\toffset_color = 0,\r\n\t\toffset_skin = 0,\r\n\t\toffset_morphTarget = 0,\r\n\t\toffset_custom = 0,\r\n\t\toffset_customSrc = 0,\r\n\r\n\t\tvalue,\r\n\r\n\t\tvertexArray = geometryGroup.__vertexArray,\r\n\t\tuvArray = geometryGroup.__uvArray,\r\n\t\tuv2Array = geometryGroup.__uv2Array,\r\n\t\tnormalArray = geometryGroup.__normalArray,\r\n\t\ttangentArray = geometryGroup.__tangentArray,\r\n\t\tcolorArray = geometryGroup.__colorArray,\r\n\r\n\t\tskinIndexArray = geometryGroup.__skinIndexArray,\r\n\t\tskinWeightArray = geometryGroup.__skinWeightArray,\r\n\r\n\t\tmorphTargetsArrays = geometryGroup.__morphTargetsArrays,\r\n\t\tmorphNormalsArrays = geometryGroup.__morphNormalsArrays,\r\n\r\n\t\tcustomAttributes = geometryGroup.__webglCustomAttributesList,\r\n\t\tcustomAttribute,\r\n\r\n\t\tfaceArray = geometryGroup.__faceArray,\r\n\t\tlineArray = geometryGroup.__lineArray,\r\n\r\n\t\tgeometry = object.geometry, // this is shared for all chunks\r\n\r\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\r\n\t\tdirtyElements = geometry.elementsNeedUpdate,\r\n\t\tdirtyUvs = geometry.uvsNeedUpdate,\r\n\t\tdirtyNormals = geometry.normalsNeedUpdate,\r\n\t\tdirtyTangents = geometry.tangentsNeedUpdate,\r\n\t\tdirtyColors = geometry.colorsNeedUpdate,\r\n\t\tdirtyMorphTargets = geometry.morphTargetsNeedUpdate,\r\n\r\n\t\tvertices = geometry.vertices,\r\n\t\tchunk_faces3 = geometryGroup.faces3,\r\n\t\tchunk_faces4 = geometryGroup.faces4,\r\n\t\tobj_faces = geometry.faces,\r\n\r\n\t\tobj_uvs  = geometry.faceVertexUvs[ 0 ],\r\n\t\tobj_uvs2 = geometry.faceVertexUvs[ 1 ],\r\n\r\n\t\tobj_colors = geometry.colors,\r\n\r\n\t\tobj_skinIndices = geometry.skinIndices,\r\n\t\tobj_skinWeights = geometry.skinWeights,\r\n\r\n\t\tmorphTargets = geometry.morphTargets,\r\n\t\tmorphNormals = geometry.morphNormals;\r\n\r\n\t\tif ( dirtyVertices ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\tv1 = vertices[ face.a ];\r\n\t\t\t\tv2 = vertices[ face.b ];\r\n\t\t\t\tv3 = vertices[ face.c ];\r\n\r\n\t\t\t\tvertexArray[ offset ]     = v1.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = v1.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = v1.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 3 ] = v2.x;\r\n\t\t\t\tvertexArray[ offset + 4 ] = v2.y;\r\n\t\t\t\tvertexArray[ offset + 5 ] = v2.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 6 ] = v3.x;\r\n\t\t\t\tvertexArray[ offset + 7 ] = v3.y;\r\n\t\t\t\tvertexArray[ offset + 8 ] = v3.z;\r\n\r\n\t\t\t\toffset += 9;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tv1 = vertices[ face.a ];\r\n\t\t\t\tv2 = vertices[ face.b ];\r\n\t\t\t\tv3 = vertices[ face.c ];\r\n\t\t\t\tv4 = vertices[ face.d ];\r\n\r\n\t\t\t\tvertexArray[ offset ]     = v1.x;\r\n\t\t\t\tvertexArray[ offset + 1 ] = v1.y;\r\n\t\t\t\tvertexArray[ offset + 2 ] = v1.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 3 ] = v2.x;\r\n\t\t\t\tvertexArray[ offset + 4 ] = v2.y;\r\n\t\t\t\tvertexArray[ offset + 5 ] = v2.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 6 ] = v3.x;\r\n\t\t\t\tvertexArray[ offset + 7 ] = v3.y;\r\n\t\t\t\tvertexArray[ offset + 8 ] = v3.z;\r\n\r\n\t\t\t\tvertexArray[ offset + 9 ]  = v4.x;\r\n\t\t\t\tvertexArray[ offset + 10 ] = v4.y;\r\n\t\t\t\tvertexArray[ offset + 11 ] = v4.z;\r\n\r\n\t\t\t\toffset += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyMorphTargets ) {\r\n\r\n\t\t\tfor ( vk = 0, vkl = morphTargets.length; vk < vkl; vk ++ ) {\r\n\r\n\t\t\t\toffset_morphTarget = 0;\r\n\r\n\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tchf = chunk_faces3[ f ];\r\n\t\t\t\t\tface = obj_faces[ chf ];\r\n\r\n\t\t\t\t\t// morph positions\r\n\r\n\t\t\t\t\tv1 = morphTargets[ vk ].vertices[ face.a ];\r\n\t\t\t\t\tv2 = morphTargets[ vk ].vertices[ face.b ];\r\n\t\t\t\t\tv3 = morphTargets[ vk ].vertices[ face.c ];\r\n\r\n\t\t\t\t\tvka = morphTargetsArrays[ vk ];\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget ] \t  = v1.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 1 ] = v1.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 2 ] = v1.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 3 ] = v2.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 4 ] = v2.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 5 ] = v2.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 6 ] = v3.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 7 ] = v3.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 8 ] = v3.z;\r\n\r\n\t\t\t\t\t// morph normals\r\n\r\n\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\tif ( needsSmoothNormals ) {\r\n\r\n\t\t\t\t\t\t\tfaceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];\r\n\r\n\t\t\t\t\t\t\tn1 = faceVertexNormals.a;\r\n\t\t\t\t\t\t\tn2 = faceVertexNormals.b;\r\n\t\t\t\t\t\t\tn3 = faceVertexNormals.c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tn1 = morphNormals[ vk ].faceNormals[ chf ];\r\n\t\t\t\t\t\t\tn2 = n1;\r\n\t\t\t\t\t\t\tn3 = n1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnka = morphNormalsArrays[ vk ];\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget ] \t  = n1.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 1 ] = n1.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 2 ] = n1.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 3 ] = n2.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 4 ] = n2.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 5 ] = n2.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 6 ] = n3.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 7 ] = n3.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 8 ] = n3.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//\r\n\r\n\t\t\t\t\toffset_morphTarget += 9;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tchf = chunk_faces4[ f ];\r\n\t\t\t\t\tface = obj_faces[ chf ];\r\n\r\n\t\t\t\t\t// morph positions\r\n\r\n\t\t\t\t\tv1 = morphTargets[ vk ].vertices[ face.a ];\r\n\t\t\t\t\tv2 = morphTargets[ vk ].vertices[ face.b ];\r\n\t\t\t\t\tv3 = morphTargets[ vk ].vertices[ face.c ];\r\n\t\t\t\t\tv4 = morphTargets[ vk ].vertices[ face.d ];\r\n\r\n\t\t\t\t\tvka = morphTargetsArrays[ vk ];\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget ] \t  = v1.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 1 ] = v1.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 2 ] = v1.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 3 ] = v2.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 4 ] = v2.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 5 ] = v2.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 6 ] = v3.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 7 ] = v3.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 8 ] = v3.z;\r\n\r\n\t\t\t\t\tvka[ offset_morphTarget + 9 ]  = v4.x;\r\n\t\t\t\t\tvka[ offset_morphTarget + 10 ] = v4.y;\r\n\t\t\t\t\tvka[ offset_morphTarget + 11 ] = v4.z;\r\n\r\n\t\t\t\t\t// morph normals\r\n\r\n\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\tif ( needsSmoothNormals ) {\r\n\r\n\t\t\t\t\t\t\tfaceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];\r\n\r\n\t\t\t\t\t\t\tn1 = faceVertexNormals.a;\r\n\t\t\t\t\t\t\tn2 = faceVertexNormals.b;\r\n\t\t\t\t\t\t\tn3 = faceVertexNormals.c;\r\n\t\t\t\t\t\t\tn4 = faceVertexNormals.d;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tn1 = morphNormals[ vk ].faceNormals[ chf ];\r\n\t\t\t\t\t\t\tn2 = n1;\r\n\t\t\t\t\t\t\tn3 = n1;\r\n\t\t\t\t\t\t\tn4 = n1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnka = morphNormalsArrays[ vk ];\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget ] \t  = n1.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 1 ] = n1.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 2 ] = n1.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 3 ] = n2.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 4 ] = n2.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 5 ] = n2.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 6 ] = n3.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 7 ] = n3.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 8 ] = n3.z;\r\n\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 9 ]  = n4.x;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 10 ] = n4.y;\r\n\t\t\t\t\t\tnka[ offset_morphTarget + 11 ] = n4.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//\r\n\r\n\t\t\t\t\toffset_morphTarget += 12;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ vk ] );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, morphTargetsArrays[ vk ], hint );\r\n\r\n\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ vk ] );\r\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, morphNormalsArrays[ vk ], hint );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( obj_skinWeights.length ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t// weights\r\n\r\n\t\t\t\tsw1 = obj_skinWeights[ face.a ];\r\n\t\t\t\tsw2 = obj_skinWeights[ face.b ];\r\n\t\t\t\tsw3 = obj_skinWeights[ face.c ];\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin ]     = sw1.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 1 ] = sw1.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 2 ] = sw1.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 3 ] = sw1.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 4 ] = sw2.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 5 ] = sw2.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 6 ] = sw2.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 7 ] = sw2.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 8 ]  = sw3.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 9 ]  = sw3.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 10 ] = sw3.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 11 ] = sw3.w;\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tsi1 = obj_skinIndices[ face.a ];\r\n\t\t\t\tsi2 = obj_skinIndices[ face.b ];\r\n\t\t\t\tsi3 = obj_skinIndices[ face.c ];\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin ]     = si1.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 1 ] = si1.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 2 ] = si1.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 3 ] = si1.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 4 ] = si2.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 5 ] = si2.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 6 ] = si2.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 7 ] = si2.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 8 ]  = si3.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 9 ]  = si3.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 10 ] = si3.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 11 ] = si3.w;\r\n\r\n\t\t\t\toffset_skin += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t// weights\r\n\r\n\t\t\t\tsw1 = obj_skinWeights[ face.a ];\r\n\t\t\t\tsw2 = obj_skinWeights[ face.b ];\r\n\t\t\t\tsw3 = obj_skinWeights[ face.c ];\r\n\t\t\t\tsw4 = obj_skinWeights[ face.d ];\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin ]     = sw1.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 1 ] = sw1.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 2 ] = sw1.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 3 ] = sw1.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 4 ] = sw2.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 5 ] = sw2.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 6 ] = sw2.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 7 ] = sw2.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 8 ]  = sw3.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 9 ]  = sw3.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 10 ] = sw3.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 11 ] = sw3.w;\r\n\r\n\t\t\t\tskinWeightArray[ offset_skin + 12 ] = sw4.x;\r\n\t\t\t\tskinWeightArray[ offset_skin + 13 ] = sw4.y;\r\n\t\t\t\tskinWeightArray[ offset_skin + 14 ] = sw4.z;\r\n\t\t\t\tskinWeightArray[ offset_skin + 15 ] = sw4.w;\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tsi1 = obj_skinIndices[ face.a ];\r\n\t\t\t\tsi2 = obj_skinIndices[ face.b ];\r\n\t\t\t\tsi3 = obj_skinIndices[ face.c ];\r\n\t\t\t\tsi4 = obj_skinIndices[ face.d ];\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin ]     = si1.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 1 ] = si1.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 2 ] = si1.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 3 ] = si1.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 4 ] = si2.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 5 ] = si2.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 6 ] = si2.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 7 ] = si2.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 8 ]  = si3.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 9 ]  = si3.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 10 ] = si3.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 11 ] = si3.w;\r\n\r\n\t\t\t\tskinIndexArray[ offset_skin + 12 ] = si4.x;\r\n\t\t\t\tskinIndexArray[ offset_skin + 13 ] = si4.y;\r\n\t\t\t\tskinIndexArray[ offset_skin + 14 ] = si4.z;\r\n\t\t\t\tskinIndexArray[ offset_skin + 15 ] = si4.w;\r\n\r\n\t\t\t\toffset_skin += 16;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_skin > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, skinIndexArray, hint );\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, skinWeightArray, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyColors && vertexColorType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\tvertexColors = face.vertexColors;\r\n\t\t\t\tfaceColor = face.color;\r\n\r\n\t\t\t\tif ( vertexColors.length === 3 && vertexColorType === THREE.VertexColors ) {\r\n\r\n\t\t\t\t\tc1 = vertexColors[ 0 ];\r\n\t\t\t\t\tc2 = vertexColors[ 1 ];\r\n\t\t\t\t\tc3 = vertexColors[ 2 ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tc1 = faceColor;\r\n\t\t\t\t\tc2 = faceColor;\r\n\t\t\t\t\tc3 = faceColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolorArray[ offset_color ]     = c1.r;\r\n\t\t\t\tcolorArray[ offset_color + 1 ] = c1.g;\r\n\t\t\t\tcolorArray[ offset_color + 2 ] = c1.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 3 ] = c2.r;\r\n\t\t\t\tcolorArray[ offset_color + 4 ] = c2.g;\r\n\t\t\t\tcolorArray[ offset_color + 5 ] = c2.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 6 ] = c3.r;\r\n\t\t\t\tcolorArray[ offset_color + 7 ] = c3.g;\r\n\t\t\t\tcolorArray[ offset_color + 8 ] = c3.b;\r\n\r\n\t\t\t\toffset_color += 9;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tvertexColors = face.vertexColors;\r\n\t\t\t\tfaceColor = face.color;\r\n\r\n\t\t\t\tif ( vertexColors.length === 4 && vertexColorType === THREE.VertexColors ) {\r\n\r\n\t\t\t\t\tc1 = vertexColors[ 0 ];\r\n\t\t\t\t\tc2 = vertexColors[ 1 ];\r\n\t\t\t\t\tc3 = vertexColors[ 2 ];\r\n\t\t\t\t\tc4 = vertexColors[ 3 ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tc1 = faceColor;\r\n\t\t\t\t\tc2 = faceColor;\r\n\t\t\t\t\tc3 = faceColor;\r\n\t\t\t\t\tc4 = faceColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolorArray[ offset_color ]     = c1.r;\r\n\t\t\t\tcolorArray[ offset_color + 1 ] = c1.g;\r\n\t\t\t\tcolorArray[ offset_color + 2 ] = c1.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 3 ] = c2.r;\r\n\t\t\t\tcolorArray[ offset_color + 4 ] = c2.g;\r\n\t\t\t\tcolorArray[ offset_color + 5 ] = c2.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 6 ] = c3.r;\r\n\t\t\t\tcolorArray[ offset_color + 7 ] = c3.g;\r\n\t\t\t\tcolorArray[ offset_color + 8 ] = c3.b;\r\n\r\n\t\t\t\tcolorArray[ offset_color + 9 ]  = c4.r;\r\n\t\t\t\tcolorArray[ offset_color + 10 ] = c4.g;\r\n\t\t\t\tcolorArray[ offset_color + 11 ] = c4.b;\r\n\r\n\t\t\t\toffset_color += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_color > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyTangents && geometry.hasTangents ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\tvertexTangents = face.vertexTangents;\r\n\r\n\t\t\t\tt1 = vertexTangents[ 0 ];\r\n\t\t\t\tt2 = vertexTangents[ 1 ];\r\n\t\t\t\tt3 = vertexTangents[ 2 ];\r\n\r\n\t\t\t\ttangentArray[ offset_tangent ]     = t1.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 1 ] = t1.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 2 ] = t1.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 3 ] = t1.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 4 ] = t2.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 5 ] = t2.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 6 ] = t2.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 7 ] = t2.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 8 ]  = t3.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 9 ]  = t3.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 10 ] = t3.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 11 ] = t3.w;\r\n\r\n\t\t\t\toffset_tangent += 12;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tvertexTangents = face.vertexTangents;\r\n\r\n\t\t\t\tt1 = vertexTangents[ 0 ];\r\n\t\t\t\tt2 = vertexTangents[ 1 ];\r\n\t\t\t\tt3 = vertexTangents[ 2 ];\r\n\t\t\t\tt4 = vertexTangents[ 3 ];\r\n\r\n\t\t\t\ttangentArray[ offset_tangent ]     = t1.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 1 ] = t1.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 2 ] = t1.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 3 ] = t1.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 4 ] = t2.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 5 ] = t2.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 6 ] = t2.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 7 ] = t2.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 8 ]  = t3.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 9 ]  = t3.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 10 ] = t3.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 11 ] = t3.w;\r\n\r\n\t\t\t\ttangentArray[ offset_tangent + 12 ] = t4.x;\r\n\t\t\t\ttangentArray[ offset_tangent + 13 ] = t4.y;\r\n\t\t\t\ttangentArray[ offset_tangent + 14 ] = t4.z;\r\n\t\t\t\ttangentArray[ offset_tangent + 15 ] = t4.w;\r\n\r\n\t\t\t\toffset_tangent += 16;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, tangentArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyNormals && normalType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\tvertexNormals = face.vertexNormals;\r\n\t\t\t\tfaceNormal = face.normal;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 && needsSmoothNormals ) {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tvn = vertexNormals[ i ];\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = vn.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = vn.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = vn.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = faceNormal.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = faceNormal.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = faceNormal.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\tvertexNormals = face.vertexNormals;\r\n\t\t\t\tfaceNormal = face.normal;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 4 && needsSmoothNormals ) {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\tvn = vertexNormals[ i ];\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = vn.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = vn.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = vn.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = faceNormal.x;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = faceNormal.y;\r\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = faceNormal.z;\r\n\r\n\t\t\t\t\t\toffset_normal += 3;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyUvs && obj_uvs && uvType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces3[ f ];\r\n\r\n\t\t\t\tuv = obj_uvs[ fi ];\r\n\r\n\t\t\t\tif ( uv === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tuvi = uv[ i ];\r\n\r\n\t\t\t\t\tuvArray[ offset_uv ]     = uvi.x;\r\n\t\t\t\t\tuvArray[ offset_uv + 1 ] = uvi.y;\r\n\r\n\t\t\t\t\toffset_uv += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces4[ f ];\r\n\r\n\t\t\t\tuv = obj_uvs[ fi ];\r\n\r\n\t\t\t\tif ( uv === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\tuvi = uv[ i ];\r\n\r\n\t\t\t\t\tuvArray[ offset_uv ]     = uvi.x;\r\n\t\t\t\t\tuvArray[ offset_uv + 1 ] = uvi.y;\r\n\r\n\t\t\t\t\toffset_uv += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_uv > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uvArray, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyUvs && obj_uvs2 && uvType ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces3[ f ];\r\n\r\n\t\t\t\tuv2 = obj_uvs2[ fi ];\r\n\r\n\t\t\t\tif ( uv2 === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tuv2i = uv2[ i ];\r\n\r\n\t\t\t\t\tuv2Array[ offset_uv2 ]     = uv2i.x;\r\n\t\t\t\t\tuv2Array[ offset_uv2 + 1 ] = uv2i.y;\r\n\r\n\t\t\t\t\toffset_uv2 += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfi = chunk_faces4[ f ];\r\n\r\n\t\t\t\tuv2 = obj_uvs2[ fi ];\r\n\r\n\t\t\t\tif ( uv2 === undefined ) continue;\r\n\r\n\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\tuv2i = uv2[ i ];\r\n\r\n\t\t\t\t\tuv2Array[ offset_uv2 ]     = uv2i.x;\r\n\t\t\t\t\tuv2Array[ offset_uv2 + 1 ] = uv2i.y;\r\n\r\n\t\t\t\t\toffset_uv2 += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset_uv2 > 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uv2Array, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dirtyElements ) {\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfaceArray[ offset_face ] \t = vertexIndex;\r\n\t\t\t\tfaceArray[ offset_face + 1 ] = vertexIndex + 1;\r\n\t\t\t\tfaceArray[ offset_face + 2 ] = vertexIndex + 2;\r\n\r\n\t\t\t\toffset_face += 3;\r\n\r\n\t\t\t\tlineArray[ offset_line ]     = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 1 ] = vertexIndex + 1;\r\n\r\n\t\t\t\tlineArray[ offset_line + 2 ] = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 3 ] = vertexIndex + 2;\r\n\r\n\t\t\t\tlineArray[ offset_line + 4 ] = vertexIndex + 1;\r\n\t\t\t\tlineArray[ offset_line + 5 ] = vertexIndex + 2;\r\n\r\n\t\t\t\toffset_line += 6;\r\n\r\n\t\t\t\tvertexIndex += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tfaceArray[ offset_face ]     = vertexIndex;\r\n\t\t\t\tfaceArray[ offset_face + 1 ] = vertexIndex + 1;\r\n\t\t\t\tfaceArray[ offset_face + 2 ] = vertexIndex + 3;\r\n\r\n\t\t\t\tfaceArray[ offset_face + 3 ] = vertexIndex + 1;\r\n\t\t\t\tfaceArray[ offset_face + 4 ] = vertexIndex + 2;\r\n\t\t\t\tfaceArray[ offset_face + 5 ] = vertexIndex + 3;\r\n\r\n\t\t\t\toffset_face += 6;\r\n\r\n\t\t\t\tlineArray[ offset_line ]     = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 1 ] = vertexIndex + 1;\r\n\r\n\t\t\t\tlineArray[ offset_line + 2 ] = vertexIndex;\r\n\t\t\t\tlineArray[ offset_line + 3 ] = vertexIndex + 3;\r\n\r\n\t\t\t\tlineArray[ offset_line + 4 ] = vertexIndex + 1;\r\n\t\t\t\tlineArray[ offset_line + 5 ] = vertexIndex + 2;\r\n\r\n\t\t\t\tlineArray[ offset_line + 6 ] = vertexIndex + 2;\r\n\t\t\t\tlineArray[ offset_line + 7 ] = vertexIndex + 3;\r\n\r\n\t\t\t\toffset_line += 8;\r\n\r\n\t\t\t\tvertexIndex += 4;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );\r\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faceArray, hint );\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );\r\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, lineArray, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( customAttributes ) {\r\n\r\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcustomAttribute = customAttributes[ i ];\r\n\r\n\t\t\t\tif ( ! customAttribute.__original.needsUpdate ) continue;\r\n\r\n\t\t\t\toffset_custom = 0;\r\n\t\t\t\toffset_customSrc = 0;\r\n\r\n\t\t\t\tif ( customAttribute.size === 1 ) {\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 3;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = value;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 3;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = value;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = value;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 4;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( customAttribute.size === 2 ) {\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 6;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tv4 = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v4.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 8;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 6;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\t\t\t\t\t\t\tv4 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v4.y;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 8;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( customAttribute.size === 3 ) {\r\n\r\n\t\t\t\t\tvar pp;\r\n\r\n\t\t\t\t\tif ( customAttribute.type === \"c\" ) {\r\n\r\n\t\t\t\t\t\tpp = [ \"r\", \"g\", \"b\" ];\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tpp = [ \"x\", \"y\", \"z\" ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 9;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tv4 = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 9;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\t\t\t\t\t\t\tv4 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faceVertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ] \t   = v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 9;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\t\t\t\t\t\t\tv4 = value[ 3 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( customAttribute.size === 4 ) {\r\n\r\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === \"vertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ]\t];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\r\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\r\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\r\n\t\t\t\t\t\t\tv4 = customAttribute.value[ face.d ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 12 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 13 ] = v4.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 14 ] = v4.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 15 ] = v4.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 16;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faces\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value;\r\n\t\t\t\t\t\t\tv2 = value;\r\n\t\t\t\t\t\t\tv3 = value;\r\n\t\t\t\t\t\t\tv4 = value;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 12 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 13 ] = v4.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 14 ] = v4.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 15 ] = v4.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 16;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( customAttribute.boundTo === \"faceVertices\" ) {\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 12;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces4[ f ] ];\r\n\r\n\t\t\t\t\t\t\tv1 = value[ 0 ];\r\n\t\t\t\t\t\t\tv2 = value[ 1 ];\r\n\t\t\t\t\t\t\tv3 = value[ 2 ];\r\n\t\t\t\t\t\t\tv4 = value[ 3 ];\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ] \t= v1.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\r\n\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 12 ] = v4.x;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 13 ] = v4.y;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 14 ] = v4.z;\r\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 15 ] = v4.w;\r\n\r\n\t\t\t\t\t\t\toffset_custom += 16;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( dispose ) {\r\n\r\n\t\t\tdelete geometryGroup.__inittedArrays;\r\n\t\t\tdelete geometryGroup.__colorArray;\r\n\t\t\tdelete geometryGroup.__normalArray;\r\n\t\t\tdelete geometryGroup.__tangentArray;\r\n\t\t\tdelete geometryGroup.__uvArray;\r\n\t\t\tdelete geometryGroup.__uv2Array;\r\n\t\t\tdelete geometryGroup.__faceArray;\r\n\t\t\tdelete geometryGroup.__vertexArray;\r\n\t\t\tdelete geometryGroup.__lineArray;\r\n\t\t\tdelete geometryGroup.__skinIndexArray;\r\n\t\t\tdelete geometryGroup.__skinWeightArray;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setDirectBuffers ( geometry, hint, dispose ) {\r\n\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tvar index = attributes[ \"index\" ];\r\n\t\tvar position = attributes[ \"position\" ];\r\n\t\tvar normal = attributes[ \"normal\" ];\r\n\t\tvar uv = attributes[ \"uv\" ];\r\n\t\tvar color = attributes[ \"color\" ];\r\n\t\tvar tangent = attributes[ \"tangent\" ];\r\n\r\n\t\tif ( geometry.elementsNeedUpdate && index !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\r\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, index.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.verticesNeedUpdate && position !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, position.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.normalsNeedUpdate && normal !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, normal.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvsNeedUpdate && uv !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uv.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colorsNeedUpdate && color !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, color.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.tangentsNeedUpdate && tangent !== undefined ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, tangent.array, hint );\r\n\r\n\t\t}\r\n\r\n\t\tif ( dispose ) {\r\n\r\n\t\t\tfor ( var i in geometry.attributes ) {\r\n\r\n\t\t\t\tdelete geometry.attributes[ i ].array;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Buffer rendering\r\n\r\n\tthis.renderBufferImmediate = function ( object, program, material ) {\r\n\r\n\t\tif ( object.hasPositions && ! object.__webglVertexBuffer ) object.__webglVertexBuffer = _gl.createBuffer();\r\n\t\tif ( object.hasNormals && ! object.__webglNormalBuffer ) object.__webglNormalBuffer = _gl.createBuffer();\r\n\t\tif ( object.hasUvs && ! object.__webglUvBuffer ) object.__webglUvBuffer = _gl.createBuffer();\r\n\t\tif ( object.hasColors && ! object.__webglColorBuffer ) object.__webglColorBuffer = _gl.createBuffer();\r\n\r\n\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglVertexBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglNormalBuffer );\r\n\r\n\t\t\tif ( material.shading === THREE.FlatShading ) {\r\n\r\n\t\t\t\tvar nx, ny, nz,\r\n\t\t\t\t\tnax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz,\r\n\t\t\t\t\tnormalArray,\r\n\t\t\t\t\ti, il = object.count * 3;\r\n\r\n\t\t\t\tfor( i = 0; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tnormalArray = object.normalArray;\r\n\r\n\t\t\t\t\tnax  = normalArray[ i ];\r\n\t\t\t\t\tnay  = normalArray[ i + 1 ];\r\n\t\t\t\t\tnaz  = normalArray[ i + 2 ];\r\n\r\n\t\t\t\t\tnbx  = normalArray[ i + 3 ];\r\n\t\t\t\t\tnby  = normalArray[ i + 4 ];\r\n\t\t\t\t\tnbz  = normalArray[ i + 5 ];\r\n\r\n\t\t\t\t\tncx  = normalArray[ i + 6 ];\r\n\t\t\t\t\tncy  = normalArray[ i + 7 ];\r\n\t\t\t\t\tncz  = normalArray[ i + 8 ];\r\n\r\n\t\t\t\t\tnx = ( nax + nbx + ncx ) / 3;\r\n\t\t\t\t\tny = ( nay + nby + ncy ) / 3;\r\n\t\t\t\t\tnz = ( naz + nbz + ncz ) / 3;\r\n\r\n\t\t\t\t\tnormalArray[ i ] \t = nx;\r\n\t\t\t\t\tnormalArray[ i + 1 ] = ny;\r\n\t\t\t\t\tnormalArray[ i + 2 ] = nz;\r\n\r\n\t\t\t\t\tnormalArray[ i + 3 ] = nx;\r\n\t\t\t\t\tnormalArray[ i + 4 ] = ny;\r\n\t\t\t\t\tnormalArray[ i + 5 ] = nz;\r\n\r\n\t\t\t\t\tnormalArray[ i + 6 ] = nx;\r\n\t\t\t\t\tnormalArray[ i + 7 ] = ny;\r\n\t\t\t\t\tnormalArray[ i + 8 ] = nz;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.normal );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasUvs && material.map ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglUvBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.uv );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglColorBuffer );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\r\n\t\t\t_gl.enableVertexAttribArray( program.attributes.color );\r\n\t\t\t_gl.vertexAttribPointer( program.attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\r\n\r\n\t\tobject.count = 0;\r\n\r\n\t};\r\n\r\n\tthis.renderBufferDirect = function ( camera, lights, fog, material, geometry, object ) {\r\n\r\n\t\tif ( material.visible === false ) return;\r\n\r\n\t\tvar program, attributes, linewidth, primitives, a, attribute;\r\n\r\n\t\tprogram = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\tattributes = program.attributes;\r\n\r\n\t\tvar updateBuffers = false,\r\n\t\t\twireframeBit = material.wireframe ? 1 : 0,\r\n\t\t\tgeometryHash = ( geometry.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;\r\n\r\n\t\tif ( geometryHash !== _currentGeometryGroupHash ) {\r\n\r\n\t\t\t_currentGeometryGroupHash = geometryHash;\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\tdisableAttributes();\r\n\r\n\t\t}\r\n\r\n\t\t// render mesh\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tvar index = geometry.attributes[ \"index\" ];\r\n\r\n\t\t\t// indexed triangles\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tvar offsets = geometry.offsets;\r\n\r\n\t\t\t\t// if there is more than 1 chunk\r\n\t\t\t\t// must set attribute pointers to use new offsets for each chunk\r\n\t\t\t\t// even if geometry and materials didn't change\r\n\r\n\t\t\t\tif ( offsets.length > 1 ) updateBuffers = true;\r\n\r\n\t\t\t\tfor ( var i = 0, il = offsets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar startIndex = offsets[ i ].index;\r\n\r\n\t\t\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t\t\t// vertices\r\n\r\n\t\t\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, startIndex * positionSize * 4 ); // 4 bytes per Float32\r\n\r\n\t\t\t\t\t\t// normals\r\n\r\n\t\t\t\t\t\tvar normal = geometry.attributes[ \"normal\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.normal >= 0 && normal ) {\r\n\r\n\t\t\t\t\t\t\tvar normalSize = normal.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.normal );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.normal, normalSize, _gl.FLOAT, false, 0, startIndex * normalSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\t\tvar uv = geometry.attributes[ \"uv\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.uv >= 0 && uv ) {\r\n\r\n\t\t\t\t\t\t\tvar uvSize = uv.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.uv );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.uv, uvSize, _gl.FLOAT, false, 0, startIndex * uvSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// colors\r\n\r\n\t\t\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, startIndex * colorSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// tangents\r\n\r\n\t\t\t\t\t\tvar tangent = geometry.attributes[ \"tangent\" ];\r\n\r\n\t\t\t\t\t\tif ( attributes.tangent >= 0 && tangent ) {\r\n\r\n\t\t\t\t\t\t\tvar tangentSize = tangent.itemSize;\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );\r\n\t\t\t\t\t\t\tenableAttribute( attributes.tangent );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.tangent, tangentSize, _gl.FLOAT, false, 0, startIndex * tangentSize * 4 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// indices\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// render indexed triangles\r\n\r\n\t\t\t\t\t_gl.drawElements( _gl.TRIANGLES, offsets[ i ].count, _gl.UNSIGNED_SHORT, offsets[ i ].start * 2 ); // 2 bytes per Uint16\r\n\r\n\t\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t\t_this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared\r\n\t\t\t\t\t_this.info.render.faces += offsets[ i ].count / 3;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t// non-indexed triangles\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t\t// vertices\r\n\r\n\t\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t// normals\r\n\r\n\t\t\t\t\tvar normal = geometry.attributes[ \"normal\" ];\r\n\r\n\t\t\t\t\tif ( attributes.normal >= 0 && normal ) {\r\n\r\n\t\t\t\t\t\tvar normalSize = normal.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.normal );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.normal, normalSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\tvar uv = geometry.attributes[ \"uv\" ];\r\n\r\n\t\t\t\t\tif ( attributes.uv >= 0 && uv ) {\r\n\r\n\t\t\t\t\t\tvar uvSize = uv.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.uv );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.uv, uvSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// colors\r\n\r\n\t\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// tangents\r\n\r\n\t\t\t\t\tvar tangent = geometry.attributes[ \"tangent\" ];\r\n\r\n\t\t\t\t\tif ( attributes.tangent >= 0 && tangent ) {\r\n\r\n\t\t\t\t\t\tvar tangentSize = tangent.itemSize;\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes.tangent );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes.tangent, tangentSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render non-indexed triangles\r\n\r\n\t\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, position.numItems / 3 );\r\n\r\n\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t_this.info.render.vertices += position.numItems / 3;\r\n\t\t\t\t_this.info.render.faces += position.numItems / 3 / 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t// render particles\r\n\r\n\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t// vertices\r\n\r\n\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t// colors\r\n\r\n\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render particles\r\n\r\n\t\t\t\t_gl.drawArrays( _gl.POINTS, 0, position.numItems / 3 );\r\n\r\n\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t_this.info.render.points += position.numItems / 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t// vertices\r\n\r\n\t\t\t\tvar position = geometry.attributes[ \"position\" ];\r\n\t\t\t\tvar positionSize = position.itemSize;\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );\r\n\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t// colors\r\n\r\n\t\t\t\tvar color = geometry.attributes[ \"color\" ];\r\n\r\n\t\t\t\tif ( attributes.color >= 0 && color ) {\r\n\r\n\t\t\t\t\tvar colorSize = color.itemSize;\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );\r\n\t\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render lines\r\n\r\n\t\t\t\t_gl.drawArrays( _gl.LINE_STRIP, 0, position.numItems / 3 );\r\n\r\n\t\t\t\t_this.info.render.calls ++;\r\n\t\t\t\t_this.info.render.points += position.numItems;\r\n\r\n\t\t\t}\r\n\r\n    }\r\n\r\n\t};\r\n\r\n\tthis.renderBuffer = function ( camera, lights, fog, material, geometryGroup, object ) {\r\n\r\n\t\tif ( material.visible === false ) return;\r\n\r\n\t\tvar program, attributes, linewidth, primitives, a, attribute, i, il;\r\n\r\n\t\tprogram = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\tattributes = program.attributes;\r\n\r\n\t\tvar updateBuffers = false,\r\n\t\t\twireframeBit = material.wireframe ? 1 : 0,\r\n\t\t\tgeometryGroupHash = ( geometryGroup.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;\r\n\r\n\t\tif ( geometryGroupHash !== _currentGeometryGroupHash ) {\r\n\r\n\t\t\t_currentGeometryGroupHash = geometryGroupHash;\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\tdisableAttributes();\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tif ( !material.morphTargets && attributes.position >= 0 ) {\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\r\n\t\t\t\tenableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( object.morphTargetBase ) {\r\n\r\n\t\t\t\tsetupMorphTargets( material, geometryGroup, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t// custom attributes\r\n\r\n\t\t\t// Use the per-geometryGroup custom attribute arrays which are setup in initMeshBuffers\r\n\r\n\t\t\tif ( geometryGroup.__webglCustomAttributesList ) {\r\n\r\n\t\t\t\tfor ( i = 0, il = geometryGroup.__webglCustomAttributesList.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tattribute = geometryGroup.__webglCustomAttributesList[ i ];\r\n\r\n\t\t\t\t\tif ( attributes[ attribute.buffer.belongsToAttribute ] >= 0 ) {\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, attribute.buffer );\r\n\t\t\t\t\t\tenableAttribute( attributes[ attribute.buffer.belongsToAttribute ] );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ attribute.buffer.belongsToAttribute ], attribute.size, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tif ( attributes.color >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );\r\n\t\t\t\tenableAttribute( attributes.color );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// normals\r\n\r\n\t\t\tif ( attributes.normal >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );\r\n\t\t\t\tenableAttribute( attributes.normal );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// tangents\r\n\r\n\t\t\tif ( attributes.tangent >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );\r\n\t\t\t\tenableAttribute( attributes.tangent );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.tangent, 4, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tif ( attributes.uv >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );\r\n\t\t\t\tenableAttribute( attributes.uv );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( attributes.uv2 >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );\r\n\t\t\t\tenableAttribute( attributes.uv2 );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv2, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.skinning &&\r\n\t\t\t\t attributes.skinIndex >= 0 && attributes.skinWeight >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );\r\n\t\t\t\tenableAttribute( attributes.skinIndex );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );\r\n\t\t\t\tenableAttribute( attributes.skinWeight );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// line distances\r\n\r\n\t\t\tif ( attributes.lineDistance >= 0 ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer );\r\n\t\t\t\tenableAttribute( attributes.lineDistance );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// render mesh\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t// wireframe\r\n\r\n\t\t\tif ( material.wireframe ) {\r\n\r\n\t\t\t\tsetLineWidth( material.wireframeLinewidth );\r\n\r\n\t\t\t\tif ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );\r\n\t\t\t\t_gl.drawElements( _gl.LINES, geometryGroup.__webglLineCount, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t// triangles\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, geometryGroup.__webglFaceCount, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\t\t\t_this.info.render.vertices += geometryGroup.__webglFaceCount;\r\n\t\t\t_this.info.render.faces += geometryGroup.__webglFaceCount / 3;\r\n\r\n\t\t// render lines\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\tprimitives = ( object.type === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;\r\n\r\n\t\t\tsetLineWidth( material.linewidth );\r\n\r\n\t\t\t_gl.drawArrays( primitives, 0, geometryGroup.__webglLineCount );\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\r\n\t\t// render particles\r\n\r\n\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\t_gl.drawArrays( _gl.POINTS, 0, geometryGroup.__webglParticleCount );\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\t\t\t_this.info.render.points += geometryGroup.__webglParticleCount;\r\n\r\n\t\t// render ribbon\r\n\r\n\t\t} else if ( object instanceof THREE.Ribbon ) {\r\n\r\n\t\t\t_gl.drawArrays( _gl.TRIANGLE_STRIP, 0, geometryGroup.__webglVertexCount );\r\n\r\n\t\t\t_this.info.render.calls ++;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction enableAttribute( attribute ) {\r\n\r\n\t\tif ( ! _enabledAttributes[ attribute ] ) {\r\n\r\n\t\t\t_gl.enableVertexAttribArray( attribute );\r\n\t\t\t_enabledAttributes[ attribute ] = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction disableAttributes() {\r\n\r\n\t\tfor ( var attribute in _enabledAttributes ) {\r\n\r\n\t\t\tif ( _enabledAttributes[ attribute ] ) {\r\n\r\n\t\t\t\t_gl.disableVertexAttribArray( attribute );\r\n\t\t\t\t_enabledAttributes[ attribute ] = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setupMorphTargets ( material, geometryGroup, object ) {\r\n\r\n\t\t// set base\r\n\r\n\t\tvar attributes = material.program.attributes;\r\n\r\n\t\tif ( object.morphTargetBase !== -1 && attributes.position >= 0 ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ object.morphTargetBase ] );\r\n\t\t\tenableAttribute( attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t} else if ( attributes.position >= 0 ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\r\n\t\t\tenableAttribute( attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.morphTargetForcedOrder.length ) {\r\n\r\n\t\t\t// set forced order\r\n\r\n\t\t\tvar m = 0;\r\n\t\t\tvar order = object.morphTargetForcedOrder;\r\n\t\t\tvar influences = object.morphTargetInfluences;\r\n\r\n\t\t\twhile ( m < material.numSupportedMorphTargets && m < order.length ) {\r\n\r\n\t\t\t\tif ( attributes[ \"morphTarget\" + m ] >= 0 ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ order[ m ] ] );\r\n\t\t\t\t\tenableAttribute( attributes[ \"morphTarget\" + m ] );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( attributes[ \"morphNormal\" + m ] >= 0 && material.morphNormals ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ order[ m ] ] );\r\n\t\t\t\t\tenableAttribute( attributes[ \"morphNormal\" + m ] );\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = influences[ order[ m ] ];\r\n\r\n\t\t\t\tm ++;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// find the most influencing\r\n\r\n\t\t\tvar influence, activeInfluenceIndices = [];\r\n\t\t\tvar influences = object.morphTargetInfluences;\r\n\t\t\tvar i, il = influences.length;\r\n\r\n\t\t\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\t\t\tinfluence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence > 0 ) {\r\n\r\n\t\t\t\t\tactiveInfluenceIndices.push( [ influence, i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( activeInfluenceIndices.length > material.numSupportedMorphTargets ) {\r\n\r\n\t\t\t\tactiveInfluenceIndices.sort( numericalSort );\r\n\t\t\t\tactiveInfluenceIndices.length = material.numSupportedMorphTargets;\r\n\r\n\t\t\t} else if ( activeInfluenceIndices.length > material.numSupportedMorphNormals ) {\r\n\r\n\t\t\t\tactiveInfluenceIndices.sort( numericalSort );\r\n\r\n\t\t\t} else if ( activeInfluenceIndices.length === 0 ) {\r\n\r\n\t\t\t\tactiveInfluenceIndices.push( [ 0, 0 ] );\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar influenceIndex, m = 0;\r\n\r\n\t\t\twhile ( m < material.numSupportedMorphTargets ) {\r\n\r\n\t\t\t\tif ( activeInfluenceIndices[ m ] ) {\r\n\r\n\t\t\t\t\tinfluenceIndex = activeInfluenceIndices[ m ][ 1 ];\r\n\r\n\t\t\t\t\tif ( attributes[ \"morphTarget\" + m ] >= 0 ) {\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ influenceIndex ] );\r\n\t\t\t\t\t\tenableAttribute( attributes[ \"morphTarget\" + m ] );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( attributes[ \"morphNormal\" + m ] >= 0 && material.morphNormals ) {\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ influenceIndex ] );\r\n\t\t\t\t\t\tenableAttribute( attributes[ \"morphNormal\" + m ] );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = influences[ influenceIndex ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t*/\r\n\r\n\t\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tm ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// load updated influences uniform\r\n\r\n\t\tif ( material.program.uniforms.morphTargetInfluences !== null ) {\r\n\r\n\t\t\t_gl.uniform1fv( material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Sorting\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn b.id - a.id;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction numericalSort ( a, b ) {\r\n\r\n\t\treturn b[ 0 ] - a[ 0 ];\r\n\r\n\t};\r\n\r\n\r\n\t// Rendering\r\n\r\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar i, il,\r\n\r\n\t\twebglObject, object,\r\n\t\trenderList,\r\n\r\n\t\tlights = scene.__lights,\r\n\t\tfog = scene.fog;\r\n\r\n\t\t// reset caching for this frame\r\n\r\n\t\t_currentMaterialId = -1;\r\n\t\t_lightsNeedUpdate = true;\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tif ( this.autoUpdateScene ) scene.updateMatrixWorld();\r\n\r\n\t\t// update camera matrices and frustum\r\n\r\n\t\tif ( camera.parent === undefined ) camera.updateMatrixWorld();\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t// update WebGL objects\r\n\r\n\t\tif ( this.autoUpdateObjects ) this.initWebGLObjects( scene );\r\n\r\n\t\t// custom render plugins (pre pass)\r\n\r\n\t\trenderPlugins( this.renderPluginsPre, scene, camera );\r\n\r\n\t\t//\r\n\r\n\t\t_this.info.render.calls = 0;\r\n\t\t_this.info.render.vertices = 0;\r\n\t\t_this.info.render.faces = 0;\r\n\t\t_this.info.render.points = 0;\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\tif ( this.autoClear || forceClear ) {\r\n\r\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\r\n\r\n\t\t}\r\n\r\n\t\t// set matrices for regular objects (frustum culled)\r\n\r\n\t\trenderList = scene.__webglObjects;\r\n\r\n\t\tfor ( i = 0, il = renderList.length; i < il; i ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\twebglObject.render = false;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tif ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\tsetupMatrices( object, camera );\r\n\r\n\t\t\t\t\tunrollBufferMaterial( webglObject );\r\n\r\n\t\t\t\t\twebglObject.render = true;\r\n\r\n\t\t\t\t\tif ( this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t\tif ( object.renderDepth !== null ) {\r\n\r\n\t\t\t\t\t\t\twebglObject.z = object.renderDepth;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t_vector3.copy( object.matrixWorld.getPosition() );\r\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t\twebglObject.z = _vector3.z;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twebglObject.id = object.id;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.sortObjects ) {\r\n\r\n\t\t\trenderList.sort( painterSortStable );\r\n\r\n\t\t}\r\n\r\n\t\t// set matrices for immediate objects\r\n\r\n\t\trenderList = scene.__webglObjectsImmediate;\r\n\r\n\t\tfor ( i = 0, il = renderList.length; i < il; i ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tsetupMatrices( object, camera );\r\n\r\n\t\t\t\tunrollImmediateBufferMaterial( webglObject );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\tvar material = scene.overrideMaterial;\r\n\r\n\t\t\tthis.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\tthis.setDepthTest( material.depthTest );\r\n\t\t\tthis.setDepthWrite( material.depthWrite );\r\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t\trenderObjects( scene.__webglObjects, false, \"\", camera, lights, fog, true, material );\r\n\t\t\trenderObjectsImmediate( scene.__webglObjectsImmediate, \"\", camera, lights, fog, false, material );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar material = null;\r\n\r\n\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\tthis.setBlending( THREE.NoBlending );\r\n\r\n\t\t\trenderObjects( scene.__webglObjects, true, \"opaque\", camera, lights, fog, false, material );\r\n\t\t\trenderObjectsImmediate( scene.__webglObjectsImmediate, \"opaque\", camera, lights, fog, false, material );\r\n\r\n\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\trenderObjects( scene.__webglObjects, false, \"transparent\", camera, lights, fog, true, material );\r\n\t\t\trenderObjectsImmediate( scene.__webglObjectsImmediate, \"transparent\", camera, lights, fog, true, material );\r\n\r\n\t\t}\r\n\r\n\t\t// custom render plugins (post pass)\r\n\r\n\t\trenderPlugins( this.renderPluginsPost, scene, camera );\r\n\r\n\r\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\tif ( renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\tupdateRenderTargetMipmap( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\tthis.setDepthTest( true );\r\n\t\tthis.setDepthWrite( true );\r\n\r\n\t\t// _gl.finish();\r\n\r\n\t};\r\n\r\n\tfunction renderPlugins( plugins, scene, camera ) {\r\n\r\n\t\tif ( ! plugins.length ) return;\r\n\r\n\t\tfor ( var i = 0, il = plugins.length; i < il; i ++ ) {\r\n\r\n\t\t\t// reset state for plugin (to start from clean slate)\r\n\r\n\t\t\t_currentProgram = null;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\t_oldBlending = -1;\r\n\t\t\t_oldDepthTest = -1;\r\n\t\t\t_oldDepthWrite = -1;\r\n\t\t\t_oldDoubleSided = -1;\r\n\t\t\t_oldFlipSided = -1;\r\n\t\t\t_currentGeometryGroupHash = -1;\r\n\t\t\t_currentMaterialId = -1;\r\n\r\n\t\t\t_lightsNeedUpdate = true;\r\n\r\n\t\t\tplugins[ i ].render( scene, camera, _currentWidth, _currentHeight );\r\n\r\n\t\t\t// reset state after plugin (anything could have changed)\r\n\r\n\t\t\t_currentProgram = null;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\t_oldBlending = -1;\r\n\t\t\t_oldDepthTest = -1;\r\n\t\t\t_oldDepthWrite = -1;\r\n\t\t\t_oldDoubleSided = -1;\r\n\t\t\t_oldFlipSided = -1;\r\n\t\t\t_currentGeometryGroupHash = -1;\r\n\t\t\t_currentMaterialId = -1;\r\n\r\n\t\t\t_lightsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction renderObjects ( renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial ) {\r\n\r\n\t\tvar webglObject, object, buffer, material, start, end, delta;\r\n\r\n\t\tif ( reverse ) {\r\n\r\n\t\t\tstart = renderList.length - 1;\r\n\t\t\tend = -1;\r\n\t\t\tdelta = -1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstart = 0;\r\n\t\t\tend = renderList.length;\r\n\t\t\tdelta = 1;\r\n\t\t}\r\n\r\n\t\tfor ( var i = start; i !== end; i += delta ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\r\n\t\t\tif ( webglObject.render ) {\r\n\r\n\t\t\t\tobject = webglObject.object;\r\n\t\t\t\tbuffer = webglObject.buffer;\r\n\r\n\t\t\t\tif ( overrideMaterial ) {\r\n\r\n\t\t\t\t\tmaterial = overrideMaterial;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial = webglObject[ materialType ];\r\n\r\n\t\t\t\t\tif ( ! material ) continue;\r\n\r\n\t\t\t\t\tif ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\r\n\t\t\t\t\t_this.setDepthTest( material.depthTest );\r\n\t\t\t\t\t_this.setDepthWrite( material.depthWrite );\r\n\t\t\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_this.setMaterialFaces( material );\r\n\r\n\t\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t_this.renderBufferDirect( camera, lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_this.renderBuffer( camera, lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction renderObjectsImmediate ( renderList, materialType, camera, lights, fog, useBlending, overrideMaterial ) {\r\n\r\n\t\tvar webglObject, object, material, program;\r\n\r\n\t\tfor ( var i = 0, il = renderList.length; i < il; i ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ i ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tif ( overrideMaterial ) {\r\n\r\n\t\t\t\t\tmaterial = overrideMaterial;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial = webglObject[ materialType ];\r\n\r\n\t\t\t\t\tif ( ! material ) continue;\r\n\r\n\t\t\t\t\tif ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\r\n\t\t\t\t\t_this.setDepthTest( material.depthTest );\r\n\t\t\t\t\t_this.setDepthWrite( material.depthWrite );\r\n\t\t\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_this.renderImmediateObject( camera, lights, fog, material, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.renderImmediateObject = function ( camera, lights, fog, material, object ) {\r\n\r\n\t\tvar program = setProgram( camera, lights, fog, material, object );\r\n\r\n\t\t_currentGeometryGroupHash = -1;\r\n\r\n\t\t_this.setMaterialFaces( material );\r\n\r\n\t\tif ( object.immediateRenderCallback ) {\r\n\r\n\t\t\tobject.immediateRenderCallback( program, _gl, _frustum );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tobject.render( function( object ) { _this.renderBufferImmediate( object, program, material ); } );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction unrollImmediateBufferMaterial ( globject ) {\r\n\r\n\t\tvar object = globject.object,\r\n\t\t\tmaterial = object.material;\r\n\r\n\t\tif ( material.transparent ) {\r\n\r\n\t\t\tglobject.transparent = material;\r\n\t\t\tglobject.opaque = null;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tglobject.opaque = material;\r\n\t\t\tglobject.transparent = null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction unrollBufferMaterial ( globject ) {\r\n\r\n\t\tvar object = globject.object,\r\n\t\t\tbuffer = globject.buffer,\r\n\t\t\tmaterial, materialIndex, meshMaterial;\r\n\r\n\t\tmeshMaterial = object.material;\r\n\r\n\t\tif ( meshMaterial instanceof THREE.MeshFaceMaterial ) {\r\n\r\n\t\t\tmaterialIndex = buffer.materialIndex;\r\n\r\n\t\t\tmaterial = meshMaterial.materials[ materialIndex ];\r\n\r\n\t\t\tif ( material.transparent ) {\r\n\r\n\t\t\t\tglobject.transparent = material;\r\n\t\t\t\tglobject.opaque = null;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tglobject.opaque = material;\r\n\t\t\t\tglobject.transparent = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaterial = meshMaterial;\r\n\r\n\t\t\tif ( material ) {\r\n\r\n\t\t\t\tif ( material.transparent ) {\r\n\r\n\t\t\t\t\tglobject.transparent = material;\r\n\t\t\t\t\tglobject.opaque = null;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tglobject.opaque = material;\r\n\t\t\t\t\tglobject.transparent = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Geometry splitting\r\n\r\n\tfunction sortFacesByMaterial ( geometry, material ) {\r\n\r\n\t\tvar f, fl, face, materialIndex, vertices,\r\n\t\t\tgroupHash, hash_map = {};\r\n\r\n\t\tvar numMorphTargets = geometry.morphTargets.length;\r\n\t\tvar numMorphNormals = geometry.morphNormals.length;\r\n\r\n\t\tvar usesFaceMaterial = material instanceof THREE.MeshFaceMaterial;\r\n\r\n\t\tgeometry.geometryGroups = {};\r\n\r\n\t\tfor ( f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = geometry.faces[ f ];\r\n\t\t\tmaterialIndex = usesFaceMaterial ? face.materialIndex : 0;\r\n\r\n\t\t\tif ( hash_map[ materialIndex ] === undefined ) {\r\n\r\n\t\t\t\thash_map[ materialIndex ] = { 'hash': materialIndex, 'counter': 0 };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgroupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;\r\n\r\n\t\t\tif ( geometry.geometryGroups[ groupHash ] === undefined ) {\r\n\r\n\t\t\t\tgeometry.geometryGroups[ groupHash ] = { 'faces3': [], 'faces4': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvertices = face instanceof THREE.Face3 ? 3 : 4;\r\n\r\n\t\t\tif ( geometry.geometryGroups[ groupHash ].vertices + vertices > 65535 ) {\r\n\r\n\t\t\t\thash_map[ materialIndex ].counter += 1;\r\n\t\t\t\tgroupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;\r\n\r\n\t\t\t\tif ( geometry.geometryGroups[ groupHash ] === undefined ) {\r\n\r\n\t\t\t\t\tgeometry.geometryGroups[ groupHash ] = { 'faces3': [], 'faces4': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tgeometry.geometryGroups[ groupHash ].faces3.push( f );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgeometry.geometryGroups[ groupHash ].faces4.push( f );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.geometryGroups[ groupHash ].vertices += vertices;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.geometryGroupsList = [];\r\n\r\n\t\tfor ( var g in geometry.geometryGroups ) {\r\n\r\n\t\t\tgeometry.geometryGroups[ g ].id = _geometryGroupCounter ++;\r\n\r\n\t\t\tgeometry.geometryGroupsList.push( geometry.geometryGroups[ g ] );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects refresh\r\n\r\n\tthis.initWebGLObjects = function ( scene ) {\r\n\r\n\t\tif ( !scene.__webglObjects ) {\r\n\r\n\t\t\tscene.__webglObjects = [];\r\n\t\t\tscene.__webglObjectsImmediate = [];\r\n\t\t\tscene.__webglSprites = [];\r\n\t\t\tscene.__webglFlares = [];\r\n\r\n\t\t}\r\n\r\n\t\twhile ( scene.__objectsAdded.length ) {\r\n\r\n\t\t\taddObject( scene.__objectsAdded[ 0 ], scene );\r\n\t\t\tscene.__objectsAdded.splice( 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\twhile ( scene.__objectsRemoved.length ) {\r\n\r\n\t\t\tremoveObject( scene.__objectsRemoved[ 0 ], scene );\r\n\t\t\tscene.__objectsRemoved.splice( 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\t// update must be called after objects adding / removal\r\n\r\n\t\tfor ( var o = 0, ol = scene.__webglObjects.length; o < ol; o ++ ) {\r\n\r\n\t\t\tupdateObject( scene.__webglObjects[ o ].object );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects adding\r\n\r\n\tfunction addObject ( object, scene ) {\r\n\r\n\t\tvar g, geometry, material, geometryGroup;\r\n\r\n\t\tif ( ! object.__webglInit ) {\r\n\r\n\t\t\tobject.__webglInit = true;\r\n\r\n\t\t\tobject._modelViewMatrix = new THREE.Matrix4();\r\n\t\t\tobject._normalMatrix = new THREE.Matrix3();\r\n\r\n\t\t\tif ( object.geometry !== undefined && object.geometry.__webglInit === undefined ) {\r\n\r\n\t\t\t\tobject.geometry.__webglInit = true;\r\n\t\t\t\tobject.geometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\t\t\t\tmaterial = object.material;\r\n\r\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\tif ( geometry.geometryGroups === undefined ) {\r\n\r\n\t\t\t\t\t\tsortFacesByMaterial( geometry, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// create separate VBOs per geometry chunk\r\n\r\n\t\t\t\t\tfor ( g in geometry.geometryGroups ) {\r\n\r\n\t\t\t\t\t\tgeometryGroup = geometry.geometryGroups[ g ];\r\n\r\n\t\t\t\t\t\t// initialise VBO on the first access\r\n\r\n\t\t\t\t\t\tif ( ! geometryGroup.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\t\t\tcreateMeshBuffers( geometryGroup );\r\n\t\t\t\t\t\t\tinitMeshBuffers( geometryGroup, object );\r\n\r\n\t\t\t\t\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.morphTargetsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.elementsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.uvsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.normalsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.tangentsNeedUpdate = true;\r\n\t\t\t\t\t\t\tgeometry.colorsNeedUpdate = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\tinitDirectBuffers( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Ribbon ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( ! geometry.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\tcreateRibbonBuffers( geometry );\r\n\t\t\t\t\tinitRibbonBuffers( geometry, object );\r\n\r\n\t\t\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\t\t\t\tgeometry.colorsNeedUpdate = true;\r\n\t\t\t\t\tgeometry.normalsNeedUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( ! geometry.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n            createLineBuffers( geometry );\r\n            initLineBuffers( geometry, object );\r\n\r\n            geometry.verticesNeedUpdate = true;\r\n            geometry.colorsNeedUpdate = true;\r\n            geometry.lineDistancesNeedUpdate = true;\r\n\r\n          } else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t\tinitDirectBuffers( geometry );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( ! geometry.__webglVertexBuffer ) {\r\n\r\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\t\tcreateParticleBuffers( geometry );\r\n\t\t\t\t\t\tinitParticleBuffers( geometry, object );\r\n\r\n\t\t\t\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\t\t\t\t\tgeometry.colorsNeedUpdate = true;\r\n\r\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t\tinitDirectBuffers( geometry );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! object.__webglActive ) {\r\n\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\r\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\taddBuffer( scene.__webglObjects, geometry, object );\r\n\r\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\tfor ( g in geometry.geometryGroups ) {\r\n\r\n\t\t\t\t\t\tgeometryGroup = geometry.geometryGroups[ g ];\r\n\r\n\t\t\t\t\t\taddBuffer( scene.__webglObjects, geometryGroup, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Ribbon ||\r\n\t\t\t\t\t\tobject instanceof THREE.Line ||\r\n\t\t\t\t\t\tobject instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\t\tgeometry = object.geometry;\r\n\t\t\t\taddBuffer( scene.__webglObjects, geometry, object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {\r\n\r\n\t\t\t\taddBufferImmediate( scene.__webglObjectsImmediate, object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\t\tscene.__webglSprites.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\r\n\t\t\t\tscene.__webglFlares.push( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.__webglActive = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction addBuffer ( objlist, buffer, object ) {\r\n\r\n\t\tobjlist.push(\r\n\t\t\t{\r\n\t\t\t\tbuffer: buffer,\r\n\t\t\t\tobject: object,\r\n\t\t\t\topaque: null,\r\n\t\t\t\ttransparent: null\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tfunction addBufferImmediate ( objlist, object ) {\r\n\r\n\t\tobjlist.push(\r\n\t\t\t{\r\n\t\t\t\tobject: object,\r\n\t\t\t\topaque: null,\r\n\t\t\t\ttransparent: null\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t};\r\n\r\n\t// Objects updates\r\n\r\n\tfunction updateObject ( object ) {\r\n\r\n\t\tvar geometry = object.geometry,\r\n\t\t\tgeometryGroup, customAttributesDirty, material;\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.elementsNeedUpdate ||\r\n\t\t\t\t\t geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||\r\n\t\t\t\t\t geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.tangentsNeedUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// check all geometry groups\r\n\r\n\t\t\t\tfor( var i = 0, il = geometry.geometryGroupsList.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tgeometryGroup = geometry.geometryGroupsList[ i ];\r\n\r\n\t\t\t\t\tmaterial = getBufferMaterial( object, geometryGroup );\r\n\r\n\t\t\t\t\tif ( geometry.buffersNeedUpdate ) {\r\n\r\n\t\t\t\t\t\tinitMeshBuffers( geometryGroup, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n\t\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate ||\r\n\t\t\t\t\t\t geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||\r\n\t\t\t\t\t\t geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty ) {\r\n\r\n\t\t\t\t\t\tsetMeshBuffers( geometryGroup, object, _gl.DYNAMIC_DRAW, !geometry.dynamic, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.morphTargetsNeedUpdate = false;\r\n\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.tangentsNeedUpdate = false;\r\n\r\n\t\t\t\tgeometry.buffersNeedUpdate = false;\r\n\r\n\t\t\t\tmaterial.attributes && clearCustomAttributes( material );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Ribbon ) {\r\n\r\n\t\t\tmaterial = getBufferMaterial( object, geometry );\r\n\r\n\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.normalsNeedUpdate || customAttributesDirty ) {\r\n\r\n\t\t\t\tsetRibbonBuffers( geometry, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t\tmaterial.attributes && clearCustomAttributes( material );\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n      if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n        material = getBufferMaterial( object, geometry );\r\n\r\n        customAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n        if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty ) {\r\n\r\n          setLineBuffers( geometry, _gl.DYNAMIC_DRAW );\r\n\r\n        }\r\n\r\n        geometry.verticesNeedUpdate = false;\r\n        geometry.colorsNeedUpdate = false;\r\n        geometry.lineDistancesNeedUpdate = false;\r\n\r\n        material.attributes && clearCustomAttributes( material );\r\n\r\n      }\r\n\r\n\t\t} else if ( object instanceof THREE.ParticleSystem ) {\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterial = getBufferMaterial( object, geometry );\r\n\r\n\t\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\r\n\r\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty ) {\r\n\r\n\t\t\t\t\tsetParticleBuffers( geometry, _gl.DYNAMIC_DRAW, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t\tmaterial.attributes && clearCustomAttributes( material );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects updates - custom attributes check\r\n\r\n\tfunction areCustomAttributesDirty ( material ) {\r\n\r\n\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\tif ( material.attributes[ a ].needsUpdate ) return true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t};\r\n\r\n\tfunction clearCustomAttributes ( material ) {\r\n\r\n\t\tfor ( var a in material.attributes ) {\r\n\r\n\t\t\tmaterial.attributes[ a ].needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Objects removal\r\n\r\n\tfunction removeObject ( object, scene ) {\r\n\r\n\t\tif ( object instanceof THREE.Mesh  ||\r\n\t\t\t object instanceof THREE.ParticleSystem ||\r\n\t\t\t object instanceof THREE.Ribbon ||\r\n\t\t\t object instanceof THREE.Line ) {\r\n\r\n\t\t\tremoveInstances( scene.__webglObjects, object );\r\n\r\n\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\tremoveInstancesDirect( scene.__webglSprites, object );\r\n\r\n\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\r\n\t\t\tremoveInstancesDirect( scene.__webglFlares, object );\r\n\r\n\t\t} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {\r\n\r\n\t\t\tremoveInstances( scene.__webglObjectsImmediate, object );\r\n\r\n\t\t}\r\n\r\n\t\tobject.__webglActive = false;\r\n\r\n\t};\r\n\r\n\tfunction removeInstances ( objlist, object ) {\r\n\r\n\t\tfor ( var o = objlist.length - 1; o >= 0; o -- ) {\r\n\r\n\t\t\tif ( objlist[ o ].object === object ) {\r\n\r\n\t\t\t\tobjlist.splice( o, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction removeInstancesDirect ( objlist, object ) {\r\n\r\n\t\tfor ( var o = objlist.length - 1; o >= 0; o -- ) {\r\n\r\n\t\t\tif ( objlist[ o ] === object ) {\r\n\r\n\t\t\t\tobjlist.splice( o, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Materials\r\n\r\n\tthis.initMaterial = function ( material, lights, fog, object ) {\r\n\r\n\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\tvar u, a, identifiers, i, parameters, maxLightCount, maxBones, maxShadows, shaderID;\r\n\r\n\t\tif ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\tshaderID = 'depth';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\tshaderID = 'normal';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshBasicMaterial ) {\r\n\r\n\t\t\tshaderID = 'basic';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\r\n\r\n\t\t\tshaderID = 'lambert';\r\n\r\n\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\tshaderID = 'phong';\r\n\r\n\t\t} else if ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\tshaderID = 'basic';\r\n\r\n\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\tshaderID = 'dashed';\r\n\r\n\t\t} else if ( material instanceof THREE.ParticleBasicMaterial ) {\r\n\r\n\t\t\tshaderID = 'particle_basic';\r\n\r\n\t\t}\r\n\r\n\t\tif ( shaderID ) {\r\n\r\n\t\t\tsetMaterialShaders( material, THREE.ShaderLib[ shaderID ] );\r\n\r\n\t\t}\r\n\r\n\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t// (not to blow over maxLights budget)\r\n\r\n\t\tmaxLightCount = allocateLights( lights );\r\n\r\n\t\tmaxShadows = allocateShadows( lights );\r\n\r\n\t\tmaxBones = allocateBones( object );\r\n\r\n\t\tparameters = {\r\n\r\n\t\t\tmap: !!material.map,\r\n\t\t\tenvMap: !!material.envMap,\r\n\t\t\tlightMap: !!material.lightMap,\r\n\t\t\tbumpMap: !!material.bumpMap,\r\n\t\t\tnormalMap: !!material.normalMap,\r\n\t\t\tspecularMap: !!material.specularMap,\r\n\r\n\t\t\tvertexColors: material.vertexColors,\r\n\r\n\t\t\tfog: fog,\r\n\t\t\tuseFog: material.fog,\r\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\r\n\r\n\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\r\n\t\t\tskinning: material.skinning,\r\n\t\t\tmaxBones: maxBones,\r\n\t\t\tuseVertexTexture: _supportsBoneTextures && object && object.useVertexTexture,\r\n\t\t\tboneTextureWidth: object && object.boneTextureWidth,\r\n\t\t\tboneTextureHeight: object && object.boneTextureHeight,\r\n\r\n\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\tmaxMorphTargets: this.maxMorphTargets,\r\n\t\t\tmaxMorphNormals: this.maxMorphNormals,\r\n\r\n\t\t\tmaxDirLights: maxLightCount.directional,\r\n\t\t\tmaxPointLights: maxLightCount.point,\r\n\t\t\tmaxSpotLights: maxLightCount.spot,\r\n\t\t\tmaxHemiLights: maxLightCount.hemi,\r\n\r\n\t\t\tmaxShadows: maxShadows,\r\n\t\t\tshadowMapEnabled: this.shadowMapEnabled && object.receiveShadow,\r\n\t\t\tshadowMapType: this.shadowMapType,\r\n\t\t\tshadowMapDebug: this.shadowMapDebug,\r\n\t\t\tshadowMapCascade: this.shadowMapCascade,\r\n\r\n\t\t\talphaTest: material.alphaTest,\r\n\t\t\tmetal: material.metal,\r\n\t\t\tperPixel: material.perPixel,\r\n\t\t\twrapAround: material.wrapAround,\r\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\r\n\t\t\tflipSided: material.side === THREE.BackSide\r\n\r\n\t\t};\r\n\r\n\t\tmaterial.program = buildProgram( shaderID, material.fragmentShader, material.vertexShader, material.uniforms, material.attributes, material.defines, parameters );\r\n\r\n\t\tvar attributes = material.program.attributes;\r\n\r\n\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\tvar id, base = \"morphTarget\";\r\n\r\n\t\t\tfor ( i = 0; i < this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tid = base + i;\r\n\r\n\t\t\t\tif ( attributes[ id ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\tvar id, base = \"morphNormal\";\r\n\r\n\t\t\tfor ( i = 0; i < this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\tid = base + i;\r\n\r\n\t\t\t\tif ( attributes[ id ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tmaterial.uniformsList = [];\r\n\r\n\t\tfor ( u in material.uniforms ) {\r\n\r\n\t\t\tmaterial.uniformsList.push( [ material.uniforms[ u ], u ] );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setMaterialShaders( material, shaders ) {\r\n\r\n\t\tmaterial.uniforms = THREE.UniformsUtils.clone( shaders.uniforms );\r\n\t\tmaterial.vertexShader = shaders.vertexShader;\r\n\t\tmaterial.fragmentShader = shaders.fragmentShader;\r\n\r\n\t};\r\n\r\n\tfunction setProgram( camera, lights, fog, material, object ) {\r\n\r\n\t\t_usedTextureUnits = 0;\r\n\r\n\t\tif ( material.needsUpdate ) {\r\n\r\n\t\t\tif ( material.program ) deallocateMaterial( material );\r\n\r\n\t\t\t_this.initMaterial( material, lights, fog, object );\r\n\t\t\tmaterial.needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\tif ( ! object.__webglMorphTargetInfluences ) {\r\n\r\n\t\t\t\tobject.__webglMorphTargetInfluences = new Float32Array( _this.maxMorphTargets );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar refreshMaterial = false;\r\n\r\n\t\tvar program = material.program,\r\n\t\t\tp_uniforms = program.uniforms,\r\n\t\t\tm_uniforms = material.uniforms;\r\n\r\n\t\tif ( program !== _currentProgram ) {\r\n\r\n\t\t\t_gl.useProgram( program );\r\n\t\t\t_currentProgram = program;\r\n\r\n\t\t\trefreshMaterial = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t_currentMaterialId = material.id;\r\n\t\t\trefreshMaterial = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshMaterial || camera !== _currentCamera ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\t\tif ( camera !== _currentCamera ) _currentCamera = camera;\r\n\r\n\t\t}\r\n\r\n\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\tif ( material.skinning ) {\r\n\r\n\t\t\tif ( _supportsBoneTextures && object.useVertexTexture ) {\r\n\r\n\t\t\t\tif ( p_uniforms.boneTexture !== null ) {\r\n\r\n\t\t\t\t\tvar textureUnit = getTextureUnit();\r\n\r\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTexture, textureUnit );\r\n\t\t\t\t\t_this.setTexture( object.boneTexture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( p_uniforms.boneGlobalMatrices !== null ) {\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.boneMatrices );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material.lights ) {\r\n\r\n\t\t\t\tif ( _lightsNeedUpdate ) {\r\n\r\n\t\t\t\t\tsetupLights( program, lights );\r\n\t\t\t\t\t_lightsNeedUpdate = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\trefreshUniformsLights( m_uniforms, _lights );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// refresh single material specific uniforms\r\n\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.ParticleBasicMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsParticle( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.mNear.value = camera.near;\r\n\t\t\t\tm_uniforms.mFar.value = camera.far;\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.receiveShadow && ! material._shadowPass ) {\r\n\r\n\t\t\t\trefreshUniformsShadow( m_uniforms, lights );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// load common uniforms\r\n\r\n\t\t\tloadUniformsGeneric( program, material.uniformsList );\r\n\r\n\t\t\t// load material specific uniforms\r\n\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material.envMap ) {\r\n\r\n\t\t\t\tif ( p_uniforms.cameraPosition !== null ) {\r\n\r\n\t\t\t\t\tvar position = camera.matrixWorld.getPosition();\r\n\t\t\t\t\t_gl.uniform3f( p_uniforms.cameraPosition, position.x, position.y, position.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material.skinning ) {\r\n\r\n\t\t\t\tif ( p_uniforms.viewMatrix !== null ) {\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tloadUniformsMatrices( p_uniforms, object );\r\n\r\n\t\tif ( p_uniforms.modelMatrix !== null ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\t// Uniforms (refresh uniforms objects)\r\n\r\n\tfunction refreshUniformsCommon ( uniforms, material ) {\r\n\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copyGammaToLinear( material.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\tuniforms.specularMap.value = material.specularMap;\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities\r\n\t\t//\t1. color map\r\n\t\t//\t2. specular map\r\n\t\t//\t3. normal map\r\n\t\t//\t4. bump map\r\n\r\n\t\tvar uvScaleMap;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\tvar offset = uvScaleMap.offset;\r\n\t\t\tvar repeat = uvScaleMap.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.envMap.value = material.envMap;\r\n\t\tuniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : -1;\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t//uniforms.reflectivity.value = material.reflectivity * material.reflectivity;\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\t\tuniforms.combine.value = material.combine;\r\n\t\tuniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsLine ( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsDash ( uniforms, material ) {\r\n\r\n\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\tuniforms.scale.value = material.scale;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsParticle ( uniforms, material ) {\r\n\r\n\t\tuniforms.psColor.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.size.value = material.size;\r\n\t\tuniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsFog ( uniforms, fog ) {\r\n\r\n\t\tuniforms.fogColor.value = fog.color;\r\n\r\n\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsPhong ( uniforms, material ) {\r\n\r\n\t\tuniforms.shininess.value = material.shininess;\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\tuniforms.ambient.value.copyGammaToLinear( material.ambient );\r\n\t\t\tuniforms.emissive.value.copyGammaToLinear( material.emissive );\r\n\t\t\tuniforms.specular.value.copyGammaToLinear( material.specular );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.ambient.value = material.ambient;\r\n\t\t\tuniforms.emissive.value = material.emissive;\r\n\t\t\tuniforms.specular.value = material.specular;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.wrapAround ) {\r\n\r\n\t\t\tuniforms.wrapRGB.value.copy( material.wrapRGB );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsLambert ( uniforms, material ) {\r\n\r\n\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\tuniforms.ambient.value.copyGammaToLinear( material.ambient );\r\n\t\t\tuniforms.emissive.value.copyGammaToLinear( material.emissive );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tuniforms.ambient.value = material.ambient;\r\n\t\t\tuniforms.emissive.value = material.emissive;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.wrapAround ) {\r\n\r\n\t\t\tuniforms.wrapRGB.value.copy( material.wrapRGB );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsLights ( uniforms, lights ) {\r\n\r\n\t\tuniforms.ambientLightColor.value = lights.ambient;\r\n\r\n\t\tuniforms.directionalLightColor.value = lights.directional.colors;\r\n\t\tuniforms.directionalLightDirection.value = lights.directional.positions;\r\n\r\n\t\tuniforms.pointLightColor.value = lights.point.colors;\r\n\t\tuniforms.pointLightPosition.value = lights.point.positions;\r\n\t\tuniforms.pointLightDistance.value = lights.point.distances;\r\n\r\n\t\tuniforms.spotLightColor.value = lights.spot.colors;\r\n\t\tuniforms.spotLightPosition.value = lights.spot.positions;\r\n\t\tuniforms.spotLightDistance.value = lights.spot.distances;\r\n\t\tuniforms.spotLightDirection.value = lights.spot.directions;\r\n\t\tuniforms.spotLightAngleCos.value = lights.spot.anglesCos;\r\n\t\tuniforms.spotLightExponent.value = lights.spot.exponents;\r\n\r\n\t\tuniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;\r\n\t\tuniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;\r\n\t\tuniforms.hemisphereLightDirection.value = lights.hemi.positions;\r\n\r\n\t};\r\n\r\n\tfunction refreshUniformsShadow ( uniforms, lights ) {\r\n\r\n\t\tif ( uniforms.shadowMatrix ) {\r\n\r\n\t\t\tvar j = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\r\n\t\t\t\tif ( ! light.castShadow ) continue;\r\n\r\n\t\t\t\tif ( light instanceof THREE.SpotLight || ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) ) {\r\n\r\n\t\t\t\t\tuniforms.shadowMap.value[ j ] = light.shadowMap;\r\n\t\t\t\t\tuniforms.shadowMapSize.value[ j ] = light.shadowMapSize;\r\n\r\n\t\t\t\t\tuniforms.shadowMatrix.value[ j ] = light.shadowMatrix;\r\n\r\n\t\t\t\t\tuniforms.shadowDarkness.value[ j ] = light.shadowDarkness;\r\n\t\t\t\t\tuniforms.shadowBias.value[ j ] = light.shadowBias;\r\n\r\n\t\t\t\t\tj ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Uniforms (load to GPU)\r\n\r\n\tfunction loadUniformsMatrices ( uniforms, object ) {\r\n\r\n\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object._modelViewMatrix.elements );\r\n\r\n\t\tif ( uniforms.normalMatrix ) {\r\n\r\n\t\t\t_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object._normalMatrix.elements );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction getTextureUnit() {\r\n\r\n\t\tvar textureUnit = _usedTextureUnits;\r\n\r\n\t\tif ( textureUnit >= _maxTextures ) {\r\n\r\n\t\t\tconsole.warn( \"WebGLRenderer: trying to use \" + textureUnit + \" texture units while this GPU supports only \" + _maxTextures );\r\n\r\n\t\t}\r\n\r\n\t\t_usedTextureUnits += 1;\r\n\r\n\t\treturn textureUnit;\r\n\r\n\t};\r\n\r\n\tfunction loadUniformsGeneric ( program, uniforms ) {\r\n\r\n\t\tvar uniform, value, type, location, texture, textureUnit, i, il, j, jl, offset;\r\n\r\n\t\tfor ( j = 0, jl = uniforms.length; j < jl; j ++ ) {\r\n\r\n\t\t\tlocation = program.uniforms[ uniforms[ j ][ 1 ] ];\r\n\t\t\tif ( !location ) continue;\r\n\r\n\t\t\tuniform = uniforms[ j ][ 0 ];\r\n\r\n\t\t\ttype = uniform.type;\r\n\t\t\tvalue = uniform.value;\r\n\r\n\t\t\tif ( type === \"i\" ) { // single integer\r\n\r\n\t\t\t\t_gl.uniform1i( location, value );\r\n\r\n\t\t\t} else if ( type === \"f\" ) { // single float\r\n\r\n\t\t\t\t_gl.uniform1f( location, value );\r\n\r\n\t\t\t} else if ( type === \"v2\" ) { // single THREE.Vector2\r\n\r\n\t\t\t\t_gl.uniform2f( location, value.x, value.y );\r\n\r\n\t\t\t} else if ( type === \"v3\" ) { // single THREE.Vector3\r\n\r\n\t\t\t\t_gl.uniform3f( location, value.x, value.y, value.z );\r\n\r\n\t\t\t} else if ( type === \"v4\" ) { // single THREE.Vector4\r\n\r\n\t\t\t\t_gl.uniform4f( location, value.x, value.y, value.z, value.w );\r\n\r\n\t\t\t} else if ( type === \"c\" ) { // single THREE.Color\r\n\r\n\t\t\t\t_gl.uniform3f( location, value.r, value.g, value.b );\r\n\r\n\t\t\t} else if ( type === \"iv1\" ) { // flat array of integers (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform1iv( location, value );\r\n\r\n\t\t\t} else if ( type === \"iv\" ) { // flat array of integers with 3 x N size (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform3iv( location, value );\r\n\r\n\t\t\t} else if ( type === \"fv1\" ) { // flat array of floats (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform1fv( location, value );\r\n\r\n\t\t\t} else if ( type === \"fv\" ) { // flat array of floats with 3 x N size (JS or typed array)\r\n\r\n\t\t\t\t_gl.uniform3fv( location, value );\r\n\r\n\t\t\t} else if ( type === \"v2v\" ) { // array of THREE.Vector2\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 2 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\toffset = i * 2;\r\n\r\n\t\t\t\t\tuniform._array[ offset ] \t = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform2fv( location, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"v3v\" ) { // array of THREE.Vector3\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 3 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\toffset = i * 3;\r\n\r\n\t\t\t\t\tuniform._array[ offset ] \t = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\r\n\t\t\t\t\tuniform._array[ offset + 2 ] = value[ i ].z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform3fv( location, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"v4v\" ) { // array of THREE.Vector4\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 4 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\toffset = i * 4;\r\n\r\n\t\t\t\t\tuniform._array[ offset ] \t = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\r\n\t\t\t\t\tuniform._array[ offset + 2 ] = value[ i ].z;\r\n\t\t\t\t\tuniform._array[ offset + 3 ] = value[ i ].w;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform4fv( location, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"m4\") { // single THREE.Matrix4\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 16 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvalue.flattenToArray( uniform._array );\r\n\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"m4v\" ) { // array of THREE.Matrix4\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = new Float32Array( 16 * value.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 16 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\r\n\r\n\t\t\t} else if ( type === \"t\" ) { // single THREE.Texture (2d or cube)\r\n\r\n\t\t\t\ttexture = value;\r\n\t\t\t\ttextureUnit = getTextureUnit();\r\n\r\n\t\t\t\t_gl.uniform1i( location, textureUnit );\r\n\r\n\t\t\t\tif ( !texture ) continue;\r\n\r\n\t\t\t\tif ( texture.image instanceof Array && texture.image.length === 6 ) {\r\n\r\n\t\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\r\n\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\tsetCubeTextureDynamic( texture, textureUnit );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( type === \"tv\" ) { // array of THREE.Texture (2d)\r\n\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\t\tuniform._array = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor( i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tuniform._array[ i ] = getTextureUnit();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.uniform1iv( location, uniform._array );\r\n\r\n\t\t\t\tfor( i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\ttexture = uniform.value[ i ];\r\n\t\t\t\t\ttextureUnit = uniform._array[ i ];\r\n\r\n\t\t\t\t\tif ( !texture ) continue;\r\n\r\n\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setupMatrices ( object, camera ) {\r\n\r\n\t\tobject._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\tobject._normalMatrix.getInverse( object._modelViewMatrix );\r\n\t\tobject._normalMatrix.transpose();\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction setColorGamma( array, offset, color, intensitySq ) {\r\n\r\n\t\tarray[ offset ]     = color.r * color.r * intensitySq;\r\n\t\tarray[ offset + 1 ] = color.g * color.g * intensitySq;\r\n\t\tarray[ offset + 2 ] = color.b * color.b * intensitySq;\r\n\r\n\t};\r\n\r\n\tfunction setColorLinear( array, offset, color, intensity ) {\r\n\r\n\t\tarray[ offset ]     = color.r * intensity;\r\n\t\tarray[ offset + 1 ] = color.g * intensity;\r\n\t\tarray[ offset + 2 ] = color.b * intensity;\r\n\r\n\t};\r\n\r\n\tfunction setupLights ( program, lights ) {\r\n\r\n\t\tvar l, ll, light, n,\r\n\t\tr = 0, g = 0, b = 0,\r\n\t\tcolor, skyColor, groundColor,\r\n\t\tintensity,  intensitySq,\r\n\t\tposition,\r\n\t\tdistance,\r\n\r\n\t\tzlights = _lights,\r\n\r\n\t\tdirColors = zlights.directional.colors,\r\n\t\tdirPositions = zlights.directional.positions,\r\n\r\n\t\tpointColors = zlights.point.colors,\r\n\t\tpointPositions = zlights.point.positions,\r\n\t\tpointDistances = zlights.point.distances,\r\n\r\n\t\tspotColors = zlights.spot.colors,\r\n\t\tspotPositions = zlights.spot.positions,\r\n\t\tspotDistances = zlights.spot.distances,\r\n\t\tspotDirections = zlights.spot.directions,\r\n\t\tspotAnglesCos = zlights.spot.anglesCos,\r\n\t\tspotExponents = zlights.spot.exponents,\r\n\r\n\t\themiSkyColors = zlights.hemi.skyColors,\r\n\t\themiGroundColors = zlights.hemi.groundColors,\r\n\t\themiPositions = zlights.hemi.positions,\r\n\r\n\t\tdirLength = 0,\r\n\t\tpointLength = 0,\r\n\t\tspotLength = 0,\r\n\t\themiLength = 0,\r\n\r\n\t\tdirCount = 0,\r\n\t\tpointCount = 0,\r\n\t\tspotCount = 0,\r\n\t\themiCount = 0,\r\n\r\n\t\tdirOffset = 0,\r\n\t\tpointOffset = 0,\r\n\t\tspotOffset = 0,\r\n\t\themiOffset = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tif ( light.onlyShadow ) continue;\r\n\r\n\t\t\tcolor = light.color;\r\n\t\t\tintensity = light.intensity;\r\n\t\t\tdistance = light.distance;\r\n\r\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tr += color.r * color.r;\r\n\t\t\t\t\tg += color.g * color.g;\r\n\t\t\t\t\tb += color.b * color.b;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tr += color.r;\r\n\t\t\t\t\tg += color.g;\r\n\t\t\t\t\tb += color.b;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\tdirCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\t_direction.copy( light.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.sub( light.target.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.normalize();\r\n\r\n\t\t\t\t// skip lights with undefined direction\r\n\t\t\t\t// these create troubles in OpenGL (making pixel black)\r\n\r\n\t\t\t\tif ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;\r\n\r\n\t\t\t\tdirOffset = dirLength * 3;\r\n\r\n\t\t\t\tdirPositions[ dirOffset ]     = _direction.x;\r\n\t\t\t\tdirPositions[ dirOffset + 1 ] = _direction.y;\r\n\t\t\t\tdirPositions[ dirOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tsetColorGamma( dirColors, dirOffset, color, intensity * intensity );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( dirColors, dirOffset, color, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdirLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tpointCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tpointOffset = pointLength * 3;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tsetColorGamma( pointColors, pointOffset, color, intensity * intensity );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( pointColors, pointOffset, color, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tposition = light.matrixWorld.getPosition();\r\n\r\n\t\t\t\tpointPositions[ pointOffset ]     = position.x;\r\n\t\t\t\tpointPositions[ pointOffset + 1 ] = position.y;\r\n\t\t\t\tpointPositions[ pointOffset + 2 ] = position.z;\r\n\r\n\t\t\t\tpointDistances[ pointLength ] = distance;\r\n\r\n\t\t\t\tpointLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\tspotCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\tspotOffset = spotLength * 3;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tsetColorGamma( spotColors, spotOffset, color, intensity * intensity );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( spotColors, spotOffset, color, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tposition = light.matrixWorld.getPosition();\r\n\r\n\t\t\t\tspotPositions[ spotOffset ]     = position.x;\r\n\t\t\t\tspotPositions[ spotOffset + 1 ] = position.y;\r\n\t\t\t\tspotPositions[ spotOffset + 2 ] = position.z;\r\n\r\n\t\t\t\tspotDistances[ spotLength ] = distance;\r\n\r\n\t\t\t\t_direction.copy( position );\r\n\t\t\t\t_direction.sub( light.target.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.normalize();\r\n\r\n\t\t\t\tspotDirections[ spotOffset ]     = _direction.x;\r\n\t\t\t\tspotDirections[ spotOffset + 1 ] = _direction.y;\r\n\t\t\t\tspotDirections[ spotOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tspotAnglesCos[ spotLength ] = Math.cos( light.angle );\r\n\t\t\t\tspotExponents[ spotLength ] = light.exponent;\r\n\r\n\t\t\t\tspotLength += 1;\r\n\r\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\r\n\r\n\t\t\t\themiCount += 1;\r\n\r\n\t\t\t\tif ( ! light.visible ) continue;\r\n\r\n\t\t\t\t_direction.copy( light.matrixWorld.getPosition() );\r\n\t\t\t\t_direction.normalize();\r\n\r\n\t\t\t\t// skip lights with undefined direction\r\n\t\t\t\t// these create troubles in OpenGL (making pixel black)\r\n\r\n\t\t\t\tif ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;\r\n\r\n\t\t\t\themiOffset = hemiLength * 3;\r\n\r\n\t\t\t\themiPositions[ hemiOffset ]     = _direction.x;\r\n\t\t\t\themiPositions[ hemiOffset + 1 ] = _direction.y;\r\n\t\t\t\themiPositions[ hemiOffset + 2 ] = _direction.z;\r\n\r\n\t\t\t\tskyColor = light.color;\r\n\t\t\t\tgroundColor = light.groundColor;\r\n\r\n\t\t\t\tif ( _this.gammaInput ) {\r\n\r\n\t\t\t\t\tintensitySq = intensity * intensity;\r\n\r\n\t\t\t\t\tsetColorGamma( hemiSkyColors, hemiOffset, skyColor, intensitySq );\r\n\t\t\t\t\tsetColorGamma( hemiGroundColors, hemiOffset, groundColor, intensitySq );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );\r\n\t\t\t\t\tsetColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\themiLength += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// null eventual remains from removed lights\r\n\t\t// (this is to avoid if in shader)\r\n\r\n\t\tfor ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;\r\n\t\tfor ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;\r\n\t\tfor ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;\r\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;\r\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;\r\n\r\n\t\tzlights.directional.length = dirLength;\r\n\t\tzlights.point.length = pointLength;\r\n\t\tzlights.spot.length = spotLength;\r\n\t\tzlights.hemi.length = hemiLength;\r\n\r\n\t\tzlights.ambient[ 0 ] = r;\r\n\t\tzlights.ambient[ 1 ] = g;\r\n\t\tzlights.ambient[ 2 ] = b;\r\n\r\n\t};\r\n\r\n\t// GL state setting\r\n\r\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\r\n\r\n\t\tif ( cullFace === THREE.CullFaceNone ) {\r\n\r\n\t\t\t_gl.disable( _gl.CULL_FACE );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( cullFace === THREE.CullFaceBack ) {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.FRONT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.FRONT_AND_BACK );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setMaterialFaces = function ( material ) {\r\n\r\n\t\tvar doubleSided = material.side === THREE.DoubleSide;\r\n\t\tvar flipSided = material.side === THREE.BackSide;\r\n\r\n\t\tif ( _oldDoubleSided !== doubleSided ) {\r\n\r\n\t\t\tif ( doubleSided ) {\r\n\r\n\t\t\t\t_gl.disable( _gl.CULL_FACE );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldDoubleSided = doubleSided;\r\n\r\n\t\t}\r\n\r\n\t\tif ( _oldFlipSided !== flipSided ) {\r\n\r\n\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldFlipSided = flipSided;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthTest = function ( depthTest ) {\r\n\r\n\t\tif ( _oldDepthTest !== depthTest ) {\r\n\r\n\t\t\tif ( depthTest ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.disable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldDepthTest = depthTest;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthWrite = function ( depthWrite ) {\r\n\r\n\t\tif ( _oldDepthWrite !== depthWrite ) {\r\n\r\n\t\t\t_gl.depthMask( depthWrite );\r\n\t\t\t_oldDepthWrite = depthWrite;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setLineWidth ( width ) {\r\n\r\n\t\tif ( width !== _oldLineWidth ) {\r\n\r\n\t\t\t_gl.lineWidth( width );\r\n\r\n\t\t\t_oldLineWidth = width;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setPolygonOffset ( polygonoffset, factor, units ) {\r\n\r\n\t\tif ( _oldPolygonOffset !== polygonoffset ) {\r\n\r\n\t\t\tif ( polygonoffset ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.disable( _gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldPolygonOffset = polygonoffset;\r\n\r\n\t\t}\r\n\r\n\t\tif ( polygonoffset && ( _oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units ) ) {\r\n\r\n\t\t\t_gl.polygonOffset( factor, units );\r\n\r\n\t\t\t_oldPolygonOffsetFactor = factor;\r\n\t\t\t_oldPolygonOffsetUnits = units;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst ) {\r\n\r\n\t\tif ( blending !== _oldBlending ) {\r\n\r\n\t\t\tif ( blending === THREE.NoBlending ) {\r\n\r\n\t\t\t\t_gl.disable( _gl.BLEND );\r\n\r\n\t\t\t} else if ( blending === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE );\r\n\r\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFunc( _gl.ZERO, _gl.ONE_MINUS_SRC_COLOR );\r\n\r\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\r\n\r\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFunc( _gl.ZERO, _gl.SRC_COLOR );\r\n\r\n\t\t\t} else if ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\t\t\t\t_gl.blendEquationSeparate( _gl.FUNC_ADD, _gl.FUNC_ADD );\r\n\t\t\t\t_gl.blendFuncSeparate( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_oldBlending = blending;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\tif ( blendEquation !== _oldBlendEquation ) {\r\n\r\n\t\t\t\t_gl.blendEquation( paramThreeToGL( blendEquation ) );\r\n\r\n\t\t\t\t_oldBlendEquation = blendEquation;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst ) {\r\n\r\n\t\t\t\t_gl.blendFunc( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ) );\r\n\r\n\t\t\t\t_oldBlendSrc = blendSrc;\r\n\t\t\t\t_oldBlendDst = blendDst;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_oldBlendEquation = null;\r\n\t\t\t_oldBlendSrc = null;\r\n\t\t\t_oldBlendDst = null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Defines\r\n\r\n\tfunction generateDefines ( defines ) {\r\n\r\n\t\tvar value, chunk, chunks = [];\r\n\r\n\t\tfor ( var d in defines ) {\r\n\r\n\t\t\tvalue = defines[ d ];\r\n\t\t\tif ( value === false ) continue;\r\n\r\n\t\t\tchunk = \"#define \" + d + \" \" + value;\r\n\t\t\tchunks.push( chunk );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( \"\\n\" );\r\n\r\n\t};\r\n\r\n\t// Shaders\r\n\r\n\tfunction buildProgram ( shaderID, fragmentShader, vertexShader, uniforms, attributes, defines, parameters ) {\r\n\r\n\t\tvar p, pl, d, program, code;\r\n\t\tvar chunks = [];\r\n\r\n\t\t// Generate code\r\n\r\n\t\tif ( shaderID ) {\r\n\r\n\t\t\tchunks.push( shaderID );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tchunks.push( fragmentShader );\r\n\t\t\tchunks.push( vertexShader );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( d in defines ) {\r\n\r\n\t\t\tchunks.push( d );\r\n\t\t\tchunks.push( defines[ d ] );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( p in parameters ) {\r\n\r\n\t\t\tchunks.push( p );\r\n\t\t\tchunks.push( parameters[ p ] );\r\n\r\n\t\t}\r\n\r\n\t\tcode = chunks.join();\r\n\r\n\t\t// Check if code has been already compiled\r\n\r\n\t\tfor ( p = 0, pl = _programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\tvar programInfo = _programs[ p ];\r\n\r\n\t\t\tif ( programInfo.code === code ) {\r\n\r\n\t\t\t\t//console.log( \"Code already compiled.\" /*: \\n\\n\" + code*/ );\r\n\r\n\t\t\t\tprogramInfo.usedTimes ++;\r\n\r\n\t\t\t\treturn programInfo.program;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar shadowMapTypeDefine = \"SHADOWMAP_TYPE_BASIC\";\r\n\r\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF\";\r\n\r\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF_SOFT\";\r\n\r\n\t\t}\r\n\r\n\t\t//console.log( \"building new program \" );\r\n\r\n\t\t//\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\t//\r\n\r\n\t\tprogram = _gl.createProgram();\r\n\r\n\t\tvar prefix_vertex = [\r\n\r\n\t\t\t\"precision \" + _precision + \" float;\",\r\n\r\n\t\t\tcustomDefines,\r\n\r\n\t\t\t_supportsVertexTextures ? \"#define VERTEX_TEXTURES\" : \"\",\r\n\r\n\t\t\t_this.gammaInput ? \"#define GAMMA_INPUT\" : \"\",\r\n\t\t\t_this.gammaOutput ? \"#define GAMMA_OUTPUT\" : \"\",\r\n\t\t\t_this.physicallyBasedShading ? \"#define PHYSICALLY_BASED_SHADING\" : \"\",\r\n\r\n\t\t\t\"#define MAX_DIR_LIGHTS \" + parameters.maxDirLights,\r\n\t\t\t\"#define MAX_POINT_LIGHTS \" + parameters.maxPointLights,\r\n\t\t\t\"#define MAX_SPOT_LIGHTS \" + parameters.maxSpotLights,\r\n\t\t\t\"#define MAX_HEMI_LIGHTS \" + parameters.maxHemiLights,\r\n\r\n\t\t\t\"#define MAX_SHADOWS \" + parameters.maxShadows,\r\n\r\n\t\t\t\"#define MAX_BONES \" + parameters.maxBones,\r\n\r\n\t\t\tparameters.map ? \"#define USE_MAP\" : \"\",\r\n\t\t\tparameters.envMap ? \"#define USE_ENVMAP\" : \"\",\r\n\t\t\tparameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\r\n\t\t\tparameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\r\n\t\t\tparameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\r\n\t\t\tparameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\r\n\t\t\tparameters.vertexColors ? \"#define USE_COLOR\" : \"\",\r\n\r\n\t\t\tparameters.skinning ? \"#define USE_SKINNING\" : \"\",\r\n\t\t\tparameters.useVertexTexture ? \"#define BONE_TEXTURE\" : \"\",\r\n\t\t\tparameters.boneTextureWidth ? \"#define N_BONE_PIXEL_X \" + parameters.boneTextureWidth.toFixed( 1 ) : \"\",\r\n\t\t\tparameters.boneTextureHeight ? \"#define N_BONE_PIXEL_Y \" + parameters.boneTextureHeight.toFixed( 1 ) : \"\",\r\n\r\n\t\t\tparameters.morphTargets ? \"#define USE_MORPHTARGETS\" : \"\",\r\n\t\t\tparameters.morphNormals ? \"#define USE_MORPHNORMALS\" : \"\",\r\n\t\t\tparameters.perPixel ? \"#define PHONG_PER_PIXEL\" : \"\",\r\n\t\t\tparameters.wrapAround ? \"#define WRAP_AROUND\" : \"\",\r\n\t\t\tparameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\r\n\t\t\tparameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\r\n\r\n\t\t\tparameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\r\n\t\t\tparameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\r\n\t\t\tparameters.shadowMapDebug ? \"#define SHADOWMAP_DEBUG\" : \"\",\r\n\t\t\tparameters.shadowMapCascade ? \"#define SHADOWMAP_CASCADE\" : \"\",\r\n\r\n\t\t\tparameters.sizeAttenuation ? \"#define USE_SIZEATTENUATION\" : \"\",\r\n\r\n\t\t\t\"uniform mat4 modelMatrix;\",\r\n\t\t\t\"uniform mat4 modelViewMatrix;\",\r\n\t\t\t\"uniform mat4 projectionMatrix;\",\r\n\t\t\t\"uniform mat4 viewMatrix;\",\r\n\t\t\t\"uniform mat3 normalMatrix;\",\r\n\t\t\t\"uniform vec3 cameraPosition;\",\r\n\r\n\t\t\t\"attribute vec3 position;\",\r\n\t\t\t\"attribute vec3 normal;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\t\t\t\"attribute vec2 uv2;\",\r\n\r\n\t\t\t\"#ifdef USE_COLOR\",\r\n\r\n\t\t\t\t\"attribute vec3 color;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef USE_MORPHTARGETS\",\r\n\r\n\t\t\t\t\"attribute vec3 morphTarget0;\",\r\n\t\t\t\t\"attribute vec3 morphTarget1;\",\r\n\t\t\t\t\"attribute vec3 morphTarget2;\",\r\n\t\t\t\t\"attribute vec3 morphTarget3;\",\r\n\r\n\t\t\t\t\"#ifdef USE_MORPHNORMALS\",\r\n\r\n\t\t\t\t\t\"attribute vec3 morphNormal0;\",\r\n\t\t\t\t\t\"attribute vec3 morphNormal1;\",\r\n\t\t\t\t\t\"attribute vec3 morphNormal2;\",\r\n\t\t\t\t\t\"attribute vec3 morphNormal3;\",\r\n\r\n\t\t\t\t\"#else\",\r\n\r\n\t\t\t\t\t\"attribute vec3 morphTarget4;\",\r\n\t\t\t\t\t\"attribute vec3 morphTarget5;\",\r\n\t\t\t\t\t\"attribute vec3 morphTarget6;\",\r\n\t\t\t\t\t\"attribute vec3 morphTarget7;\",\r\n\r\n\t\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"#ifdef USE_SKINNING\",\r\n\r\n\t\t\t\t\"attribute vec4 skinIndex;\",\r\n\t\t\t\t\"attribute vec4 skinWeight;\",\r\n\r\n\t\t\t\"#endif\",\r\n\r\n\t\t\t\"\"\r\n\r\n\t\t].join(\"\\n\");\r\n\r\n\t\tvar prefix_fragment = [\r\n\r\n\t\t\t\"precision \" + _precision + \" float;\",\r\n\r\n\t\t\t( parameters.bumpMap || parameters.normalMap ) ? \"#extension GL_OES_standard_derivatives : enable\" : \"\",\r\n\r\n\t\t\tcustomDefines,\r\n\r\n\t\t\t\"#define MAX_DIR_LIGHTS \" + parameters.maxDirLights,\r\n\t\t\t\"#define MAX_POINT_LIGHTS \" + parameters.maxPointLights,\r\n\t\t\t\"#define MAX_SPOT_LIGHTS \" + parameters.maxSpotLights,\r\n\t\t\t\"#define MAX_HEMI_LIGHTS \" + parameters.maxHemiLights,\r\n\r\n\t\t\t\"#define MAX_SHADOWS \" + parameters.maxShadows,\r\n\r\n\t\t\tparameters.alphaTest ? \"#define ALPHATEST \" + parameters.alphaTest: \"\",\r\n\r\n\t\t\t_this.gammaInput ? \"#define GAMMA_INPUT\" : \"\",\r\n\t\t\t_this.gammaOutput ? \"#define GAMMA_OUTPUT\" : \"\",\r\n\t\t\t_this.physicallyBasedShading ? \"#define PHYSICALLY_BASED_SHADING\" : \"\",\r\n\r\n\t\t\t( parameters.useFog && parameters.fog ) ? \"#define USE_FOG\" : \"\",\r\n\t\t\t( parameters.useFog && parameters.fogExp ) ? \"#define FOG_EXP2\" : \"\",\r\n\r\n\t\t\tparameters.map ? \"#define USE_MAP\" : \"\",\r\n\t\t\tparameters.envMap ? \"#define USE_ENVMAP\" : \"\",\r\n\t\t\tparameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\r\n\t\t\tparameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\r\n\t\t\tparameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\r\n\t\t\tparameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\r\n\t\t\tparameters.vertexColors ? \"#define USE_COLOR\" : \"\",\r\n\r\n\t\t\tparameters.metal ? \"#define METAL\" : \"\",\r\n\t\t\tparameters.perPixel ? \"#define PHONG_PER_PIXEL\" : \"\",\r\n\t\t\tparameters.wrapAround ? \"#define WRAP_AROUND\" : \"\",\r\n\t\t\tparameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\r\n\t\t\tparameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\r\n\r\n\t\t\tparameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\r\n\t\t\tparameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\r\n\t\t\tparameters.shadowMapDebug ? \"#define SHADOWMAP_DEBUG\" : \"\",\r\n\t\t\tparameters.shadowMapCascade ? \"#define SHADOWMAP_CASCADE\" : \"\",\r\n\r\n\t\t\t\"uniform mat4 viewMatrix;\",\r\n\t\t\t\"uniform vec3 cameraPosition;\",\r\n\t\t\t\"\"\r\n\r\n\t\t].join(\"\\n\");\r\n\r\n\t\tvar glFragmentShader = getShader( \"fragment\", prefix_fragment + fragmentShader );\r\n\t\tvar glVertexShader = getShader( \"vertex\", prefix_vertex + vertexShader );\r\n\r\n\t\t_gl.attachShader( program, glVertexShader );\r\n\t\t_gl.attachShader( program, glFragmentShader );\r\n\r\n\t\t_gl.linkProgram( program );\r\n\r\n\t\tif ( !_gl.getProgramParameter( program, _gl.LINK_STATUS ) ) {\r\n\r\n\t\t\tconsole.error( \"Could not initialise shader\\n\" + \"VALIDATE_STATUS: \" + _gl.getProgramParameter( program, _gl.VALIDATE_STATUS ) + \", gl error [\" + _gl.getError() + \"]\" );\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\t_gl.deleteShader( glFragmentShader );\r\n\t\t_gl.deleteShader( glVertexShader );\r\n\r\n\t\t//console.log( prefix_fragment + fragmentShader );\r\n\t\t//console.log( prefix_vertex + vertexShader );\r\n\r\n\t\tprogram.uniforms = {};\r\n\t\tprogram.attributes = {};\r\n\r\n\t\tvar identifiers, u, a, i;\r\n\r\n\t\t// cache uniform locations\r\n\r\n\t\tidentifiers = [\r\n\r\n\t\t\t'viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition',\r\n\t\t\t'morphTargetInfluences'\r\n\r\n\t\t];\r\n\r\n\t\tif ( parameters.useVertexTexture ) {\r\n\r\n\t\t\tidentifiers.push( 'boneTexture' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tidentifiers.push( 'boneGlobalMatrices' );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( u in uniforms ) {\r\n\r\n\t\t\tidentifiers.push( u );\r\n\r\n\t\t}\r\n\r\n\t\tcacheUniformLocations( program, identifiers );\r\n\r\n\t\t// cache attributes locations\r\n\r\n\t\tidentifiers = [\r\n\r\n\t\t\t\"position\", \"normal\", \"uv\", \"uv2\", \"tangent\", \"color\",\r\n\t\t\t\"skinIndex\", \"skinWeight\", \"lineDistance\"\r\n\r\n\t\t];\r\n\r\n\t\tfor ( i = 0; i < parameters.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\tidentifiers.push( \"morphTarget\" + i );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0; i < parameters.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\tidentifiers.push( \"morphNormal\" + i );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( a in attributes ) {\r\n\r\n\t\t\tidentifiers.push( a );\r\n\r\n\t\t}\r\n\r\n\t\tcacheAttributeLocations( program, identifiers );\r\n\r\n\t\tprogram.id = _programs_counter ++;\r\n\r\n\t\t_programs.push( { program: program, code: code, usedTimes: 1 } );\r\n\r\n\t\t_this.info.memory.programs = _programs.length;\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\t// Shader parameters cache\r\n\r\n\tfunction cacheUniformLocations ( program, identifiers ) {\r\n\r\n\t\tvar i, l, id;\r\n\r\n\t\tfor( i = 0, l = identifiers.length; i < l; i ++ ) {\r\n\r\n\t\t\tid = identifiers[ i ];\r\n\t\t\tprogram.uniforms[ id ] = _gl.getUniformLocation( program, id );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction cacheAttributeLocations ( program, identifiers ) {\r\n\r\n\t\tvar i, l, id;\r\n\r\n\t\tfor( i = 0, l = identifiers.length; i < l; i ++ ) {\r\n\r\n\t\t\tid = identifiers[ i ];\r\n\t\t\tprogram.attributes[ id ] = _gl.getAttribLocation( program, id );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction addLineNumbers ( string ) {\r\n\r\n\t\tvar chunks = string.split( \"\\n\" );\r\n\r\n\t\tfor ( var i = 0, il = chunks.length; i < il; i ++ ) {\r\n\r\n\t\t\t// Chrome reports shader errors on lines\r\n\t\t\t// starting counting from 1\r\n\r\n\t\t\tchunks[ i ] = ( i + 1 ) + \": \" + chunks[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( \"\\n\" );\r\n\r\n\t};\r\n\r\n\tfunction getShader ( type, string ) {\r\n\r\n\t\tvar shader;\r\n\r\n\t\tif ( type === \"fragment\" ) {\r\n\r\n\t\t\tshader = _gl.createShader( _gl.FRAGMENT_SHADER );\r\n\r\n\t\t} else if ( type === \"vertex\" ) {\r\n\r\n\t\t\tshader = _gl.createShader( _gl.VERTEX_SHADER );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.shaderSource( shader, string );\r\n\t\t_gl.compileShader( shader );\r\n\r\n\t\tif ( !_gl.getShaderParameter( shader, _gl.COMPILE_STATUS ) ) {\r\n\r\n\t\t\tconsole.error( _gl.getShaderInfoLog( shader ) );\r\n\t\t\tconsole.error( addLineNumbers( string ) );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn shader;\r\n\r\n\t};\r\n\r\n\t// Textures\r\n\r\n\r\n\tfunction isPowerOfTwo ( value ) {\r\n\r\n\t\treturn ( value & ( value - 1 ) ) === 0;\r\n\r\n\t};\r\n\r\n\tfunction setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {\r\n\r\n\t\tif ( isImagePowerOfTwo ) {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( _glExtensionTextureFilterAnisotropic && texture.type !== THREE.FloatType ) {\r\n\r\n\t\t\tif ( texture.anisotropy > 1 || texture.__oldAnisotropy ) {\r\n\r\n\t\t\t\t_gl.texParameterf( textureType, _glExtensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _maxAnisotropy ) );\r\n\t\t\t\ttexture.__oldAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setTexture = function ( texture, slot ) {\r\n\r\n\t\tif ( texture.needsUpdate ) {\r\n\r\n\t\t\tif ( ! texture.__webglInit ) {\r\n\r\n\t\t\t\ttexture.__webglInit = true;\r\n\r\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\ttexture.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t\t_this.info.memory.textures ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\r\n\t\t\tvar image = texture.image,\r\n\t\t\tisImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),\r\n\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );\r\n\r\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\t\tif ( texture instanceof THREE.DataTexture ) {\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\r\n\r\n\t\t\t\t// compressed textures can only use manually created mipmaps\r\n\t\t\t\t// WebGL can't generate mipmaps for DDS textures\r\n\r\n\t\t\t\tfor( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t_gl.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else { // regular Texture (image, video, canvas)\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\t\ttexture.needsUpdate = false;\r\n\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate();\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction clampToMaxSize ( image, maxSize ) {\r\n\r\n\t\tif ( image.width <= maxSize && image.height <= maxSize ) {\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t\t// Warning: Scaling through the canvas will only work with images that use\r\n\t\t// premultiplied alpha.\r\n\r\n\t\tvar maxDimension = Math.max( image.width, image.height );\r\n\t\tvar newWidth = Math.floor( image.width * maxSize / maxDimension );\r\n\t\tvar newHeight = Math.floor( image.height * maxSize / maxDimension );\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = newWidth;\r\n\t\tcanvas.height = newHeight;\r\n\r\n\t\tvar ctx = canvas.getContext( \"2d\" );\r\n\t\tctx.drawImage( image, 0, 0, image.width, image.height, 0, 0, newWidth, newHeight );\r\n\r\n\t\treturn canvas;\r\n\r\n\t}\r\n\r\n\tfunction setCubeTexture ( texture, slot ) {\r\n\r\n\t\tif ( texture.image.length === 6 ) {\r\n\r\n\t\t\tif ( texture.needsUpdate ) {\r\n\r\n\t\t\t\tif ( ! texture.image.__webglTextureCube ) {\r\n\r\n\t\t\t\t\ttexture.image.__webglTextureCube = _gl.createTexture();\r\n\r\n\t\t\t\t\t_this.info.memory.textures ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );\r\n\r\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\r\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\r\n\r\n\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed ) {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], _maxCubemapSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = texture.image[ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\tisImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),\r\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\tfor( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\r\n\t\t\t\t\t\t\t_gl.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) {\r\n\r\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.needsUpdate = false;\r\n\r\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setCubeTextureDynamic ( texture, slot ) {\r\n\r\n\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.__webglTexture );\r\n\r\n\t};\r\n\r\n\t// Render targets\r\n\r\n\tfunction setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {\r\n\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0 );\r\n\r\n\t};\r\n\r\n\tfunction setupRenderBuffer ( renderbuffer, renderTarget  ) {\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t/* For some reason this is not working. Defaulting to RGBA4.\r\n\t\t} else if( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\t\t*/\r\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setRenderTarget = function ( renderTarget ) {\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\r\n\t\tif ( renderTarget && ! renderTarget.__webglFramebuffer ) {\r\n\r\n\t\t\tif ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;\r\n\t\t\tif ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;\r\n\r\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\trenderTarget.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t_this.info.memory.textures ++;\r\n\r\n\t\t\t// Setup texture, create render and frame buffers\r\n\r\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget.width ) && isPowerOfTwo( renderTarget.height ),\r\n\t\t\t\tglFormat = paramThreeToGL( renderTarget.format ),\r\n\t\t\t\tglType = paramThreeToGL( renderTarget.type );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTarget.__webglFramebuffer = [];\r\n\t\t\t\trenderTarget.__webglRenderbuffer = [];\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\trenderTarget.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\t\t\t\t\trenderTarget.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\t\tsetupFrameBuffer( renderTarget.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\t\t\t\t\tsetupRenderBuffer( renderTarget.__webglRenderbuffer[ i ], renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTarget.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\r\n\r\n\t\t\t\t\trenderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderTarget.__webglRenderbuffer = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo );\r\n\r\n\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t\tsetupFrameBuffer( renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );\r\n\r\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\r\n\r\n\t\t\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );\r\n\r\n\t\t\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsetupRenderBuffer( renderTarget.__webglRenderbuffer, renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Release everything\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t\t}\r\n\r\n\t\tvar framebuffer, width, height, vx, vy;\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tframebuffer = renderTarget.__webglFramebuffer[ renderTarget.activeCubeFace ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tframebuffer = renderTarget.__webglFramebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twidth = renderTarget.width;\r\n\t\t\theight = renderTarget.height;\r\n\r\n\t\t\tvx = 0;\r\n\t\t\tvy = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tframebuffer = null;\r\n\r\n\t\t\twidth = _viewportWidth;\r\n\t\t\theight = _viewportHeight;\r\n\r\n\t\t\tvx = _viewportX;\r\n\t\t\tvy = _viewportY;\r\n\r\n\t\t}\r\n\r\n\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t_gl.viewport( vx, vy, width, height );\r\n\r\n\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t}\r\n\r\n\t\t_currentWidth = width;\r\n\t\t_currentHeight = height;\r\n\r\n\t};\r\n\r\n\tfunction updateRenderTargetMipmap ( renderTarget ) {\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );\r\n\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );\r\n\t\t\t_gl.generateMipmap( _gl.TEXTURE_2D );\r\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Fallback filters for non-power-of-2 textures\r\n\r\n\tfunction filterFallback ( f ) {\r\n\r\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\r\n\r\n\t\t\treturn _gl.NEAREST;\r\n\r\n\t\t}\r\n\r\n\t\treturn _gl.LINEAR;\r\n\r\n\t};\r\n\r\n\t// Map three.js constants to WebGL constants\r\n\r\n\tfunction paramThreeToGL ( p ) {\r\n\r\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\r\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\r\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\r\n\r\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\r\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\r\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\r\n\r\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\r\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\r\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\r\n\t\tif ( p === THREE.IntType ) return _gl.INT;\r\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\r\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\r\n\r\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\r\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\r\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\r\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\r\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\r\n\r\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\r\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\r\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\r\n\r\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\r\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\r\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\r\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\r\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\r\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\r\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\r\n\r\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\r\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\r\n\r\n\t\tif ( _glExtensionCompressedTextureS3TC !== undefined ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\r\n\t};\r\n\r\n\t// Allocations\r\n\r\n\tfunction allocateBones ( object ) {\r\n\r\n\t\tif ( _supportsBoneTextures && object && object.useVertexTexture ) {\r\n\r\n\t\t\treturn 1024;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// default for when object is not specified\r\n\t\t\t// ( for example when prebuilding shader\r\n\t\t\t//   to be used with multiple objects )\r\n\t\t\t//\r\n\t\t\t// \t- leave some extra space for other uniforms\r\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\tvar nVertexUniforms = _gl.getParameter( _gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\tvar maxBones = nVertexMatrices;\r\n\r\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\tmaxBones = Math.min( object.bones.length, maxBones );\r\n\r\n\t\t\t\tif ( maxBones < object.bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"WebGLRenderer: too many bones - \" + object.bones.length + \", this GPU supports just \" + maxBones + \" (try OpenGL instead of ANGLE)\" );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxBones;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction allocateLights ( lights ) {\r\n\r\n\t\tvar l, ll, light, dirLights, pointLights, spotLights, hemiLights;\r\n\r\n\t\tdirLights = pointLights = spotLights = hemiLights = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tif ( light.onlyShadow ) continue;\r\n\r\n\t\t\tif ( light instanceof THREE.DirectionalLight ) dirLights ++;\r\n\t\t\tif ( light instanceof THREE.PointLight ) pointLights ++;\r\n\t\t\tif ( light instanceof THREE.SpotLight ) spotLights ++;\r\n\t\t\tif ( light instanceof THREE.HemisphereLight ) hemiLights ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn { 'directional' : dirLights, 'point' : pointLights, 'spot': spotLights, 'hemi': hemiLights };\r\n\r\n\t};\r\n\r\n\tfunction allocateShadows ( lights ) {\r\n\r\n\t\tvar l, ll, light, maxShadows = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tif ( ! light.castShadow ) continue;\r\n\r\n\t\t\tif ( light instanceof THREE.SpotLight ) maxShadows ++;\r\n\t\t\tif ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) maxShadows ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn maxShadows;\r\n\r\n\t};\r\n\r\n\t// Initialization\r\n\r\n\tfunction initGL () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif ( ! ( _gl = _canvas.getContext( 'experimental-webgl', { alpha: _alpha, premultipliedAlpha: _premultipliedAlpha, antialias: _antialias, stencil: _stencil, preserveDrawingBuffer: _preserveDrawingBuffer } ) ) ) {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context.';\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t\t_glExtensionTextureFloat = _gl.getExtension( 'OES_texture_float' );\r\n\t\t_glExtensionStandardDerivatives = _gl.getExtension( 'OES_standard_derivatives' );\r\n\r\n\t\t_glExtensionTextureFilterAnisotropic = _gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t   _gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t   _gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\r\n\r\n\t\t_glExtensionCompressedTextureS3TC = _gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t_gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t\t\t\t\t\t\t\t\t_gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\tif ( ! _glExtensionTextureFloat ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Float textures not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! _glExtensionStandardDerivatives ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Standard derivatives not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! _glExtensionTextureFilterAnisotropic ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Anisotropic texture filtering not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! _glExtensionCompressedTextureS3TC ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: S3TC compressed textures not supported.' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setDefaultGLState () {\r\n\r\n\t\t_gl.clearColor( 0, 0, 0, 1 );\r\n\t\t_gl.clearDepth( 1 );\r\n\t\t_gl.clearStencil( 0 );\r\n\r\n\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\t\t_gl.depthFunc( _gl.LEQUAL );\r\n\r\n\t\t_gl.frontFace( _gl.CCW );\r\n\t\t_gl.cullFace( _gl.BACK );\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t\t_gl.enable( _gl.BLEND );\r\n\t\t_gl.blendEquation( _gl.FUNC_ADD );\r\n\t\t_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\t// default plugins (order is important)\r\n\r\n\tthis.shadowMapPlugin = new THREE.ShadowMapPlugin();\r\n\tthis.addPrePlugin( this.shadowMapPlugin );\r\n\r\n\tthis.addPostPlugin( new THREE.SpritePlugin() );\r\n\tthis.addPostPlugin( new THREE.LensFlarePlugin() );\r\n\r\n};\r\n/**\r\n * @author szimek / https://github.com/szimek/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\r\n\r\n\tTHREE.EventDispatcher.call( this );\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\toptions = options || {};\r\n\r\n\tthis.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;\r\n\tthis.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\tthis.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;\r\n\tthis.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\tthis.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;\r\n\r\n\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.format = options.format !== undefined ? options.format : THREE.RGBAFormat;\r\n\tthis.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;\r\n\r\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\r\n\tthis.generateMipmaps = true;\r\n\r\n\tthis.shareDepthFrom = null;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTarget.prototype.clone = function() {\r\n\r\n\tvar tmp = new THREE.WebGLRenderTarget( this.width, this.height );\r\n\r\n\ttmp.wrapS = this.wrapS;\r\n\ttmp.wrapT = this.wrapT;\r\n\r\n\ttmp.magFilter = this.magFilter;\r\n\ttmp.minFilter = this.minFilter;\r\n\r\n\ttmp.anisotropy = this.anisotropy;\r\n\r\n\ttmp.offset.copy( this.offset );\r\n\ttmp.repeat.copy( this.repeat );\r\n\r\n\ttmp.format = this.format;\r\n\ttmp.type = this.type;\r\n\r\n\ttmp.depthBuffer = this.depthBuffer;\r\n\ttmp.stencilBuffer = this.stencilBuffer;\r\n\r\n\ttmp.generateMipmaps = this.generateMipmaps;\r\n\r\n\ttmp.shareDepthFrom = this.shareDepthFrom;\r\n\r\n\treturn tmp;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTarget.prototype.dispose = function () {\r\n\r\n\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com\r\n */\r\n\r\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\r\n\r\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\r\n\r\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableVertex = function () {\r\n\r\n\tthis.positionWorld = new THREE.Vector3();\r\n\tthis.positionScreen = new THREE.Vector4();\r\n\r\n\tthis.visible = true;\r\n\r\n};\r\n\r\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\r\n\r\n\tthis.positionWorld.copy( vertex.positionWorld );\r\n\tthis.positionScreen.copy( vertex.positionScreen );\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableFace3 = function () {\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\tthis.v3 = new THREE.RenderableVertex();\r\n\r\n\tthis.centroidModel = new THREE.Vector3();\r\n\r\n\tthis.normalModel = new THREE.Vector3();\r\n\tthis.normalModelView = new THREE.Vector3();\r\n\r\n\tthis.vertexNormalsLength = 0;\r\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\tthis.vertexNormalsModelView = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\tthis.color = null;\r\n\tthis.material = null;\r\n\tthis.uvs = [[]];\r\n\r\n\tthis.z = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableFace4 = function () {\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\tthis.v3 = new THREE.RenderableVertex();\r\n\tthis.v4 = new THREE.RenderableVertex();\r\n\r\n\tthis.centroidModel = new THREE.Vector3();\r\n\r\n\tthis.normalModel = new THREE.Vector3();\r\n\tthis.normalModelView = new THREE.Vector3();\r\n\r\n\tthis.vertexNormalsLength = 0;\r\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\tthis.vertexNormalsModelView = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\r\n\tthis.color = null;\r\n\tthis.material = null;\r\n\tthis.uvs = [[]];\r\n\r\n\tthis.z = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableObject = function () {\r\n\r\n\tthis.object = null;\r\n\tthis.z = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableParticle = function () {\r\n\r\n\tthis.object = null;\r\n\r\n\tthis.x = null;\r\n\tthis.y = null;\r\n\tthis.z = null;\r\n\r\n\tthis.rotation = null;\r\n\tthis.scale = new THREE.Vector2();\r\n\r\n\tthis.material = null;\r\n\r\n};\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RenderableLine = function () {\r\n\r\n\tthis.z = null;\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\r\n\tthis.material = null;\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ColorUtils = {\r\n\r\n\tadjustHSV : function ( color, h, s, v ) {\r\n\r\n\t\tvar hsv = THREE.ColorUtils.__hsv;\r\n\r\n\t\tcolor.getHSV( hsv );\r\n\r\n\t\thsv.h = THREE.Math.clamp( hsv.h + h, 0, 1 );\r\n\t\thsv.s = THREE.Math.clamp( hsv.s + s, 0, 1 );\r\n\t\thsv.v = THREE.Math.clamp( hsv.v + v, 0, 1 );\r\n\r\n\t\tcolor.setHSV( hsv.h, hsv.s, hsv.v );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ColorUtils.__hsv = { h: 0, s: 0, v: 0 };/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.GeometryUtils = {\r\n\r\n\t// Merge two geometries or geometry and geometry from object (using object's transform)\r\n\r\n\tmerge: function ( geometry1, object2 /* mesh | geometry */ ) {\r\n\r\n\t\tvar matrix, normalMatrix,\r\n\t\tvertexOffset = geometry1.vertices.length,\r\n\t\tuvPosition = geometry1.faceVertexUvs[ 0 ].length,\r\n\t\tgeometry2 = object2 instanceof THREE.Mesh ? object2.geometry : object2,\r\n\t\tvertices1 = geometry1.vertices,\r\n\t\tvertices2 = geometry2.vertices,\r\n\t\tfaces1 = geometry1.faces,\r\n\t\tfaces2 = geometry2.faces,\r\n\t\tuvs1 = geometry1.faceVertexUvs[ 0 ],\r\n\t\tuvs2 = geometry2.faceVertexUvs[ 0 ];\r\n\r\n\t\tif ( object2 instanceof THREE.Mesh ) {\r\n\r\n\t\t\tobject2.matrixAutoUpdate && object2.updateMatrix();\r\n\r\n\t\t\tmatrix = object2.matrix;\r\n\r\n\t\t\tnormalMatrix = new THREE.Matrix3();\r\n\t\t\tnormalMatrix.getInverse( matrix );\r\n\t\t\tnormalMatrix.transpose();\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\tif ( matrix ) vertexCopy.applyMatrix4( matrix );\r\n\r\n\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// faces\r\n\r\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tfaceCopy = new THREE.Face4( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset, face.d + vertexOffset );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\tif ( normalMatrix ) {\r\n\r\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\tif ( normalMatrix ) {\r\n\r\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.materialIndex = face.materialIndex;\r\n\r\n\t\t\tfaceCopy.centroid.copy( face.centroid );\r\n\r\n\t\t\tif ( matrix ) {\r\n\r\n\t\t\t\tfaceCopy.centroid.applyMatrix4( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// uvs\r\n\r\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvs1.push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tremoveMaterials: function ( geometry, materialIndexArray ) {\r\n\r\n\t\tvar materialIndexMap = {};\r\n\r\n\t\tfor ( var i = 0, il = materialIndexArray.length; i < il; i ++ ) {\r\n\r\n\t\t\tmaterialIndexMap[ materialIndexArray[i] ] = true;\r\n\r\n\t\t}\r\n\r\n\t\tvar face, newFaces = [];\r\n\r\n\t\tfor ( var i = 0, il = geometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = geometry.faces[ i ];\r\n\t\t\tif ( ! ( face.materialIndex in materialIndexMap ) ) newFaces.push( face );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.faces = newFaces;\r\n\r\n\t},\r\n\r\n\t// Get random point in triangle (via barycentric coordinates)\r\n\t// \t(uniform distribution)\r\n\t// \thttp://www.cgafaq.info/wiki/Random_Point_In_Triangle\r\n\r\n\trandomPointInTriangle: function ( vectorA, vectorB, vectorC ) {\r\n\r\n\t\tvar a, b, c,\r\n\t\t\tpoint = new THREE.Vector3(),\r\n\t\t\ttmp = THREE.GeometryUtils.__v1;\r\n\r\n\t\ta = THREE.GeometryUtils.random();\r\n\t\tb = THREE.GeometryUtils.random();\r\n\r\n\t\tif ( ( a + b ) > 1 ) {\r\n\r\n\t\t\ta = 1 - a;\r\n\t\t\tb = 1 - b;\r\n\r\n\t\t}\r\n\r\n\t\tc = 1 - a - b;\r\n\r\n\t\tpoint.copy( vectorA );\r\n\t\tpoint.multiplyScalar( a );\r\n\r\n\t\ttmp.copy( vectorB );\r\n\t\ttmp.multiplyScalar( b );\r\n\r\n\t\tpoint.add( tmp );\r\n\r\n\t\ttmp.copy( vectorC );\r\n\t\ttmp.multiplyScalar( c );\r\n\r\n\t\tpoint.add( tmp );\r\n\r\n\t\treturn point;\r\n\r\n\t},\r\n\r\n\t// Get random point in face (triangle / quad)\r\n\t// (uniform distribution)\r\n\r\n\trandomPointInFace: function ( face, geometry, useCachedAreas ) {\r\n\r\n\t\tvar vA, vB, vC, vD;\r\n\r\n\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\tvA = geometry.vertices[ face.a ];\r\n\t\t\tvB = geometry.vertices[ face.b ];\r\n\t\t\tvC = geometry.vertices[ face.c ];\r\n\r\n\t\t\treturn THREE.GeometryUtils.randomPointInTriangle( vA, vB, vC );\r\n\r\n\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\tvA = geometry.vertices[ face.a ];\r\n\t\t\tvB = geometry.vertices[ face.b ];\r\n\t\t\tvC = geometry.vertices[ face.c ];\r\n\t\t\tvD = geometry.vertices[ face.d ];\r\n\r\n\t\t\tvar area1, area2;\r\n\r\n\t\t\tif ( useCachedAreas ) {\r\n\r\n\t\t\t\tif ( face._area1 && face._area2 ) {\r\n\r\n\t\t\t\t\tarea1 = face._area1;\r\n\t\t\t\t\tarea2 = face._area2;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tarea1 = THREE.GeometryUtils.triangleArea( vA, vB, vD );\r\n\t\t\t\t\tarea2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );\r\n\r\n\t\t\t\t\tface._area1 = area1;\r\n\t\t\t\t\tface._area2 = area2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tarea1 = THREE.GeometryUtils.triangleArea( vA, vB, vD ),\r\n\t\t\t\tarea2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar r = THREE.GeometryUtils.random() * ( area1 + area2 );\r\n\r\n\t\t\tif ( r < area1 ) {\r\n\r\n\t\t\t\treturn THREE.GeometryUtils.randomPointInTriangle( vA, vB, vD );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn THREE.GeometryUtils.randomPointInTriangle( vB, vC, vD );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// Get uniformly distributed random points in mesh\r\n\t// \t- create array with cumulative sums of face areas\r\n\t//  - pick random number from 0 to total area\r\n\t//  - find corresponding place in area array by binary search\r\n\t//\t- get random point in face\r\n\r\n\trandomPointsInGeometry: function ( geometry, n ) {\r\n\r\n\t\tvar face, i,\r\n\t\t\tfaces = geometry.faces,\r\n\t\t\tvertices = geometry.vertices,\r\n\t\t\til = faces.length,\r\n\t\t\ttotalArea = 0,\r\n\t\t\tcumulativeAreas = [],\r\n\t\t\tvA, vB, vC, vD;\r\n\r\n\t\t// precompute face areas\r\n\r\n\t\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\t\tface = faces[ i ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face3 ) {\r\n\r\n\t\t\t\tvA = vertices[ face.a ];\r\n\t\t\t\tvB = vertices[ face.b ];\r\n\t\t\t\tvC = vertices[ face.c ];\r\n\r\n\t\t\t\tface._area = THREE.GeometryUtils.triangleArea( vA, vB, vC );\r\n\r\n\t\t\t} else if ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tvA = vertices[ face.a ];\r\n\t\t\t\tvB = vertices[ face.b ];\r\n\t\t\t\tvC = vertices[ face.c ];\r\n\t\t\t\tvD = vertices[ face.d ];\r\n\r\n\t\t\t\tface._area1 = THREE.GeometryUtils.triangleArea( vA, vB, vD );\r\n\t\t\t\tface._area2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );\r\n\r\n\t\t\t\tface._area = face._area1 + face._area2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttotalArea += face._area;\r\n\r\n\t\t\tcumulativeAreas[ i ] = totalArea;\r\n\r\n\t\t}\r\n\r\n\t\t// binary search cumulative areas array\r\n\r\n\t\tfunction binarySearchIndices( value ) {\r\n\r\n\t\t\tfunction binarySearch( start, end ) {\r\n\r\n\t\t\t\t// return closest larger index\r\n\t\t\t\t// if exact number is not found\r\n\r\n\t\t\t\tif ( end < start )\r\n\t\t\t\t\treturn start;\r\n\r\n\t\t\t\tvar mid = start + Math.floor( ( end - start ) / 2 );\r\n\r\n\t\t\t\tif ( cumulativeAreas[ mid ] > value ) {\r\n\r\n\t\t\t\t\treturn binarySearch( start, mid - 1 );\r\n\r\n\t\t\t\t} else if ( cumulativeAreas[ mid ] < value ) {\r\n\r\n\t\t\t\t\treturn binarySearch( mid + 1, end );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn mid;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar result = binarySearch( 0, cumulativeAreas.length - 1 )\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t\t// pick random face weighted by face area\r\n\r\n\t\tvar r, index,\r\n\t\t\tresult = [];\r\n\r\n\t\tvar stats = {};\r\n\r\n\t\tfor ( i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tr = THREE.GeometryUtils.random() * totalArea;\r\n\r\n\t\t\tindex = binarySearchIndices( r );\r\n\r\n\t\t\tresult[ i ] = THREE.GeometryUtils.randomPointInFace( faces[ index ], geometry, true );\r\n\r\n\t\t\tif ( ! stats[ index ] ) {\r\n\r\n\t\t\t\tstats[ index ] = 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstats[ index ] += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// Get triangle area (half of parallelogram)\r\n\t//\thttp://mathworld.wolfram.com/TriangleArea.html\r\n\r\n\ttriangleArea: function ( vectorA, vectorB, vectorC ) {\r\n\r\n\t\tvar tmp1 = THREE.GeometryUtils.__v1,\r\n\t\t\ttmp2 = THREE.GeometryUtils.__v2;\r\n\r\n\t\ttmp1.subVectors( vectorB, vectorA );\r\n\t\ttmp2.subVectors( vectorC, vectorA );\r\n\t\ttmp1.cross( tmp2 );\r\n\r\n\t\treturn 0.5 * tmp1.length();\r\n\r\n\t},\r\n\r\n\t// Center geometry so that 0,0,0 is in center of bounding box\r\n\r\n\tcenter: function ( geometry ) {\r\n\r\n\t\tgeometry.computeBoundingBox();\r\n\r\n\t\tvar bb = geometry.boundingBox;\r\n\r\n\t\tvar offset = new THREE.Vector3();\r\n\r\n\t\toffset.addVectors( bb.min, bb.max );\r\n\t\toffset.multiplyScalar( -0.5 );\r\n\r\n\t\tgeometry.applyMatrix( new THREE.Matrix4().makeTranslation( offset.x, offset.y, offset.z ) );\r\n\t\tgeometry.computeBoundingBox();\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\t// Normalize UVs to be from <0,1>\r\n\t// (for now just the first set of UVs)\r\n\r\n\tnormalizeUVs: function ( geometry ) {\r\n\r\n\t\tvar uvSet = geometry.faceVertexUvs[ 0 ];\r\n\r\n\t\tfor ( var i = 0, il = uvSet.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uvs = uvSet[ i ];\r\n\r\n\t\t\tfor ( var j = 0, jl = uvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t// texture repeat\r\n\r\n\t\t\t\tif( uvs[ j ].x !== 1.0 ) uvs[ j ].x = uvs[ j ].x - Math.floor( uvs[ j ].x );\r\n\t\t\t\tif( uvs[ j ].y !== 1.0 ) uvs[ j ].y = uvs[ j ].y - Math.floor( uvs[ j ].y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttriangulateQuads: function ( geometry ) {\r\n\r\n\t\tvar i, il, j, jl;\r\n\r\n\t\tvar faces = [];\r\n\t\tvar faceUvs = [];\r\n\t\tvar faceVertexUvs = [];\r\n\r\n\t\tfor ( i = 0, il = geometry.faceUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tfaceUvs[ i ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tfaceVertexUvs[ i ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 0, il = geometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = geometry.faces[ i ];\r\n\r\n\t\t\tif ( face instanceof THREE.Face4 ) {\r\n\r\n\t\t\t\tvar a = face.a;\r\n\t\t\t\tvar b = face.b;\r\n\t\t\t\tvar c = face.c;\r\n\t\t\t\tvar d = face.d;\r\n\r\n\t\t\t\tvar triA = new THREE.Face3();\r\n\t\t\t\tvar triB = new THREE.Face3();\r\n\r\n\t\t\t\ttriA.color.copy( face.color );\r\n\t\t\t\ttriB.color.copy( face.color );\r\n\r\n\t\t\t\ttriA.materialIndex = face.materialIndex;\r\n\t\t\t\ttriB.materialIndex = face.materialIndex;\r\n\r\n\t\t\t\ttriA.a = a;\r\n\t\t\t\ttriA.b = b;\r\n\t\t\t\ttriA.c = d;\r\n\r\n\t\t\t\ttriB.a = b;\r\n\t\t\t\ttriB.b = c;\r\n\t\t\t\ttriB.c = d;\r\n\r\n\t\t\t\tif ( face.vertexColors.length === 4 ) {\r\n\r\n\t\t\t\t\ttriA.vertexColors[ 0 ] = face.vertexColors[ 0 ].clone();\r\n\t\t\t\t\ttriA.vertexColors[ 1 ] = face.vertexColors[ 1 ].clone();\r\n\t\t\t\t\ttriA.vertexColors[ 2 ] = face.vertexColors[ 3 ].clone();\r\n\r\n\t\t\t\t\ttriB.vertexColors[ 0 ] = face.vertexColors[ 1 ].clone();\r\n\t\t\t\t\ttriB.vertexColors[ 1 ] = face.vertexColors[ 2 ].clone();\r\n\t\t\t\t\ttriB.vertexColors[ 2 ] = face.vertexColors[ 3 ].clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaces.push( triA, triB );\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tif ( geometry.faceVertexUvs[ j ].length ) {\r\n\r\n\t\t\t\t\t\tvar uvs = geometry.faceVertexUvs[ j ][ i ];\r\n\r\n\t\t\t\t\t\tvar uvA = uvs[ 0 ];\r\n\t\t\t\t\t\tvar uvB = uvs[ 1 ];\r\n\t\t\t\t\t\tvar uvC = uvs[ 2 ];\r\n\t\t\t\t\t\tvar uvD = uvs[ 3 ];\r\n\r\n\t\t\t\t\t\tvar uvsTriA = [ uvA.clone(), uvB.clone(), uvD.clone() ];\r\n\t\t\t\t\t\tvar uvsTriB = [ uvB.clone(), uvC.clone(), uvD.clone() ];\r\n\r\n\t\t\t\t\t\tfaceVertexUvs[ j ].push( uvsTriA, uvsTriB );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tif ( geometry.faceUvs[ j ].length ) {\r\n\r\n\t\t\t\t\t\tvar faceUv = geometry.faceUvs[ j ][ i ];\r\n\r\n\t\t\t\t\t\tfaceUvs[ j ].push( faceUv, faceUv );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfaces.push( face );\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tfaceUvs[ j ].push( geometry.faceUvs[ j ][ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tfaceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.faces = faces;\r\n\t\tgeometry.faceUvs = faceUvs;\r\n\t\tgeometry.faceVertexUvs = faceVertexUvs;\r\n\r\n\t\tgeometry.computeCentroids();\r\n\t\tgeometry.computeFaceNormals();\r\n\t\tgeometry.computeVertexNormals();\r\n\r\n\t\tif ( geometry.hasTangents ) geometry.computeTangents();\r\n\r\n\t},\r\n\r\n\tsetMaterialIndex: function ( geometry, index, startFace, endFace ){\r\n\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar start = startFace || 0;\r\n\t\tvar end = endFace || faces.length - 1;\r\n\r\n\t\tfor ( var i = start; i <= end; i ++ ) {\r\n\r\n\t\t\tfaces[i].materialIndex = index;\r\n\r\n\t\t}\r\n\r\n    }\r\n\r\n};\r\n\r\nTHREE.GeometryUtils.random = THREE.Math.random16;\r\n\r\nTHREE.GeometryUtils.__v1 = new THREE.Vector3();\r\nTHREE.GeometryUtils.__v2 = new THREE.Vector3();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ImageUtils = {\r\n\r\n\tcrossOrigin: 'anonymous',\r\n\r\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tvar image = new Image();\r\n\t\tvar texture = new THREE.Texture( image, mapping );\r\n\r\n\t\tvar loader = new THREE.ImageLoader();\r\n\r\n\t\tloader.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\ttexture.image = event.content;\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t} );\r\n\r\n\t\tloader.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event.message );\r\n\r\n\t\t} );\r\n\r\n\t\tloader.crossOrigin = this.crossOrigin;\r\n\t\tloader.load( url, image );\r\n\r\n\t\ttexture.sourceFile = url;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadCompressedTexture: function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tvar texture = new THREE.CompressedTexture();\r\n\t\ttexture.mapping = mapping;\r\n\r\n\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\trequest.onload = function () {\r\n\r\n\t\t\tvar buffer = request.response;\r\n\t\t\tvar dds = THREE.ImageUtils.parseDDS( buffer, true );\r\n\r\n\t\t\ttexture.format = dds.format;\r\n\r\n\t\t\ttexture.mipmaps = dds.mipmaps;\r\n\t\t\ttexture.image.width = dds.width;\r\n\t\t\ttexture.image.height = dds.height;\r\n\r\n\t\t\t// gl.generateMipmap fails for compressed textures\r\n\t\t\t// mipmaps must be embedded in the DDS file\r\n\t\t\t// or texture filters must not use mipmapping\r\n\r\n\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t}\r\n\r\n\t\trequest.onerror = onError;\r\n\r\n\t\trequest.open( 'GET', url, true );\r\n\t\trequest.responseType = \"arraybuffer\";\r\n\t\trequest.send( null );\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadTextureCube: function ( array, mapping, onLoad, onError ) {\r\n\r\n\t\tvar images = [];\r\n\t\timages.loadCount = 0;\r\n\r\n\t\tvar texture = new THREE.Texture();\r\n\t\ttexture.image = images;\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\t// no flipping needed for cube textures\r\n\r\n\t\ttexture.flipY = false;\r\n\r\n\t\tfor ( var i = 0, il = array.length; i < il; ++ i ) {\r\n\r\n\t\t\tvar cubeImage = new Image();\r\n\t\t\timages[ i ] = cubeImage;\r\n\r\n\t\t\tcubeImage.onload = function () {\r\n\r\n\t\t\t\timages.loadCount += 1;\r\n\r\n\t\t\t\tif ( images.loadCount === 6 ) {\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tcubeImage.onerror = onError;\r\n\r\n\t\t\tcubeImage.crossOrigin = this.crossOrigin;\r\n\t\t\tcubeImage.src = array[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadCompressedTextureCube: function ( array, mapping, onLoad, onError ) {\r\n\r\n\t\tvar images = [];\r\n\t\timages.loadCount = 0;\r\n\r\n\t\tvar texture = new THREE.CompressedTexture();\r\n\t\ttexture.image = images;\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\t// no flipping for cube textures\r\n\t\t// (also flipping doesn't work for compressed textures )\r\n\r\n\t\ttexture.flipY = false;\r\n\r\n\t\t// can't generate mipmaps for compressed textures\r\n\t\t// mips must be embedded in DDS files\r\n\r\n\t\ttexture.generateMipmaps = false;\r\n\r\n\t\tvar generateCubeFaceCallback = function ( rq, img ) {\r\n\r\n\t\t\treturn function () {\r\n\r\n\t\t\t\tvar buffer = rq.response;\r\n\t\t\t\tvar dds = THREE.ImageUtils.parseDDS( buffer, true );\r\n\r\n\t\t\t\timg.format = dds.format;\r\n\r\n\t\t\t\timg.mipmaps = dds.mipmaps;\r\n\t\t\t\timg.width = dds.width;\r\n\t\t\t\timg.height = dds.height;\r\n\r\n\t\t\t\timages.loadCount += 1;\r\n\r\n\t\t\t\tif ( images.loadCount === 6 ) {\r\n\r\n\t\t\t\t\ttexture.format = dds.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// compressed cubemap textures as 6 separate DDS files\r\n\r\n\t\tif ( array instanceof Array ) {\r\n\r\n\t\t\tfor ( var i = 0, il = array.length; i < il; ++ i ) {\r\n\r\n\t\t\t\tvar cubeImage = {};\r\n\t\t\t\timages[ i ] = cubeImage;\r\n\r\n\t\t\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\t\t\trequest.onload = generateCubeFaceCallback( request, cubeImage );\r\n\t\t\t\trequest.onerror = onError;\r\n\r\n\t\t\t\tvar url = array[ i ];\r\n\r\n\t\t\t\trequest.open( 'GET', url, true );\r\n\t\t\t\trequest.responseType = \"arraybuffer\";\r\n\t\t\t\trequest.send( null );\r\n\r\n\t\t\t}\r\n\r\n\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar url = array;\r\n\t\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\t\trequest.onload = function( ) {\r\n\r\n\t\t\t\tvar buffer = request.response;\r\n\t\t\t\tvar dds = THREE.ImageUtils.parseDDS( buffer, true );\r\n\r\n\t\t\t\tif ( dds.isCubemap ) {\r\n\r\n\t\t\t\t\tvar faces = dds.mipmaps.length / dds.mipmapCount;\r\n\r\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < dds.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( dds.mipmaps[ f * dds.mipmapCount + i ] );\r\n\t\t\t\t\t\t\timages[ f ].format = dds.format;\r\n\t\t\t\t\t\t\timages[ f ].width = dds.width;\r\n\t\t\t\t\t\t\timages[ f ].height = dds.height;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.format = dds.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\trequest.onerror = onError;\r\n\r\n\t\t\trequest.open( 'GET', url, true );\r\n\t\t\trequest.responseType = \"arraybuffer\";\r\n\t\t\trequest.send( null );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tparseDDS: function ( buffer, loadMipmaps ) {\r\n\r\n\t\tvar dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\r\n\r\n\t\t// Adapted from @toji's DDS utils\r\n\t\t//\thttps://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\r\n\r\n\t\t// All values and structures referenced from:\r\n\t\t// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\n\r\n\t\tvar DDS_MAGIC = 0x20534444;\r\n\r\n\t\tvar DDSD_CAPS = 0x1,\r\n\t\t\tDDSD_HEIGHT = 0x2,\r\n\t\t\tDDSD_WIDTH = 0x4,\r\n\t\t\tDDSD_PITCH = 0x8,\r\n\t\t\tDDSD_PIXELFORMAT = 0x1000,\r\n\t\t\tDDSD_MIPMAPCOUNT = 0x20000,\r\n\t\t\tDDSD_LINEARSIZE = 0x80000,\r\n\t\t\tDDSD_DEPTH = 0x800000;\r\n\r\n\t\tvar DDSCAPS_COMPLEX = 0x8,\r\n\t\t\tDDSCAPS_MIPMAP = 0x400000,\r\n\t\t\tDDSCAPS_TEXTURE = 0x1000;\r\n\r\n\t\tvar DDSCAPS2_CUBEMAP = 0x200,\r\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\r\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\r\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\r\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\r\n\t\t\tDDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\r\n\t\t\tDDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\r\n\t\t\tDDSCAPS2_VOLUME = 0x200000;\r\n\r\n\t\tvar DDPF_ALPHAPIXELS = 0x1,\r\n\t\t\tDDPF_ALPHA = 0x2,\r\n\t\t\tDDPF_FOURCC = 0x4,\r\n\t\t\tDDPF_RGB = 0x40,\r\n\t\t\tDDPF_YUV = 0x200,\r\n\t\t\tDDPF_LUMINANCE = 0x20000;\r\n\r\n\t\tfunction fourCCToInt32( value ) {\r\n\r\n\t\t\treturn value.charCodeAt(0) +\r\n\t\t\t\t(value.charCodeAt(1) << 8) +\r\n\t\t\t\t(value.charCodeAt(2) << 16) +\r\n\t\t\t\t(value.charCodeAt(3) << 24);\r\n\r\n\t\t}\r\n\r\n\t\tfunction int32ToFourCC( value ) {\r\n\r\n\t\t\treturn String.fromCharCode(\r\n\t\t\t\tvalue & 0xff,\r\n\t\t\t\t(value >> 8) & 0xff,\r\n\t\t\t\t(value >> 16) & 0xff,\r\n\t\t\t\t(value >> 24) & 0xff\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tvar FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\r\n\t\tvar FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\r\n\t\tvar FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\r\n\r\n\t\tvar headerLengthInt = 31; // The header length in 32 bit ints\r\n\r\n\t\t// Offsets into the header array\r\n\r\n\t\tvar off_magic = 0;\r\n\r\n\t\tvar off_size = 1;\r\n\t\tvar off_flags = 2;\r\n\t\tvar off_height = 3;\r\n\t\tvar off_width = 4;\r\n\r\n\t\tvar off_mipmapCount = 7;\r\n\r\n\t\tvar off_pfFlags = 20;\r\n\t\tvar off_pfFourCC = 21;\r\n\r\n\t\tvar off_caps = 27;\r\n\t\tvar off_caps2 = 28;\r\n\t\tvar off_caps3 = 29;\r\n\t\tvar off_caps4 = 30;\r\n\r\n\t\t// Parse header\r\n\r\n\t\tvar header = new Int32Array( buffer, 0, headerLengthInt );\r\n\r\n\t\tif ( header[ off_magic ] !== DDS_MAGIC ) {\r\n\r\n\t\t\tconsole.error( \"ImageUtils.parseDDS(): Invalid magic number in DDS header\" );\r\n\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {\r\n\r\n\t\t\tconsole.error( \"ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code\" );\r\n\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tvar blockBytes;\r\n\r\n\t\tvar fourCC = header[ off_pfFourCC ];\r\n\r\n\t\tswitch ( fourCC ) {\r\n\r\n\t\t\tcase FOURCC_DXT1:\r\n\r\n\t\t\t\tblockBytes = 8;\r\n\t\t\t\tdds.format = THREE.RGB_S3TC_DXT1_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FOURCC_DXT3:\r\n\r\n\t\t\t\tblockBytes = 16;\r\n\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT3_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FOURCC_DXT5:\r\n\r\n\t\t\t\tblockBytes = 16;\r\n\t\t\t\tdds.format = THREE.RGBA_S3TC_DXT5_Format;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconsole.error( \"ImageUtils.parseDDS(): Unsupported FourCC code: \", int32ToFourCC( fourCC ) );\r\n\t\t\t\treturn dds;\r\n\r\n\t\t}\r\n\r\n\t\tdds.mipmapCount = 1;\r\n\r\n\t\tif ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {\r\n\r\n\t\t\tdds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );\r\n\r\n\t\t}\r\n\r\n\t\t//TODO: Verify that all faces of the cubemap are present with DDSCAPS2_CUBEMAP_POSITIVEX, etc.\r\n\r\n\t\tdds.isCubemap = header[ off_caps2 ] & DDSCAPS2_CUBEMAP ? true : false;\r\n\r\n\t\tdds.width = header[ off_width ];\r\n\t\tdds.height = header[ off_height ];\r\n\r\n\t\tvar dataOffset = header[ off_size ] + 4;\r\n\r\n\t\t// Extract mipmaps buffers\r\n\r\n\t\tvar width = dds.width;\r\n\t\tvar height = dds.height;\r\n\r\n\t\tvar faces = dds.isCubemap ? 6 : 1;\r\n\r\n\t\tfor ( var face = 0; face < faces; face ++ ) {\r\n\r\n\t\t\tfor ( var i = 0; i < dds.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\tvar dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;\r\n\t\t\t\tvar byteArray = new Uint8Array( buffer, dataOffset, dataLength );\r\n\r\n\t\t\t\tvar mipmap = { \"data\": byteArray, \"width\": width, \"height\": height };\r\n\t\t\t\tdds.mipmaps.push( mipmap );\r\n\r\n\t\t\t\tdataOffset += dataLength;\r\n\r\n\t\t\t\twidth = Math.max( width * 0.5, 1 );\r\n\t\t\t\theight = Math.max( height * 0.5, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\twidth = dds.width;\r\n\t\t\theight = dds.height;\r\n\r\n\t\t}\r\n\r\n\t\treturn dds;\r\n\r\n\t},\r\n\r\n\tgetNormalMap: function ( image, depth ) {\r\n\r\n\t\t// Adapted from http://www.paulbrunt.co.uk/lab/heightnormal/\r\n\r\n\t\tvar cross = function ( a, b ) {\r\n\r\n\t\t\treturn [ a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ], a[ 2 ] * b[ 0 ] - a[ 0 ] * b[ 2 ], a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] ];\r\n\r\n\t\t}\r\n\r\n\t\tvar subtract = function ( a, b ) {\r\n\r\n\t\t\treturn [ a[ 0 ] - b[ 0 ], a[ 1 ] - b[ 1 ], a[ 2 ] - b[ 2 ] ];\r\n\r\n\t\t}\r\n\r\n\t\tvar normalize = function ( a ) {\r\n\r\n\t\t\tvar l = Math.sqrt( a[ 0 ] * a[ 0 ] + a[ 1 ] * a[ 1 ] + a[ 2 ] * a[ 2 ] );\r\n\t\t\treturn [ a[ 0 ] / l, a[ 1 ] / l, a[ 2 ] / l ];\r\n\r\n\t\t}\r\n\r\n\t\tdepth = depth | 1;\r\n\r\n\t\tvar width = image.width;\r\n\t\tvar height = image.height;\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = width;\r\n\t\tcanvas.height = height;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\t\tcontext.drawImage( image, 0, 0 );\r\n\r\n\t\tvar data = context.getImageData( 0, 0, width, height ).data;\r\n\t\tvar imageData = context.createImageData( width, height );\r\n\t\tvar output = imageData.data;\r\n\r\n\t\tfor ( var x = 0; x < width; x ++ ) {\r\n\r\n\t\t\tfor ( var y = 0; y < height; y ++ ) {\r\n\r\n\t\t\t\tvar ly = y - 1 < 0 ? 0 : y - 1;\r\n\t\t\t\tvar uy = y + 1 > height - 1 ? height - 1 : y + 1;\r\n\t\t\t\tvar lx = x - 1 < 0 ? 0 : x - 1;\r\n\t\t\t\tvar ux = x + 1 > width - 1 ? width - 1 : x + 1;\r\n\r\n\t\t\t\tvar points = [];\r\n\t\t\t\tvar origin = [ 0, 0, data[ ( y * width + x ) * 4 ] / 255 * depth ];\r\n\t\t\t\tpoints.push( [ - 1, 0, data[ ( y * width + lx ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ - 1, - 1, data[ ( ly * width + lx ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 0, - 1, data[ ( ly * width + x ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [  1, - 1, data[ ( ly * width + ux ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 1, 0, data[ ( y * width + ux ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 1, 1, data[ ( uy * width + ux ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ 0, 1, data[ ( uy * width + x ) * 4 ] / 255 * depth ] );\r\n\t\t\t\tpoints.push( [ - 1, 1, data[ ( uy * width + lx ) * 4 ] / 255 * depth ] );\r\n\r\n\t\t\t\tvar normals = [];\r\n\t\t\t\tvar num_points = points.length;\r\n\r\n\t\t\t\tfor ( var i = 0; i < num_points; i ++ ) {\r\n\r\n\t\t\t\t\tvar v1 = points[ i ];\r\n\t\t\t\t\tvar v2 = points[ ( i + 1 ) % num_points ];\r\n\t\t\t\t\tv1 = subtract( v1, origin );\r\n\t\t\t\t\tv2 = subtract( v2, origin );\r\n\t\t\t\t\tnormals.push( normalize( cross( v1, v2 ) ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normal = [ 0, 0, 0 ];\r\n\r\n\t\t\t\tfor ( var i = 0; i < normals.length; i ++ ) {\r\n\r\n\t\t\t\t\tnormal[ 0 ] += normals[ i ][ 0 ];\r\n\t\t\t\t\tnormal[ 1 ] += normals[ i ][ 1 ];\r\n\t\t\t\t\tnormal[ 2 ] += normals[ i ][ 2 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnormal[ 0 ] /= normals.length;\r\n\t\t\t\tnormal[ 1 ] /= normals.length;\r\n\t\t\t\tnormal[ 2 ] /= normals.length;\r\n\r\n\t\t\t\tvar idx = ( y * width + x ) * 4;\r\n\r\n\t\t\t\toutput[ idx ] = ( ( normal[ 0 ] + 1.0 ) / 2.0 * 255 ) | 0;\r\n\t\t\t\toutput[ idx + 1 ] = ( ( normal[ 1 ] + 1.0 ) / 2.0 * 255 ) | 0;\r\n\t\t\t\toutput[ idx + 2 ] = ( normal[ 2 ] * 255 ) | 0;\r\n\t\t\t\toutput[ idx + 3 ] = 255;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcontext.putImageData( imageData, 0, 0 );\r\n\r\n\t\treturn canvas;\r\n\r\n\t},\r\n\r\n\tgenerateDataTexture: function ( width, height, color ) {\r\n\r\n\t\tvar size = width * height;\r\n\t\tvar data = new Uint8Array( 3 * size );\r\n\r\n\t\tvar r = Math.floor( color.r * 255 );\r\n\t\tvar g = Math.floor( color.g * 255 );\r\n\t\tvar b = Math.floor( color.b * 255 );\r\n\r\n\t\tfor ( var i = 0; i < size; i ++ ) {\r\n\r\n\t\t\tdata[ i * 3 ] \t  = r;\r\n\t\t\tdata[ i * 3 + 1 ] = g;\r\n\t\t\tdata[ i * 3 + 2 ] = b;\r\n\r\n\t\t}\r\n\r\n\t\tvar texture = new THREE.DataTexture( data, width, height, THREE.RGBFormat );\r\n\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SceneUtils = {\r\n\r\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\r\n\r\n\t\tvar group = new THREE.Object3D();\r\n\r\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn group;\r\n\r\n\t},\r\n\r\n\tdetach : function ( child, parent, scene ) {\r\n\r\n\t\tchild.applyMatrix( parent.matrixWorld );\r\n\t\tparent.remove( child );\r\n\t\tscene.add( child );\r\n\r\n\t},\r\n\r\n\tattach: function ( child, scene, parent ) {\r\n\r\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\r\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\t\tchild.applyMatrix( matrixWorldInverse );\r\n\r\n\t\tscene.remove( child );\r\n\t\tparent.add( child );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * For Text operations in three.js (See TextGeometry)\r\n *\r\n * It uses techniques used in:\r\n *\r\n * \ttypeface.js and canvastext\r\n * \t\tFor converting fonts and rendering with javascript\r\n *\t\thttp://typeface.neocracy.org\r\n *\r\n *\tTriangulation ported from AS3\r\n *\t\tSimple Polygon Triangulation\r\n *\t\thttp://actionsnippet.com/?p=1462\r\n *\r\n * \tA Method to triangulate shapes with holes\r\n *\t\thttp://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/\r\n *\r\n */\r\n\r\nTHREE.FontUtils = {\r\n\r\n\tfaces : {},\r\n\r\n\t// Just for now. face[weight][style]\r\n\r\n\tface : \"helvetiker\",\r\n\tweight: \"normal\",\r\n\tstyle : \"normal\",\r\n\tsize : 150,\r\n\tdivisions : 10,\r\n\r\n\tgetFace : function() {\r\n\r\n\t\treturn this.faces[ this.face ][ this.weight ][ this.style ];\r\n\r\n\t},\r\n\r\n\tloadFace : function( data ) {\r\n\r\n\t\tvar family = data.familyName.toLowerCase();\r\n\r\n\t\tvar ThreeFont = this;\r\n\r\n\t\tThreeFont.faces[ family ] = ThreeFont.faces[ family ] || {};\r\n\r\n\t\tThreeFont.faces[ family ][ data.cssFontWeight ] = ThreeFont.faces[ family ][ data.cssFontWeight ] || {};\r\n\t\tThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;\r\n\r\n\t\tvar face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tdrawText : function( text ) {\r\n\r\n\t\tvar characterPts = [], allPts = [];\r\n\r\n\t\t// RenderText\r\n\r\n\t\tvar i, p,\r\n\t\t\tface = this.getFace(),\r\n\t\t\tscale = this.size / face.resolution,\r\n\t\t\toffset = 0,\r\n\t\t\tchars = String( text ).split( '' ),\r\n\t\t\tlength = chars.length;\r\n\r\n\t\tvar fontPaths = [];\r\n\r\n\t\tfor ( i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tvar path = new THREE.Path();\r\n\r\n\t\t\tvar ret = this.extractGlyphPoints( chars[ i ], face, scale, offset, path );\r\n\t\t\toffset += ret.offset;\r\n\r\n\t\t\tfontPaths.push( ret.path );\r\n\r\n\t\t}\r\n\r\n\t\t// get the width\r\n\r\n\t\tvar width = offset / 2;\r\n\t\t//\r\n\t\t// for ( p = 0; p < allPts.length; p++ ) {\r\n\t\t//\r\n\t\t// \tallPts[ p ].x -= width;\r\n\t\t//\r\n\t\t// }\r\n\r\n\t\t//var extract = this.extractPoints( allPts, characterPts );\r\n\t\t//extract.contour = allPts;\r\n\r\n\t\t//extract.paths = fontPaths;\r\n\t\t//extract.offset = width;\r\n\r\n\t\treturn { paths : fontPaths, offset : width };\r\n\r\n\t},\r\n\r\n\r\n\r\n\r\n\textractGlyphPoints : function( c, face, scale, offset, path ) {\r\n\r\n\t\tvar pts = [];\r\n\r\n\t\tvar i, i2, divisions,\r\n\t\t\toutline, action, length,\r\n\t\t\tscaleX, scaleY,\r\n\t\t\tx, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2,\r\n\t\t\tlaste,\r\n\t\t\tglyph = face.glyphs[ c ] || face.glyphs[ '?' ];\r\n\r\n\t\tif ( !glyph ) return;\r\n\r\n\t\tif ( glyph.o ) {\r\n\r\n\t\t\toutline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\t\t\tlength = outline.length;\r\n\r\n\t\t\tscaleX = scale;\r\n\t\t\tscaleY = scale;\r\n\r\n\t\t\tfor ( i = 0; i < length; ) {\r\n\r\n\t\t\t\taction = outline[ i ++ ];\r\n\r\n\t\t\t\t//console.log( action );\r\n\r\n\t\t\t\tswitch( action ) {\r\n\r\n\t\t\t\tcase 'm':\r\n\r\n\t\t\t\t\t// Move To\r\n\r\n\t\t\t\t\tx = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\ty = outline[ i++ ] * scaleY;\r\n\r\n\t\t\t\t\tpath.moveTo( x, y );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'l':\r\n\r\n\t\t\t\t\t// Line To\r\n\r\n\t\t\t\t\tx = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\ty = outline[ i++ ] * scaleY;\r\n\t\t\t\t\tpath.lineTo(x,y);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'q':\r\n\r\n\t\t\t\t\t// QuadraticCurveTo\r\n\r\n\t\t\t\t\tcpx  = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\tcpy  = outline[ i++ ] * scaleY;\r\n\t\t\t\t\tcpx1 = outline[ i++ ] * scaleX + offset;\r\n\t\t\t\t\tcpy1 = outline[ i++ ] * scaleY;\r\n\r\n\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\r\n\r\n\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\tfor ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\tvar tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\t\t\tvar ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );\r\n\t\t\t\t\t  }\r\n\r\n\t\t\t\t  }\r\n\r\n\t\t\t\t  break;\r\n\r\n\t\t\t\tcase 'b':\r\n\r\n\t\t\t\t\t// Cubic Bezier Curve\r\n\r\n\t\t\t\t\tcpx  = outline[ i++ ] *  scaleX + offset;\r\n\t\t\t\t\tcpy  = outline[ i++ ] *  scaleY;\r\n\t\t\t\t\tcpx1 = outline[ i++ ] *  scaleX + offset;\r\n\t\t\t\t\tcpy1 = outline[ i++ ] * -scaleY;\r\n\t\t\t\t\tcpx2 = outline[ i++ ] *  scaleX + offset;\r\n\t\t\t\t\tcpy2 = outline[ i++ ] * -scaleY;\r\n\r\n\t\t\t\t\tpath.bezierCurveTo( cpx, cpy, cpx1, cpy1, cpx2, cpy2 );\r\n\r\n\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\tfor ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\tvar tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\t\t\tvar ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn { offset: glyph.ha*scale, path:path};\r\n\t}\r\n\r\n};\r\n\r\n\r\nTHREE.FontUtils.generateShapes = function( text, parameters ) {\r\n\r\n\t// Parameters \r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar size = parameters.size !== undefined ? parameters.size : 100;\r\n\tvar curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments: 4;\r\n\r\n\tvar font = parameters.font !== undefined ? parameters.font : \"helvetiker\";\r\n\tvar weight = parameters.weight !== undefined ? parameters.weight : \"normal\";\r\n\tvar style = parameters.style !== undefined ? parameters.style : \"normal\";\r\n\r\n\tTHREE.FontUtils.size = size;\r\n\tTHREE.FontUtils.divisions = curveSegments;\r\n\r\n\tTHREE.FontUtils.face = font;\r\n\tTHREE.FontUtils.weight = weight;\r\n\tTHREE.FontUtils.style = style;\r\n\r\n\t// Get a Font data json object\r\n\r\n\tvar data = THREE.FontUtils.drawText( text );\r\n\r\n\tvar paths = data.paths;\r\n\tvar shapes = [];\r\n\r\n\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t}\r\n\r\n\treturn shapes;\r\n\r\n};\r\n\r\n\r\n/**\r\n * This code is a quick port of code written in C++ which was submitted to\r\n * flipcode.com by John W. Ratcliff  // July 22, 2000\r\n * See original code and more information here:\r\n * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\r\n *\r\n * ported to actionscript by Zevan Rosser\r\n * www.actionsnippet.com\r\n *\r\n * ported to javascript by Joshua Koo\r\n * http://www.lab4games.net/zz85/blog\r\n *\r\n */\r\n\r\n\r\n( function( namespace ) {\r\n\r\n\tvar EPSILON = 0.0000000001;\r\n\r\n\t// takes in an contour array and returns\r\n\r\n\tvar process = function( contour, indices ) {\r\n\r\n\t\tvar n = contour.length;\r\n\r\n\t\tif ( n < 3 ) return null;\r\n\r\n\t\tvar result = [],\r\n\t\t\tverts = [],\r\n\t\t\tvertIndices = [];\r\n\r\n\t\t/* we want a counter-clockwise polygon in verts */\r\n\r\n\t\tvar u, v, w;\r\n\r\n\t\tif ( area( contour ) > 0.0 ) {\r\n\r\n\t\t\tfor ( v = 0; v < n; v++ ) verts[ v ] = v;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( v = 0; v < n; v++ ) verts[ v ] = ( n - 1 ) - v;\r\n\r\n\t\t}\r\n\r\n\t\tvar nv = n;\r\n\r\n\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\r\n\r\n\t\tvar count = 2 * nv;   /* error detection */\r\n\r\n\t\tfor( v = nv - 1; nv > 2; ) {\r\n\r\n\t\t\t/* if we loop, it is probably a non-simple polygon */\r\n\r\n\t\t\tif ( ( count-- ) <= 0 ) {\r\n\r\n\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\r\n\r\n\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\r\n\t\t\t\t//return null;\r\n\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\r\n\t\t\t\tconsole.log( \"Warning, unable to triangulate polygon!\" );\r\n\r\n\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\treturn result;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\r\n\r\n\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\r\n\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\r\n\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\r\n\r\n\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\r\n\r\n\t\t\t\tvar a, b, c, s, t;\r\n\r\n\t\t\t\t/* true names of the vertices */\r\n\r\n\t\t\t\ta = verts[ u ];\r\n\t\t\t\tb = verts[ v ];\r\n\t\t\t\tc = verts[ w ];\r\n\r\n\t\t\t\t/* output Triangle */\r\n\r\n\t\t\t\tresult.push( [ contour[ a ],\r\n\t\t\t\t\tcontour[ b ],\r\n\t\t\t\t\tcontour[ c ] ] );\r\n\r\n\r\n\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\r\n\r\n\t\t\t\t/* remove v from the remaining polygon */\r\n\r\n\t\t\t\tfor( s = v, t = v + 1; t < nv; s++, t++ ) {\r\n\r\n\t\t\t\t\tverts[ s ] = verts[ t ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnv--;\r\n\r\n\t\t\t\t/* reset error detection counter */\r\n\r\n\t\t\t\tcount = 2 * nv;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( indices ) return vertIndices;\r\n\t\treturn result;\r\n\r\n\t};\r\n\r\n\t// calculate area of the contour polygon\r\n\r\n\tvar area = function ( contour ) {\r\n\r\n\t\tvar n = contour.length;\r\n\t\tvar a = 0.0;\r\n\r\n\t\tfor( var p = n - 1, q = 0; q < n; p = q++ ) {\r\n\r\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t}\r\n\r\n\t\treturn a * 0.5;\r\n\r\n\t};\r\n\r\n\tvar snip = function ( contour, u, v, w, n, verts ) {\r\n\r\n\t\tvar p;\r\n\t\tvar ax, ay, bx, by;\r\n\t\tvar cx, cy, px, py;\r\n\r\n\t\tax = contour[ verts[ u ] ].x;\r\n\t\tay = contour[ verts[ u ] ].y;\r\n\r\n\t\tbx = contour[ verts[ v ] ].x;\r\n\t\tby = contour[ verts[ v ] ].y;\r\n\r\n\t\tcx = contour[ verts[ w ] ].x;\r\n\t\tcy = contour[ verts[ w ] ].y;\r\n\r\n\t\tif ( EPSILON > (((bx-ax)*(cy-ay)) - ((by-ay)*(cx-ax))) ) return false;\r\n\r\n\t\tvar aX, aY, bX, bY, cX, cY;\r\n\t\tvar apx, apy, bpx, bpy, cpx, cpy;\r\n\t\tvar cCROSSap, bCROSScp, aCROSSbp;\r\n\r\n\t\taX = cx - bx;  aY = cy - by;\r\n\t\tbX = ax - cx;  bY = ay - cy;\r\n\t\tcX = bx - ax;  cY = by - ay;\r\n\r\n\t\tfor ( p = 0; p < n; p++ ) {\r\n\r\n\t\t\tif( (p === u) || (p === v) || (p === w) ) continue;\r\n\r\n\t\t\tpx = contour[ verts[ p ] ].x\r\n\t\t\tpy = contour[ verts[ p ] ].y\r\n\r\n\t\t\tapx = px - ax;  apy = py - ay;\r\n\t\t\tbpx = px - bx;  bpy = py - by;\r\n\t\t\tcpx = px - cx;  cpy = py - cy;\r\n\r\n\t\t\t// see if p is inside triangle abc\r\n\r\n\t\t\taCROSSbp = aX*bpy - aY*bpx;\r\n\t\t\tcCROSSap = cX*apy - cY*apx;\r\n\t\t\tbCROSScp = bX*cpy - bY*cpx;\r\n\r\n\t\t\tif ( (aCROSSbp >= 0.0) && (bCROSScp >= 0.0) && (cCROSSap >= 0.0) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t};\r\n\r\n\r\n\tnamespace.Triangulate = process;\r\n\tnamespace.Triangulate.area = area;\r\n\r\n\treturn namespace;\r\n\r\n})(THREE.FontUtils);\r\n\r\n// To use the typeface.js face files, hook up the API\r\nself._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Extensible curve object\r\n *\r\n * Some common of Curve methods\r\n * .getPoint(t), getTangent(t)\r\n * .getPointAt(u), getTagentAt(u)\r\n * .getPoints(), .getSpacedPoints()\r\n * .getLength()\r\n * .updateArcLengths()\r\n *\r\n * This file contains following classes:\r\n *\r\n * -- 2d classes --\r\n * THREE.Curve\r\n * THREE.LineCurve\r\n * THREE.QuadraticBezierCurve\r\n * THREE.CubicBezierCurve\r\n * THREE.SplineCurve\r\n * THREE.ArcCurve\r\n * THREE.EllipseCurve\r\n *\r\n * -- 3d classes --\r\n * THREE.LineCurve3\r\n * THREE.QuadraticBezierCurve3\r\n * THREE.CubicBezierCurve3\r\n * THREE.SplineCurve3\r\n * THREE.ClosedSplineCurve3\r\n *\r\n * A series of curves can be represented as a THREE.CurvePath\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tAbstract Curve base class\r\n **************************************************************/\r\n\r\nTHREE.Curve = function () {\r\n\r\n};\r\n\r\n// Virtual base class method to overwrite and implement in subclasses\r\n//\t- t [0 .. 1]\r\n\r\nTHREE.Curve.prototype.getPoint = function ( t ) {\r\n\r\n\tconsole.log( \"Warning, getPoint() not implemented!\" );\r\n\treturn null;\r\n\r\n};\r\n\r\n// Get point at relative position in curve according to arc length\r\n// - u [0 .. 1]\r\n\r\nTHREE.Curve.prototype.getPointAt = function ( u ) {\r\n\r\n\tvar t = this.getUtoTmapping( u );\r\n\treturn this.getPoint( t );\r\n\r\n};\r\n\r\n// Get sequence of points using getPoint( t )\r\n\r\nTHREE.Curve.prototype.getPoints = function ( divisions ) {\r\n\r\n\tif ( !divisions ) divisions = 5;\r\n\r\n\tvar d, pts = [];\r\n\r\n\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\tpts.push( this.getPoint( d / divisions ) );\r\n\r\n\t}\r\n\r\n\treturn pts;\r\n\r\n};\r\n\r\n// Get sequence of points using getPointAt( u )\r\n\r\nTHREE.Curve.prototype.getSpacedPoints = function ( divisions ) {\r\n\r\n\tif ( !divisions ) divisions = 5;\r\n\r\n\tvar d, pts = [];\r\n\r\n\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\tpts.push( this.getPointAt( d / divisions ) );\r\n\r\n\t}\r\n\r\n\treturn pts;\r\n\r\n};\r\n\r\n// Get total curve arc length\r\n\r\nTHREE.Curve.prototype.getLength = function () {\r\n\r\n\tvar lengths = this.getLengths();\r\n\treturn lengths[ lengths.length - 1 ];\r\n\r\n};\r\n\r\n// Get list of cumulative segment lengths\r\n\r\nTHREE.Curve.prototype.getLengths = function ( divisions ) {\r\n\r\n\tif ( !divisions ) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions): 200;\r\n\r\n\tif ( this.cacheArcLengths\r\n\t\t&& ( this.cacheArcLengths.length == divisions + 1 )\r\n\t\t&& !this.needsUpdate) {\r\n\r\n\t\t//console.log( \"cached\", this.cacheArcLengths );\r\n\t\treturn this.cacheArcLengths;\r\n\r\n\t}\r\n\r\n\tthis.needsUpdate = false;\r\n\r\n\tvar cache = [];\r\n\tvar current, last = this.getPoint( 0 );\r\n\tvar p, sum = 0;\r\n\r\n\tcache.push( 0 );\r\n\r\n\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\tcurrent = this.getPoint ( p / divisions );\r\n\t\tsum += current.distanceTo( last );\r\n\t\tcache.push( sum );\r\n\t\tlast = current;\r\n\r\n\t}\r\n\r\n\tthis.cacheArcLengths = cache;\r\n\r\n\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\r\n\r\n};\r\n\r\n\r\nTHREE.Curve.prototype.updateArcLengths = function() {\r\n\tthis.needsUpdate = true;\r\n\tthis.getLengths();\r\n};\r\n\r\n// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance\r\n\r\nTHREE.Curve.prototype.getUtoTmapping = function ( u, distance ) {\r\n\r\n\tvar arcLengths = this.getLengths();\r\n\r\n\tvar i = 0, il = arcLengths.length;\r\n\r\n\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\tif ( distance ) {\r\n\r\n\t\ttargetArcLength = distance;\r\n\r\n\t} else {\r\n\r\n\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t}\r\n\r\n\t//var time = Date.now();\r\n\r\n\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\tvar low = 0, high = il - 1, comparison;\r\n\r\n\twhile ( low <= high ) {\r\n\r\n\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\tlow = i + 1;\r\n\t\t\tcontinue;\r\n\r\n\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\thigh = i - 1;\r\n\t\t\tcontinue;\r\n\r\n\t\t} else {\r\n\r\n\t\t\thigh = i;\r\n\t\t\tbreak;\r\n\r\n\t\t\t// DONE\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ti = high;\r\n\r\n\t//console.log('b' , i, low, high, Date.now()- time);\r\n\r\n\tif ( arcLengths[ i ] == targetArcLength ) {\r\n\r\n\t\tvar t = i / ( il - 1 );\r\n\t\treturn t;\r\n\r\n\t}\r\n\r\n\t// we could get finer grain at lengths, or use simple interpolatation between two points\r\n\r\n\tvar lengthBefore = arcLengths[ i ];\r\n    var lengthAfter = arcLengths[ i + 1 ];\r\n\r\n    var segmentLength = lengthAfter - lengthBefore;\r\n\r\n    // determine where we are between the 'before' and 'after' points\r\n\r\n    var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n    // add that fractional amount to t\r\n\r\n    var t = ( i + segmentFraction ) / ( il -1 );\r\n\r\n\treturn t;\r\n\r\n};\r\n\r\n// Returns a unit vector tangent at t\r\n// In case any sub curve does not implement its tangent derivation,\r\n// 2 points a small delta apart will be used to find its gradient\r\n// which seems to give a reasonable approximation\r\n\r\nTHREE.Curve.prototype.getTangent = function( t ) {\r\n\r\n\tvar delta = 0.0001;\r\n\tvar t1 = t - delta;\r\n\tvar t2 = t + delta;\r\n\r\n\t// Capping in case of danger\r\n\r\n\tif ( t1 < 0 ) t1 = 0;\r\n\tif ( t2 > 1 ) t2 = 1;\r\n\r\n\tvar pt1 = this.getPoint( t1 );\r\n\tvar pt2 = this.getPoint( t2 );\r\n\r\n\tvar vec = pt2.clone().sub(pt1);\r\n\treturn vec.normalize();\r\n\r\n};\r\n\r\n\r\nTHREE.Curve.prototype.getTangentAt = function ( u ) {\r\n\r\n\tvar t = this.getUtoTmapping( u );\r\n\treturn this.getTangent( t );\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tLine\r\n **************************************************************/\r\n\r\nTHREE.LineCurve = function ( v1, v2 ) {\r\n\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar point = this.v2.clone().sub(this.v1);\r\n\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\n// Line curve is linear, so we can overwrite default getPointAt\r\n\r\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\r\n\r\n\treturn this.getPoint( u );\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangent = this.v2.clone().sub(this.v1);\r\n\r\n\treturn tangent.normalize();\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );\r\n\tty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );\r\n\r\n\treturn new THREE.Vector2( tx, ty );\r\n\r\n};\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x );\r\n\tty = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y );\r\n\r\n\t// returns unit vector\r\n\r\n\tvar tangent = new THREE.Vector2( tx, ty );\r\n\ttangent.normalize();\r\n\r\n\treturn tangent;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tCubic Bezier curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\tthis.v3 = v3;\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\r\n\tty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\r\n\r\n\treturn new THREE.Vector2( tx, ty );\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tx, ty;\r\n\r\n\ttx = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\r\n\tty = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\r\n\r\n\tvar tangent = new THREE.Vector2( tx, ty );\r\n\ttangent.normalize();\r\n\r\n\treturn tangent;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tSpline curve\r\n **************************************************************/\r\n\r\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\r\n\r\n\tthis.points = (points == undefined) ? [] : points;\r\n\r\n};\r\n\r\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar v = new THREE.Vector2();\r\n\tvar c = [];\r\n\tvar points = this.points, point, intPoint, weight;\r\n\tpoint = ( points.length - 1 ) * t;\r\n\r\n\tintPoint = Math.floor( point );\r\n\tweight = point - intPoint;\r\n\r\n\tc[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\r\n\tc[ 1 ] = intPoint;\r\n\tc[ 2 ] = intPoint  > points.length - 2 ? points.length -1 : intPoint + 1;\r\n\tc[ 3 ] = intPoint  > points.length - 3 ? points.length -1 : intPoint + 2;\r\n\r\n\tv.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );\r\n\tv.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );\r\n\r\n\treturn v;\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tEllipse curve\r\n **************************************************************/\r\n\r\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\taStartAngle, aEndAngle,\r\n\t\t\t\t\t\t\taClockwise ) {\r\n\r\n\tthis.aX = aX;\r\n\tthis.aY = aY;\r\n\r\n\tthis.xRadius = xRadius;\r\n\tthis.yRadius = yRadius;\r\n\r\n\tthis.aStartAngle = aStartAngle;\r\n\tthis.aEndAngle = aEndAngle;\r\n\r\n\tthis.aClockwise = aClockwise;\r\n\r\n};\r\n\r\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\r\n\tif ( !this.aClockwise ) {\r\n\r\n\t\tt = 1 - t;\r\n\r\n\t}\r\n\r\n\tvar angle = this.aStartAngle + t * deltaAngle;\r\n\r\n\tvar tx = this.aX + this.xRadius * Math.cos( angle );\r\n\tvar ty = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\treturn new THREE.Vector2( tx, ty );\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tArc curve\r\n **************************************************************/\r\n\r\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n};\r\n\r\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\r\n\r\n\r\n/**************************************************************\r\n *\tUtils\r\n **************************************************************/\r\n\r\nTHREE.Curve.Utils = {\r\n\r\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\r\n\r\n\t},\r\n\r\n\t// Puay Bing, thanks for helping with this derivative!\r\n\r\n\ttangentCubicBezier: function (t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn -3 * p0 * (1 - t) * (1 - t)  +\r\n\t\t\t3 * p1 * (1 - t) * (1-t) - 6 *t *p1 * (1-t) +\r\n\t\t\t6 * t *  p2 * (1-t) - 3 * t * t * p2 +\r\n\t\t\t3 * t * t * p3;\r\n\t},\r\n\r\n\r\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t// To check if my formulas are correct\r\n\r\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\r\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\r\n\t\tvar h01 = -6 * t * t + 6 * t; \t// − 2t3 + 3t2\r\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\r\n\r\n\t\treturn h00 + h10 + h01 + h11;\r\n\r\n\t},\r\n\r\n\t// Catmull-Rom\r\n\r\n\tinterpolate: function( p0, p1, p2, p3, t ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// TODO: Transformation for Curves?\r\n\r\n/**************************************************************\r\n *\t3D Curves\r\n **************************************************************/\r\n\r\n// A Factory method for creating new curve subclasses\r\n\r\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\r\n\r\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\r\n\tconstructor.prototype.getPoint = getPointFunc;\r\n\r\n\treturn constructor;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tLine3D\r\n **************************************************************/\r\n\r\nTHREE.LineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v1, v2 ) {\r\n\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar r = new THREE.Vector3();\r\n\r\n\r\n\t\tr.subVectors( this.v2, this.v1 ); // diff\r\n\t\tr.multiplyScalar( t );\r\n\t\tr.add( this.v1 );\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar tx, ty, tz;\r\n\r\n\t\ttx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );\r\n\t\tty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );\r\n\t\ttz = THREE.Shape.Utils.b2( t, this.v0.z, this.v1.z, this.v2.z );\r\n\r\n\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n\r\n/**************************************************************\r\n *\tCubic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2, v3 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar tx, ty, tz;\r\n\r\n\t\ttx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\r\n\t\tty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\r\n\t\ttz = THREE.Shape.Utils.b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z );\r\n\r\n\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n\r\n/**************************************************************\r\n *\tSpline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.SplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */) {\r\n\r\n\t\tthis.points = (points == undefined) ? [] : points;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\t\tvar c = [];\r\n\t\tvar points = this.points, point, intPoint, weight;\r\n\t\tpoint = ( points.length - 1 ) * t;\r\n\r\n\t\tintPoint = Math.floor( point );\r\n\t\tweight = point - intPoint;\r\n\r\n\t\tc[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\r\n\t\tc[ 1 ] = intPoint;\r\n\t\tc[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;\r\n\t\tc[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;\r\n\r\n\t\tvar pt0 = points[ c[0] ],\r\n\t\t\tpt1 = points[ c[1] ],\r\n\t\t\tpt2 = points[ c[2] ],\r\n\t\t\tpt3 = points[ c[3] ];\r\n\r\n\t\tv.x = THREE.Curve.Utils.interpolate(pt0.x, pt1.x, pt2.x, pt3.x, weight);\r\n\t\tv.y = THREE.Curve.Utils.interpolate(pt0.y, pt1.y, pt2.y, pt3.y, weight);\r\n\t\tv.z = THREE.Curve.Utils.interpolate(pt0.z, pt1.z, pt2.z, pt3.z, weight);\r\n\r\n\t\treturn v;\r\n\r\n\t}\r\n\r\n);\r\n\r\n\r\n// THREE.SplineCurve3.prototype.getTangent = function(t) {\r\n// \t\tvar v = new THREE.Vector3();\r\n// \t\tvar c = [];\r\n// \t\tvar points = this.points, point, intPoint, weight;\r\n// \t\tpoint = ( points.length - 1 ) * t;\r\n\r\n// \t\tintPoint = Math.floor( point );\r\n// \t\tweight = point - intPoint;\r\n\r\n// \t\tc[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;\r\n// \t\tc[ 1 ] = intPoint;\r\n// \t\tc[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;\r\n// \t\tc[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;\r\n\r\n// \t\tvar pt0 = points[ c[0] ],\r\n// \t\t\tpt1 = points[ c[1] ],\r\n// \t\t\tpt2 = points[ c[2] ],\r\n// \t\t\tpt3 = points[ c[3] ];\r\n\r\n// \t// t = weight;\r\n// \tv.x = THREE.Curve.Utils.tangentSpline( t, pt0.x, pt1.x, pt2.x, pt3.x );\r\n// \tv.y = THREE.Curve.Utils.tangentSpline( t, pt0.y, pt1.y, pt2.y, pt3.y );\r\n// \tv.z = THREE.Curve.Utils.tangentSpline( t, pt0.z, pt1.z, pt2.z, pt3.z );\r\n\r\n// \treturn v;\r\n\r\n// }\r\n\r\n/**************************************************************\r\n *\tClosed Spline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.ClosedSplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */) {\r\n\r\n\t\tthis.points = (points == undefined) ? [] : points;\r\n\r\n\t},\r\n\r\n    function ( t ) {\r\n\r\n        var v = new THREE.Vector3();\r\n        var c = [];\r\n        var points = this.points, point, intPoint, weight;\r\n        point = ( points.length - 0 ) * t;\r\n            // This needs to be from 0-length +1\r\n\r\n        intPoint = Math.floor( point );\r\n        weight = point - intPoint;\r\n\r\n        intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\r\n        c[ 0 ] = ( intPoint - 1 ) % points.length;\r\n        c[ 1 ] = ( intPoint ) % points.length;\r\n        c[ 2 ] = ( intPoint + 1 ) % points.length;\r\n        c[ 3 ] = ( intPoint + 2 ) % points.length;\r\n\r\n        v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );\r\n        v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );\r\n        v.z = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].z, points[ c[ 1 ] ].z, points[ c[ 2 ] ].z, points[ c[ 3 ] ].z, weight );\r\n\r\n        return v;\r\n\r\n    }\r\n\r\n);\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tCurved Path - a curve path is simply a array of connected\r\n *  curves, but retains the api of a curve\r\n **************************************************************/\r\n\r\nTHREE.CurvePath = function () {\r\n\r\n\tthis.curves = [];\r\n\tthis.bends = [];\r\n\t\r\n\tthis.autoClose = false; // Automatically closes the path\r\n};\r\n\r\nTHREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );\r\n\r\nTHREE.CurvePath.prototype.add = function ( curve ) {\r\n\r\n\tthis.curves.push( curve );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.checkConnection = function() {\r\n\t// TODO\r\n\t// If the ending of curve is not connected to the starting\r\n\t// or the next curve, then, this is not a real path\r\n};\r\n\r\nTHREE.CurvePath.prototype.closePath = function() {\r\n\t// TODO Test\r\n\t// and verify for vector3 (needs to implement equals)\r\n\t// Add a line curve if start and end of lines are not connected\r\n\tvar startPoint = this.curves[0].getPoint(0);\r\n\tvar endPoint = this.curves[this.curves.length-1].getPoint(1);\r\n\t\r\n\tif (!startPoint.equals(endPoint)) {\r\n\t\tthis.curves.push( new THREE.LineCurve(endPoint, startPoint) );\r\n\t}\r\n\t\r\n};\r\n\r\n// To get accurate point with reference to\r\n// entire path distance at time t,\r\n// following has to be done:\r\n\r\n// 1. Length of each sub path have to be known\r\n// 2. Locate and identify type of curve\r\n// 3. Get t for the curve\r\n// 4. Return curve.getPointAt(t')\r\n\r\nTHREE.CurvePath.prototype.getPoint = function( t ) {\r\n\r\n\tvar d = t * this.getLength();\r\n\tvar curveLengths = this.getCurveLengths();\r\n\tvar i = 0, diff, curve;\r\n\r\n\t// To think about boundaries points.\r\n\r\n\twhile ( i < curveLengths.length ) {\r\n\r\n\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\tdiff = curveLengths[ i ] - d;\r\n\t\t\tcurve = this.curves[ i ];\r\n\r\n\t\t\tvar u = 1 - diff / curve.getLength();\r\n\r\n\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\ti ++;\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n};\r\n\r\n/*\r\nTHREE.CurvePath.prototype.getTangent = function( t ) {\r\n};*/\r\n\r\n\r\n// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n// getPoint() depends on getLength\r\n\r\nTHREE.CurvePath.prototype.getLength = function() {\r\n\r\n\tvar lens = this.getCurveLengths();\r\n\treturn lens[ lens.length - 1 ];\r\n\r\n};\r\n\r\n// Compute lengths and cache them\r\n// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\nTHREE.CurvePath.prototype.getCurveLengths = function() {\r\n\r\n\t// We use cache values if curves and cache array are same length\r\n\r\n\tif ( this.cacheLengths && this.cacheLengths.length == this.curves.length ) {\r\n\r\n\t\treturn this.cacheLengths;\r\n\r\n\t};\r\n\r\n\t// Get length of subsurve\r\n\t// Push sums into cached array\r\n\r\n\tvar lengths = [], sums = 0;\r\n\tvar i, il = this.curves.length;\r\n\r\n\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\tsums += this.curves[ i ].getLength();\r\n\t\tlengths.push( sums );\r\n\r\n\t}\r\n\r\n\tthis.cacheLengths = lengths;\r\n\r\n\treturn lengths;\r\n\r\n};\r\n\r\n\r\n\r\n// Returns min and max coordinates, as well as centroid\r\n\r\nTHREE.CurvePath.prototype.getBoundingBox = function () {\r\n\r\n\tvar points = this.getPoints();\r\n\r\n\tvar maxX, maxY, maxZ;\r\n\tvar minX, minY, minZ;\r\n\r\n\tmaxX = maxY = Number.NEGATIVE_INFINITY;\r\n\tminX = minY = Number.POSITIVE_INFINITY;\r\n\r\n\tvar p, i, il, sum;\r\n\r\n\tvar v3 = points[0] instanceof THREE.Vector3;\r\n\r\n\tsum = v3 ? new THREE.Vector3() : new THREE.Vector2();\r\n\r\n\tfor ( i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\tp = points[ i ];\r\n\r\n\t\tif ( p.x > maxX ) maxX = p.x;\r\n\t\telse if ( p.x < minX ) minX = p.x;\r\n\r\n\t\tif ( p.y > maxY ) maxY = p.y;\r\n\t\telse if ( p.y < minY ) minY = p.y;\r\n\r\n\t\tif ( v3 ) {\r\n\r\n\t\t\tif ( p.z > maxZ ) maxZ = p.z;\r\n\t\t\telse if ( p.z < minZ ) minZ = p.z;\r\n\r\n\t\t}\r\n\r\n\t\tsum.add( p );\r\n\r\n\t}\r\n\r\n\tvar ret = {\r\n\r\n\t\tminX: minX,\r\n\t\tminY: minY,\r\n\t\tmaxX: maxX,\r\n\t\tmaxY: maxY,\r\n\t\tcentroid: sum.divideScalar( il )\r\n\r\n\t};\r\n\r\n\tif ( v3 ) {\r\n\r\n\t\tret.maxZ = maxZ;\r\n\t\tret.minZ = minZ;\r\n\r\n\t}\r\n\r\n\treturn ret;\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tCreate Geometries Helpers\r\n **************************************************************/\r\n\r\n/// Generate geometry from path points (for Line or ParticleSystem objects)\r\n\r\nTHREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {\r\n\r\n\tvar pts = this.getPoints( divisions, true );\r\n\treturn this.createGeometry( pts );\r\n\r\n};\r\n\r\n// Generate geometry from equidistance sampling along the path\r\n\r\nTHREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {\r\n\r\n\tvar pts = this.getSpacedPoints( divisions, true );\r\n\treturn this.createGeometry( pts );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.createGeometry = function( points ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tfor ( var i = 0; i < points.length; i ++ ) {\r\n\r\n\t\tgeometry.vertices.push( new THREE.Vector3( points[ i ].x, points[ i ].y, points[ i ].z || 0) );\r\n\r\n\t}\r\n\r\n\treturn geometry;\r\n\r\n};\r\n\r\n\r\n/**************************************************************\r\n *\tBend / Wrap Helper Methods\r\n **************************************************************/\r\n\r\n// Wrap path / Bend modifiers?\r\n\r\nTHREE.CurvePath.prototype.addWrapPath = function ( bendpath ) {\r\n\r\n\tthis.bends.push( bendpath );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.getTransformedPoints = function( segments, bends ) {\r\n\r\n\tvar oldPts = this.getPoints( segments ); // getPoints getSpacedPoints\r\n\tvar i, il;\r\n\r\n\tif ( !bends ) {\r\n\r\n\t\tbends = this.bends;\r\n\r\n\t}\r\n\r\n\tfor ( i = 0, il = bends.length; i < il; i ++ ) {\r\n\r\n\t\toldPts = this.getWrapPoints( oldPts, bends[ i ] );\r\n\r\n\t}\r\n\r\n\treturn oldPts;\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.getTransformedSpacedPoints = function( segments, bends ) {\r\n\r\n\tvar oldPts = this.getSpacedPoints( segments );\r\n\r\n\tvar i, il;\r\n\r\n\tif ( !bends ) {\r\n\r\n\t\tbends = this.bends;\r\n\r\n\t}\r\n\r\n\tfor ( i = 0, il = bends.length; i < il; i ++ ) {\r\n\r\n\t\toldPts = this.getWrapPoints( oldPts, bends[ i ] );\r\n\r\n\t}\r\n\r\n\treturn oldPts;\r\n\r\n};\r\n\r\n// This returns getPoints() bend/wrapped around the contour of a path.\r\n// Read http://www.planetclegg.com/projects/WarpingTextToSplines.html\r\n\r\nTHREE.CurvePath.prototype.getWrapPoints = function ( oldPts, path ) {\r\n\r\n\tvar bounds = this.getBoundingBox();\r\n\r\n\tvar i, il, p, oldX, oldY, xNorm;\r\n\r\n\tfor ( i = 0, il = oldPts.length; i < il; i ++ ) {\r\n\r\n\t\tp = oldPts[ i ];\r\n\r\n\t\toldX = p.x;\r\n\t\toldY = p.y;\r\n\r\n\t\txNorm = oldX / bounds.maxX;\r\n\r\n\t\t// If using actual distance, for length > path, requires line extrusions\r\n\t\t//xNorm = path.getUtoTmapping(xNorm, oldX); // 3 styles. 1) wrap stretched. 2) wrap stretch by arc length 3) warp by actual distance\r\n\r\n\t\txNorm = path.getUtoTmapping( xNorm, oldX );\r\n\r\n\t\t// check for out of bounds?\r\n\r\n\t\tvar pathPt = path.getPoint( xNorm );\r\n\t\tvar normal = path.getNormalVector( xNorm ).multiplyScalar( oldY );\r\n\r\n\t\tp.x = pathPt.x + normal.x;\r\n\t\tp.y = pathPt.y + normal.y;\r\n\r\n\t}\r\n\r\n\treturn oldPts;\r\n\r\n};\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Gyroscope = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n};\r\n\r\nTHREE.Gyroscope.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.Gyroscope.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\tthis.matrixAutoUpdate && this.updateMatrix();\r\n\r\n\t// update matrixWorld\r\n\r\n\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\tif ( this.parent ) {\r\n\r\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\tthis.matrixWorld.decompose( this.translationWorld, this.rotationWorld, this.scaleWorld );\r\n\t\t\tthis.matrix.decompose( this.translationObject, this.rotationObject, this.scaleObject );\r\n\r\n\t\t\tthis.matrixWorld.compose( this.translationWorld, this.rotationObject, this.scaleWorld );\r\n\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tforce = true;\r\n\r\n\t}\r\n\r\n\t// update children\r\n\r\n\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Gyroscope.prototype.translationWorld = new THREE.Vector3();\r\nTHREE.Gyroscope.prototype.translationObject = new THREE.Vector3();\r\nTHREE.Gyroscope.prototype.rotationWorld = new THREE.Quaternion();\r\nTHREE.Gyroscope.prototype.rotationObject = new THREE.Quaternion();\r\nTHREE.Gyroscope.prototype.scaleWorld = new THREE.Vector3();\r\nTHREE.Gyroscope.prototype.scaleObject = new THREE.Vector3();\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Creates free form 2d path using series of points, lines or curves.\r\n *\r\n **/\r\n\r\nTHREE.Path = function ( points ) {\r\n\r\n\tTHREE.CurvePath.call(this);\r\n\r\n\tthis.actions = [];\r\n\r\n\tif ( points ) {\r\n\r\n\t\tthis.fromPoints( points );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Path.prototype = Object.create( THREE.CurvePath.prototype );\r\n\r\nTHREE.PathActions = {\r\n\r\n\tMOVE_TO: 'moveTo',\r\n\tLINE_TO: 'lineTo',\r\n\tQUADRATIC_CURVE_TO: 'quadraticCurveTo', // Bezier quadratic curve\r\n\tBEZIER_CURVE_TO: 'bezierCurveTo', \t\t// Bezier cubic curve\r\n\tCSPLINE_THRU: 'splineThru',\t\t\t\t// Catmull-rom spline\r\n\tARC: 'arc',\t\t\t\t\t\t\t\t// Circle\r\n\tELLIPSE: 'ellipse'\r\n};\r\n\r\n// TODO Clean up PATH API\r\n\r\n// Create path using straight lines to connect all points\r\n// - vectors: array of Vector2\r\n\r\nTHREE.Path.prototype.fromPoints = function ( vectors ) {\r\n\r\n\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\r\n\r\n\tfor ( var v = 1, vlen = vectors.length; v < vlen; v ++ ) {\r\n\r\n\t\tthis.lineTo( vectors[ v ].x, vectors[ v ].y );\r\n\r\n\t};\r\n\r\n};\r\n\r\n// startPath() endPath()?\r\n\r\nTHREE.Path.prototype.moveTo = function ( x, y ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\tthis.actions.push( { action: THREE.PathActions.MOVE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.lineTo = function ( x, y ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.LINE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.QuadraticBezierCurve( new THREE.Vector2( x0, y0 ),\r\n\t\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCPx, aCPy ),\r\n\t\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aX, aY ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.QUADRATIC_CURVE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y,\r\n                                               aCP2x, aCP2y,\r\n                                               aX, aY ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.CubicBezierCurve( new THREE.Vector2( x0, y0 ),\r\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\r\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\r\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aX, aY ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.BEZIER_CURVE_TO, args: args } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n//---\r\n\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\r\n\tArray.prototype.push.apply( npts, pts );\r\n\r\n\tvar curve = new THREE.SplineCurve( npts );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.CSPLINE_THRU, args: args } );\r\n\r\n};\r\n\r\n// FUTURE: Change the API or follow canvas API?\r\n\r\nTHREE.Path.prototype.arc = function ( aX, aY, aRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1].args;\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tthis.absarc(aX + x0, aY + y0, aRadius,\r\n\t\taStartAngle, aEndAngle, aClockwise );\r\n\t\r\n };\r\n\r\n THREE.Path.prototype.absarc = function ( aX, aY, aRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n };\r\n \r\nTHREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1].args;\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius,\r\n\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n };\r\n \r\n\r\nTHREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius,\r\n\t\t\t\t\t\t\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\tthis.curves.push( curve );\r\n\r\n\tvar lastPoint = curve.getPoint(aClockwise ? 1 : 0);\r\n\targs.push(lastPoint.x);\r\n\targs.push(lastPoint.y);\r\n\r\n\tthis.actions.push( { action: THREE.PathActions.ELLIPSE, args: args } );\r\n\r\n };\r\n\r\nTHREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {\r\n\r\n\tif ( ! divisions ) divisions = 40;\r\n\r\n\tvar points = [];\r\n\r\n\tfor ( var i = 0; i < divisions; i ++ ) {\r\n\r\n\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t//if( !this.getPoint( i / divisions ) ) throw \"DIE\";\r\n\r\n\t}\r\n\r\n\t// if ( closedPath ) {\r\n\t//\r\n\t// \tpoints.push( points[ 0 ] );\r\n\t//\r\n\t// }\r\n\r\n\treturn points;\r\n\r\n};\r\n\r\n/* Return an array of vectors based on contour of the path */\r\n\r\nTHREE.Path.prototype.getPoints = function( divisions, closedPath ) {\r\n\r\n\tif (this.useSpacedPoints) {\r\n\t\tconsole.log('tata');\r\n\t\treturn this.getSpacedPoints( divisions, closedPath );\r\n\t}\r\n\r\n\tdivisions = divisions || 12;\r\n\r\n\tvar points = [];\r\n\r\n\tvar i, il, item, action, args;\r\n\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\r\n\t\tlaste, j,\r\n\t\tt, tx, ty;\r\n\r\n\tfor ( i = 0, il = this.actions.length; i < il; i ++ ) {\r\n\r\n\t\titem = this.actions[ i ];\r\n\r\n\t\taction = item.action;\r\n\t\targs = item.args;\r\n\r\n\t\tswitch( action ) {\r\n\r\n\t\tcase THREE.PathActions.MOVE_TO:\r\n\r\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.LINE_TO:\r\n\r\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.QUADRATIC_CURVE_TO:\r\n\r\n\t\t\tcpx  = args[ 2 ];\r\n\t\t\tcpy  = args[ 3 ];\r\n\r\n\t\t\tcpx1 = args[ 0 ];\r\n\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / divisions;\r\n\r\n\t\t\t\ttx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\tty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t  \t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.BEZIER_CURVE_TO:\r\n\r\n\t\t\tcpx  = args[ 4 ];\r\n\t\t\tcpy  = args[ 5 ];\r\n\r\n\t\t\tcpx1 = args[ 0 ];\r\n\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\tcpx2 = args[ 2 ];\r\n\t\t\tcpy2 = args[ 3 ];\r\n\r\n\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfor ( j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / divisions;\r\n\r\n\t\t\t\ttx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\tty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.CSPLINE_THRU:\r\n\r\n\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\r\n\t\t\tvar spts = [ last ];\r\n\r\n\t\t\tvar n = divisions * args[ 0 ].length;\r\n\r\n\t\t\tspts = spts.concat( args[ 0 ] );\r\n\r\n\t\t\tvar spline = new THREE.SplineCurve( spts );\r\n\r\n\t\t\tfor ( j = 1; j <= n; j ++ ) {\r\n\r\n\t\t\t\tpoints.push( spline.getPointAt( j / n ) ) ;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase THREE.PathActions.ARC:\r\n\r\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\taRadius = args[ 2 ],\r\n\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\r\n\t\t\t\taClockwise = !!args[ 5 ];\r\n\r\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\tvar angle;\r\n\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\tfor ( j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / tdivisions;\r\n\r\n\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\ttx = aX + aRadius * Math.cos( angle );\r\n\t\t\t\tty = aY + aRadius * Math.sin( angle );\r\n\r\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(points);\r\n\r\n\t\t  break;\r\n\t\t  \r\n\t\tcase THREE.PathActions.ELLIPSE:\r\n\r\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\txRadius = args[ 2 ],\r\n\t\t\t\tyRadius = args[ 3 ],\r\n\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\r\n\t\t\t\taClockwise = !!args[ 6 ];\r\n\r\n\r\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\tvar angle;\r\n\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\tfor ( j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\tt = j / tdivisions;\r\n\r\n\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\ttx = aX + xRadius * Math.cos( angle );\r\n\t\t\t\tty = aY + yRadius * Math.sin( angle );\r\n\r\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(points);\r\n\r\n\t\t  break;\r\n\r\n\t\t} // end switch\r\n\r\n\t}\r\n\r\n\r\n\r\n\t// Normalize to remove the closing point by default.\r\n\tvar lastPoint = points[ points.length - 1];\r\n\tvar EPSILON = 0.0000000001;\r\n\tif ( Math.abs(lastPoint.x - points[ 0 ].x) < EPSILON &&\r\n             Math.abs(lastPoint.y - points[ 0 ].y) < EPSILON)\r\n\t\tpoints.splice( points.length - 1, 1);\r\n\tif ( closedPath ) {\r\n\r\n\t\tpoints.push( points[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn points;\r\n\r\n};\r\n\r\n// Breaks path into shapes\r\n\r\nTHREE.Path.prototype.toShapes = function() {\r\n\r\n\tvar i, il, item, action, args;\r\n\r\n\tvar subPaths = [], lastPath = new THREE.Path();\r\n\r\n\tfor ( i = 0, il = this.actions.length; i < il; i ++ ) {\r\n\r\n\t\titem = this.actions[ i ];\r\n\r\n\t\targs = item.args;\r\n\t\taction = item.action;\r\n\r\n\t\tif ( action == THREE.PathActions.MOVE_TO ) {\r\n\r\n\t\t\tif ( lastPath.actions.length != 0 ) {\r\n\r\n\t\t\t\tsubPaths.push( lastPath );\r\n\t\t\t\tlastPath = new THREE.Path();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlastPath[ action ].apply( lastPath, args );\r\n\r\n\t}\r\n\r\n\tif ( lastPath.actions.length != 0 ) {\r\n\r\n\t\tsubPaths.push( lastPath );\r\n\r\n\t}\r\n\r\n\t// console.log(subPaths);\r\n\r\n\tif ( subPaths.length == 0 ) return [];\r\n\r\n\tvar tmpPath, tmpShape, shapes = [];\r\n\r\n\tvar holesFirst = !THREE.Shape.Utils.isClockWise( subPaths[ 0 ].getPoints() );\r\n\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\tif ( subPaths.length == 1) {\r\n\t\ttmpPath = subPaths[0];\r\n\t\ttmpShape = new THREE.Shape();\r\n\t\ttmpShape.actions = tmpPath.actions;\r\n\t\ttmpShape.curves = tmpPath.curves;\r\n\t\tshapes.push( tmpShape );\r\n\t\treturn shapes;\r\n\t};\r\n\r\n\tif ( holesFirst ) {\r\n\r\n\t\ttmpShape = new THREE.Shape();\r\n\r\n\t\tfor ( i = 0, il = subPaths.length; i < il; i ++ ) {\r\n\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( tmpPath.getPoints() ) ) {\r\n\r\n\t\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\ttmpShape = new THREE.Shape();\r\n\r\n\t\t\t\t//console.log('cw', i);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttmpShape.holes.push( tmpPath );\r\n\r\n\t\t\t\t//console.log('ccw', i);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\t// Shapes first\r\n\r\n\t\tfor ( i = 0, il = subPaths.length; i < il; i ++ ) {\r\n\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( tmpPath.getPoints() ) ) {\r\n\r\n\r\n\t\t\t\tif ( tmpShape ) shapes.push( tmpShape );\r\n\r\n\t\t\t\ttmpShape = new THREE.Shape();\r\n\t\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttmpShape.holes.push( tmpPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tshapes.push( tmpShape );\r\n\r\n\t}\r\n\r\n\t//console.log(\"shape\", shapes);\r\n\r\n\treturn shapes;\r\n\r\n};\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Defines a 2d shape plane using paths.\r\n **/\r\n\r\n// STEP 1 Create a path.\r\n// STEP 2 Turn path into shape.\r\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n// STEP 3a - Extract points from each shape, turn to vertices\r\n// STEP 3b - Triangulate each shape, add faces.\r\n\r\nTHREE.Shape = function ( ) {\r\n\r\n\tTHREE.Path.apply( this, arguments );\r\n\tthis.holes = [];\r\n\r\n};\r\n\r\nTHREE.Shape.prototype = Object.create( THREE.Path.prototype );\r\n\r\n// Convenience method to return ExtrudeGeometry\r\n\r\nTHREE.Shape.prototype.extrude = function ( options ) {\r\n\r\n\tvar extruded = new THREE.ExtrudeGeometry( this, options );\r\n\treturn extruded;\r\n\r\n};\r\n\r\n// Convenience method to return ShapeGeometry\r\n\r\nTHREE.Shape.prototype.makeGeometry = function ( options ) {\r\n\r\n\tvar geometry = new THREE.ShapeGeometry( this, options );\r\n\treturn geometry;\r\n\r\n};\r\n\r\n// Get points of holes\r\n\r\nTHREE.Shape.prototype.getPointsHoles = function ( divisions ) {\r\n\r\n\tvar i, il = this.holes.length, holesPts = [];\r\n\r\n\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\tholesPts[ i ] = this.holes[ i ].getTransformedPoints( divisions, this.bends );\r\n\r\n\t}\r\n\r\n\treturn holesPts;\r\n\r\n};\r\n\r\n// Get points of holes (spaced by regular distance)\r\n\r\nTHREE.Shape.prototype.getSpacedPointsHoles = function ( divisions ) {\r\n\r\n\tvar i, il = this.holes.length, holesPts = [];\r\n\r\n\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\tholesPts[ i ] = this.holes[ i ].getTransformedSpacedPoints( divisions, this.bends );\r\n\r\n\t}\r\n\r\n\treturn holesPts;\r\n\r\n};\r\n\r\n\r\n// Get points of shape and holes (keypoints based on segments parameter)\r\n\r\nTHREE.Shape.prototype.extractAllPoints = function ( divisions ) {\r\n\r\n\treturn {\r\n\r\n\t\tshape: this.getTransformedPoints( divisions ),\r\n\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.Shape.prototype.extractPoints = function ( divisions ) {\r\n\r\n\tif (this.useSpacedPoints) {\r\n\t\treturn this.extractAllSpacedPoints(divisions);\r\n\t}\r\n\r\n\treturn this.extractAllPoints(divisions);\r\n\r\n};\r\n\r\n//\r\n// THREE.Shape.prototype.extractAllPointsWithBend = function ( divisions, bend ) {\r\n//\r\n// \treturn {\r\n//\r\n// \t\tshape: this.transform( bend, divisions ),\r\n// \t\tholes: this.getPointsHoles( divisions, bend )\r\n//\r\n// \t};\r\n//\r\n// };\r\n\r\n// Get points of shape and holes (spaced by regular distance)\r\n\r\nTHREE.Shape.prototype.extractAllSpacedPoints = function ( divisions ) {\r\n\r\n\treturn {\r\n\r\n\t\tshape: this.getTransformedSpacedPoints( divisions ),\r\n\t\tholes: this.getSpacedPointsHoles( divisions )\r\n\r\n\t};\r\n\r\n};\r\n\r\n/**************************************************************\r\n *\tUtils\r\n **************************************************************/\r\n\r\nTHREE.Shape.Utils = {\r\n\r\n\t/*\r\n\t\tcontour - array of vector2 for contour\r\n\t\tholes   - array of array of vector2\r\n\t*/\r\n\r\n\tremoveHoles: function ( contour, holes ) {\r\n\r\n\t\tvar shape = contour.concat(); // work on this shape\r\n\t\tvar allpoints = shape.concat();\r\n\r\n\t\t/* For each isolated shape, find the closest points and break to the hole to allow triangulation */\r\n\r\n\r\n\t\tvar prevShapeVert, nextShapeVert,\r\n\t\t\tprevHoleVert, nextHoleVert,\r\n\t\t\tholeIndex, shapeIndex,\r\n\t\t\tshapeId, shapeGroup,\r\n\t\t\th, h2,\r\n\t\t\thole, shortest, d,\r\n\t\t\tp, pts1, pts2,\r\n\t\t\ttmpShape1, tmpShape2,\r\n\t\t\ttmpHole1, tmpHole2,\r\n\t\t\tverts = [];\r\n\r\n\t\tfor ( h = 0; h < holes.length; h ++ ) {\r\n\r\n\t\t\thole = holes[ h ];\r\n\r\n\t\t\t/*\r\n\t\t\tshapeholes[ h ].concat(); // preserves original\r\n\t\t\tholes.push( hole );\r\n\t\t\t*/\r\n\r\n\t\t\tArray.prototype.push.apply( allpoints, hole );\r\n\r\n\t\t\tshortest = Number.POSITIVE_INFINITY;\r\n\r\n\r\n\t\t\t// Find the shortest pair of pts between shape and hole\r\n\r\n\t\t\t// Note: Actually, I'm not sure now if we could optimize this to be faster than O(m*n)\r\n\t\t\t// Using distanceToSquared() intead of distanceTo() should speed a little\r\n\t\t\t// since running square roots operations are reduced.\r\n\r\n\t\t\tfor ( h2 = 0; h2 < hole.length; h2 ++ ) {\r\n\r\n\t\t\t\tpts1 = hole[ h2 ];\r\n\t\t\t\tvar dist = [];\r\n\r\n\t\t\t\tfor ( p = 0; p < shape.length; p++ ) {\r\n\r\n\t\t\t\t\tpts2 = shape[ p ];\r\n\t\t\t\t\td = pts1.distanceToSquared( pts2 );\r\n\t\t\t\t\tdist.push( d );\r\n\r\n\t\t\t\t\tif ( d < shortest ) {\r\n\r\n\t\t\t\t\t\tshortest = d;\r\n\t\t\t\t\t\tholeIndex = h2;\r\n\t\t\t\t\t\tshapeIndex = p;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(\"shortest\", shortest, dist);\r\n\r\n\t\t\tprevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\r\n\t\t\tprevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\r\n\r\n\t\t\tvar areaapts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\tshape[ shapeIndex ],\r\n\t\t\t\tshape[ prevShapeVert ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areaa = THREE.FontUtils.Triangulate.area( areaapts );\r\n\r\n\t\t\tvar areabpts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\thole[ prevHoleVert ],\r\n\t\t\t\tshape[ shapeIndex ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areab = THREE.FontUtils.Triangulate.area( areabpts );\r\n\r\n\t\t\tvar shapeOffset = 1;\r\n\t\t\tvar holeOffset = -1;\r\n\r\n\t\t\tvar oldShapeIndex = shapeIndex, oldHoleIndex = holeIndex;\r\n\t\t\tshapeIndex += shapeOffset;\r\n\t\t\tholeIndex += holeOffset;\r\n\r\n\t\t\tif ( shapeIndex < 0 ) { shapeIndex += shape.length;  }\r\n\t\t\tshapeIndex %= shape.length;\r\n\r\n\t\t\tif ( holeIndex < 0 ) { holeIndex += hole.length;  }\r\n\t\t\tholeIndex %= hole.length;\r\n\r\n\t\t\tprevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\r\n\t\t\tprevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\r\n\r\n\t\t\tareaapts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\tshape[ shapeIndex ],\r\n\t\t\t\tshape[ prevShapeVert ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areaa2 = THREE.FontUtils.Triangulate.area( areaapts );\r\n\r\n\t\t\tareabpts = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\thole[ prevHoleVert ],\r\n\t\t\t\tshape[ shapeIndex ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar areab2 = THREE.FontUtils.Triangulate.area( areabpts );\r\n\t\t\t//console.log(areaa,areab ,areaa2,areab2, ( areaa + areab ),  ( areaa2 + areab2 ));\r\n\r\n\t\t\tif ( ( areaa + areab ) > ( areaa2 + areab2 ) ) {\r\n\r\n\t\t\t\t// In case areas are not correct.\r\n\t\t\t\t//console.log(\"USE THIS\");\r\n\r\n\t\t\t\tshapeIndex = oldShapeIndex;\r\n\t\t\t\tholeIndex = oldHoleIndex ;\r\n\r\n\t\t\t\tif ( shapeIndex < 0 ) { shapeIndex += shape.length;  }\r\n\t\t\t\tshapeIndex %= shape.length;\r\n\r\n\t\t\t\tif ( holeIndex < 0 ) { holeIndex += hole.length;  }\r\n\t\t\t\tholeIndex %= hole.length;\r\n\r\n\t\t\t\tprevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;\r\n\t\t\t\tprevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log(\"USE THAT \")\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttmpShape1 = shape.slice( 0, shapeIndex );\r\n\t\t\ttmpShape2 = shape.slice( shapeIndex );\r\n\t\t\ttmpHole1 = hole.slice( holeIndex );\r\n\t\t\ttmpHole2 = hole.slice( 0, holeIndex );\r\n\r\n\t\t\t// Should check orders here again?\r\n\r\n\t\t\tvar trianglea = [\r\n\r\n\t\t\t\thole[ holeIndex ],\r\n\t\t\t\tshape[ shapeIndex ],\r\n\t\t\t\tshape[ prevShapeVert ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tvar triangleb = [\r\n\r\n\t\t\t\thole[ holeIndex ] ,\r\n\t\t\t\thole[ prevHoleVert ],\r\n\t\t\t\tshape[ shapeIndex ]\r\n\r\n\t\t\t];\r\n\r\n\t\t\tverts.push( trianglea );\r\n\t\t\tverts.push( triangleb );\r\n\r\n\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tshape:shape, \t\t/* shape with no holes */\r\n\t\t\tisolatedPts: verts, /* isolated faces */\r\n\t\t\tallpoints: allpoints\r\n\r\n\t\t}\r\n\r\n\r\n\t},\r\n\r\n\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\tvar shapeWithoutHoles = THREE.Shape.Utils.removeHoles( contour, holes );\r\n\r\n\t\tvar shape = shapeWithoutHoles.shape,\r\n\t\t\tallpoints = shapeWithoutHoles.allpoints,\r\n\t\t\tisolatedPts = shapeWithoutHoles.isolatedPts;\r\n\r\n\t\tvar triangles = THREE.FontUtils.Triangulate( shape, false ); // True returns indices for points of spooled shape\r\n\r\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\r\n\r\n\t\t//console.log( \"triangles\",triangles, triangles.length );\r\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\r\n\r\n\t\tvar i, il, f, face,\r\n\t\t\tkey, index,\r\n\t\t\tallPointsMap = {},\r\n\t\t\tisolatedPointsMap = {};\r\n\r\n\t\t// prepare all points map\r\n\r\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\r\n\r\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\r\n\r\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.log( \"Duplicate point\", key );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tallPointsMap[ key ] = i;\r\n\r\n\t\t}\r\n\r\n\t\t// check all face vertices against all points map\r\n\r\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = triangles[ i ];\r\n\r\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\r\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\r\n\t\t\t\tindex = allPointsMap[ key ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tface[ f ] = index;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check isolated points vertices against all points map\r\n\r\n\t\tfor ( i = 0, il = isolatedPts.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = isolatedPts[ i ];\r\n\r\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\r\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\r\n\t\t\t\tindex = allPointsMap[ key ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tface[ f ] = index;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn triangles.concat( isolatedPts );\r\n\r\n\t}, // end triangulate shapes\r\n\r\n\t/*\r\n\ttriangulate2 : function( pts, holes ) {\r\n\r\n\t\t// For use with Poly2Tri.js\r\n\r\n\t\tvar allpts = pts.concat();\r\n\t\tvar shape = [];\r\n\t\tfor (var p in pts) {\r\n\t\t\tshape.push(new js.poly2tri.Point(pts[p].x, pts[p].y));\r\n\t\t}\r\n\r\n\t\tvar swctx = new js.poly2tri.SweepContext(shape);\r\n\r\n\t\tfor (var h in holes) {\r\n\t\t\tvar aHole = holes[h];\r\n\t\t\tvar newHole = []\r\n\t\t\tfor (i in aHole) {\r\n\t\t\t\tnewHole.push(new js.poly2tri.Point(aHole[i].x, aHole[i].y));\r\n\t\t\t\tallpts.push(aHole[i]);\r\n\t\t\t}\r\n\t\t\tswctx.AddHole(newHole);\r\n\t\t}\r\n\r\n\t\tvar find;\r\n\t\tvar findIndexForPt = function (pt) {\r\n\t\t\tfind = new THREE.Vector2(pt.x, pt.y);\r\n\t\t\tvar p;\r\n\t\t\tfor (p=0, pl = allpts.length; p<pl; p++) {\r\n\t\t\t\tif (allpts[p].equals(find)) return p;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t// triangulate\r\n\t\tjs.poly2tri.sweep.Triangulate(swctx);\r\n\r\n\t\tvar triangles =  swctx.GetTriangles();\r\n\t\tvar tr ;\r\n\t\tvar facesPts = [];\r\n\t\tfor (var t in triangles) {\r\n\t\t\ttr =  triangles[t];\r\n\t\t\tfacesPts.push([\r\n\t\t\t\tfindIndexForPt(tr.GetPoint(0)),\r\n\t\t\t\tfindIndexForPt(tr.GetPoint(1)),\r\n\t\t\t\tfindIndexForPt(tr.GetPoint(2))\r\n\t\t\t\t\t]);\r\n\t\t}\r\n\r\n\r\n\t//\tconsole.log(facesPts);\r\n\t//\tconsole.log(\"triangles\", triangles.length, triangles);\r\n\r\n\t\t// Returns array of faces with 3 element each\r\n\treturn facesPts;\r\n\t},\r\n*/\r\n\r\n\tisClockWise: function ( pts ) {\r\n\r\n\t\treturn THREE.FontUtils.Triangulate.area( pts ) < 0;\r\n\r\n\t},\r\n\r\n\t// Bezier Curves formulas obtained from\r\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n\r\n\t// Quad Bezier Functions\r\n\r\n\tb2p0: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * p;\r\n\r\n\t},\r\n\r\n\tb2p1: function ( t, p ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t},\r\n\r\n\tb2p2: function ( t, p ) {\r\n\r\n\t\treturn t * t * p;\r\n\r\n\t},\r\n\r\n\tb2: function ( t, p0, p1, p2 ) {\r\n\r\n\t\treturn this.b2p0( t, p0 ) + this.b2p1( t, p1 ) + this.b2p2( t, p2 );\r\n\r\n\t},\r\n\r\n\t// Cubic Bezier Functions\r\n\r\n\tb3p0: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * k * p;\r\n\r\n\t},\r\n\r\n\tb3p1: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn 3 * k * k * t * p;\r\n\r\n\t},\r\n\r\n\tb3p2: function ( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn 3 * k * t * t * p;\r\n\r\n\t},\r\n\r\n\tb3p3: function ( t, p ) {\r\n\r\n\t\treturn t * t * t * p;\r\n\r\n\t},\r\n\r\n\tb3: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn this.b3p0( t, p0 ) + this.b3p1( t, p1 ) + this.b3p2( t, p2 ) +  this.b3p3( t, p3 );\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\nTHREE.AnimationHandler = (function() {\r\n\r\n\tvar playing = [];\r\n\tvar library = {};\r\n\tvar that    = {};\r\n\r\n\r\n\t//--- update ---\r\n\r\n\tthat.update = function( deltaTimeMS ) {\r\n\r\n\t\tfor( var i = 0; i < playing.length; i ++ )\r\n\t\t\tplaying[ i ].update( deltaTimeMS );\r\n\r\n\t};\r\n\r\n\r\n\t//--- add ---\r\n\r\n\tthat.addToUpdate = function( animation ) {\r\n\r\n\t\tif ( playing.indexOf( animation ) === -1 )\r\n\t\t\tplaying.push( animation );\r\n\r\n\t};\r\n\r\n\r\n\t//--- remove ---\r\n\r\n\tthat.removeFromUpdate = function( animation ) {\r\n\r\n\t\tvar index = playing.indexOf( animation );\r\n\r\n\t\tif( index !== -1 )\r\n\t\t\tplaying.splice( index, 1 );\r\n\r\n\t};\r\n\r\n\r\n\t//--- add ---\r\n\r\n\tthat.add = function( data ) {\r\n\r\n\t\tif ( library[ data.name ] !== undefined )\r\n\t\t\tconsole.log( \"THREE.AnimationHandler.add: Warning! \" + data.name + \" already exists in library. Overwriting.\" );\r\n\r\n\t\tlibrary[ data.name ] = data;\r\n\t\tinitData( data );\r\n\r\n\t};\r\n\r\n\r\n\t//--- get ---\r\n\r\n\tthat.get = function( name ) {\r\n\r\n\t\tif ( typeof name === \"string\" ) {\r\n\r\n\t\t\tif ( library[ name ] ) {\r\n\r\n\t\t\t\treturn library[ name ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.log( \"THREE.AnimationHandler.get: Couldn't find animation \" + name );\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// todo: add simple tween library\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//--- parse ---\r\n\r\n\tthat.parse = function( root ) {\r\n\r\n\t\t// setup hierarchy\r\n\r\n\t\tvar hierarchy = [];\r\n\r\n\t\tif ( root instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\tfor( var b = 0; b < root.bones.length; b++ ) {\r\n\r\n\t\t\t\thierarchy.push( root.bones[ b ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tparseRecurseHierarchy( root, hierarchy );\r\n\r\n\t\t}\r\n\r\n\t\treturn hierarchy;\r\n\r\n\t};\r\n\r\n\tvar parseRecurseHierarchy = function( root, hierarchy ) {\r\n\r\n\t\thierarchy.push( root );\r\n\r\n\t\tfor( var c = 0; c < root.children.length; c++ )\r\n\t\t\tparseRecurseHierarchy( root.children[ c ], hierarchy );\r\n\r\n\t}\r\n\r\n\r\n\t//--- init data ---\r\n\r\n\tvar initData = function( data ) {\r\n\r\n\t\tif( data.initialized === true )\r\n\t\t\treturn;\r\n\r\n\r\n\t\t// loop through all keys\r\n\r\n\t\tfor( var h = 0; h < data.hierarchy.length; h ++ ) {\r\n\r\n\t\t\tfor( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\t// remove minus times\r\n\r\n\t\t\t\tif( data.hierarchy[ h ].keys[ k ].time < 0 )\r\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].time = 0;\r\n\r\n\r\n\t\t\t\t// create quaternions\r\n\r\n\t\t\t\tif( data.hierarchy[ h ].keys[ k ].rot !== undefined &&\r\n\t\t\t\t !( data.hierarchy[ h ].keys[ k ].rot instanceof THREE.Quaternion ) ) {\r\n\r\n\t\t\t\t\tvar quat = data.hierarchy[ h ].keys[ k ].rot;\r\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].rot = new THREE.Quaternion( quat[0], quat[1], quat[2], quat[3] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// prepare morph target keys\r\n\r\n\t\t\tif( data.hierarchy[ h ].keys.length && data.hierarchy[ h ].keys[ 0 ].morphTargets !== undefined ) {\r\n\r\n\t\t\t\t// get all used\r\n\r\n\t\t\t\tvar usedMorphTargets = {};\r\n\r\n\t\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\t\tfor ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphTargetName = data.hierarchy[ h ].keys[ k ].morphTargets[ m ];\r\n\t\t\t\t\t\tusedMorphTargets[ morphTargetName ] = -1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdata.hierarchy[ h ].usedMorphTargets = usedMorphTargets;\r\n\r\n\r\n\t\t\t\t// set all used on all frames\r\n\r\n\t\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\t\tvar influences = {};\r\n\r\n\t\t\t\t\tfor ( var morphTargetName in usedMorphTargets ) {\r\n\r\n\t\t\t\t\t\tfor ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( data.hierarchy[ h ].keys[ k ].morphTargets[ m ] === morphTargetName ) {\r\n\r\n\t\t\t\t\t\t\t\tinfluences[ morphTargetName ] = data.hierarchy[ h ].keys[ k ].morphTargetsInfluences[ m ];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( m === data.hierarchy[ h ].keys[ k ].morphTargets.length ) {\r\n\r\n\t\t\t\t\t\t\tinfluences[ morphTargetName ] = 0;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].morphTargetsInfluences = influences;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// remove all keys that are on the same time\r\n\r\n\t\t\tfor ( var k = 1; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\tif ( data.hierarchy[ h ].keys[ k ].time === data.hierarchy[ h ].keys[ k - 1 ].time ) {\r\n\r\n\t\t\t\t\tdata.hierarchy[ h ].keys.splice( k, 1 );\r\n\t\t\t\t\tk --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// set index\r\n\r\n\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\r\n\r\n\t\t\t\tdata.hierarchy[ h ].keys[ k ].index = k;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// JIT\r\n\r\n\t\tvar lengthInFrames = parseInt( data.length * data.fps, 10 );\r\n\r\n\t\tdata.JIT = {};\r\n\t\tdata.JIT.hierarchy = [];\r\n\r\n\t\tfor( var h = 0; h < data.hierarchy.length; h ++ )\r\n\t\t\tdata.JIT.hierarchy.push( new Array( lengthInFrames ) );\r\n\r\n\r\n\t\t// done\r\n\r\n\t\tdata.initialized = true;\r\n\r\n\t};\r\n\r\n\r\n\t// interpolation types\r\n\r\n\tthat.LINEAR = 0;\r\n\tthat.CATMULLROM = 1;\r\n\tthat.CATMULLROM_FORWARD = 2;\r\n\r\n\treturn that;\r\n\r\n}());\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Animation = function ( root, name, interpolationType ) {\r\n\r\n\tthis.root = root;\r\n\tthis.data = THREE.AnimationHandler.get( name );\r\n\tthis.hierarchy = THREE.AnimationHandler.parse( root );\r\n\r\n\tthis.currentTime = 0;\r\n\tthis.timeScale = 1;\r\n\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused = true;\r\n\tthis.loop = true;\r\n\r\n\tthis.interpolationType = interpolationType !== undefined ? interpolationType : THREE.AnimationHandler.LINEAR;\r\n\r\n\tthis.points = [];\r\n\tthis.target = new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Animation.prototype.play = function ( loop, startTimeMS ) {\r\n\r\n\tif ( this.isPlaying === false ) {\r\n\r\n\t\tthis.isPlaying = true;\r\n\t\tthis.loop = loop !== undefined ? loop : true;\r\n\t\tthis.currentTime = startTimeMS !== undefined ? startTimeMS : 0;\r\n\r\n\t\t// reset key cache\r\n\r\n\t\tvar h, hl = this.hierarchy.length,\r\n\t\t\tobject;\r\n\r\n\t\tfor ( h = 0; h < hl; h ++ ) {\r\n\r\n\t\t\tobject = this.hierarchy[ h ];\r\n\r\n\t\t\tif ( this.interpolationType !== THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.matrixAutoUpdate = true;\r\n\r\n\t\t\tif ( object.animationCache === undefined ) {\r\n\r\n\t\t\t\tobject.animationCache = {};\r\n\t\t\t\tobject.animationCache.prevKey = { pos: 0, rot: 0, scl: 0 };\r\n\t\t\t\tobject.animationCache.nextKey = { pos: 0, rot: 0, scl: 0 };\r\n\t\t\t\tobject.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar prevKey = object.animationCache.prevKey;\r\n\t\t\tvar nextKey = object.animationCache.nextKey;\r\n\r\n\t\t\tprevKey.pos = this.data.hierarchy[ h ].keys[ 0 ];\r\n\t\t\tprevKey.rot = this.data.hierarchy[ h ].keys[ 0 ];\r\n\t\t\tprevKey.scl = this.data.hierarchy[ h ].keys[ 0 ];\r\n\r\n\t\t\tnextKey.pos = this.getNextKeyWith( \"pos\", h, 1 );\r\n\t\t\tnextKey.rot = this.getNextKeyWith( \"rot\", h, 1 );\r\n\t\t\tnextKey.scl = this.getNextKeyWith( \"scl\", h, 1 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.update( 0 );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = false;\r\n\r\n\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n};\r\n\r\n\r\nTHREE.Animation.prototype.pause = function() {\r\n\r\n\tif ( this.isPaused === true ) {\r\n\r\n\t\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n\t} else {\r\n\r\n\t\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = !this.isPaused;\r\n\r\n};\r\n\r\n\r\nTHREE.Animation.prototype.stop = function() {\r\n\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused  = false;\r\n\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n};\r\n\r\n\r\nTHREE.Animation.prototype.update = function ( deltaTimeMS ) {\r\n\r\n\t// early out\r\n\r\n\tif ( this.isPlaying === false ) return;\r\n\r\n\r\n\t// vars\r\n\r\n\tvar types = [ \"pos\", \"rot\", \"scl\" ];\r\n\tvar type;\r\n\tvar scale;\r\n\tvar vector;\r\n\tvar prevXYZ, nextXYZ;\r\n\tvar prevKey, nextKey;\r\n\tvar object;\r\n\tvar animationCache;\r\n\tvar frame;\r\n\tvar JIThierarchy = this.data.JIT.hierarchy;\r\n\tvar currentTime, unloopedCurrentTime;\r\n\tvar currentPoint, forwardPoint, angle;\r\n\r\n\r\n\tthis.currentTime += deltaTimeMS * this.timeScale;\r\n\r\n\tunloopedCurrentTime = this.currentTime;\r\n\tcurrentTime = this.currentTime = this.currentTime % this.data.length;\r\n\tframe = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );\r\n\r\n\r\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {\r\n\r\n\t\tobject = this.hierarchy[ h ];\r\n\t\tanimationCache = object.animationCache;\r\n\r\n\t\t// loop through pos/rot/scl\r\n\r\n\t\tfor ( var t = 0; t < 3; t ++ ) {\r\n\r\n\t\t\t// get keys\r\n\r\n\t\t\ttype    = types[ t ];\r\n\t\t\tprevKey = animationCache.prevKey[ type ];\r\n\t\t\tnextKey = animationCache.nextKey[ type ];\r\n\r\n\t\t\t// switch keys?\r\n\r\n\t\t\tif ( nextKey.time <= unloopedCurrentTime ) {\r\n\r\n\t\t\t\t// did we loop?\r\n\r\n\t\t\t\tif ( currentTime < unloopedCurrentTime ) {\r\n\r\n\t\t\t\t\tif ( this.loop ) {\r\n\r\n\t\t\t\t\t\tprevKey = this.data.hierarchy[ h ].keys[ 0 ];\r\n\t\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, 1 );\r\n\r\n\t\t\t\t\t\twhile( nextKey.time < currentTime ) {\r\n\r\n\t\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.stop();\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdo {\r\n\r\n\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );\r\n\r\n\t\t\t\t\t} while( nextKey.time < currentTime )\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimationCache.prevKey[ type ] = prevKey;\r\n\t\t\t\tanimationCache.nextKey[ type ] = nextKey;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tobject.matrixAutoUpdate = true;\r\n\t\t\tobject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\tscale = ( currentTime - prevKey.time ) / ( nextKey.time - prevKey.time );\r\n\t\t\tprevXYZ = prevKey[ type ];\r\n\t\t\tnextXYZ = nextKey[ type ];\r\n\r\n\r\n\t\t\t// check scale error\r\n\r\n\t\t\tif ( scale < 0 || scale > 1 ) {\r\n\r\n\t\t\t\tconsole.log( \"THREE.Animation.update: Warning! Scale out of bounds:\" + scale + \" on bone \" + h );\r\n\t\t\t\tscale = scale < 0 ? 0 : 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// interpolate\r\n\r\n\t\t\tif ( type === \"pos\" ) {\r\n\r\n\t\t\t\tvector = object.position;\r\n\r\n\t\t\t\tif ( this.interpolationType === THREE.AnimationHandler.LINEAR ) {\r\n\r\n\t\t\t\t\tvector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;\r\n\t\t\t\t\tvector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;\r\n\t\t\t\t\tvector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;\r\n\r\n\t\t\t\t} else if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\r\n\t\t\t\t\t\t    this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\t\t\t\tthis.points[ 0 ] = this.getPrevKeyWith( \"pos\", h, prevKey.index - 1 )[ \"pos\" ];\r\n\t\t\t\t\tthis.points[ 1 ] = prevXYZ;\r\n\t\t\t\t\tthis.points[ 2 ] = nextXYZ;\r\n\t\t\t\t\tthis.points[ 3 ] = this.getNextKeyWith( \"pos\", h, nextKey.index + 1 )[ \"pos\" ];\r\n\r\n\t\t\t\t\tscale = scale * 0.33 + 0.33;\r\n\r\n\t\t\t\t\tcurrentPoint = this.interpolateCatmullRom( this.points, scale );\r\n\r\n\t\t\t\t\tvector.x = currentPoint[ 0 ];\r\n\t\t\t\t\tvector.y = currentPoint[ 1 ];\r\n\t\t\t\t\tvector.z = currentPoint[ 2 ];\r\n\r\n\t\t\t\t\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\t\t\t\t\tforwardPoint = this.interpolateCatmullRom( this.points, scale * 1.01 );\r\n\r\n\t\t\t\t\t\tthis.target.set( forwardPoint[ 0 ], forwardPoint[ 1 ], forwardPoint[ 2 ] );\r\n\t\t\t\t\t\tthis.target.sub( vector );\r\n\t\t\t\t\t\tthis.target.y = 0;\r\n\t\t\t\t\t\tthis.target.normalize();\r\n\r\n\t\t\t\t\t\tangle = Math.atan2( this.target.x, this.target.z );\r\n\t\t\t\t\t\tobject.rotation.set( 0, angle, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( type === \"rot\" ) {\r\n\r\n\t\t\t\tTHREE.Quaternion.slerp( prevXYZ, nextXYZ, object.quaternion, scale );\r\n\r\n\t\t\t} else if ( type === \"scl\" ) {\r\n\r\n\t\t\t\tvector = object.scale;\r\n\r\n\t\t\t\tvector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;\r\n\t\t\t\tvector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;\r\n\t\t\t\tvector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Catmull-Rom spline\r\n\r\nTHREE.Animation.prototype.interpolateCatmullRom = function ( points, scale ) {\r\n\r\n\tvar c = [], v3 = [],\r\n\tpoint, intPoint, weight, w2, w3,\r\n\tpa, pb, pc, pd;\r\n\r\n\tpoint = ( points.length - 1 ) * scale;\r\n\tintPoint = Math.floor( point );\r\n\tweight = point - intPoint;\r\n\r\n\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\tc[ 1 ] = intPoint;\r\n\tc[ 2 ] = intPoint > points.length - 2 ? intPoint : intPoint + 1;\r\n\tc[ 3 ] = intPoint > points.length - 3 ? intPoint : intPoint + 2;\r\n\r\n\tpa = points[ c[ 0 ] ];\r\n\tpb = points[ c[ 1 ] ];\r\n\tpc = points[ c[ 2 ] ];\r\n\tpd = points[ c[ 3 ] ];\r\n\r\n\tw2 = weight * weight;\r\n\tw3 = weight * w2;\r\n\r\n\tv3[ 0 ] = this.interpolate( pa[ 0 ], pb[ 0 ], pc[ 0 ], pd[ 0 ], weight, w2, w3 );\r\n\tv3[ 1 ] = this.interpolate( pa[ 1 ], pb[ 1 ], pc[ 1 ], pd[ 1 ], weight, w2, w3 );\r\n\tv3[ 2 ] = this.interpolate( pa[ 2 ], pb[ 2 ], pc[ 2 ], pd[ 2 ], weight, w2, w3 );\r\n\r\n\treturn v3;\r\n\r\n};\r\n\r\nTHREE.Animation.prototype.interpolate = function ( p0, p1, p2, p3, t, t2, t3 ) {\r\n\r\n\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\r\n\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n};\r\n\r\n\r\n\r\n// Get next key with\r\n\r\nTHREE.Animation.prototype.getNextKeyWith = function ( type, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\r\n\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\r\n\t\t this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\tkey = key < keys.length - 1 ? key : keys.length - 1;\r\n\r\n\t} else {\r\n\r\n\t\tkey = key % keys.length;\r\n\r\n\t}\r\n\r\n\tfor ( ; key < keys.length; key++ ) {\r\n\r\n\t\tif ( keys[ key ][ type ] !== undefined ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn this.data.hierarchy[ h ].keys[ 0 ];\r\n\r\n};\r\n\r\n// Get previous key with\r\n\r\nTHREE.Animation.prototype.getPrevKeyWith = function ( type, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\r\n\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\r\n\t\t this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\r\n\r\n\t\tkey = key > 0 ? key : 0;\r\n\r\n\t} else {\r\n\r\n\t\tkey = key >= 0 ? key : key + keys.length;\r\n\r\n\t}\r\n\r\n\r\n\tfor ( ; key >= 0; key -- ) {\r\n\r\n\t\tif ( keys[ key ][ type ] !== undefined ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn this.data.hierarchy[ h ].keys[ keys.length - 1 ];\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author khang duong\r\n * @author erik kitson\r\n */\r\n\r\nTHREE.KeyFrameAnimation = function( root, data, JITCompile ) {\r\n\r\n\tthis.root = root;\r\n\tthis.data = THREE.AnimationHandler.get( data );\r\n\tthis.hierarchy = THREE.AnimationHandler.parse( root );\r\n\tthis.currentTime = 0;\r\n\tthis.timeScale = 0.001;\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused = true;\r\n\tthis.loop = true;\r\n\tthis.JITCompile = JITCompile !== undefined ? JITCompile : true;\r\n\r\n\t// initialize to first keyframes\r\n\r\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\r\n\r\n\t\tvar keys = this.data.hierarchy[h].keys,\r\n\t\t\tsids = this.data.hierarchy[h].sids,\r\n\t\t\tobj = this.hierarchy[h];\r\n\r\n\t\tif ( keys.length && sids ) {\r\n\r\n\t\t\tfor ( var s = 0; s < sids.length; s++ ) {\r\n\r\n\t\t\t\tvar sid = sids[ s ],\r\n\t\t\t\t\tnext = this.getNextKeyWith( sid, h, 0 );\r\n\r\n\t\t\t\tif ( next ) {\r\n\r\n\t\t\t\t\tnext.apply( sid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobj.matrixAutoUpdate = false;\r\n\t\t\tthis.data.hierarchy[h].node.updateMatrix();\r\n\t\t\tobj.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Play\r\n\r\nTHREE.KeyFrameAnimation.prototype.play = function( loop, startTimeMS ) {\r\n\r\n\tif( !this.isPlaying ) {\r\n\r\n\t\tthis.isPlaying = true;\r\n\t\tthis.loop = loop !== undefined ? loop : true;\r\n\t\tthis.currentTime = startTimeMS !== undefined ? startTimeMS : 0;\r\n\t\tthis.startTimeMs = startTimeMS;\r\n\t\tthis.startTime = 10000000;\r\n\t\tthis.endTime = -this.startTime;\r\n\r\n\r\n\t\t// reset key cache\r\n\r\n\t\tvar h, hl = this.hierarchy.length,\r\n\t\t\tobject,\r\n\t\t\tnode;\r\n\r\n\t\tfor ( h = 0; h < hl; h++ ) {\r\n\r\n\t\t\tobject = this.hierarchy[ h ];\r\n\t\t\tnode = this.data.hierarchy[ h ];\r\n\t\t\tobject.useQuaternion = true;\r\n\r\n\t\t\tif ( node.animationCache === undefined ) {\r\n\r\n\t\t\t\tnode.animationCache = {};\r\n\t\t\t\tnode.animationCache.prevKey = null;\r\n\t\t\t\tnode.animationCache.nextKey = null;\r\n\t\t\t\tnode.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar keys = this.data.hierarchy[h].keys;\r\n\r\n\t\t\tif (keys.length) {\r\n\r\n\t\t\t\tnode.animationCache.prevKey = keys[ 0 ];\r\n\t\t\t\tnode.animationCache.nextKey = keys[ 1 ];\r\n\r\n\t\t\t\tthis.startTime = Math.min( keys[0].time, this.startTime );\r\n\t\t\t\tthis.endTime = Math.max( keys[keys.length - 1].time, this.endTime );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.update( 0 );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = false;\r\n\r\n\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n};\r\n\r\n\r\n\r\n// Pause\r\n\r\nTHREE.KeyFrameAnimation.prototype.pause = function() {\r\n\r\n\tif( this.isPaused ) {\r\n\r\n\t\tTHREE.AnimationHandler.addToUpdate( this );\r\n\r\n\t} else {\r\n\r\n\t\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n\t}\r\n\r\n\tthis.isPaused = !this.isPaused;\r\n\r\n};\r\n\r\n\r\n// Stop\r\n\r\nTHREE.KeyFrameAnimation.prototype.stop = function() {\r\n\r\n\tthis.isPlaying = false;\r\n\tthis.isPaused  = false;\r\n\tTHREE.AnimationHandler.removeFromUpdate( this );\r\n\r\n\r\n\t// reset JIT matrix and remove cache\r\n\r\n\tfor ( var h = 0; h < this.data.hierarchy.length; h++ ) {\r\n        \r\n        var obj = this.hierarchy[ h ];\r\n\t\tvar node = this.data.hierarchy[ h ];\r\n\r\n\t\tif ( node.animationCache !== undefined ) {\r\n\r\n\t\t\tvar original = node.animationCache.originalMatrix;\r\n\r\n\t\t\tif( obj instanceof THREE.Bone ) {\r\n\r\n\t\t\t\toriginal.copy( obj.skinMatrix );\r\n\t\t\t\tobj.skinMatrix = original;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\toriginal.copy( obj.matrix );\r\n\t\t\t\tobj.matrix = original;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdelete node.animationCache;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// Update\r\n\r\nTHREE.KeyFrameAnimation.prototype.update = function( deltaTimeMS ) {\r\n\r\n\t// early out\r\n\r\n\tif( !this.isPlaying ) return;\r\n\r\n\r\n\t// vars\r\n\r\n\tvar prevKey, nextKey;\r\n\tvar object;\r\n\tvar node;\r\n\tvar frame;\r\n\tvar JIThierarchy = this.data.JIT.hierarchy;\r\n\tvar currentTime, unloopedCurrentTime;\r\n\tvar looped;\r\n\r\n\r\n\t// update\r\n\r\n\tthis.currentTime += deltaTimeMS * this.timeScale;\r\n\r\n\tunloopedCurrentTime = this.currentTime;\r\n\tcurrentTime         = this.currentTime = this.currentTime % this.data.length;\r\n\r\n\t// if looped around, the current time should be based on the startTime\r\n\tif ( currentTime < this.startTimeMs ) {\r\n\r\n\t\tcurrentTime = this.currentTime = this.startTimeMs + currentTime;\r\n\r\n\t}\r\n\r\n\tframe               = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );\r\n\tlooped \t\t\t\t= currentTime < unloopedCurrentTime;\r\n\r\n\tif ( looped && !this.loop ) {\r\n\r\n\t\t// Set the animation to the last keyframes and stop\r\n\t\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\r\n\r\n\t\t\tvar keys = this.data.hierarchy[h].keys,\r\n\t\t\t\tsids = this.data.hierarchy[h].sids,\r\n\t\t\t\tend = keys.length-1,\r\n\t\t\t\tobj = this.hierarchy[h];\r\n\r\n\t\t\tif ( keys.length ) {\r\n\r\n\t\t\t\tfor ( var s = 0; s < sids.length; s++ ) {\r\n\r\n\t\t\t\t\tvar sid = sids[ s ],\r\n\t\t\t\t\t\tprev = this.getPrevKeyWith( sid, h, end );\r\n\r\n\t\t\t\t\tif ( prev ) {\r\n\t\t\t\t\t\tprev.apply( sid );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.data.hierarchy[h].node.updateMatrix();\r\n\t\t\t\tobj.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.stop();\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\t// check pre-infinity\r\n\tif ( currentTime < this.startTime ) {\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\t// update\r\n\r\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {\r\n\r\n\t\tobject = this.hierarchy[ h ];\r\n\t\tnode = this.data.hierarchy[ h ];\r\n\r\n\t\tvar keys = node.keys,\r\n\t\t\tanimationCache = node.animationCache;\r\n\r\n\t\t// use JIT?\r\n\r\n\t\tif ( this.JITCompile && JIThierarchy[ h ][ frame ] !== undefined ) {\r\n\r\n\t\t\tif( object instanceof THREE.Bone ) {\r\n\r\n\t\t\t\tobject.skinMatrix = JIThierarchy[ h ][ frame ];\r\n\t\t\t\tobject.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tobject.matrix = JIThierarchy[ h ][ frame ];\r\n\t\t\t\tobject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t// use interpolation\r\n\r\n\t\t} else if ( keys.length ) {\r\n\r\n\t\t\t// make sure so original matrix and not JIT matrix is set\r\n\r\n\t\t\tif ( this.JITCompile && animationCache ) {\r\n\r\n\t\t\t\tif( object instanceof THREE.Bone ) {\r\n\r\n\t\t\t\t\tobject.skinMatrix = animationCache.originalMatrix;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tobject.matrix = animationCache.originalMatrix;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprevKey = animationCache.prevKey;\r\n\t\t\tnextKey = animationCache.nextKey;\r\n\r\n\t\t\tif ( prevKey && nextKey ) {\r\n\r\n\t\t\t\t// switch keys?\r\n\r\n\t\t\t\tif ( nextKey.time <= unloopedCurrentTime ) {\r\n\r\n\t\t\t\t\t// did we loop?\r\n\r\n\t\t\t\t\tif ( looped && this.loop ) {\r\n\r\n\t\t\t\t\t\tprevKey = keys[ 0 ];\r\n\t\t\t\t\t\tnextKey = keys[ 1 ];\r\n\r\n\t\t\t\t\t\twhile ( nextKey.time < currentTime ) {\r\n\r\n\t\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\t\tnextKey = keys[ prevKey.index + 1 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( !looped ) {\r\n\r\n\t\t\t\t\t\tvar lastIndex = keys.length - 1;\r\n\r\n\t\t\t\t\t\twhile ( nextKey.time < currentTime && nextKey.index !== lastIndex ) {\r\n\r\n\t\t\t\t\t\t\tprevKey = nextKey;\r\n\t\t\t\t\t\t\tnextKey = keys[ prevKey.index + 1 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tanimationCache.prevKey = prevKey;\r\n\t\t\t\t\tanimationCache.nextKey = nextKey;\r\n\r\n\t\t\t\t}\r\n                if(nextKey.time >= currentTime)\r\n                    prevKey.interpolate( nextKey, currentTime );\r\n                else\r\n                    prevKey.interpolate( nextKey, nextKey.time);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.data.hierarchy[h].node.updateMatrix();\r\n\t\t\tobject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// update JIT?\r\n\r\n\tif ( this.JITCompile ) {\r\n\r\n\t\tif ( JIThierarchy[ 0 ][ frame ] === undefined ) {\r\n\r\n\t\t\tthis.hierarchy[ 0 ].updateMatrixWorld( true );\r\n\r\n\t\t\tfor ( var h = 0; h < this.hierarchy.length; h++ ) {\r\n\r\n\t\t\t\tif( this.hierarchy[ h ] instanceof THREE.Bone ) {\r\n\r\n\t\t\t\t\tJIThierarchy[ h ][ frame ] = this.hierarchy[ h ].skinMatrix.clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tJIThierarchy[ h ][ frame ] = this.hierarchy[ h ].matrix.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Get next key with\r\n\r\nTHREE.KeyFrameAnimation.prototype.getNextKeyWith = function( sid, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\tkey = key % keys.length;\r\n\r\n\tfor ( ; key < keys.length; key++ ) {\r\n\r\n\t\tif ( keys[ key ].hasTarget( sid ) ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn keys[ 0 ];\r\n\r\n};\r\n\r\n// Get previous key with\r\n\r\nTHREE.KeyFrameAnimation.prototype.getPrevKeyWith = function( sid, h, key ) {\r\n\r\n\tvar keys = this.data.hierarchy[ h ].keys;\r\n\tkey = key >= 0 ? key : key + keys.length;\r\n\r\n\tfor ( ; key >= 0; key-- ) {\r\n\r\n\t\tif ( keys[ key ].hasTarget( sid ) ) {\r\n\r\n\t\t\treturn keys[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn keys[ keys.length - 1 ];\r\n\r\n};\r\n/**\r\n * Camera for rendering cube maps\r\n *\t- renders scene into axis-aligned cube\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tvar fov = 90, aspect = 1;\r\n\r\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPX.up.set( 0, -1, 0 );\r\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\r\n\tthis.add( cameraPX );\r\n\r\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNX.up.set( 0, -1, 0 );\r\n\tcameraNX.lookAt( new THREE.Vector3( -1, 0, 0 ) );\r\n\tthis.add( cameraNX );\r\n\r\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPY.up.set( 0, 0, 1 );\r\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\r\n\tthis.add( cameraPY );\r\n\r\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNY.up.set( 0, 0, -1 );\r\n\tcameraNY.lookAt( new THREE.Vector3( 0, -1, 0 ) );\r\n\tthis.add( cameraNY );\r\n\r\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPZ.up.set( 0, -1, 0 );\r\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\r\n\tthis.add( cameraPZ );\r\n\r\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNZ.up.set( 0, -1, 0 );\r\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, -1 ) );\r\n\tthis.add( cameraNZ );\r\n\r\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );\r\n\r\n\tthis.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tvar renderTarget = this.renderTarget;\r\n\t\tvar generateMipmaps = renderTarget.generateMipmaps;\r\n\r\n\t\trenderTarget.generateMipmaps = false;\r\n\r\n\t\trenderTarget.activeCubeFace = 0;\r\n\t\trenderer.render( scene, cameraPX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 1;\r\n\t\trenderer.render( scene, cameraNX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 2;\r\n\t\trenderer.render( scene, cameraPY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 3;\r\n\t\trenderer.render( scene, cameraNY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 4;\r\n\t\trenderer.render( scene, cameraPZ, renderTarget );\r\n\r\n\t\trenderTarget.generateMipmaps = generateMipmaps;\r\n\r\n\t\trenderTarget.activeCubeFace = 5;\r\n\t\trenderer.render( scene, cameraNZ, renderTarget );\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\r\n/*\r\n *\t@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog\r\n *\r\n *\tA general perpose camera, for setting FOV, Lens Focal Length,\r\n *\t\tand switching between perspective and orthographic views easily.\r\n *\t\tUse this only if you do not wish to manage\r\n *\t\tboth a Orthographic and Perspective Camera\r\n *\r\n */\r\n\r\n\r\nTHREE.CombinedCamera = function ( width, height, fov, near, far, orthoNear, orthoFar ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.fov = fov;\r\n\r\n\tthis.left = -width / 2;\r\n\tthis.right = width / 2\r\n\tthis.top = height / 2;\r\n\tthis.bottom = -height / 2;\r\n\r\n\t// We could also handle the projectionMatrix internally, but just wanted to test nested camera objects\r\n\r\n\tthis.cameraO = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, \torthoNear, orthoFar );\r\n\tthis.cameraP = new THREE.PerspectiveCamera( fov, width / height, near, far );\r\n\r\n\tthis.zoom = 1;\r\n\r\n\tthis.toPerspective();\r\n\r\n\tvar aspect = width/height;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\r\nTHREE.CombinedCamera.prototype.toPerspective = function () {\r\n\r\n\t// Switches to the Perspective Camera\r\n\r\n\tthis.near = this.cameraP.near;\r\n\tthis.far = this.cameraP.far;\r\n\r\n\tthis.cameraP.fov =  this.fov / this.zoom ;\r\n\r\n\tthis.cameraP.updateProjectionMatrix();\r\n\r\n\tthis.projectionMatrix = this.cameraP.projectionMatrix;\r\n\r\n\tthis.inPerspectiveMode = true;\r\n\tthis.inOrthographicMode = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toOrthographic = function () {\r\n\r\n\t// Switches to the Orthographic camera estimating viewport from Perspective\r\n\r\n\tvar fov = this.fov;\r\n\tvar aspect = this.cameraP.aspect;\r\n\tvar near = this.cameraP.near;\r\n\tvar far = this.cameraP.far;\r\n\r\n\t// The size that we set is the mid plane of the viewing frustum\r\n\r\n\tvar hyperfocus = ( near + far ) / 2;\r\n\r\n\tvar halfHeight = Math.tan( fov / 2 ) * hyperfocus;\r\n\tvar planeHeight = 2 * halfHeight;\r\n\tvar planeWidth = planeHeight * aspect;\r\n\tvar halfWidth = planeWidth / 2;\r\n\r\n\thalfHeight /= this.zoom;\r\n\thalfWidth /= this.zoom;\r\n\r\n\tthis.cameraO.left = -halfWidth;\r\n\tthis.cameraO.right = halfWidth;\r\n\tthis.cameraO.top = halfHeight;\r\n\tthis.cameraO.bottom = -halfHeight;\r\n\r\n\t// this.cameraO.left = -farHalfWidth;\r\n\t// this.cameraO.right = farHalfWidth;\r\n\t// this.cameraO.top = farHalfHeight;\r\n\t// this.cameraO.bottom = -farHalfHeight;\r\n\r\n\t// this.cameraO.left = this.left / this.zoom;\r\n\t// this.cameraO.right = this.right / this.zoom;\r\n\t// this.cameraO.top = this.top / this.zoom;\r\n\t// this.cameraO.bottom = this.bottom / this.zoom;\r\n\r\n\tthis.cameraO.updateProjectionMatrix();\r\n\r\n\tthis.near = this.cameraO.near;\r\n\tthis.far = this.cameraO.far;\r\n\tthis.projectionMatrix = this.cameraO.projectionMatrix;\r\n\r\n\tthis.inPerspectiveMode = false;\r\n\tthis.inOrthographicMode = true;\r\n\r\n};\r\n\r\n\r\nTHREE.CombinedCamera.prototype.setSize = function( width, height ) {\r\n\r\n\tthis.cameraP.aspect = width / height;\r\n\tthis.left = -width / 2;\r\n\tthis.right = width / 2\r\n\tthis.top = height / 2;\r\n\tthis.bottom = -height / 2;\r\n\r\n};\r\n\r\n\r\nTHREE.CombinedCamera.prototype.setFov = function( fov ) {\r\n\r\n\tthis.fov = fov;\r\n\r\n\tif ( this.inPerspectiveMode ) {\r\n\r\n\t\tthis.toPerspective();\r\n\r\n\t} else {\r\n\r\n\t\tthis.toOrthographic();\r\n\r\n\t}\r\n\r\n};\r\n\r\n// For mantaining similar API with PerspectiveCamera\r\n\r\nTHREE.CombinedCamera.prototype.updateProjectionMatrix = function() {\r\n\r\n\tif ( this.inPerspectiveMode ) {\r\n\r\n\t\tthis.toPerspective();\r\n\r\n\t} else {\r\n\r\n\t\tthis.toPerspective();\r\n\t\tthis.toOrthographic();\r\n\r\n\t}\r\n\r\n};\r\n\r\n/*\r\n* Uses Focal Length (in mm) to estimate and set FOV\r\n* 35mm (fullframe) camera is used if frame size is not specified;\r\n* Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\r\n*/\r\nTHREE.CombinedCamera.prototype.setLens = function ( focalLength, frameHeight ) {\r\n\r\n\tif ( frameHeight === undefined ) frameHeight = 24;\r\n\r\n\tvar fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\r\n\r\n\tthis.setFov( fov );\r\n\r\n\treturn fov;\r\n};\r\n\r\n\r\nTHREE.CombinedCamera.prototype.setZoom = function( zoom ) {\r\n\r\n\tthis.zoom = zoom;\r\n\r\n\tif ( this.inPerspectiveMode ) {\r\n\r\n\t\tthis.toPerspective();\r\n\r\n\t} else {\r\n\r\n\t\tthis.toOrthographic();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toFrontView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = 0;\r\n\tthis.rotation.z = 0;\r\n\r\n\t// should we be modifing the matrix instead?\r\n\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toBackView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = Math.PI;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toLeftView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = - Math.PI / 2;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toRightView = function() {\r\n\r\n\tthis.rotation.x = 0;\r\n\tthis.rotation.y = Math.PI / 2;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toTopView = function() {\r\n\r\n\tthis.rotation.x = - Math.PI / 2;\r\n\tthis.rotation.y = 0;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.CombinedCamera.prototype.toBottomView = function() {\r\n\r\n\tthis.rotation.x = Math.PI / 2;\r\n\tthis.rotation.y = 0;\r\n\tthis.rotation.z = 0;\r\n\tthis.rotationAutoUpdate = false;\r\n\r\n};\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- 3d asterisk shape (for line pieces THREE.Line)\r\n */\r\n\r\nTHREE.AsteriskGeometry = function ( innerRadius, outerRadius ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar sd = innerRadius;\r\n\tvar ed = outerRadius;\r\n\r\n\tvar sd2 = 0.707 * sd;\r\n\tvar ed2 = 0.707 * ed;\r\n\r\n\tvar rays = [ [ sd, 0, 0 ], [ ed, 0, 0 ], [ -sd, 0, 0 ], [ -ed, 0, 0 ],\r\n\t\t\t\t [ 0, sd, 0 ], [ 0, ed, 0 ], [ 0, -sd, 0 ], [ 0, -ed, 0 ],\r\n\t\t\t\t [ 0, 0, sd ], [ 0, 0, ed ], [ 0, 0, -sd ], [ 0, 0, -ed ],\r\n\t\t\t\t [ sd2, sd2, 0 ], [ ed2, ed2, 0 ], [ -sd2, -sd2, 0 ], [ -ed2, -ed2, 0 ],\r\n\t\t\t\t [ sd2, -sd2, 0 ], [ ed2, -ed2, 0 ], [ -sd2, sd2, 0 ], [ -ed2, ed2, 0 ],\r\n\t\t\t\t [ sd2, 0, sd2 ], [ ed2, 0, ed2 ], [ -sd2, 0, -sd2 ], [ -ed2, 0, -ed2 ],\r\n\t\t\t\t [ sd2, 0, -sd2 ], [ ed2, 0, -ed2 ], [ -sd2, 0, sd2 ], [ -ed2, 0, ed2 ],\r\n\t\t\t\t [ 0, sd2, sd2 ], [ 0, ed2, ed2 ], [ 0, -sd2, -sd2 ], [ 0, -ed2, -ed2 ],\r\n\t\t\t\t [ 0, sd2, -sd2 ], [ 0, ed2, -ed2 ], [ 0, -sd2, sd2 ], [ 0, -ed2, ed2 ]\r\n\t];\r\n\r\n\tfor ( var i = 0, il = rays.length; i < il; i ++ ) {\r\n\r\n\t\tvar x = rays[ i ][ 0 ];\r\n\t\tvar y = rays[ i ][ 1 ];\r\n\t\tvar z = rays[ i ][ 2 ];\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.AsteriskGeometry.prototype = Object.create( THREE.Geometry.prototype );/**\r\n * @author hughes\r\n */\r\n\r\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n    THREE.Geometry.call( this );\r\n\r\n    radius = radius || 50;\r\n\r\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n    segments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n    var i, uvs = [],\r\n    center = new THREE.Vector3(), centerUV = new THREE.Vector2( 0.5, 0.5 );\r\n\r\n    this.vertices.push(center);\r\n    uvs.push( centerUV );\r\n\r\n    for ( i = 0; i <= segments; i ++ ) {\r\n\r\n        var vertex = new THREE.Vector3();\r\n\r\n        vertex.x = radius * Math.cos( thetaStart + i / segments * thetaLength );\r\n        vertex.y = radius * Math.sin( thetaStart + i / segments * thetaLength );\r\n\r\n        this.vertices.push( vertex );\r\n        uvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, - ( vertex.y / radius + 1 ) / 2 + 1 ) );\r\n\r\n    }\r\n\r\n    var n = new THREE.Vector3( 0, 0, -1 );\r\n\r\n    for ( i = 1; i <= segments; i ++ ) {\r\n\r\n        var v1 = i;\r\n        var v2 = i + 1 ;\r\n        var v3 = 0;\r\n\r\n        this.faces.push( new THREE.Face3( v1, v2, v3, [ n, n, n ] ) );\r\n        this.faceVertexUvs[ 0 ].push( [ uvs[ i ], uvs[ i + 1 ], centerUV ] );\r\n\r\n    }\r\n\r\n    this.computeCentroids();\r\n    this.computeFaceNormals();\r\n\r\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\r\n */\r\n\r\nTHREE.CubeGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\tthis.depth = depth;\r\n\r\n\tthis.widthSegments = widthSegments || 1;\r\n\tthis.heightSegments = heightSegments || 1;\r\n\tthis.depthSegments = depthSegments || 1;\r\n\r\n\tvar width_half = this.width / 2;\r\n\tvar height_half = this.height / 2;\r\n\tvar depth_half = this.depth / 2;\r\n\r\n\tbuildPlane( 'z', 'y', - 1, - 1, this.depth, this.height, width_half, 0 ); // px\r\n\tbuildPlane( 'z', 'y',   1, - 1, this.depth, this.height, - width_half, 1 ); // nx\r\n\tbuildPlane( 'x', 'z',   1,   1, this.width, this.depth, height_half, 2 ); // py\r\n\tbuildPlane( 'x', 'z',   1, - 1, this.width, this.depth, - height_half, 3 ); // ny\r\n\tbuildPlane( 'x', 'y',   1, - 1, this.width, this.height, depth_half, 4 ); // pz\r\n\tbuildPlane( 'x', 'y', - 1, - 1, this.width, this.height, - depth_half, 5 ); // nz\r\n\r\n\tfunction buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {\r\n\r\n\t\tvar w, ix, iy,\r\n\t\tgridX = scope.widthSegments,\r\n\t\tgridY = scope.heightSegments,\r\n\t\twidth_half = width / 2,\r\n\t\theight_half = height / 2,\r\n\t\toffset = scope.vertices.length;\r\n\r\n\t\tif ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {\r\n\r\n\t\t\tw = 'z';\r\n\r\n\t\t} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {\r\n\r\n\t\t\tw = 'y';\r\n\t\t\tgridY = scope.depthSegments;\r\n\r\n\t\t} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {\r\n\r\n\t\t\tw = 'x';\r\n\t\t\tgridX = scope.depthSegments;\r\n\r\n\t\t}\r\n\r\n\t\tvar gridX1 = gridX + 1,\r\n\t\tgridY1 = gridY + 1,\r\n\t\tsegment_width = width / gridX,\r\n\t\tsegment_height = height / gridY,\r\n\t\tnormal = new THREE.Vector3();\r\n\r\n\t\tnormal[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar vector = new THREE.Vector3();\r\n\t\t\t\tvector[ u ] = ( ix * segment_width - width_half ) * udir;\r\n\t\t\t\tvector[ v ] = ( iy * segment_height - height_half ) * vdir;\r\n\t\t\t\tvector[ w ] = depth;\r\n\r\n\t\t\t\tscope.vertices.push( vector );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix++ ) {\r\n\r\n\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\tvar face = new THREE.Face4( a + offset, b + offset, c + offset, d + offset );\r\n\t\t\t\tface.normal.copy( normal );\r\n\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone(), normal.clone() );\r\n\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t\tscope.faces.push( face );\r\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - iy / gridY ),\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY ),\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1- ( iy + 1 ) / gridY ),\r\n\t\t\t\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY )\r\n\t\t\t\t\t\t] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.CubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\r\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\r\n\theight = height !== undefined ? height : 100;\r\n\r\n\tvar heightHalf = height / 2;\r\n\tvar segmentsX = radiusSegments || 8;\r\n\tvar segmentsY = heightSegments || 1;\r\n\r\n\tvar x, y, vertices = [], uvs = [];\r\n\r\n\tfor ( y = 0; y <= segmentsY; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\t\tvar uvsRow = [];\r\n\r\n\t\tvar v = y / segmentsY;\r\n\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\tfor ( x = 0; x <= segmentsX; x ++ ) {\r\n\r\n\t\t\tvar u = x / segmentsX;\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = radius * Math.sin( u * Math.PI * 2 );\r\n\t\t\tvertex.y = - v * height + heightHalf;\r\n\t\t\tvertex.z = radius * Math.cos( u * Math.PI * 2 );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tverticesRow.push( this.vertices.length - 1 );\r\n\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\t\tuvs.push( uvsRow );\r\n\r\n\t}\r\n\r\n\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\r\n\tvar na, nb;\r\n\r\n\tfor ( x = 0; x < segmentsX; x ++ ) {\r\n\r\n\t\tif ( radiusTop !== 0 ) {\r\n\r\n\t\t\tna = this.vertices[ vertices[ 0 ][ x ] ].clone();\r\n\t\t\tnb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tna = this.vertices[ vertices[ 1 ][ x ] ].clone();\r\n\t\t\tnb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tna.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();\r\n\t\tnb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();\r\n\r\n\t\tfor ( y = 0; y < segmentsY; y ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x ];\r\n\t\t\tvar v2 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x + 1 ];\r\n\t\t\tvar v4 = vertices[ y ][ x + 1 ];\r\n\r\n\t\t\tvar n1 = na.clone();\r\n\t\t\tvar n2 = na.clone();\r\n\t\t\tvar n3 = nb.clone();\r\n\t\t\tvar n4 = nb.clone();\r\n\r\n\t\t\tvar uv1 = uvs[ y ][ x ].clone();\r\n\t\t\tvar uv2 = uvs[ y + 1 ][ x ].clone();\r\n\t\t\tvar uv3 = uvs[ y + 1 ][ x + 1 ].clone();\r\n\t\t\tvar uv4 = uvs[ y ][ x + 1 ].clone();\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( v1, v2, v3, v4, [ n1, n2, n3, n4 ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3, uv4 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// top cap\r\n\r\n\tif ( !openEnded && radiusTop > 0 ) {\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );\r\n\r\n\t\tfor ( x = 0; x < segmentsX; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ 0 ][ x ];\r\n\t\t\tvar v2 = vertices[ 0 ][ x + 1 ];\r\n\t\t\tvar v3 = this.vertices.length - 1;\r\n\r\n\t\t\tvar n1 = new THREE.Vector3( 0, 1, 0 );\r\n\t\t\tvar n2 = new THREE.Vector3( 0, 1, 0 );\r\n\t\t\tvar n3 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\t\tvar uv1 = uvs[ 0 ][ x ].clone();\r\n\t\t\tvar uv2 = uvs[ 0 ][ x + 1 ].clone();\r\n\t\t\tvar uv3 = new THREE.Vector2( uv2.u, 0 );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// bottom cap\r\n\r\n\tif ( !openEnded && radiusBottom > 0 ) {\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );\r\n\r\n\t\tfor ( x = 0; x < segmentsX; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\tvar v3 = this.vertices.length - 1;\r\n\r\n\t\t\tvar n1 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\t\tvar n2 = new THREE.Vector3( 0, - 1, 0 );\r\n\t\t\tvar n3 = new THREE.Vector3( 0, - 1, 0 );\r\n\r\n\t\t\tvar uv1 = uvs[ y ][ x + 1 ].clone();\r\n\t\t\tvar uv2 = uvs[ y ][ x ].clone();\r\n\t\t\tvar uv3 = new THREE.Vector2( uv2.u, 1 );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n}\r\n\r\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n * Creates extruded geometry from a path shape.\r\n *\r\n * parameters = {\r\n *\r\n *  size: <float>, // size of the text\r\n *  height: <float>, // thickness to extrude text\r\n *  curveSegments: <int>, // number of points on the curves\r\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segements of extrude spline too\r\n *  amount: <int>, // Amount\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into text bevel goes\r\n *  bevelSize: <float>, // how far from text outline is bevel\r\n *  bevelSegments: <int>, // number of bevel layers\r\n *\r\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\r\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\r\n *\r\n *  material: <int> // material index for front and back faces\r\n *  extrudeMaterial: <int> // material index for extrusion and beveled faces\r\n *  uvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\r\n\r\n\tif ( typeof( shapes ) === \"undefined\" ) {\r\n\t\tshapes = [];\r\n\t\treturn;\r\n\t}\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tshapes = shapes instanceof Array ? shapes : [ shapes ];\r\n\r\n\tthis.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n\t// can't really use automatic vertex normals\r\n\t// as then front and back sides get smoothed too\r\n\t// should do separate smoothing just for sides\r\n\r\n\t//this.computeVertexNormals();\r\n\r\n\t//console.log( \"took\", ( Date.now() - startTime ) );\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\tvar sl = shapes.length;\r\n\r\n\tfor ( var s = 0; s < sl; s ++ ) {\r\n\t\tvar shape = shapes[ s ];\r\n\t\tthis.addShape( shape, options );\r\n\t}\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tvar amount = options.amount !== undefined ? options.amount : 100;\r\n\r\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\r\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\r\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\r\n\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\r\n\tvar extrudePath = options.extrudePath;\r\n\tvar extrudePts, extrudeByPath = false;\r\n\r\n\tvar material = options.material;\r\n\tvar extrudeMaterial = options.extrudeMaterial;\r\n\r\n\t// Use default WorldUVGenerator if no UV generators are specified.\r\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\r\n\r\n\tvar shapebb = this.shapebb;\r\n\t//shapebb = shape.getBoundingBox();\r\n\r\n\r\n\r\n\tvar splineTube, binormal, normal, position2;\r\n\tif ( extrudePath ) {\r\n\r\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\textrudeByPath = true;\r\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t// SETUP TNB variables\r\n\r\n\t\t// Reuse TNB from TubeGeomtry for now.\r\n\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);\r\n\r\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\tbinormal = new THREE.Vector3();\r\n\t\tnormal = new THREE.Vector3();\r\n\t\tposition2 = new THREE.Vector3();\r\n\r\n\t}\r\n\r\n\t// Safeguards if bevels are not enabled\r\n\r\n\tif ( ! bevelEnabled ) {\r\n\r\n\t\tbevelSegments = 0;\r\n\t\tbevelThickness = 0;\r\n\t\tbevelSize = 0;\r\n\r\n\t}\r\n\r\n\t// Variables initalization\r\n\r\n\tvar ahole, h, hl; // looping of holes\r\n\tvar scope = this;\r\n\tvar bevelPoints = [];\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = !THREE.Shape.Utils.isClockWise( vertices ) ;\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\r\n\r\n\t}\r\n\r\n\r\n\tvar faces = THREE.Shape.Utils.triangulateShape ( vertices, holes );\r\n\r\n\t/* Vertices */\r\n\r\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\tfor ( h = 0, hl = holes.length;  h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\tvertices = vertices.concat( ahole );\r\n\r\n\t}\r\n\r\n\r\n\tfunction scalePt2 ( pt, vec, size ) {\r\n\r\n\t\tif ( !vec ) console.log( \"die\" );\r\n\r\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t}\r\n\r\n\tvar b, bs, t, z,\r\n\t\tvert, vlen = vertices.length,\r\n\t\tface, flen = faces.length,\r\n\t\tcont, clen = contour.length;\r\n\r\n\r\n\t// Find directions for point movement\r\n\r\n\tvar RAD_TO_DEGREES = 180 / Math.PI;\r\n\r\n\r\n\tfunction getBevelVec( pt_i, pt_j, pt_k ) {\r\n\r\n\t\t// Algorithm 2\r\n\r\n\t\treturn getBevelVec2( pt_i, pt_j, pt_k );\r\n\r\n\t}\r\n\r\n\tfunction getBevelVec1( pt_i, pt_j, pt_k ) {\r\n\r\n\t\tvar anglea = Math.atan2( pt_j.y - pt_i.y, pt_j.x - pt_i.x );\r\n\t\tvar angleb = Math.atan2( pt_k.y - pt_i.y, pt_k.x - pt_i.x );\r\n\r\n\t\tif ( anglea > angleb ) {\r\n\r\n\t\t\tangleb += Math.PI * 2;\r\n\r\n\t\t}\r\n\r\n\t\tvar anglec = ( anglea + angleb ) / 2;\r\n\r\n\r\n\t\t//console.log('angle1', anglea * RAD_TO_DEGREES,'angle2', angleb * RAD_TO_DEGREES, 'anglec', anglec *RAD_TO_DEGREES);\r\n\r\n\t\tvar x = - Math.cos( anglec );\r\n\t\tvar y = - Math.sin( anglec );\r\n\r\n\t\tvar vec = new THREE.Vector2( x, y ); //.normalize();\r\n\r\n\t\treturn vec;\r\n\r\n\t}\r\n\r\n\tfunction getBevelVec2( pt_i, pt_j, pt_k ) {\r\n\r\n\t\tvar a = THREE.ExtrudeGeometry.__v1,\r\n\t\t\tb = THREE.ExtrudeGeometry.__v2,\r\n\t\t\tv_hat = THREE.ExtrudeGeometry.__v3,\r\n\t\t\tw_hat = THREE.ExtrudeGeometry.__v4,\r\n\t\t\tp = THREE.ExtrudeGeometry.__v5,\r\n\t\t\tq = THREE.ExtrudeGeometry.__v6,\r\n\t\t\tv, w,\r\n\t\t\tv_dot_w_hat, q_sub_p_dot_w_hat,\r\n\t\t\ts, intersection;\r\n\r\n\t\t// good reading for line-line intersection\r\n\t\t// http://sputsoft.com/blog/2010/03/line-line-intersection.html\r\n\r\n\t\t// define a as vector j->i\r\n\t\t// define b as vectot k->i\r\n\r\n\t\ta.set( pt_i.x - pt_j.x, pt_i.y - pt_j.y );\r\n\t\tb.set( pt_i.x - pt_k.x, pt_i.y - pt_k.y );\r\n\r\n\t\t// get unit vectors\r\n\r\n\t\tv = a.normalize();\r\n\t\tw = b.normalize();\r\n\r\n\t\t// normals from pt i\r\n\r\n\t\tv_hat.set( -v.y, v.x );\r\n\t\tw_hat.set( w.y, -w.x );\r\n\r\n\t\t// pts from i\r\n\r\n\t\tp.copy( pt_i ).add( v_hat );\r\n\t\tq.copy( pt_i ).add( w_hat );\r\n\r\n\t\tif ( p.equals( q ) ) {\r\n\r\n\t\t\t//console.log(\"Warning: lines are straight\");\r\n\t\t\treturn w_hat.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// Points from j, k. helps prevents points cross overover most of the time\r\n\r\n\t\tp.copy( pt_j ).add( v_hat );\r\n\t\tq.copy( pt_k ).add( w_hat );\r\n\r\n\t\tv_dot_w_hat = v.dot( w_hat );\r\n\t\tq_sub_p_dot_w_hat = q.sub( p ).dot( w_hat );\r\n\r\n\t\t// We should not reach these conditions\r\n\r\n\t\tif ( v_dot_w_hat === 0 ) {\r\n\r\n\t\t\tconsole.log( \"Either infinite or no solutions!\" );\r\n\r\n\t\t\tif ( q_sub_p_dot_w_hat === 0 ) {\r\n\r\n\t\t\t\tconsole.log( \"Its finite solutions.\" );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.log( \"Too bad, no solutions.\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\ts = q_sub_p_dot_w_hat / v_dot_w_hat;\r\n\r\n\t\tif ( s < 0 ) {\r\n\r\n\t\t\t// in case of emergecy, revert to algorithm 1.\r\n\r\n\t\t\treturn getBevelVec1( pt_i, pt_j, pt_k );\r\n\r\n\t\t}\r\n\r\n\t\tintersection = v.multiplyScalar( s ).add( p );\r\n\r\n\t\treturn intersection.sub( pt_i ).clone(); // Don't normalize!, otherwise sharp corners become ugly\r\n\r\n\t}\r\n\r\n\tvar contourMovements = [];\r\n\r\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\tif ( j === il ) j = 0;\r\n\t\tif ( k === il ) k = 0;\r\n\r\n\t\t//  (j)---(i)---(k)\r\n\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\tvar pt_i = contour[ i ];\r\n\t\tvar pt_j = contour[ j ];\r\n\t\tvar pt_k = contour[ k ];\r\n\r\n\t\tcontourMovements[ i ]= getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t}\r\n\r\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\toneHoleMovements = [];\r\n\r\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\tif ( j === il ) j = 0;\r\n\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t//  (j)---(i)---(k)\r\n\t\t\toneHoleMovements[ i ]= getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t}\r\n\r\n\t\tholesMovements.push( oneHoleMovements );\r\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t}\r\n\r\n\r\n\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\r\n\t\t//z = bevelThickness * t;\r\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI/2 ) ) ; // curved\r\n\t\t//bs = bevelSize * t ; // linear\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t//vert = scalePt( contour[ i ], contourCentroid, bs, false );\r\n\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\t\t\t\t//vert = scalePt( ahole[ i ], holesCentroids[ h ], bs, true );\r\n\r\n\t\t\t\tv( vert.x, vert.y,  -z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tbs = bevelSize;\r\n\r\n\t// Back facing vertices\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\tif ( !extrudeByPath ) {\r\n\r\n\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\tnormal.copy( splineTube.normals[0] ).multiplyScalar(vert.x);\r\n\t\t\tbinormal.copy( splineTube.binormals[0] ).multiplyScalar(vert.y);\r\n\r\n\t\t\tposition2.copy( extrudePts[0] ).add(normal).add(binormal);\r\n\r\n\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Add stepped vertices...\r\n\t// Including front facing vertices\r\n\r\n\tvar s;\r\n\r\n\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\tif ( !extrudeByPath ) {\r\n\r\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\tnormal.copy( splineTube.normals[s] ).multiplyScalar( vert.x );\r\n\t\t\t\tbinormal.copy( splineTube.binormals[s] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\tposition2.copy( extrudePts[s] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Add bevel segments planes\r\n\r\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\r\n\t\tbs = bevelSize * Math.sin ( t * Math.PI/2 ) ;\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tif ( !extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* Faces */\r\n\r\n\t// Top and bottom faces\r\n\r\n\tbuildLidFaces();\r\n\r\n\t// Sides faces\r\n\r\n\tbuildSideFaces();\r\n\r\n\r\n\t/////  Internal functions\r\n\r\n\tfunction buildLidFaces() {\r\n\r\n\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\tvar layer = 0 ; // steps + 1\r\n\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ]+ offset, face[ 1 ]+ offset, face[ 0 ] + offset, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset, false );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ], true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps, false );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Create faces for the z-sides of the shape\r\n\r\n\tfunction buildSideFaces() {\r\n\r\n\t\tvar layeroffset = 0;\r\n\t\tsidewalls( contour, layeroffset );\r\n\t\tlayeroffset += contour.length;\r\n\r\n\t\tfor ( h = 0, hl = holes.length;  h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t//, true\r\n\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\tvar j, k;\r\n\t\ti = contour.length;\r\n\r\n\t\twhile ( --i >= 0 ) {\r\n\r\n\t\t\tj = i;\r\n\t\t\tk = i - 1;\r\n\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\r\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\r\n\r\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction v( x, y, z ) {\r\n\r\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\r\n\t}\r\n\r\n\tfunction f3( a, b, c, isBottom ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\r\n\t\t// normal, color, material\r\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\r\n\t\tvar uvs = isBottom ? uvgen.generateBottomUV( scope, shape, options, a, b, c ) : uvgen.generateTopUV( scope, shape, options, a, b, c );\r\n\r\n \t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\r\n\t}\r\n\r\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\t\td += shapesOffset;\r\n\r\n \t\tscope.faces.push( new THREE.Face4( a, b, c, d, null, null, extrudeMaterial ) );\r\n\r\n \t\tvar uvs = uvgen.generateSideWallUV( scope, shape, wallContour, options, a, b, c, d,\r\n \t\t                                    stepIndex, stepsLength, contourIndex1, contourIndex2 );\r\n \t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\r\n\r\n\tgenerateTopUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {\r\n\t\tvar ax = geometry.vertices[ indexA ].x,\r\n\t\t\tay = geometry.vertices[ indexA ].y,\r\n\r\n\t\t\tbx = geometry.vertices[ indexB ].x,\r\n\t\t\tby = geometry.vertices[ indexB ].y,\r\n\r\n\t\t\tcx = geometry.vertices[ indexC ].x,\r\n\t\t\tcy = geometry.vertices[ indexC ].y;\r\n\r\n\t\treturn [\r\n\t\t\tnew THREE.Vector2( ax, ay ),\r\n\t\t\tnew THREE.Vector2( bx, by ),\r\n\t\t\tnew THREE.Vector2( cx, cy )\r\n\t\t];\r\n\r\n\t},\r\n\r\n\tgenerateBottomUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {\r\n\r\n\t\treturn this.generateTopUV( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC );\r\n\r\n\t},\r\n\r\n\tgenerateSideWallUV: function( geometry, extrudedShape, wallContour, extrudeOptions,\r\n\t                              indexA, indexB, indexC, indexD, stepIndex, stepsLength,\r\n\t                              contourIndex1, contourIndex2 ) {\r\n\r\n\t\tvar ax = geometry.vertices[ indexA ].x,\r\n\t\t\tay = geometry.vertices[ indexA ].y,\r\n\t\t\taz = geometry.vertices[ indexA ].z,\r\n\r\n\t\t\tbx = geometry.vertices[ indexB ].x,\r\n\t\t\tby = geometry.vertices[ indexB ].y,\r\n\t\t\tbz = geometry.vertices[ indexB ].z,\r\n\r\n\t\t\tcx = geometry.vertices[ indexC ].x,\r\n\t\t\tcy = geometry.vertices[ indexC ].y,\r\n\t\t\tcz = geometry.vertices[ indexC ].z,\r\n\r\n\t\t\tdx = geometry.vertices[ indexD ].x,\r\n\t\t\tdy = geometry.vertices[ indexD ].y,\r\n\t\t\tdz = geometry.vertices[ indexD ].z;\r\n\r\n\t\tif ( Math.abs( ay - by ) < 0.01 ) {\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( ax, 1 - az ),\r\n\t\t\t\tnew THREE.Vector2( bx, 1 - bz ),\r\n\t\t\t\tnew THREE.Vector2( cx, 1 - cz ),\r\n\t\t\t\tnew THREE.Vector2( dx, 1 - dz )\r\n\t\t\t];\r\n\t\t} else {\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( ay, 1 - az ),\r\n\t\t\t\tnew THREE.Vector2( by, 1 - bz ),\r\n\t\t\t\tnew THREE.Vector2( cy, 1 - cz ),\r\n\t\t\t\tnew THREE.Vector2( dy, 1 - dz )\r\n\t\t\t];\r\n\t\t}\r\n\t}\r\n};\r\n\r\nTHREE.ExtrudeGeometry.__v1 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v2 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v3 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v4 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v5 = new THREE.Vector2();\r\nTHREE.ExtrudeGeometry.__v6 = new THREE.Vector2();\r\n/**\r\n * @author jonobr1 / http://jonobr1.com\r\n *\r\n * Creates a one-sided polygonal geometry from a path shape. Similar to\r\n * ExtrudeGeometry.\r\n *\r\n * parameters = {\r\n *\r\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\r\n *\r\n *\tmaterial: <int> // material index for front and back faces\r\n *\tuvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ShapeGeometry = function ( shapes, options ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tif ( shapes instanceof Array === false ) shapes = [ shapes ];\r\n\r\n\tthis.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n};\r\n\r\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\r\n/**\r\n * Add an array of shapes to THREE.ShapeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tfor ( var i = 0, l = shapes.length; i < l; i++ ) {\r\n\r\n\t\tthis.addShape( shapes[ i ], options );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n/**\r\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tif ( options === undefined ) options = {};\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar material = options.material;\r\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\r\n\r\n\tvar shapebb = this.shapebb;\r\n\r\n\t//\r\n\r\n\tvar i, l, hole, s;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = !THREE.Shape.Utils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\r\n\r\n\t\tfor ( i = 0, l = holes.length; i < l; i++ ) {\r\n\r\n\t\t\thole = holes[ i ];\r\n\r\n\t\t\tif ( THREE.Shape.Utils.isClockWise( hole ) ) {\r\n\r\n\t\t\t\tholes[ i ] = hole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false;\r\n\r\n\t}\r\n\r\n\tvar faces = THREE.Shape.Utils.triangulateShape( vertices, holes );\r\n\r\n\t// Vertices\r\n\r\n\tvar contour = vertices;\r\n\r\n\tfor ( i = 0, l = holes.length; i < l; i++ ) {\r\n\r\n\t\thole = holes[ i ];\r\n\t\tvertices = vertices.concat( hole );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar vert, vlen = vertices.length;\r\n\tvar face, flen = faces.length;\r\n\tvar cont, clen = contour.length;\r\n\r\n\tfor ( i = 0; i < vlen; i++ ) {\r\n\r\n\t\tvert = vertices[ i ];\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\r\n\r\n\t}\r\n\r\n\tfor ( i = 0; i < flen; i++ ) {\r\n\r\n\t\tface = faces[ i ];\r\n\r\n\t\tvar a = face[ 0 ] + shapesOffset;\r\n\t\tvar b = face[ 1 ] + shapesOffset;\r\n\t\tvar c = face[ 2 ] + shapesOffset;\r\n\r\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateBottomUV( this, shape, options, a, b, c ) );\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author astrodud / http://astrodud.isgreat.org/\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / http://exocortex.com\r\n */\r\n\r\n// points - to create a closed torus, one must use a set of points \r\n//    like so: [ a, b, c, d, a ], see first is the same as last.\r\n// segments - the number of circumference segments to create\r\n// phiStart - the starting radian\r\n// phiLength - the radian (0 to 2*PI) range of the lathed section\r\n//    2*pi is a closed lathe, less than 2PI is a portion.\r\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tsegments = segments || 12;\r\n\tphiStart = phiStart || 0;\r\n\tphiLength = phiLength || 2 * Math.PI;\r\n\r\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\r\n\tvar inverseSegments = 1.0 / segments;\r\n\r\n\tfor ( var i = 0, il = segments; i <= il; i ++ ) {\r\n\r\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\tvar c = Math.cos( phi ),\r\n\t\t\ts = Math.sin( phi );\r\n\r\n\t\tfor ( var j = 0, jl = points.length; j < jl; j ++ ) {\r\n\r\n\t\t\tvar pt = points[ j ];\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\r\n\t\t\tvertex.x = c * pt.x - s * pt.y;\r\n\t\t\tvertex.y = s * pt.x + c * pt.y;\r\n\t\t\tvertex.z = pt.z;\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar np = points.length;\r\n\r\n\tfor ( var i = 0, il = segments; i < il; i ++ ) {\r\n\r\n\t\tfor ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {\r\n\r\n\t\t\tvar base = j + np * i;\r\n\t\t\tvar a = base;\r\n\t\t\tvar b = base + np;\r\n\t\t\tvar c = base + 1 + np;\r\n\t\t\tvar d = base + 1;\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( a, b, c, d ) );\r\n\r\n\t\t\tvar u0 = i * inverseSegments;\r\n\t\t\tvar v0 = j * inversePointLength;\r\n\t\t\tvar u1 = u0 + inverseSegments;\r\n\t\t\tvar v1 = v0 + inversePointLength;\r\n\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\r\n\t\t\t\tnew THREE.Vector2( u0, v0 ), \r\n\t\t\t\tnew THREE.Vector2( u1, v0 ),\r\n\t\t\t\tnew THREE.Vector2( u1, v1 ),\r\n\t\t\t\tnew THREE.Vector2( u0, v1 )\r\n\r\n\t\t\t] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.mergeVertices();\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.widthSegments = widthSegments || 1;\r\n\tthis.heightSegments = heightSegments || 1;\r\n\r\n\tvar ix, iz;\r\n\tvar width_half = width / 2;\r\n\tvar height_half = height / 2;\r\n\r\n\tvar gridX = this.widthSegments;\r\n\tvar gridZ = this.heightSegments;\r\n\r\n\tvar gridX1 = gridX + 1;\r\n\tvar gridZ1 = gridZ + 1;\r\n\r\n\tvar segment_width = this.width / gridX;\r\n\tvar segment_height = this.height / gridZ;\r\n\r\n\tvar normal = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\tfor ( iz = 0; iz < gridZ1; iz ++ ) {\r\n\r\n\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\tvar x = ix * segment_width - width_half;\r\n\t\t\tvar y = iz * segment_height - height_half;\r\n\r\n\t\t\tthis.vertices.push( new THREE.Vector3( x, - y, 0 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( iz = 0; iz < gridZ; iz ++ ) {\r\n\r\n\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\tvar a = ix + gridX1 * iz;\r\n\t\t\tvar b = ix + gridX1 * ( iz + 1 );\r\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iz + 1 );\r\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iz;\r\n\r\n\t\t\tvar face = new THREE.Face4( a, b, c, d );\r\n\t\t\tface.normal.copy( normal );\r\n\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone(), normal.clone() );\r\n\r\n\t\t\tthis.faces.push( face );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - iz / gridZ ),\r\n\t\t\t\tnew THREE.Vector2( ix / gridX, 1 - ( iz + 1 ) / gridZ ),\r\n\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iz + 1 ) / gridZ ),\r\n\t\t\t\tnew THREE.Vector2( ( ix + 1 ) / gridX, 1 - iz / gridZ )\r\n\t\t\t] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\r\n};\r\n\r\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.radius = radius || 50;\r\n\r\n\tthis.widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\tthis.heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\tvar x, y, vertices = [], uvs = [];\r\n\r\n\tfor ( y = 0; y <= this.heightSegments; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\t\tvar uvsRow = [];\r\n\r\n\t\tfor ( x = 0; x <= this.widthSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / this.widthSegments;\r\n\t\t\tvar v = y / this.heightSegments;\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = - this.radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\tvertex.y = this.radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\tvertex.z = this.radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tverticesRow.push( this.vertices.length - 1 );\r\n\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\t\tuvs.push( uvsRow );\r\n\r\n\t}\r\n\r\n\tfor ( y = 0; y < this.heightSegments; y ++ ) {\r\n\r\n\t\tfor ( x = 0; x < this.widthSegments; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\r\n\r\n\t\t\tvar n1 = this.vertices[ v1 ].clone().normalize();\r\n\t\t\tvar n2 = this.vertices[ v2 ].clone().normalize();\r\n\t\t\tvar n3 = this.vertices[ v3 ].clone().normalize();\r\n\t\t\tvar n4 = this.vertices[ v4 ].clone().normalize();\r\n\r\n\t\t\tvar uv1 = uvs[ y ][ x + 1 ].clone();\r\n\t\t\tvar uv2 = uvs[ y ][ x ].clone();\r\n\t\t\tvar uv3 = uvs[ y + 1 ][ x ].clone();\r\n\t\t\tvar uv4 = uvs[ y + 1 ][ x + 1 ].clone();\r\n\r\n\t\t\tif ( Math.abs( this.vertices[ v1 ].y ) === this.radius ) {\r\n\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v3, v4, [ n1, n3, n4 ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv3, uv4 ] );\r\n\r\n\t\t\t} else if ( Math.abs( this.vertices[ v3 ].y ) === this.radius ) {\r\n\r\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.faces.push( new THREE.Face4( v1, v2, v3, v4, [ n1, n2, n3, n4 ] ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3, uv4 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\r\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * For creating 3D text geometry in three.js\r\n *\r\n * Text = 3D Text\r\n *\r\n * parameters = {\r\n *  size: \t\t\t<float>, \t// size of the text\r\n *  height: \t\t<float>, \t// thickness to extrude text\r\n *  curveSegments: \t<int>,\t\t// number of points on the curves\r\n *\r\n *  font: \t\t\t<string>,\t\t// font name\r\n *  weight: \t\t<string>,\t\t// font weight (normal, bold)\r\n *  style: \t\t\t<string>,\t\t// font style  (normal, italics)\r\n *\r\n *  bevelEnabled:\t<bool>,\t\t\t// turn on bevel\r\n *  bevelThickness: <float>, \t\t// how deep into text bevel goes\r\n *  bevelSize:\t\t<float>, \t\t// how far from text outline is bevel\r\n *  }\r\n *\r\n */\r\n\r\n/*\tUsage Examples\r\n\r\n\t// TextGeometry wrapper\r\n\r\n\tvar text3d = new TextGeometry( text, options );\r\n\r\n\t// Complete manner\r\n\r\n\tvar textShapes = THREE.FontUtils.generateShapes( text, options );\r\n\tvar text3d = new ExtrudeGeometry( textShapes, options );\r\n\r\n*/\r\n\r\n\r\nTHREE.TextGeometry = function ( text, parameters ) {\r\n\r\n\tvar textShapes = THREE.FontUtils.generateShapes( text, parameters );\r\n\r\n\t// translate parameters to ExtrudeGeometry API\r\n\r\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t// defaults\r\n\r\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\r\n\tTHREE.ExtrudeGeometry.call( this, textShapes, parameters );\r\n\r\n};\r\n\r\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\r\n/**\r\n * @author oosmoxiecode\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\r\n */\r\n\r\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.radius = radius || 100;\r\n\tthis.tube = tube || 40;\r\n\tthis.radialSegments = radialSegments || 8;\r\n\tthis.tubularSegments = tubularSegments || 6;\r\n\tthis.arc = arc || Math.PI * 2;\r\n\r\n\tvar center = new THREE.Vector3(), uvs = [], normals = [];\r\n\r\n\tfor ( var j = 0; j <= this.radialSegments; j ++ ) {\r\n\r\n\t\tfor ( var i = 0; i <= this.tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar u = i / this.tubularSegments * this.arc;\r\n\t\t\tvar v = j / this.radialSegments * Math.PI * 2;\r\n\r\n\t\t\tcenter.x = this.radius * Math.cos( u );\r\n\t\t\tcenter.y = this.radius * Math.sin( u );\r\n\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\tvertex.x = ( this.radius + this.tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\tvertex.y = ( this.radius + this.tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\tvertex.z = this.tube * Math.sin( v );\r\n\r\n\t\t\tthis.vertices.push( vertex );\r\n\r\n\t\t\tuvs.push( new THREE.Vector2( i / this.tubularSegments, j / this.radialSegments ) );\r\n\t\t\tnormals.push( vertex.clone().sub( center ).normalize() );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfor ( var j = 1; j <= this.radialSegments; j ++ ) {\r\n\r\n\t\tfor ( var i = 1; i <= this.tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar a = ( this.tubularSegments + 1 ) * j + i - 1;\r\n\t\t\tvar b = ( this.tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\tvar c = ( this.tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\tvar d = ( this.tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\tvar face = new THREE.Face4( a, b, c, d, [ normals[ a ], normals[ b ], normals[ c ], normals[ d ] ] );\r\n\t\t\tface.normal.add( normals[ a ] );\r\n\t\t\tface.normal.add( normals[ b ] );\r\n\t\t\tface.normal.add( normals[ c ] );\r\n\t\t\tface.normal.add( normals[ d ] );\r\n\t\t\tface.normal.normalize();\r\n\r\n\t\t\tthis.faces.push( face );\r\n\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\r\n};\r\n\r\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author oosmoxiecode\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n */\r\n\r\nTHREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.radius = radius || 100;\r\n\tthis.tube = tube || 40;\r\n\tthis.radialSegments = radialSegments || 64;\r\n\tthis.tubularSegments = tubularSegments || 8;\r\n\tthis.p = p || 2;\r\n\tthis.q = q || 3;\r\n\tthis.heightScale = heightScale || 1;\r\n\tthis.grid = new Array( this.radialSegments );\r\n\r\n\tvar tang = new THREE.Vector3();\r\n\tvar n = new THREE.Vector3();\r\n\tvar bitan = new THREE.Vector3();\r\n\r\n\tfor ( var i = 0; i < this.radialSegments; ++ i ) {\r\n\r\n\t\tthis.grid[ i ] = new Array( this.tubularSegments );\r\n\r\n\t\tfor ( var j = 0; j < this.tubularSegments; ++ j ) {\r\n\r\n\t\t\tvar u = i / this.radialSegments * 2 * this.p * Math.PI;\r\n\t\t\tvar v = j / this.tubularSegments * 2 * Math.PI;\r\n\t\t\tvar p1 = getPos( u, v, this.q, this.p, this.radius, this.heightScale );\r\n\t\t\tvar p2 = getPos( u + 0.01, v, this.q, this.p, this.radius, this.heightScale );\r\n\t\t\tvar cx, cy;\r\n\r\n\t\t\ttang.subVectors( p2, p1 );\r\n\t\t\tn.addVectors( p2, p1 );\r\n\r\n\t\t\tbitan.crossVectors( tang, n );\r\n\t\t\tn.crossVectors( bitan, tang );\r\n\t\t\tbitan.normalize();\r\n\t\t\tn.normalize();\r\n\r\n\t\t\tcx = - this.tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tcy = this.tube * Math.sin( v );\r\n\r\n\t\t\tp1.x += cx * n.x + cy * bitan.x;\r\n\t\t\tp1.y += cx * n.y + cy * bitan.y;\r\n\t\t\tp1.z += cx * n.z + cy * bitan.z;\r\n\r\n\t\t\tthis.grid[ i ][ j ] = vert( p1.x, p1.y, p1.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0; i < this.radialSegments; ++ i ) {\r\n\r\n\t\tfor ( var j = 0; j < this.tubularSegments; ++ j ) {\r\n\r\n\t\t\tvar ip = ( i + 1 ) % this.radialSegments;\r\n\t\t\tvar jp = ( j + 1 ) % this.tubularSegments;\r\n\r\n\t\t\tvar a = this.grid[ i ][ j ];\r\n\t\t\tvar b = this.grid[ ip ][ j ];\r\n\t\t\tvar c = this.grid[ ip ][ jp ];\r\n\t\t\tvar d = this.grid[ i ][ jp ];\r\n\r\n\t\t\tvar uva = new THREE.Vector2( i / this.radialSegments, j / this.tubularSegments );\r\n\t\t\tvar uvb = new THREE.Vector2( ( i + 1 ) / this.radialSegments, j / this.tubularSegments );\r\n\t\t\tvar uvc = new THREE.Vector2( ( i + 1 ) / this.radialSegments, ( j + 1 ) / this.tubularSegments );\r\n\t\t\tvar uvd = new THREE.Vector2( i / this.radialSegments, ( j + 1 ) / this.tubularSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( a, b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva,uvb,uvc, uvd ] );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n\tfunction vert( x, y, z ) {\r\n\r\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\r\n\t}\r\n\r\n\tfunction getPos( u, v, in_q, in_p, radius, heightScale ) {\r\n\r\n\t\tvar cu = Math.cos( u );\r\n\t\tvar cv = Math.cos( v );\r\n\t\tvar su = Math.sin( u );\r\n\t\tvar quOverP = in_q / in_p * u;\r\n\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\tvar tx = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\tvar ty = radius * ( 2 + cs ) * su * 0.5;\r\n\t\tvar tz = heightScale * radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t\treturn new THREE.Vector3( tx, ty, tz );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author WestLangley / https://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author miningold / https://github.com/miningold\r\n *\r\n * Modified from the TorusKnotGeometry by @oosmoxiecode\r\n *\r\n * Creates a tube which extrudes along a 3d spline\r\n *\r\n * Uses parallel transport frames as described in\r\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n */\r\n\r\nTHREE.TubeGeometry = function( path, segments, radius, radiusSegments, closed, debug ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.path = path;\r\n\tthis.segments = segments || 64;\r\n\tthis.radius = radius || 1;\r\n\tthis.radiusSegments = radiusSegments || 8;\r\n\tthis.closed = closed || false;\r\n\r\n\tif ( debug ) this.debug = new THREE.Object3D();\r\n\r\n\tthis.grid = [];\r\n\r\n\tvar scope = this,\r\n\r\n\t\ttangent,\r\n\t\tnormal,\r\n\t\tbinormal,\r\n\r\n\t\tnumpoints = this.segments + 1,\r\n\r\n\t\tx, y, z,\r\n\t\ttx, ty, tz,\r\n\t\tu, v,\r\n\r\n\t\tcx, cy,\r\n\t\tpos, pos2 = new THREE.Vector3(),\r\n\t\ti, j,\r\n\t\tip, jp,\r\n\t\ta, b, c, d,\r\n\t\tuva, uvb, uvc, uvd;\r\n\r\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( this.path, this.segments, this.closed ),\r\n\t\ttangents = frames.tangents,\r\n\t\tnormals = frames.normals,\r\n\t\tbinormals = frames.binormals;\r\n\r\n\t// proxy internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\tfunction vert( x, y, z ) {\r\n\r\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\r\n\t}\r\n\r\n\r\n\t// consruct the grid\r\n\r\n\tfor ( i = 0; i < numpoints; i++ ) {\r\n\r\n\t\tthis.grid[ i ] = [];\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\tpos = path.getPointAt( u );\r\n\r\n\t\ttangent = tangents[ i ];\r\n\t\tnormal = normals[ i ];\r\n\t\tbinormal = binormals[ i ];\r\n\r\n\t\tif ( this.debug ) {\r\n\r\n\t\t\tthis.debug.add( new THREE.ArrowHelper(tangent, pos, radius, 0x0000ff ) );\r\n\t\t\tthis.debug.add( new THREE.ArrowHelper(normal, pos, radius, 0xff0000 ) );\r\n\t\t\tthis.debug.add( new THREE.ArrowHelper(binormal, pos, radius, 0x00ff00 ) );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( j = 0; j < this.radiusSegments; j++ ) {\r\n\r\n\t\t\tv = j / this.radiusSegments * 2 * Math.PI;\r\n\r\n\t\t\tcx = -this.radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tcy = this.radius * Math.sin( v );\r\n\r\n\t\t\tpos2.copy( pos );\r\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\r\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\r\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\r\n\r\n\t\t\tthis.grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// construct the mesh\r\n\r\n\tfor ( i = 0; i < this.segments; i++ ) {\r\n\r\n\t\tfor ( j = 0; j < this.radiusSegments; j++ ) {\r\n\r\n\t\t\tip = ( this.closed ) ? (i + 1) % this.segments : i + 1;\r\n\t\t\tjp = (j + 1) % this.radiusSegments;\r\n\r\n\t\t\ta = this.grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\r\n\t\t\tb = this.grid[ ip ][ j ];\r\n\t\t\tc = this.grid[ ip ][ jp ];\r\n\t\t\td = this.grid[ i ][ jp ];\r\n\r\n\t\t\tuva = new THREE.Vector2( i / this.segments, j / this.radiusSegments );\r\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / this.segments, j / this.radiusSegments );\r\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / this.segments, ( j + 1 ) / this.radiusSegments );\r\n\t\t\tuvd = new THREE.Vector2( i / this.segments, ( j + 1 ) / this.radiusSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face4( a, b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvc, uvd ] );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\r\n\r\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\r\nTHREE.TubeGeometry.FrenetFrames = function(path, segments, closed) {\r\n\r\n\tvar\ttangent = new THREE.Vector3(),\r\n\t\tnormal = new THREE.Vector3(),\r\n\t\tbinormal = new THREE.Vector3(),\r\n\r\n\t\ttangents = [],\r\n\t\tnormals = [],\r\n\t\tbinormals = [],\r\n\r\n\t\tvec = new THREE.Vector3(),\r\n\t\tmat = new THREE.Matrix4(),\r\n\r\n\t\tnumpoints = segments + 1,\r\n\t\ttheta,\r\n\t\tepsilon = 0.0001,\r\n\t\tsmallest,\r\n\r\n\t\ttx, ty, tz,\r\n\t\ti, u, v;\r\n\r\n\r\n\t// expose internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\t// compute the tangent vectors for each segment on the path\r\n\r\n\tfor ( i = 0; i < numpoints; i++ ) {\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\ttangents[ i ] = path.getTangentAt( u );\r\n\t\ttangents[ i ].normalize();\r\n\r\n\t}\r\n\r\n\tinitialNormal3();\r\n\r\n\tfunction initialNormal1(lastBinormal) {\r\n\t\t// fixed start binormal. Has dangers of 0 vectors\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\r\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t}\r\n\r\n\tfunction initialNormal2() {\r\n\r\n\t\t// This uses the Frenet-Serret formula for deriving binormal\r\n\t\tvar t2 = path.getTangentAt( epsilon );\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\r\n\t}\r\n\r\n\tfunction initialNormal3() {\r\n\t\t// select an initial normal vector perpenicular to the first tangent vector,\r\n\t\t// and in the direction of the smallest tangent xyz component\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tsmallest = Number.MAX_VALUE;\r\n\t\ttx = Math.abs( tangents[ 0 ].x );\r\n\t\tty = Math.abs( tangents[ 0 ].y );\r\n\t\ttz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\tif ( tx <= smallest ) {\r\n\t\t\tsmallest = tx;\r\n\t\t\tnormal.set( 1, 0, 0 );\r\n\t\t}\r\n\r\n\t\tif ( ty <= smallest ) {\r\n\t\t\tsmallest = ty;\r\n\t\t\tnormal.set( 0, 1, 0 );\r\n\t\t}\r\n\r\n\t\tif ( tz <= smallest ) {\r\n\t\t\tnormal.set( 0, 0, 1 );\r\n\t\t}\r\n\r\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\t}\r\n\r\n\r\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\r\n\r\n\tfor ( i = 1; i < numpoints; i++ ) {\r\n\r\n\t\tnormals[ i ] = normals[ i-1 ].clone();\r\n\r\n\t\tbinormals[ i ] = binormals[ i-1 ].clone();\r\n\r\n\t\tvec.crossVectors( tangents[ i-1 ], tangents[ i ] );\r\n\r\n\t\tif ( vec.length() > epsilon ) {\r\n\r\n\t\t\tvec.normalize();\r\n\r\n\t\t\ttheta = Math.acos( tangents[ i-1 ].dot( tangents[ i ] ) );\r\n\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t}\r\n\r\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t}\r\n\r\n\r\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\tif ( closed ) {\r\n\r\n\t\ttheta = Math.acos( normals[ 0 ].dot( normals[ numpoints-1 ] ) );\r\n\t\ttheta /= ( numpoints - 1 );\r\n\r\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints-1 ] ) ) > 0 ) {\r\n\r\n\t\t\ttheta = -theta;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 1; i < numpoints; i++ ) {\r\n\r\n\t\t\t// twist a little...\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n};\r\n/**\r\n * @author clockworkgeek / https://github.com/clockworkgeek\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.PolyhedronGeometry = function ( vertices, faces, radius, detail ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tradius = radius || 1;\r\n\tdetail = detail || 0;\r\n\r\n\tvar that = this;\r\n\r\n\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\tprepare( new THREE.Vector3( vertices[ i ][ 0 ], vertices[ i ][ 1 ], vertices[ i ][ 2 ] ) );\r\n\r\n\t}\r\n\r\n\tvar midpoints = [], p = this.vertices;\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tmake( p[ faces[ i ][ 0 ] ], p[ faces[ i ][ 1 ] ], p[ faces[ i ][ 2 ] ], detail );\r\n\r\n\t}\r\n\r\n\tthis.mergeVertices();\r\n\r\n\t// Apply radius\r\n\r\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\tthis.vertices[ i ].multiplyScalar( radius );\r\n\r\n\t}\r\n\r\n\r\n\t// Project vector onto sphere's surface\r\n\r\n\tfunction prepare( vector ) {\r\n\r\n\t\tvar vertex = vector.normalize().clone();\r\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\r\n\r\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\r\n\r\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\r\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\r\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\r\n\r\n\t\treturn vertex;\r\n\r\n\t}\r\n\r\n\r\n\t// Approximate a curved face with recursively sub-divided triangles.\r\n\r\n\tfunction make( v1, v2, v3, detail ) {\r\n\r\n\t\tif ( detail < 1 ) {\r\n\r\n\t\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\r\n\t\t\tface.centroid.add( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\r\n\t\t\tface.normal = face.centroid.clone().normalize();\r\n\t\t\tthat.faces.push( face );\r\n\r\n\t\t\tvar azi = azimuth( face.centroid );\r\n\t\t\tthat.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\tcorrectUV( v1.uv, v1, azi ),\r\n\t\t\t\tcorrectUV( v2.uv, v2, azi ),\r\n\t\t\t\tcorrectUV( v3.uv, v3, azi )\r\n\t\t\t] );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdetail -= 1;\r\n\r\n\t\t\t// split triangle into 4 smaller triangles\r\n\r\n\t\t\tmake( v1, midpoint( v1, v2 ), midpoint( v1, v3 ), detail ); // top quadrant\r\n\t\t\tmake( midpoint( v1, v2 ), v2, midpoint( v2, v3 ), detail ); // left quadrant\r\n\t\t\tmake( midpoint( v1, v3 ), midpoint( v2, v3 ), v3, detail ); // right quadrant\r\n\t\t\tmake( midpoint( v1, v2 ), midpoint( v2, v3 ), midpoint( v1, v3 ), detail ); // center quadrant\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction midpoint( v1, v2 ) {\r\n\r\n\t\tif ( !midpoints[ v1.index ] ) midpoints[ v1.index ] = [];\r\n\t\tif ( !midpoints[ v2.index ] ) midpoints[ v2.index ] = [];\r\n\r\n\t\tvar mid = midpoints[ v1.index ][ v2.index ];\r\n\r\n\t\tif ( mid === undefined ) {\r\n\r\n\t\t\t// generate mean point and project to surface with prepare()\r\n\r\n\t\t\tmidpoints[ v1.index ][ v2.index ] = midpoints[ v2.index ][ v1.index ] = mid = prepare(\r\n\t\t\t\tnew THREE.Vector3().addVectors( v1, v2 ).divideScalar( 2 )\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn mid;\r\n\r\n\t}\r\n\r\n\r\n\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\tfunction azimuth( vector ) {\r\n\r\n\t\treturn Math.atan2( vector.z, -vector.x );\r\n\r\n\t}\r\n\r\n\r\n\t// Angle above the XZ plane.\r\n\r\n\tfunction inclination( vector ) {\r\n\r\n\t\treturn Math.atan2( -vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t}\r\n\r\n\r\n\t// Texture fixing helper. Spheres have some odd behaviours.\r\n\r\n\tfunction correctUV( uv, vector, azimuth ) {\r\n\r\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\r\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\r\n\t\treturn uv;\r\n\r\n\t}\r\n\r\n\tthis.computeCentroids();\r\n\r\n    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\tvar vertices = [\r\n\t\t[ -1,  t,  0 ], [  1, t, 0 ], [ -1, -t,  0 ], [  1, -t,  0 ],\r\n\t\t[  0, -1,  t ], [  0, 1, t ], [  0, -1, -t ], [  0,  1, -t ],\r\n\t\t[  t,  0, -1 ], [  t, 0, 1 ], [ -t,  0, -1 ], [ -t,  0,  1 ]\r\n\t];\r\n\r\n\tvar faces = [\r\n\t\t[ 0, 11,  5 ], [ 0,  5,  1 ], [  0,  1,  7 ], [  0,  7, 10 ], [  0, 10, 11 ],\r\n\t\t[ 1,  5,  9 ], [ 5, 11,  4 ], [ 11, 10,  2 ], [ 10,  7,  6 ], [  7,  1,  8 ],\r\n\t\t[ 3,  9,  4 ], [ 3,  4,  2 ], [  3,  2,  6 ], [  3,  6,  8 ], [  3,  8,  9 ],\r\n\t\t[ 4,  9,  5 ], [ 2,  4, 11 ], [  6,  2, 10 ], [  8,  6,  7 ], [  9,  8,  1 ]\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\r\n\r\n};\r\n\r\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.OctahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t[ 1, 0, 0 ], [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ], [ 0, 0, -1 ]\r\n\t];\r\n\r\n\tvar faces = [\r\n\t\t[ 0, 2, 4 ], [ 0, 4, 3 ], [ 0, 3, 5 ], [ 0, 5, 2 ], [ 1, 2, 5 ], [ 1, 5, 3 ], [ 1, 3, 4 ], [ 1, 4, 2 ]\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\r\n};\r\n\r\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t[ 1,  1,  1 ], [ -1, -1, 1 ], [ -1, 1, -1 ], [ 1, -1, -1 ]\r\n\t];\r\n\r\n\tvar faces = [\r\n\t\t[ 2, 1, 0 ], [ 0, 3, 2 ], [ 1, 3, 0 ], [ 2, 3, 1 ]\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );\r\n\r\n};\r\n\r\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author zz85 / https://github.com/zz85\r\n * Parametric Surfaces Geometry\r\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n *\r\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements, useTris );\r\n *\r\n */\r\n\r\nTHREE.ParametricGeometry = function ( func, slices, stacks, useTris ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar verts = this.vertices;\r\n\tvar faces = this.faces;\r\n\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\r\n\tuseTris = (useTris === undefined) ? false : useTris;\r\n\r\n\tvar i, il, j, p;\r\n\tvar u, v;\r\n\r\n\tvar stackCount = stacks + 1;\r\n\tvar sliceCount = slices + 1;\r\n\r\n\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\tv = i / stacks;\r\n\r\n\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\tu = j / slices;\r\n\r\n\t\t\tp = func( u, v );\r\n\t\t\tverts.push( p );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tvar a, b, c, d;\r\n\tvar uva, uvb, uvc, uvd;\r\n\r\n\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\ta = i * sliceCount + j;\r\n\t\t\tb = i * sliceCount + j + 1;\r\n\t\t\tc = (i + 1) * sliceCount + j;\r\n\t\t\td = (i + 1) * sliceCount + j + 1;\r\n\r\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\r\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\r\n\t\t\tuvc = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\r\n\t\t\tuvd = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\r\n\r\n\t\t\tif ( useTris ) {\r\n\r\n\t\t\t\tfaces.push( new THREE.Face3( a, b, c ) );\r\n\t\t\t\tfaces.push( new THREE.Face3( b, d, c ) );\r\n\r\n\t\t\t\tuvs.push( [ uva, uvb, uvc ] );\r\n\t\t\t\tuvs.push( [ uvb, uvd, uvc ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfaces.push( new THREE.Face4( a, b, d, c ) );\r\n\t\t\t\tuvs.push( [ uva, uvb, uvd, uvc ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// console.log(this);\r\n\r\n\t// magic bullet\r\n\t// var diff = this.mergeVertices();\r\n\t// console.log('removed ', diff, ' vertices by merging');\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author qiao / https://github.com/qiao\r\n * @fileoverview This is a convex hull generator using the incremental method. \r\n * The complexity is O(n^2) where n is the number of vertices.\r\n * O(nlogn) algorithms do exist, but they are much more complicated.\r\n *\r\n * Benchmark: \r\n *\r\n *  Platform: CPU: P7350 @2.00GHz Engine: V8\r\n *\r\n *  Num Vertices\tTime(ms)\r\n *\r\n *     10           1\r\n *     20           3\r\n *     30           19\r\n *     40           48\r\n *     50           107\r\n */\r\n\r\nTHREE.ConvexGeometry = function( vertices ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tvar faces = [ [ 0, 1, 2 ], [ 0, 2, 1 ] ]; \r\n\r\n\tfor ( var i = 3; i < vertices.length; i++ ) {\r\n\r\n\t\taddPoint( i );\r\n\r\n\t}\r\n\r\n\r\n\tfunction addPoint( vertexId ) {\r\n\r\n\t\tvar vertex = vertices[ vertexId ].clone();\r\n\r\n\t\tvar mag = vertex.length();\r\n\t\tvertex.x += mag * randomOffset();\r\n\t\tvertex.y += mag * randomOffset();\r\n\t\tvertex.z += mag * randomOffset();\r\n\r\n\t\tvar hole = [];\r\n\r\n\t\tfor ( var f = 0; f < faces.length; ) {\r\n\r\n\t\t\tvar face = faces[ f ];\r\n\r\n\t\t\t// for each face, if the vertex can see it,\r\n\t\t\t// then we try to add the face's edges into the hole.\r\n\t\t\tif ( visible( face, vertex ) ) {\r\n\r\n\t\t\t\tfor ( var e = 0; e < 3; e++ ) {\r\n\r\n\t\t\t\t\tvar edge = [ face[ e ], face[ ( e + 1 ) % 3 ] ];\r\n\t\t\t\t\tvar boundary = true;\r\n\r\n\t\t\t\t\t// remove duplicated edges.\r\n\t\t\t\t\tfor ( var h = 0; h < hole.length; h++ ) {\r\n\r\n\t\t\t\t\t\tif ( equalEdge( hole[ h ], edge ) ) {\r\n\r\n\t\t\t\t\t\t\thole[ h ] = hole[ hole.length - 1 ];\r\n\t\t\t\t\t\t\thole.pop();\r\n\t\t\t\t\t\t\tboundary = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( boundary ) {\r\n\r\n\t\t\t\t\t\thole.push( edge );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove faces[ f ]\r\n\t\t\t\tfaces[ f ] = faces[ faces.length - 1 ];\r\n\t\t\t\tfaces.pop();\r\n\r\n\t\t\t} else { // not visible\r\n\r\n\t\t\t\tf++;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// construct the new faces formed by the edges of the hole and the vertex\r\n\t\tfor ( var h = 0; h < hole.length; h++ ) {\r\n\r\n\t\t\tfaces.push( [ \r\n\t\t\t\thole[ h ][ 0 ],\r\n\t\t\t\thole[ h ][ 1 ],\r\n\t\t\t\tvertexId\r\n\t\t\t] );\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Whether the face is visible from the vertex\r\n\t */\r\n\tfunction visible( face, vertex ) {\r\n\r\n\t\tvar va = vertices[ face[ 0 ] ];\r\n\t\tvar vb = vertices[ face[ 1 ] ];\r\n\t\tvar vc = vertices[ face[ 2 ] ];\r\n\r\n\t\tvar n = normal( va, vb, vc );\r\n\r\n\t\t// distance from face to origin\r\n\t\tvar dist = n.dot( va );\r\n\r\n\t\treturn n.dot( vertex ) >= dist; \r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Face normal\r\n\t */\r\n\tfunction normal( va, vb, vc ) {\r\n\r\n\t\tvar cb = new THREE.Vector3();\r\n\t\tvar ab = new THREE.Vector3();\r\n\r\n\t\tcb.subVectors( vc, vb );\r\n\t\tab.subVectors( va, vb );\r\n\t\tcb.cross( ab );\r\n\r\n\t\tcb.normalize();\r\n\r\n\t\treturn cb;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Detect whether two edges are equal.\r\n\t * Note that when constructing the convex hull, two same edges can only\r\n\t * be of the negative direction.\r\n\t */\r\n\tfunction equalEdge( ea, eb ) {\r\n\r\n\t\treturn ea[ 0 ] === eb[ 1 ] && ea[ 1 ] === eb[ 0 ]; \r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Create a random offset between -1e-6 and 1e-6.\r\n\t */\r\n\tfunction randomOffset() {\r\n\r\n\t\treturn ( Math.random() - 0.5 ) * 2 * 1e-6;\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * XXX: Not sure if this is the correct approach. Need someone to review.\r\n\t */\r\n\tfunction vertexUv( vertex ) {\r\n\r\n\t\tvar mag = vertex.length();\r\n\t\treturn new THREE.Vector2( vertex.x / mag, vertex.y / mag );\r\n\r\n\t}\r\n\r\n\t// Push vertices into `this.vertices`, skipping those inside the hull\r\n\tvar id = 0;\r\n\tvar newId = new Array( vertices.length ); // map from old vertex id to new id\r\n\r\n\tfor ( var i = 0; i < faces.length; i++ ) {\r\n\r\n\t\t var face = faces[ i ];\r\n\r\n\t\t for ( var j = 0; j < 3; j++ ) {\r\n\r\n\t\t\t\tif ( newId[ face[ j ] ] === undefined ) {\r\n\r\n\t\t\t\t\t\tnewId[ face[ j ] ] = id++;\r\n\t\t\t\t\t\tthis.vertices.push( vertices[ face[ j ] ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tface[ j ] = newId[ face[ j ] ];\r\n\r\n\t\t }\r\n\r\n\t}\r\n\r\n\t// Convert faces into instances of THREE.Face3\r\n\tfor ( var i = 0; i < faces.length; i++ ) {\r\n\r\n\t\tthis.faces.push( new THREE.Face3( \r\n\t\t\t\tfaces[ i ][ 0 ],\r\n\t\t\t\tfaces[ i ][ 1 ],\r\n\t\t\t\tfaces[ i ][ 2 ]\r\n\t\t) );\r\n\r\n\t}\r\n\r\n\t// Compute UVs\r\n\tfor ( var i = 0; i < this.faces.length; i++ ) {\r\n\r\n\t\tvar face = this.faces[ i ];\r\n\r\n\t\tthis.faceVertexUvs[ 0 ].push( [\r\n\t\t\tvertexUv( this.vertices[ face.a ] ),\r\n\t\t\tvertexUv( this.vertices[ face.b ] ),\r\n\t\t\tvertexUv( this.vertices[ face.c ])\r\n\t\t] );\r\n\r\n\t}\r\n\r\n\r\n\tthis.computeCentroids();\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.ConvexGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n/**\r\n * @author sroucheray / http://sroucheray.org/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AxisHelper = function ( size ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tgeometry.vertices.push(\r\n\t\tnew THREE.Vector3(), new THREE.Vector3( size || 1, 0, 0 ),\r\n\t\tnew THREE.Vector3(), new THREE.Vector3( 0, size || 1, 0 ),\r\n\t\tnew THREE.Vector3(), new THREE.Vector3( 0, 0, size || 1 )\r\n\t);\r\n\r\n\tgeometry.colors.push(\r\n\t\tnew THREE.Color( 0xff0000 ), new THREE.Color( 0xffaa00 ),\r\n\t\tnew THREE.Color( 0x00ff00 ), new THREE.Color( 0xaaff00 ),\r\n\t\tnew THREE.Color( 0x0000ff ), new THREE.Color( 0x00aaff )\r\n\t);\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tTHREE.Line.call( this, geometry, material, THREE.LinePieces );\r\n\r\n};\r\n\r\nTHREE.AxisHelper.prototype = Object.create( THREE.Line.prototype );\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / https://exocortex.com\r\n *\r\n * Creates an arrow for visualizing directions\r\n *\r\n * Parameters:\r\n *  dir - Vector3\r\n *  origin - Vector3\r\n *  length - Number\r\n *  hex - color in hex value\r\n */\r\n\r\nTHREE.ArrowHelper = function ( dir, origin, length, hex ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tif ( length === undefined ) length = 20;\r\n\tif ( hex === undefined ) hex = 0xffff00;\r\n\r\n\tvar lineGeometry = new THREE.Geometry();\r\n\tlineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );\r\n\tlineGeometry.vertices.push( new THREE.Vector3( 0, 1, 0 ) );\r\n\r\n\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: hex } ) );\r\n\tthis.add( this.line );\r\n\r\n\tvar coneGeometry = new THREE.CylinderGeometry( 0, 0.05, 0.25, 5, 1 );\r\n\r\n\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: hex } ) );\r\n\tthis.cone.position.set( 0, 1, 0 );\r\n\tthis.add( this.cone );\r\n\r\n\tif ( origin instanceof THREE.Vector3 ) this.position = origin;\r\n\r\n\tthis.setDirection( dir );\r\n\tthis.setLength( length );\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.ArrowHelper.prototype.setDirection = function ( dir ) {\r\n\r\n    var d = THREE.ArrowHelper.__v1.copy( dir ).normalize();\r\n\r\n    if ( d.y > 0.999 ) {\r\n\r\n        this.rotation.set( 0, 0, 0 );\r\n \r\n    } else if ( d.y < - 0.999 ) {\r\n\r\n        this.rotation.set( Math.PI, 0, 0 );\r\n\r\n    } else {\r\n\r\n\t    var axis = THREE.ArrowHelper.__v2.set( d.z, 0, - d.x ).normalize();\r\n\t    var radians = Math.acos( d.y );\r\n\t    var quaternion = THREE.ArrowHelper.__q1.setFromAxisAngle( axis, radians );\r\n\r\n\t    this.rotation.setEulerFromQuaternion( quaternion, this.eulerOrder );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype.setLength = function ( length ) {\r\n\r\n\tthis.scale.set( length, length, length );\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype.setColor = function ( hex ) {\r\n\r\n\tthis.line.material.color.setHex( hex );\r\n\tthis.cone.material.color.setHex( hex );\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.__v1 = new THREE.Vector3();\r\nTHREE.ArrowHelper.__v2 = new THREE.Vector3();\r\nTHREE.ArrowHelper.__q1 = new THREE.Quaternion();\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows frustum, line of sight and up of the camera\r\n *\t- suitable for fast updates\r\n * \t- based on frustum visualization in lightgl.js shadowmap example\r\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n */\r\n\r\nTHREE.CameraHelper = function ( camera ) {\r\n\r\n\tTHREE.Line.call( this );\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.geometry = new THREE.Geometry();\r\n\tthis.material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\r\n\tthis.type = THREE.LinePieces;\r\n\r\n\tthis.matrixWorld = camera.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.pointMap = {};\r\n\r\n\t// colors\r\n\r\n\tvar hexFrustum = 0xffaa00;\r\n\tvar hexCone = 0xff0000;\r\n\tvar hexUp = 0x00aaff;\r\n\tvar hexTarget = 0xffffff;\r\n\tvar hexCross = 0x333333;\r\n\r\n\t// near\r\n\r\n\taddLine( \"n1\", \"n2\", hexFrustum );\r\n\taddLine( \"n2\", \"n4\", hexFrustum );\r\n\taddLine( \"n4\", \"n3\", hexFrustum );\r\n\taddLine( \"n3\", \"n1\", hexFrustum );\r\n\r\n\t// far\r\n\r\n\taddLine( \"f1\", \"f2\", hexFrustum );\r\n\taddLine( \"f2\", \"f4\", hexFrustum );\r\n\taddLine( \"f4\", \"f3\", hexFrustum );\r\n\taddLine( \"f3\", \"f1\", hexFrustum );\r\n\r\n\t// sides\r\n\r\n\taddLine( \"n1\", \"f1\", hexFrustum );\r\n\taddLine( \"n2\", \"f2\", hexFrustum );\r\n\taddLine( \"n3\", \"f3\", hexFrustum );\r\n\taddLine( \"n4\", \"f4\", hexFrustum );\r\n\r\n\t// cone\r\n\r\n\taddLine( \"p\", \"n1\", hexCone );\r\n\taddLine( \"p\", \"n2\", hexCone );\r\n\taddLine( \"p\", \"n3\", hexCone );\r\n\taddLine( \"p\", \"n4\", hexCone );\r\n\r\n\t// up\r\n\r\n\taddLine( \"u1\", \"u2\", hexUp );\r\n\taddLine( \"u2\", \"u3\", hexUp );\r\n\taddLine( \"u3\", \"u1\", hexUp );\r\n\r\n\t// target\r\n\r\n\taddLine( \"c\", \"t\", hexTarget );\r\n\taddLine( \"p\", \"c\", hexCross );\r\n\r\n\t// cross\r\n\r\n\taddLine( \"cn1\", \"cn2\", hexCross );\r\n\taddLine( \"cn3\", \"cn4\", hexCross );\r\n\r\n\taddLine( \"cf1\", \"cf2\", hexCross );\r\n\taddLine( \"cf3\", \"cf4\", hexCross );\r\n\r\n\tthis.camera = camera;\r\n\r\n\tfunction addLine( a, b, hex ) {\r\n\r\n\t\taddPoint( a, hex );\r\n\t\taddPoint( b, hex );\r\n\r\n\t}\r\n\r\n\tfunction addPoint( id, hex ) {\r\n\r\n\t\tscope.geometry.vertices.push( new THREE.Vector3() );\r\n\t\tscope.geometry.colors.push( new THREE.Color( hex ) );\r\n\r\n\t\tif ( scope.pointMap[ id ] === undefined ) scope.pointMap[ id ] = [];\r\n\r\n\t\tscope.pointMap[ id ].push( scope.geometry.vertices.length - 1 );\r\n\r\n\t}\r\n\r\n\tthis.update( camera );\r\n\r\n};\r\n\r\nTHREE.CameraHelper.prototype = Object.create( THREE.Line.prototype );\r\n\r\nTHREE.CameraHelper.prototype.update = function () {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar w = 1, h = 1;\r\n\r\n\t// we need just camera projection matrix\r\n\t// world matrix must be identity\r\n\r\n\tTHREE.CameraHelper.__c.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\r\n\t// center / target\r\n\r\n\tsetPoint( \"c\", 0, 0, -1 );\r\n\tsetPoint( \"t\", 0, 0,  1 );\r\n\r\n\t// near\r\n\r\n\tsetPoint( \"n1\", -w, -h, -1 );\r\n\tsetPoint( \"n2\",  w, -h, -1 );\r\n\tsetPoint( \"n3\", -w,  h, -1 );\r\n\tsetPoint( \"n4\",  w,  h, -1 );\r\n\r\n\t// far\r\n\r\n\tsetPoint( \"f1\", -w, -h, 1 );\r\n\tsetPoint( \"f2\",  w, -h, 1 );\r\n\tsetPoint( \"f3\", -w,  h, 1 );\r\n\tsetPoint( \"f4\",  w,  h, 1 );\r\n\r\n\t// up\r\n\r\n\tsetPoint( \"u1\",  w * 0.7, h * 1.1, -1 );\r\n\tsetPoint( \"u2\", -w * 0.7, h * 1.1, -1 );\r\n\tsetPoint( \"u3\",        0, h * 2,   -1 );\r\n\r\n\t// cross\r\n\r\n\tsetPoint( \"cf1\", -w,  0, 1 );\r\n\tsetPoint( \"cf2\",  w,  0, 1 );\r\n\tsetPoint( \"cf3\",  0, -h, 1 );\r\n\tsetPoint( \"cf4\",  0,  h, 1 );\r\n\r\n\tsetPoint( \"cn1\", -w,  0, -1 );\r\n\tsetPoint( \"cn2\",  w,  0, -1 );\r\n\tsetPoint( \"cn3\",  0, -h, -1 );\r\n\tsetPoint( \"cn4\",  0,  h, -1 );\r\n\r\n\tfunction setPoint( point, x, y, z ) {\r\n\r\n\t\tTHREE.CameraHelper.__v.set( x, y, z );\r\n\t\tTHREE.CameraHelper.__projector.unprojectVector( THREE.CameraHelper.__v, THREE.CameraHelper.__c );\r\n\r\n\t\tvar points = scope.pointMap[ point ];\r\n\r\n\t\tif ( points !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tscope.geometry.vertices[ points[ i ] ].copy( THREE.CameraHelper.__v );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.geometry.verticesNeedUpdate = true;\r\n\r\n};\r\n\r\nTHREE.CameraHelper.__projector = new THREE.Projector();\r\nTHREE.CameraHelper.__v = new THREE.Vector3();\r\nTHREE.CameraHelper.__c = new THREE.Camera();\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows directional light color, intensity, position, orientation and target\r\n */\r\n\r\nTHREE.DirectionalLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t// direction\r\n\r\n\tthis.direction = new THREE.Vector3();\r\n\tthis.direction.subVectors( light.target.position, light.position );\r\n\r\n\t// color\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// light helper\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );\r\n\tvar raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );\r\n\r\n\tvar bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\r\n\tthis.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );\r\n\r\n\tthis.add( this.lightSphere );\r\n\tthis.add( this.lightRays );\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t// light target helper\r\n\r\n\tthis.targetSphere = null;\r\n\r\n\tif ( light.target.properties.targetInverse !== undefined ) {\r\n\r\n\t\tvar targetGeo = new THREE.SphereGeometry( sphereSize, 8, 4 );\r\n\t\tvar targetMaterial = new THREE.MeshBasicMaterial( { color: hexColor, wireframe: true, fog: false } );\r\n\r\n\t\tthis.targetSphere = new THREE.Mesh( targetGeo, targetMaterial );\r\n\t\tthis.targetSphere.position = light.target.position;\r\n\r\n\t\tthis.targetSphere.properties.isGizmo = true;\r\n\t\tthis.targetSphere.properties.gizmoSubject = light.target;\r\n\t\tthis.targetSphere.properties.gizmoRoot = this.targetSphere;\r\n\r\n\t\tvar lineMaterial = new THREE.LineDashedMaterial( { color: hexColor, dashSize: 4, gapSize: 4, opacity: 0.75, transparent: true, fog: false } );\r\n\t\tvar lineGeometry = new THREE.Geometry();\r\n\t\tlineGeometry.vertices.push( this.position.clone() );\r\n\t\tlineGeometry.vertices.push( this.targetSphere.position.clone() );\r\n\t\tlineGeometry.computeLineDistances();\r\n\r\n\t\tthis.targetLine = new THREE.Line( lineGeometry, lineMaterial );\r\n\t\tthis.targetLine.properties.isGizmo = true;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n}\r\n\r\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.DirectionalLightHelper.prototype.update = function () {\r\n\r\n\t// update arrow orientation\r\n\t// pointing from light to target\r\n\r\n\tthis.direction.subVectors( this.light.target.position, this.light.position );\r\n\r\n\t// update arrow, spheres, rays and line colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.color.copy( this.color );\r\n\tthis.lightRays.material.color.copy( this.color );\r\n\r\n\t// Only update targetSphere and targetLine if available\r\n\tif ( this.targetSphere !== null ) {\r\n\r\n\t\tthis.targetSphere.material.color.copy( this.color );\r\n\t\tthis.targetLine.material.color.copy( this.color );\r\n\r\n\t\t// update target line vertices\r\n\r\n\t\tthis.targetLine.geometry.vertices[ 0 ].copy( this.light.position );\r\n\t\tthis.targetLine.geometry.vertices[ 1 ].copy( this.light.target.position );\r\n\r\n\t\tthis.targetLine.geometry.computeLineDistances();\r\n\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows hemisphere light intensity, sky and ground colors and directions\r\n */\r\n\r\nTHREE.HemisphereLightHelper = function ( light, sphereSize, arrowLength, domeSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t//\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\t// sky color\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// ground color\r\n\r\n\tthis.groundColor = light.groundColor.clone();\r\n\tthis.groundColor.multiplyScalar( intensity );\r\n\r\n\tvar hexColorGround = this.groundColor.getHex();\r\n\r\n\t// double colored light bulb\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8, 0, Math.PI * 2, 0, Math.PI * 0.5 );\r\n\tvar bulbGroundGeometry = new THREE.SphereGeometry( sphereSize, 16, 8, 0, Math.PI * 2, Math.PI * 0.5, Math.PI );\r\n\r\n\tvar bulbSkyMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar bulbGroundMaterial = new THREE.MeshBasicMaterial( { color: hexColorGround, fog: false } );\r\n\r\n\tfor ( var i = 0, il = bulbGeometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\tbulbGeometry.faces[ i ].materialIndex = 0;\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0, il = bulbGroundGeometry.faces.length; i < il; i ++ ) {\r\n\r\n\t\tbulbGroundGeometry.faces[ i ].materialIndex = 1;\r\n\r\n\t}\r\n\r\n\tTHREE.GeometryUtils.merge( bulbGeometry, bulbGroundGeometry );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, new THREE.MeshFaceMaterial( [ bulbSkyMaterial, bulbGroundMaterial ] ) );\r\n\r\n\t// arrows for sky and ground light directions\r\n\r\n\tthis.lightArrow = new THREE.ArrowHelper( new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, ( sphereSize + arrowLength ) * 1.1, 0 ), arrowLength, hexColor );\r\n\tthis.lightArrow.rotation.x = Math.PI;\r\n\r\n\tthis.lightArrowGround = new THREE.ArrowHelper( new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, ( sphereSize + arrowLength ) * -1.1, 0 ), arrowLength, hexColorGround );\r\n\r\n\tvar joint = new THREE.Object3D();\r\n\tjoint.rotation.x = -Math.PI * 0.5;\r\n\r\n\tjoint.add( this.lightSphere );\r\n\tjoint.add( this.lightArrow );\r\n\tjoint.add( this.lightArrowGround );\r\n\r\n\tthis.add( joint );\r\n\r\n\t//\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n\t//\r\n\r\n\tthis.target = new THREE.Vector3();\r\n\tthis.lookAt( this.target );\r\n\r\n}\r\n\r\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.HemisphereLightHelper.prototype.update = function () {\r\n\r\n\t// update sphere sky and ground colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.groundColor.copy( this.light.groundColor );\r\n\tthis.groundColor.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.materials[ 0 ].color.copy( this.color );\r\n\tthis.lightSphere.material.materials[ 1 ].color.copy( this.groundColor );\r\n\r\n\tthis.lightArrow.setColor( this.color.getHex() );\r\n\tthis.lightArrowGround.setColor( this.groundColor.getHex() );\r\n\r\n\tthis.lookAt( this.target );\r\n\r\n}\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows point light color, intensity, position and distance\r\n */\r\n\r\nTHREE.PointLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t// color\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// light helper\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );\r\n\tvar raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );\r\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\r\n\tvar bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );\r\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\tvar d = light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n\tthis.add( this.lightSphere );\r\n\tthis.add( this.lightRays );\r\n\tthis.add( this.lightDistance );\r\n\r\n\t//\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n}\r\n\r\nTHREE.PointLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.PointLightHelper.prototype.update = function () {\r\n\r\n\t// update sphere and rays colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.color.copy( this.color );\r\n\tthis.lightRays.material.color.copy( this.color );\r\n\tthis.lightDistance.material.color.copy( this.color );\r\n\r\n\t//\r\n\r\n\tvar d = this.light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.visible = true;\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows spot light color, intensity, position, orientation, light cone and target\r\n */\r\n\r\nTHREE.SpotLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\r\n\t// position\r\n\r\n\tthis.position = light.position;\r\n\r\n\t// direction\r\n\r\n\tthis.direction = new THREE.Vector3();\r\n\tthis.direction.subVectors( light.target.position, light.position );\r\n\r\n\t// color\r\n\r\n\tvar intensity = THREE.Math.clamp( light.intensity, 0, 1 );\r\n\r\n\tthis.color = light.color.clone();\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tvar hexColor = this.color.getHex();\r\n\r\n\t// light helper\r\n\r\n\tvar bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );\r\n\tvar raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );\r\n\tvar coneGeometry = new THREE.CylinderGeometry( 0.0001, 1, 1, 8, 1, true );\r\n\r\n\tvar coneMatrix = new THREE.Matrix4();\r\n\tconeMatrix.rotateX( -Math.PI/2 );\r\n\tconeMatrix.translate( new THREE.Vector3( 0, -0.5, 0 ) );\r\n\tconeGeometry.applyMatrix( coneMatrix );\r\n\r\n\tvar bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );\r\n\tvar coneMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.3, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightCone = new THREE.Mesh( coneGeometry, coneMaterial );\r\n\r\n\tvar coneLength = light.distance ? light.distance : 10000;\r\n\tvar coneWidth = coneLength * Math.tan( light.angle * 0.5 ) * 2;\r\n\tthis.lightCone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\tthis.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );\r\n\r\n\tthis.gyroscope = new THREE.Gyroscope();\r\n\r\n\tthis.gyroscope.add( this.lightSphere );\r\n\tthis.gyroscope.add( this.lightRays );\r\n\r\n\tthis.add( this.gyroscope );\r\n\tthis.add( this.lightCone );\r\n\r\n\tthis.lookAt( light.target.position );\r\n\r\n\tthis.lightSphere.properties.isGizmo = true;\r\n\tthis.lightSphere.properties.gizmoSubject = light;\r\n\tthis.lightSphere.properties.gizmoRoot = this;\r\n\r\n\t// light target helper\r\n\r\n\tthis.targetSphere = null;\r\n\r\n\tif ( light.target.properties.targetInverse !== undefined ) {\r\n\r\n\t\tvar targetGeo = new THREE.SphereGeometry( sphereSize, 8, 4 );\r\n\t\tvar targetMaterial = new THREE.MeshBasicMaterial( { color: hexColor, wireframe: true, fog: false } );\r\n\r\n\t\tthis.targetSphere = new THREE.Mesh( targetGeo, targetMaterial );\r\n\t\tthis.targetSphere.position = light.target.position;\r\n\r\n\t\tthis.targetSphere.properties.isGizmo = true;\r\n\t\tthis.targetSphere.properties.gizmoSubject = light.target;\r\n\t\tthis.targetSphere.properties.gizmoRoot = this.targetSphere;\r\n\r\n\t\tvar lineMaterial = new THREE.LineDashedMaterial( { color: hexColor, dashSize: 4, gapSize: 4, opacity: 0.75, transparent: true, fog: false } );\r\n\t\tvar lineGeometry = new THREE.Geometry();\r\n\t\tlineGeometry.vertices.push( this.position.clone() );\r\n\t\tlineGeometry.vertices.push( this.targetSphere.position.clone() );\r\n\t\tlineGeometry.computeLineDistances();\r\n\r\n\t\tthis.targetLine = new THREE.Line( lineGeometry, lineMaterial );\r\n\t\tthis.targetLine.properties.isGizmo = true;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tthis.properties.isGizmo = true;\r\n\r\n}\r\n\r\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\nTHREE.SpotLightHelper.prototype.update = function () {\r\n\r\n\t// update arrow orientation\r\n\t// pointing from light to target\r\n\r\n\tthis.direction.subVectors( this.light.target.position, this.light.position );\r\n\r\n\t// update light cone orientation and size\r\n\r\n\tthis.lookAt( this.light.target.position );\r\n\r\n\tvar coneLength = this.light.distance ? this.light.distance : 10000;\r\n\tvar coneWidth = coneLength * Math.tan( this.light.angle * 0.5 ) * 2;\r\n\tthis.lightCone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t// update arrow, spheres, rays and line colors to light color * light intensity\r\n\r\n\tvar intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );\r\n\r\n\tthis.color.copy( this.light.color );\r\n\tthis.color.multiplyScalar( intensity );\r\n\r\n\tthis.lightSphere.material.color.copy( this.color );\r\n\tthis.lightRays.material.color.copy( this.color );\r\n\tthis.lightCone.material.color.copy( this.color );\r\n\r\n\t// Only update targetSphere and targetLine if available\r\n\tif ( this.targetSphere !== null ) {\r\n\r\n\t\tthis.targetSphere.material.color.copy( this.color );\r\n\t\tthis.targetLine.material.color.copy( this.color );\r\n\r\n\t\t// update target line vertices\r\n\r\n\t\tthis.targetLine.geometry.vertices[ 0 ].copy( this.light.position );\r\n\t\tthis.targetLine.geometry.vertices[ 1 ].copy( this.light.target.position );\r\n\r\n\t\tthis.targetLine.geometry.computeLineDistances();\r\n\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ImmediateRenderObject = function ( ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.render = function ( renderCallback ) { };\r\n\r\n};\r\n\r\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.lensFlares = [];\r\n\r\n\tthis.positionScreen = new THREE.Vector3();\r\n\tthis.customUpdateCallback = undefined;\r\n\r\n\tif( texture !== undefined ) {\r\n\r\n\t\tthis.add( texture, size, distance, blending, color );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );\r\n\r\n\r\n/*\r\n * Add: adds another flare\r\n */\r\n\r\nTHREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {\r\n\r\n\tif( size === undefined ) size = -1;\r\n\tif( distance === undefined ) distance = 0;\r\n\tif( opacity === undefined ) opacity = 1;\r\n\tif( color === undefined ) color = new THREE.Color( 0xffffff );\r\n\tif( blending === undefined ) blending = THREE.NormalBlending;\r\n\r\n\tdistance = Math.min( distance, Math.max( 0, distance ) );\r\n\r\n\tthis.lensFlares.push( { texture: texture, \t\t\t// THREE.Texture\r\n\t\t                    size: size, \t\t\t\t// size in pixels (-1 = use texture.width)\r\n\t\t                    distance: distance, \t\t// distance (0-1) from light source (0=at light source)\r\n\t\t                    x: 0, y: 0, z: 0,\t\t\t// screen position (-1 => 1) z = 0 is ontop z = 1 is back\r\n\t\t                    scale: 1, \t\t\t\t\t// scale\r\n\t\t                    rotation: 1, \t\t\t\t// rotation\r\n\t\t                    opacity: opacity,\t\t\t// opacity\r\n\t\t\t\t\t\t\tcolor: color,\t\t\t\t// color\r\n\t\t                    blending: blending } );\t\t// blending\r\n\r\n};\r\n\r\n\r\n/*\r\n * Update lens flares update positions on all flares based on the screen position\r\n * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\r\n */\r\n\r\nTHREE.LensFlare.prototype.updateLensFlares = function () {\r\n\r\n\tvar f, fl = this.lensFlares.length;\r\n\tvar flare;\r\n\tvar vecX = -this.positionScreen.x * 2;\r\n\tvar vecY = -this.positionScreen.y * 2;\r\n\r\n\tfor( f = 0; f < fl; f ++ ) {\r\n\r\n\t\tflare = this.lensFlares[ f ];\r\n\r\n\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\r\n\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\r\n\r\n\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\r\n\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MorphBlendMesh = function( geometry, material ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.animationsMap = {};\r\n\tthis.animationsList = [];\r\n\r\n\t// prepare default animation\r\n\t// (all frames played together in 1 second)\r\n\r\n\tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n\tvar name = \"__default\";\r\n\r\n\tvar startFrame = 0;\r\n\tvar endFrame = numFrames - 1;\r\n\r\n\tvar fps = numFrames / 1;\r\n\r\n\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\tthis.setAnimationWeight( name, 1 );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\r\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n\tvar animation = {\r\n\r\n\t\tstartFrame: start,\r\n\t\tendFrame: end,\r\n\r\n\t\tlength: end - start + 1,\r\n\r\n\t\tfps: fps,\r\n\t\tduration: ( end - start ) / fps,\r\n\r\n\t\tlastFrame: 0,\r\n\t\tcurrentFrame: 0,\r\n\r\n\t\tactive: false,\r\n\r\n\t\ttime: 0,\r\n\t\tdirection: 1,\r\n\t\tweight: 1,\r\n\r\n\t\tdirectionBackwards: false,\r\n\t\tmirroredLoop: false\r\n\r\n\t};\r\n\r\n\tthis.animationsMap[ name ] = animation;\r\n\tthis.animationsList.push( animation );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n\tvar pattern = /([a-z]+)(\\d+)/;\r\n\r\n\tvar firstAnimation, frameRanges = {};\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\tvar chunks = morph.name.match( pattern );\r\n\r\n\t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n\t\t\tvar name = chunks[ 1 ];\r\n\t\t\tvar num = chunks[ 2 ];\r\n\r\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: -Infinity };\r\n\r\n\t\t\tvar range = frameRanges[ name ];\r\n\r\n\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\tif ( i > range.end ) range.end = i;\r\n\r\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var name in frameRanges ) {\r\n\r\n\t\tvar range = frameRanges[ name ];\r\n\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n\t}\r\n\r\n\tthis.firstAnimation = firstAnimation;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = 1;\r\n\t\tanimation.directionBackwards = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = -1;\r\n\t\tanimation.directionBackwards = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.fps = fps;\r\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.duration = duration;\r\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.weight = weight;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = time;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n\tvar time = 0;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\ttime = animation.time;\r\n\r\n\t}\r\n\r\n\treturn time;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n\tvar duration = -1;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tduration = animation.duration;\r\n\r\n\t}\r\n\r\n\treturn duration;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = 0;\r\n\t\tanimation.active = true;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( \"animation[\" + name + \"] undefined\" );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.active = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n\t\tvar animation = this.animationsList[ i ];\r\n\r\n\t\tif ( ! animation.active ) continue;\r\n\r\n\t\tvar frameTime = animation.duration / animation.length;\r\n\r\n\t\tanimation.time += animation.direction * delta;\r\n\r\n\t\tif ( animation.mirroredLoop ) {\r\n\r\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n\t\t\t\tanimation.direction *= -1;\r\n\r\n\t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( animation.time < 0 ) {\r\n\r\n\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n\t\t}\r\n\r\n\t\tvar keyframe = animation.startFrame + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\tvar weight = animation.weight;\r\n\r\n\t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\tanimation.currentFrame = keyframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlarePlugin = function ( ) {\r\n\r\n\tvar _gl, _renderer, _precision, _lensFlare = {};\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\t_precision = renderer.getPrecision();\r\n\r\n\t\t_lensFlare.vertices = new Float32Array( 8 + 8 );\r\n\t\t_lensFlare.faces = new Uint16Array( 6 );\r\n\r\n\t\tvar i = 0;\r\n\t\t_lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = -1;\t// vertex\r\n\t\t_lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 0;\t// uv... etc.\r\n\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = -1;\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 0;\r\n\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;\r\n\t\t_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;\r\n\r\n\t\t_lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = 1;\r\n\t\t_lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 1;\r\n\r\n\t\ti = 0;\r\n\t\t_lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 1; _lensFlare.faces[ i++ ] = 2;\r\n\t\t_lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 2; _lensFlare.faces[ i++ ] = 3;\r\n\r\n\t\t// buffers\r\n\r\n\t\t_lensFlare.vertexBuffer     = _gl.createBuffer();\r\n\t\t_lensFlare.elementBuffer    = _gl.createBuffer();\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );\r\n\t\t_gl.bufferData( _gl.ARRAY_BUFFER, _lensFlare.vertices, _gl.STATIC_DRAW );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );\r\n\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.faces, _gl.STATIC_DRAW );\r\n\r\n\t\t// textures\r\n\r\n\t\t_lensFlare.tempTexture      = _gl.createTexture();\r\n\t\t_lensFlare.occlusionTexture = _gl.createTexture();\r\n\r\n\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\r\n\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, 16, 16, 0, _gl.RGB, _gl.UNSIGNED_BYTE, null );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );\r\n\r\n\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );\r\n\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, 16, 16, 0, _gl.RGBA, _gl.UNSIGNED_BYTE, null );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );\r\n\t\t_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );\r\n\r\n\t\tif ( _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) <= 0 ) {\r\n\r\n\t\t\t_lensFlare.hasVertexTexture = false;\r\n\t\t\t_lensFlare.program = createProgram( THREE.ShaderFlares[ \"lensFlare\" ], _precision );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_lensFlare.hasVertexTexture = true;\r\n\t\t\t_lensFlare.program = createProgram( THREE.ShaderFlares[ \"lensFlareVertexTexture\" ], _precision );\r\n\r\n\t\t}\r\n\r\n\t\t_lensFlare.attributes = {};\r\n\t\t_lensFlare.uniforms = {};\r\n\r\n\t\t_lensFlare.attributes.vertex       = _gl.getAttribLocation ( _lensFlare.program, \"position\" );\r\n\t\t_lensFlare.attributes.uv           = _gl.getAttribLocation ( _lensFlare.program, \"uv\" );\r\n\r\n\t\t_lensFlare.uniforms.renderType     = _gl.getUniformLocation( _lensFlare.program, \"renderType\" );\r\n\t\t_lensFlare.uniforms.map            = _gl.getUniformLocation( _lensFlare.program, \"map\" );\r\n\t\t_lensFlare.uniforms.occlusionMap   = _gl.getUniformLocation( _lensFlare.program, \"occlusionMap\" );\r\n\t\t_lensFlare.uniforms.opacity        = _gl.getUniformLocation( _lensFlare.program, \"opacity\" );\r\n\t\t_lensFlare.uniforms.color          = _gl.getUniformLocation( _lensFlare.program, \"color\" );\r\n\t\t_lensFlare.uniforms.scale          = _gl.getUniformLocation( _lensFlare.program, \"scale\" );\r\n\t\t_lensFlare.uniforms.rotation       = _gl.getUniformLocation( _lensFlare.program, \"rotation\" );\r\n\t\t_lensFlare.uniforms.screenPosition = _gl.getUniformLocation( _lensFlare.program, \"screenPosition\" );\r\n\r\n\t};\r\n\r\n\r\n\t/*\r\n\t * Render lens flares\r\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\r\n\t *         reads these back and calculates occlusion.\r\n\t *         Then _lensFlare.update_lensFlares() is called to re-position and\r\n\t *         update transparency of flares. Then they are rendered.\r\n\t *\r\n\t */\r\n\r\n\tthis.render = function ( scene, camera, viewportWidth, viewportHeight ) {\r\n\r\n\t\tvar flares = scene.__webglFlares,\r\n\t\t\tnFlares = flares.length;\r\n\r\n\t\tif ( ! nFlares ) return;\r\n\r\n\t\tvar tempPosition = new THREE.Vector3();\r\n\r\n\t\tvar invAspect = viewportHeight / viewportWidth,\r\n\t\t\thalfViewportWidth = viewportWidth * 0.5,\r\n\t\t\thalfViewportHeight = viewportHeight * 0.5;\r\n\r\n\t\tvar size = 16 / viewportHeight,\r\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\r\n\r\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\r\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\r\n\r\n\t\tvar uniforms = _lensFlare.uniforms,\r\n\t\t\tattributes = _lensFlare.attributes;\r\n\r\n\t\t// set _lensFlare program and reset blending\r\n\r\n\t\t_gl.useProgram( _lensFlare.program );\r\n\r\n\t\t_gl.enableVertexAttribArray( _lensFlare.attributes.vertex );\r\n\t\t_gl.enableVertexAttribArray( _lensFlare.attributes.uv );\r\n\r\n\t\t// loop through all lens flares to update their occlusion and positions\r\n\t\t// setup gl and common used attribs/unforms\r\n\r\n\t\t_gl.uniform1i( uniforms.occlusionMap, 0 );\r\n\t\t_gl.uniform1i( uniforms.map, 1 );\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );\r\n\t\t_gl.vertexAttribPointer( attributes.vertex, 2, _gl.FLOAT, false, 2 * 8, 0 );\r\n\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );\r\n\r\n\t\t_gl.disable( _gl.CULL_FACE );\r\n\t\t_gl.depthMask( false );\r\n\r\n\t\tvar i, j, jl, flare, sprite;\r\n\r\n\t\tfor ( i = 0; i < nFlares; i ++ ) {\r\n\r\n\t\t\tsize = 16 / viewportHeight;\r\n\t\t\tscale.set( size * invAspect, size );\r\n\r\n\t\t\t// calc object screen position\r\n\r\n\t\t\tflare = flares[ i ];\r\n\r\n\t\t\ttempPosition.set( flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14] );\r\n\r\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\r\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\r\n\r\n\t\t\t// setup arrays for gl programs\r\n\r\n\t\t\tscreenPosition.copy( tempPosition )\r\n\r\n\t\t\tscreenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;\r\n\t\t\tscreenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;\r\n\r\n\t\t\t// screen cull\r\n\r\n\t\t\tif ( _lensFlare.hasVertexTexture || (\r\n\t\t\t\tscreenPositionPixels.x > 0 &&\r\n\t\t\t\tscreenPositionPixels.x < viewportWidth &&\r\n\t\t\t\tscreenPositionPixels.y > 0 &&\r\n\t\t\t\tscreenPositionPixels.y < viewportHeight ) ) {\r\n\r\n\t\t\t\t// save current RGB to temp texture\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE1 );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\r\n\t\t\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// render pink quad\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.renderType, 0 );\r\n\t\t\t\t_gl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t_gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\r\n\t\t\t\t_gl.disable( _gl.BLEND );\r\n\t\t\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// copy result to occlusionMap\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );\r\n\t\t\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// restore graphics\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.renderType, 1 );\r\n\t\t\t\t_gl.disable( _gl.DEPTH_TEST );\r\n\r\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE1 );\r\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// update object positions\r\n\r\n\t\t\t\tflare.positionScreen.copy( screenPosition )\r\n\r\n\t\t\t\tif ( flare.customUpdateCallback ) {\r\n\r\n\t\t\t\t\tflare.customUpdateCallback( flare );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tflare.updateLensFlares();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render flares\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.renderType, 2 );\r\n\t\t\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\t\t\tfor ( j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tsprite = flare.lensFlares[ j ];\r\n\r\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\r\n\r\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\r\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\r\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\r\n\r\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewportHeight;\r\n\r\n\t\t\t\t\t\tscale.x = size * invAspect;\r\n\t\t\t\t\t\tscale.y = size;\r\n\r\n\t\t\t\t\t\t_gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\t\t\t\t\t_gl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\t\t_gl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\r\n\t\t\t\t\t\t_gl.uniform1f( uniforms.opacity, sprite.opacity );\r\n\t\t\t\t\t\t_gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\r\n\r\n\t\t\t\t\t\t_renderer.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\r\n\t\t\t\t\t\t_renderer.setTexture( sprite.texture, 1 );\r\n\r\n\t\t\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\t\t_gl.enable( _gl.DEPTH_TEST );\r\n\t\t_gl.depthMask( true );\r\n\r\n\t};\r\n\r\n\tfunction createProgram ( shader, precision ) {\r\n\r\n\t\tvar program = _gl.createProgram();\r\n\r\n\t\tvar fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );\r\n\t\tvar vertexShader = _gl.createShader( _gl.VERTEX_SHADER );\r\n\r\n\t\tvar prefix = \"precision \" + precision + \" float;\\n\";\r\n\r\n\t\t_gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\t_gl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\r\n\t\t_gl.compileShader( fragmentShader );\r\n\t\t_gl.compileShader( vertexShader );\r\n\r\n\t\t_gl.attachShader( program, fragmentShader );\r\n\t\t_gl.attachShader( program, vertexShader );\r\n\r\n\t\t_gl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ShadowMapPlugin = function ( ) {\r\n\r\n\tvar _gl,\r\n\t_renderer,\r\n\t_depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_min = new THREE.Vector3(),\r\n\t_max = new THREE.Vector3();\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\r\n\t\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\r\n\r\n\t\t_depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );\r\n\t\t_depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );\r\n\t\t_depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );\r\n\t\t_depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );\r\n\r\n\t\t_depthMaterial._shadowPass = true;\r\n\t\t_depthMaterialMorph._shadowPass = true;\r\n\t\t_depthMaterialSkin._shadowPass = true;\r\n\t\t_depthMaterialMorphSkin._shadowPass = true;\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( ! ( _renderer.shadowMapEnabled && _renderer.shadowMapAutoUpdate ) ) return;\r\n\r\n\t\tthis.update( scene, camera );\r\n\r\n\t};\r\n\r\n\tthis.update = function ( scene, camera ) {\r\n\r\n\t\tvar i, il, j, jl, n,\r\n\r\n\t\tshadowMap, shadowMatrix, shadowCamera,\r\n\t\tprogram, buffer, material,\r\n\t\twebglObject, object, light,\r\n\t\trenderList,\r\n\r\n\t\tlights = [],\r\n\t\tk = 0,\r\n\r\n\t\tfog = null;\r\n\r\n\t\t// set GL state for depth map\r\n\r\n\t\t_gl.clearColor( 1, 1, 1, 1 );\r\n\t\t_gl.disable( _gl.BLEND );\r\n\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\tif ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t_gl.cullFace( _gl.FRONT );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t}\r\n\r\n\t\t_renderer.setDepthTest( true );\r\n\r\n\t\t// preprocess lights\r\n\t\t// \t- skip lights that are not casting shadows\r\n\t\t//\t- create virtual lights for cascaded shadow maps\r\n\r\n\t\tfor ( i = 0, il = scene.__lights.length; i < il; i ++ ) {\r\n\r\n\t\t\tlight = scene.__lights[ i ];\r\n\r\n\t\t\tif ( ! light.castShadow ) continue;\r\n\r\n\t\t\tif ( ( light instanceof THREE.DirectionalLight ) && light.shadowCascade ) {\r\n\r\n\t\t\t\tfor ( n = 0; n < light.shadowCascadeCount; n ++ ) {\r\n\r\n\t\t\t\t\tvar virtualLight;\r\n\r\n\t\t\t\t\tif ( ! light.shadowCascadeArray[ n ] ) {\r\n\r\n\t\t\t\t\t\tvirtualLight = createVirtualLight( light, n );\r\n\t\t\t\t\t\tvirtualLight.originalCamera = camera;\r\n\r\n\t\t\t\t\t\tvar gyro = new THREE.Gyroscope();\r\n\t\t\t\t\t\tgyro.position = light.shadowCascadeOffset;\r\n\r\n\t\t\t\t\t\tgyro.add( virtualLight );\r\n\t\t\t\t\t\tgyro.add( virtualLight.target );\r\n\r\n\t\t\t\t\t\tcamera.add( gyro );\r\n\r\n\t\t\t\t\t\tlight.shadowCascadeArray[ n ] = virtualLight;\r\n\r\n\t\t\t\t\t\tconsole.log( \"Created virtualLight\", virtualLight );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvirtualLight = light.shadowCascadeArray[ n ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tupdateVirtualLight( light, n );\r\n\r\n\t\t\t\t\tlights[ k ] = virtualLight;\r\n\t\t\t\t\tk ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlights[ k ] = light;\r\n\t\t\t\tk ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// render depth map\r\n\r\n\t\tfor ( i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\tlight = lights[ i ];\r\n\r\n\t\t\tif ( ! light.shadowMap ) {\r\n\r\n\t\t\t\tvar shadowFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\tif ( _renderer.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\t\t\tshadowFilter = THREE.NearestFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };\r\n\r\n\t\t\t\tlight.shadowMap = new THREE.WebGLRenderTarget( light.shadowMapWidth, light.shadowMapHeight, pars );\r\n\t\t\t\tlight.shadowMapSize = new THREE.Vector2( light.shadowMapWidth, light.shadowMapHeight );\r\n\r\n\t\t\t\tlight.shadowMatrix = new THREE.Matrix4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! light.shadowCamera ) {\r\n\r\n\t\t\t\tif ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\t\tlight.shadowCamera = new THREE.PerspectiveCamera( light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar );\r\n\r\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t\tlight.shadowCamera = new THREE.OrthographicCamera( light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( \"Unsupported light type for shadow\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscene.add( light.shadowCamera );\r\n\r\n\t\t\t\tif ( _renderer.autoUpdateScene ) scene.updateMatrixWorld();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( light.shadowCameraVisible && ! light.cameraHelper ) {\r\n\r\n\t\t\t\tlight.cameraHelper = new THREE.CameraHelper( light.shadowCamera );\r\n\t\t\t\tlight.shadowCamera.add( light.cameraHelper );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( light.isVirtual && virtualLight.originalCamera == camera ) {\r\n\r\n\t\t\t\tupdateShadowCamera( camera, light );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tshadowMap = light.shadowMap;\r\n\t\t\tshadowMatrix = light.shadowMatrix;\r\n\t\t\tshadowCamera = light.shadowCamera;\r\n\r\n\t\t\tshadowCamera.position.copy( light.matrixWorld.getPosition() );\r\n\t\t\tshadowCamera.lookAt( light.target.matrixWorld.getPosition() );\r\n\t\t\tshadowCamera.updateMatrixWorld();\r\n\r\n\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\r\n\r\n\t\t\tif ( light.cameraHelper ) light.cameraHelper.visible = light.shadowCameraVisible;\r\n\t\t\tif ( light.shadowCameraVisible ) light.cameraHelper.update();\r\n\r\n\t\t\t// compute shadow matrix\r\n\r\n\t\t\tshadowMatrix.set( 0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t\t\t\t  0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t\t\t\t  0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t\t\t\t  0.0, 0.0, 0.0, 1.0 );\r\n\r\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t// render shadow map\r\n\r\n\t\t\t_renderer.setRenderTarget( shadowMap );\r\n\t\t\t_renderer.clear();\r\n\r\n\t\t\t// set object matrices & frustum culling\r\n\r\n\t\t\trenderList = scene.__webglObjects;\r\n\r\n\t\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\twebglObject = renderList[ j ];\r\n\t\t\t\tobject = webglObject.object;\r\n\r\n\t\t\t\twebglObject.render = false;\r\n\r\n\t\t\t\tif ( object.visible && object.castShadow ) {\r\n\r\n\t\t\t\t\tif ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\t\twebglObject.render = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// render regular objects\r\n\r\n\t\t\tvar objectMaterial, useMorphing, useSkinning;\r\n\r\n\t\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\twebglObject = renderList[ j ];\r\n\r\n\t\t\t\tif ( webglObject.render ) {\r\n\r\n\t\t\t\t\tobject = webglObject.object;\r\n\t\t\t\t\tbuffer = webglObject.buffer;\r\n\r\n\t\t\t\t\t// culling is overriden globally for all objects\r\n\t\t\t\t\t// while rendering depth map\r\n\r\n\t\t\t\t\t// need to deal with MeshFaceMaterial somehow\r\n\t\t\t\t\t// in that case just use the first of material.materials for now\r\n\t\t\t\t\t// (proper solution would require to break objects by materials\r\n\t\t\t\t\t//  similarly to regular rendering and then set corresponding\r\n\t\t\t\t\t//  depth materials per each chunk instead of just once per object)\r\n\r\n\t\t\t\t\tobjectMaterial = getObjectMaterial( object );\r\n\r\n\t\t\t\t\tuseMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;\r\n\t\t\t\t\tuseSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;\r\n\r\n\t\t\t\t\tif ( object.customDepthMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterial = object.customDepthMaterial;\r\n\r\n\t\t\t\t\t} else if ( useSkinning ) {\r\n\r\n\t\t\t\t\t\tmaterial = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;\r\n\r\n\t\t\t\t\t} else if ( useMorphing ) {\r\n\r\n\t\t\t\t\t\tmaterial = _depthMaterialMorph;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tmaterial = _depthMaterial;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_renderer.renderBuffer( shadowCamera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// set matrices and render immediate objects\r\n\r\n\t\t\trenderList = scene.__webglObjectsImmediate;\r\n\r\n\t\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\twebglObject = renderList[ j ];\r\n\t\t\t\tobject = webglObject.object;\r\n\r\n\t\t\t\tif ( object.visible && object.castShadow ) {\r\n\r\n\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\t_renderer.renderImmediateObject( shadowCamera, scene.__lights, fog, _depthMaterial, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore GL state\r\n\r\n\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\tclearAlpha = _renderer.getClearAlpha();\r\n\r\n\t\t_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );\r\n\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\tif ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction createVirtualLight( light, cascade ) {\r\n\r\n\t\tvar virtualLight = new THREE.DirectionalLight();\r\n\r\n\t\tvirtualLight.isVirtual = true;\r\n\r\n\t\tvirtualLight.onlyShadow = true;\r\n\t\tvirtualLight.castShadow = true;\r\n\r\n\t\tvirtualLight.shadowCameraNear = light.shadowCameraNear;\r\n\t\tvirtualLight.shadowCameraFar = light.shadowCameraFar;\r\n\r\n\t\tvirtualLight.shadowCameraLeft = light.shadowCameraLeft;\r\n\t\tvirtualLight.shadowCameraRight = light.shadowCameraRight;\r\n\t\tvirtualLight.shadowCameraBottom = light.shadowCameraBottom;\r\n\t\tvirtualLight.shadowCameraTop = light.shadowCameraTop;\r\n\r\n\t\tvirtualLight.shadowCameraVisible = light.shadowCameraVisible;\r\n\r\n\t\tvirtualLight.shadowDarkness = light.shadowDarkness;\r\n\r\n\t\tvirtualLight.shadowBias = light.shadowCascadeBias[ cascade ];\r\n\t\tvirtualLight.shadowMapWidth = light.shadowCascadeWidth[ cascade ];\r\n\t\tvirtualLight.shadowMapHeight = light.shadowCascadeHeight[ cascade ];\r\n\r\n\t\tvirtualLight.pointsWorld = [];\r\n\t\tvirtualLight.pointsFrustum = [];\r\n\r\n\t\tvar pointsWorld = virtualLight.pointsWorld,\r\n\t\t\tpointsFrustum = virtualLight.pointsFrustum;\r\n\r\n\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\tpointsWorld[ i ] = new THREE.Vector3();\r\n\t\t\tpointsFrustum[ i ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tvar nearZ = light.shadowCascadeNearZ[ cascade ];\r\n\t\tvar farZ = light.shadowCascadeFarZ[ cascade ];\r\n\r\n\t\tpointsFrustum[ 0 ].set( -1, -1, nearZ );\r\n\t\tpointsFrustum[ 1 ].set(  1, -1, nearZ );\r\n\t\tpointsFrustum[ 2 ].set( -1,  1, nearZ );\r\n\t\tpointsFrustum[ 3 ].set(  1,  1, nearZ );\r\n\r\n\t\tpointsFrustum[ 4 ].set( -1, -1, farZ );\r\n\t\tpointsFrustum[ 5 ].set(  1, -1, farZ );\r\n\t\tpointsFrustum[ 6 ].set( -1,  1, farZ );\r\n\t\tpointsFrustum[ 7 ].set(  1,  1, farZ );\r\n\r\n\t\treturn virtualLight;\r\n\r\n\t}\r\n\r\n\t// Synchronize virtual light with the original light\r\n\r\n\tfunction updateVirtualLight( light, cascade ) {\r\n\r\n\t\tvar virtualLight = light.shadowCascadeArray[ cascade ];\r\n\r\n\t\tvirtualLight.position.copy( light.position );\r\n\t\tvirtualLight.target.position.copy( light.target.position );\r\n\t\tvirtualLight.lookAt( virtualLight.target );\r\n\r\n\t\tvirtualLight.shadowCameraVisible = light.shadowCameraVisible;\r\n\t\tvirtualLight.shadowDarkness = light.shadowDarkness;\r\n\r\n\t\tvirtualLight.shadowBias = light.shadowCascadeBias[ cascade ];\r\n\r\n\t\tvar nearZ = light.shadowCascadeNearZ[ cascade ];\r\n\t\tvar farZ = light.shadowCascadeFarZ[ cascade ];\r\n\r\n\t\tvar pointsFrustum = virtualLight.pointsFrustum;\r\n\r\n\t\tpointsFrustum[ 0 ].z = nearZ;\r\n\t\tpointsFrustum[ 1 ].z = nearZ;\r\n\t\tpointsFrustum[ 2 ].z = nearZ;\r\n\t\tpointsFrustum[ 3 ].z = nearZ;\r\n\r\n\t\tpointsFrustum[ 4 ].z = farZ;\r\n\t\tpointsFrustum[ 5 ].z = farZ;\r\n\t\tpointsFrustum[ 6 ].z = farZ;\r\n\t\tpointsFrustum[ 7 ].z = farZ;\r\n\r\n\t}\r\n\r\n\t// Fit shadow camera's ortho frustum to camera frustum\r\n\r\n\tfunction updateShadowCamera( camera, light ) {\r\n\r\n\t\tvar shadowCamera = light.shadowCamera,\r\n\t\t\tpointsFrustum = light.pointsFrustum,\r\n\t\t\tpointsWorld = light.pointsWorld;\r\n\r\n\t\t_min.set( Infinity, Infinity, Infinity );\r\n\t\t_max.set( -Infinity, -Infinity, -Infinity );\r\n\r\n\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\tvar p = pointsWorld[ i ];\r\n\r\n\t\t\tp.copy( pointsFrustum[ i ] );\r\n\t\t\tTHREE.ShadowMapPlugin.__projector.unprojectVector( p, camera );\r\n\r\n\t\t\tp.applyMatrix4( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\tif ( p.x < _min.x ) _min.x = p.x;\r\n\t\t\tif ( p.x > _max.x ) _max.x = p.x;\r\n\r\n\t\t\tif ( p.y < _min.y ) _min.y = p.y;\r\n\t\t\tif ( p.y > _max.y ) _max.y = p.y;\r\n\r\n\t\t\tif ( p.z < _min.z ) _min.z = p.z;\r\n\t\t\tif ( p.z > _max.z ) _max.z = p.z;\r\n\r\n\t\t}\r\n\r\n\t\tshadowCamera.left = _min.x;\r\n\t\tshadowCamera.right = _max.x;\r\n\t\tshadowCamera.top = _max.y;\r\n\t\tshadowCamera.bottom = _min.y;\r\n\r\n\t\t// can't really fit near/far\r\n\t\t//shadowCamera.near = _min.z;\r\n\t\t//shadowCamera.far = _max.z;\r\n\r\n\t\tshadowCamera.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\t// For the moment just ignore objects that have multiple materials with different animation methods\r\n\t// Only the first material will be taken into account for deciding which depth material to use for shadow maps\r\n\r\n\tfunction getObjectMaterial( object ) {\r\n\r\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\r\n\t\t\t? object.material.materials[ 0 ]\r\n\t\t\t: object.material;\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.ShadowMapPlugin.__projector = new THREE.Projector();\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpritePlugin = function ( ) {\r\n\r\n\tvar _gl, _renderer, _precision, _sprite = {};\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\t_precision = renderer.getPrecision();\r\n\r\n\t\t_sprite.vertices = new Float32Array( 8 + 8 );\r\n\t\t_sprite.faces    = new Uint16Array( 6 );\r\n\r\n\t\tvar i = 0;\r\n\r\n\t\t_sprite.vertices[ i++ ] = -1; _sprite.vertices[ i++ ] = -1;\t// vertex 0\r\n\t\t_sprite.vertices[ i++ ] = 0;  _sprite.vertices[ i++ ] = 0;\t// uv 0\r\n\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = -1;\t// vertex 1\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 0;\t// uv 1\r\n\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 1;\t// vertex 2\r\n\t\t_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 1;\t// uv 2\r\n\r\n\t\t_sprite.vertices[ i++ ] = -1; _sprite.vertices[ i++ ] = 1;\t// vertex 3\r\n\t\t_sprite.vertices[ i++ ] = 0;  _sprite.vertices[ i++ ] = 1;\t// uv 3\r\n\r\n\t\ti = 0;\r\n\r\n\t\t_sprite.faces[ i++ ] = 0; _sprite.faces[ i++ ] = 1; _sprite.faces[ i++ ] = 2;\r\n\t\t_sprite.faces[ i++ ] = 0; _sprite.faces[ i++ ] = 2; _sprite.faces[ i++ ] = 3;\r\n\r\n\t\t_sprite.vertexBuffer  = _gl.createBuffer();\r\n\t\t_sprite.elementBuffer = _gl.createBuffer();\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _sprite.vertexBuffer );\r\n\t\t_gl.bufferData( _gl.ARRAY_BUFFER, _sprite.vertices, _gl.STATIC_DRAW );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer );\r\n\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _sprite.faces, _gl.STATIC_DRAW );\r\n\r\n\t\t_sprite.program = createProgram( THREE.ShaderSprite[ \"sprite\" ], _precision );\r\n\r\n\t\t_sprite.attributes = {};\r\n\t\t_sprite.uniforms = {};\r\n\r\n\t\t_sprite.attributes.position           = _gl.getAttribLocation ( _sprite.program, \"position\" );\r\n\t\t_sprite.attributes.uv                 = _gl.getAttribLocation ( _sprite.program, \"uv\" );\r\n\r\n\t\t_sprite.uniforms.uvOffset             = _gl.getUniformLocation( _sprite.program, \"uvOffset\" );\r\n\t\t_sprite.uniforms.uvScale              = _gl.getUniformLocation( _sprite.program, \"uvScale\" );\r\n\r\n\t\t_sprite.uniforms.rotation             = _gl.getUniformLocation( _sprite.program, \"rotation\" );\r\n\t\t_sprite.uniforms.scale                = _gl.getUniformLocation( _sprite.program, \"scale\" );\r\n\t\t_sprite.uniforms.alignment            = _gl.getUniformLocation( _sprite.program, \"alignment\" );\r\n\r\n\t\t_sprite.uniforms.color                = _gl.getUniformLocation( _sprite.program, \"color\" );\r\n\t\t_sprite.uniforms.map                  = _gl.getUniformLocation( _sprite.program, \"map\" );\r\n\t\t_sprite.uniforms.opacity              = _gl.getUniformLocation( _sprite.program, \"opacity\" );\r\n\r\n\t\t_sprite.uniforms.useScreenCoordinates = _gl.getUniformLocation( _sprite.program, \"useScreenCoordinates\" );\r\n\t\t_sprite.uniforms.sizeAttenuation   \t  = _gl.getUniformLocation( _sprite.program, \"sizeAttenuation\" );\r\n\t\t_sprite.uniforms.screenPosition    \t  = _gl.getUniformLocation( _sprite.program, \"screenPosition\" );\r\n\t\t_sprite.uniforms.modelViewMatrix      = _gl.getUniformLocation( _sprite.program, \"modelViewMatrix\" );\r\n\t\t_sprite.uniforms.projectionMatrix     = _gl.getUniformLocation( _sprite.program, \"projectionMatrix\" );\r\n\r\n\t\t_sprite.uniforms.fogType \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogType\" );\r\n\t\t_sprite.uniforms.fogDensity \t\t  = _gl.getUniformLocation( _sprite.program, \"fogDensity\" );\r\n\t\t_sprite.uniforms.fogNear \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogNear\" );\r\n\t\t_sprite.uniforms.fogFar \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogFar\" );\r\n\t\t_sprite.uniforms.fogColor \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"fogColor\" );\r\n\r\n\t\t_sprite.uniforms.alphaTest \t\t  \t  = _gl.getUniformLocation( _sprite.program, \"alphaTest\" );\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera, viewportWidth, viewportHeight ) {\r\n\r\n\t\tvar sprites = scene.__webglSprites,\r\n\t\t\tnSprites = sprites.length;\r\n\r\n\t\tif ( ! nSprites ) return;\r\n\r\n\t\tvar attributes = _sprite.attributes,\r\n\t\t\tuniforms = _sprite.uniforms;\r\n\r\n\t\tvar invAspect = viewportHeight / viewportWidth;\r\n\r\n\t\tvar halfViewportWidth = viewportWidth * 0.5,\r\n\t\t\thalfViewportHeight = viewportHeight * 0.5;\r\n\r\n\t\t// setup gl\r\n\r\n\t\t_gl.useProgram( _sprite.program );\r\n\r\n\t\t_gl.enableVertexAttribArray( attributes.position );\r\n\t\t_gl.enableVertexAttribArray( attributes.uv );\r\n\r\n\t\t_gl.disable( _gl.CULL_FACE );\r\n\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, _sprite.vertexBuffer );\r\n\t\t_gl.vertexAttribPointer( attributes.position, 2, _gl.FLOAT, false, 2 * 8, 0 );\r\n\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer );\r\n\r\n\t\t_gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\t_gl.activeTexture( _gl.TEXTURE0 );\r\n\t\t_gl.uniform1i( uniforms.map, 0 );\r\n\r\n\t\tvar oldFogType = 0;\r\n\t\tvar sceneFogType = 0;\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\tif ( fog ) {\r\n\r\n\t\t\t_gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\r\n\r\n\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.fogNear, fog.near );\r\n\t\t\t\t_gl.uniform1f( uniforms.fogFar, fog.far );\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.fogType, 1 );\r\n\t\t\t\toldFogType = 1;\r\n\t\t\t\tsceneFogType = 1;\r\n\r\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.fogDensity, fog.density );\r\n\r\n\t\t\t\t_gl.uniform1i( uniforms.fogType, 2 );\r\n\t\t\t\toldFogType = 2;\r\n\t\t\t\tsceneFogType = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.uniform1i( uniforms.fogType, 0 );\r\n\t\t\toldFogType = 0;\r\n\t\t\tsceneFogType = 0;\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// update positions and sort\r\n\r\n\t\tvar i, sprite, material, screenPosition, size, fogType, scale = [];\r\n\r\n\t\tfor( i = 0; i < nSprites; i ++ ) {\r\n\r\n\t\t\tsprite = sprites[ i ];\r\n\t\t\tmaterial = sprite.material;\r\n\r\n\t\t\tif ( ! sprite.visible || material.opacity === 0 ) continue;\r\n\r\n\t\t\tif ( ! material.useScreenCoordinates ) {\r\n\r\n\t\t\t\tsprite._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\r\n\t\t\t\tsprite.z = - sprite._modelViewMatrix.elements[ 14 ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsprite.z = - sprite.position.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsprites.sort( painterSortStable );\r\n\r\n\t\t// render all sprites\r\n\r\n\t\tfor( i = 0; i < nSprites; i ++ ) {\r\n\r\n\t\t\tsprite = sprites[ i ];\r\n\t\t\tmaterial = sprite.material;\r\n\r\n\t\t\tif ( ! sprite.visible || material.opacity === 0 ) continue;\r\n\r\n\t\t\tif ( material.map && material.map.image && material.map.image.width ) {\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.alphaTest, material.alphaTest );\r\n\r\n\t\t\t\tif ( material.useScreenCoordinates === true ) {\r\n\r\n\t\t\t\t\t_gl.uniform1i( uniforms.useScreenCoordinates, 1 );\r\n\t\t\t\t\t_gl.uniform3f(\r\n\t\t\t\t\t\tuniforms.screenPosition,\r\n\t\t\t\t\t\t( ( sprite.position.x * _renderer.devicePixelRatio ) - halfViewportWidth  ) / halfViewportWidth,\r\n\t\t\t\t\t\t( halfViewportHeight - ( sprite.position.y * _renderer.devicePixelRatio ) ) / halfViewportHeight,\r\n\t\t\t\t\t\tMath.max( 0, Math.min( 1, sprite.position.z ) )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tscale[ 0 ] = _renderer.devicePixelRatio;\r\n\t\t\t\t\tscale[ 1 ] = _renderer.devicePixelRatio;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.uniform1i( uniforms.useScreenCoordinates, 0 );\r\n\t\t\t\t\t_gl.uniform1i( uniforms.sizeAttenuation, material.sizeAttenuation ? 1 : 0 );\r\n\t\t\t\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements );\r\n\r\n\t\t\t\t\tscale[ 0 ] = 1;\r\n\t\t\t\t\tscale[ 1 ] = 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( scene.fog && material.fog ) {\r\n\r\n\t\t\t\t\tfogType = sceneFogType;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfogType = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( oldFogType !== fogType ) {\r\n\r\n\t\t\t\t\t_gl.uniform1i( uniforms.fogType, fogType );\r\n\t\t\t\t\toldFogType = fogType;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsize = 1 / ( material.scaleByViewport ? viewportHeight : 1 );\r\n\r\n\t\t\t\tscale[ 0 ] *= size * invAspect * sprite.scale.x\r\n\t\t\t\tscale[ 1 ] *= size * sprite.scale.y;\r\n\r\n\t\t\t\t_gl.uniform2f( uniforms.uvScale, material.uvScale.x, material.uvScale.y );\r\n\t\t\t\t_gl.uniform2f( uniforms.uvOffset, material.uvOffset.x, material.uvOffset.y );\r\n\t\t\t\t_gl.uniform2f( uniforms.alignment, material.alignment.x, material.alignment.y );\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.opacity, material.opacity );\r\n\t\t\t\t_gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\r\n\r\n\t\t\t\t_gl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\t\t\t\t_gl.uniform2fv( uniforms.scale, scale );\r\n\r\n\t\t\t\t_renderer.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\t\t_renderer.setDepthTest( material.depthTest );\r\n\t\t\t\t_renderer.setDepthWrite( material.depthWrite );\r\n\t\t\t\t_renderer.setTexture( material.map, 0 );\r\n\r\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\t_gl.enable( _gl.CULL_FACE );\r\n\r\n\t};\r\n\r\n\tfunction createProgram ( shader, precision ) {\r\n\r\n\t\tvar program = _gl.createProgram();\r\n\r\n\t\tvar fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );\r\n\t\tvar vertexShader = _gl.createShader( _gl.VERTEX_SHADER );\r\n\r\n\t\tvar prefix = \"precision \" + precision + \" float;\\n\";\r\n\r\n\t\t_gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\t_gl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\r\n\t\t_gl.compileShader( fragmentShader );\r\n\t\t_gl.compileShader( vertexShader );\r\n\r\n\t\t_gl.attachShader( program, fragmentShader );\r\n\t\t_gl.attachShader( program, vertexShader );\r\n\r\n\t\t_gl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn b.id - a.id;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DepthPassPlugin = function ( ) {\r\n\r\n\tthis.enabled = false;\r\n\tthis.renderTarget = null;\r\n\r\n\tvar _gl,\r\n\t_renderer,\r\n\t_depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\t_projScreenMatrix = new THREE.Matrix4();\r\n\r\n\tthis.init = function ( renderer ) {\r\n\r\n\t\t_gl = renderer.context;\r\n\t\t_renderer = renderer;\r\n\r\n\t\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\r\n\t\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\r\n\r\n\t\t_depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );\r\n\t\t_depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );\r\n\t\t_depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );\r\n\t\t_depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );\r\n\r\n\t\t_depthMaterial._shadowPass = true;\r\n\t\t_depthMaterialMorph._shadowPass = true;\r\n\t\t_depthMaterialSkin._shadowPass = true;\r\n\t\t_depthMaterialMorphSkin._shadowPass = true;\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( ! this.enabled ) return;\r\n\r\n\t\tthis.update( scene, camera );\r\n\r\n\t};\r\n\r\n\tthis.update = function ( scene, camera ) {\r\n\r\n\t\tvar i, il, j, jl, n,\r\n\r\n\t\tprogram, buffer, material,\r\n\t\twebglObject, object, light,\r\n\t\trenderList,\r\n\r\n\t\tfog = null;\r\n\r\n\t\t// set GL state for depth map\r\n\r\n\t\t_gl.clearColor( 1, 1, 1, 1 );\r\n\t\t_gl.disable( _gl.BLEND );\r\n\r\n\t\t_renderer.setDepthTest( true );\r\n\r\n\t\t// update scene\r\n\r\n\t\tif ( _renderer.autoUpdateScene ) scene.updateMatrixWorld();\r\n\r\n\t\t// update camera matrices and frustum\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t// render depth map\r\n\r\n\t\t_renderer.setRenderTarget( this.renderTarget );\r\n\t\t_renderer.clear();\r\n\r\n\t\t// set object matrices & frustum culling\r\n\r\n\t\trenderList = scene.__webglObjects;\r\n\r\n\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ j ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\twebglObject.render = false;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tif ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\twebglObject.render = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// render regular objects\r\n\r\n\t\tvar objectMaterial, useMorphing, useSkinning;\r\n\r\n\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ j ];\r\n\r\n\t\t\tif ( webglObject.render ) {\r\n\r\n\t\t\t\tobject = webglObject.object;\r\n\t\t\t\tbuffer = webglObject.buffer;\r\n\r\n\t\t\t\t// todo: create proper depth material for particles\r\n\r\n\t\t\t\tif ( object instanceof THREE.ParticleSystem && !object.customDepthMaterial ) continue;\r\n\r\n\t\t\t\tobjectMaterial = getObjectMaterial( object );\r\n\r\n\t\t\t\tif ( objectMaterial ) _renderer.setMaterialFaces( object.material );\r\n\r\n\t\t\t\tuseMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;\r\n\t\t\t\tuseSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;\r\n\r\n\t\t\t\tif ( object.customDepthMaterial ) {\r\n\r\n\t\t\t\t\tmaterial = object.customDepthMaterial;\r\n\r\n\t\t\t\t} else if ( useSkinning ) {\r\n\r\n\t\t\t\t\tmaterial = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;\r\n\r\n\t\t\t\t} else if ( useMorphing ) {\r\n\r\n\t\t\t\t\tmaterial = _depthMaterialMorph;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterial = _depthMaterial;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\t_renderer.renderBufferDirect( camera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_renderer.renderBuffer( camera, scene.__lights, fog, material, buffer, object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// set matrices and render immediate objects\r\n\r\n\t\trenderList = scene.__webglObjectsImmediate;\r\n\r\n\t\tfor ( j = 0, jl = renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\twebglObject = renderList[ j ];\r\n\t\t\tobject = webglObject.object;\r\n\r\n\t\t\tif ( object.visible ) {\r\n\r\n\t\t\t\tobject._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t_renderer.renderImmediateObject( camera, scene.__lights, fog, _depthMaterial, object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore GL state\r\n\r\n\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\tclearAlpha = _renderer.getClearAlpha();\r\n\r\n\t\t_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );\r\n\t\t_gl.enable( _gl.BLEND );\r\n\r\n\t};\r\n\r\n\t// For the moment just ignore objects that have multiple materials with different animation methods\r\n\t// Only the first material will be taken into account for deciding which depth material to use\r\n\r\n\tfunction getObjectMaterial( object ) {\r\n\r\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\r\n\t\t\t? object.material.materials[ 0 ]\r\n\t\t\t: object.material;\r\n\r\n\t};\r\n\r\n};\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n *\r\n */\r\n\r\nTHREE.ShaderFlares = {\r\n\r\n\t'lensFlareVertexTexture': {\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\r\n\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\"if( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\",\r\n\t\t\t\t\t\t\t\t\t  \"texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\r\n\r\n\t\t\t\t\t\"vVisibility = (       visibility.r / 9.0 ) *\",\r\n\t\t\t\t\t\t\t\t  \"( 1.0 - visibility.g / 9.0 ) *\",\r\n\t\t\t\t\t\t\t\t  \"(       visibility.b / 9.0 ) *\",\r\n\t\t\t\t\t\t\t\t  \"( 1.0 - visibility.a / 9.0 );\",\r\n\r\n\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t// pink square\r\n\r\n\t\t\t\t\"if( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\r\n\r\n\t\t\t\t// restore\r\n\r\n\t\t\t\t\"} else if( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t// flare\r\n\r\n\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\r\n\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\"\r\n\t\t].join( \"\\n\" )\r\n\r\n\t},\r\n\r\n\r\n\t'lensFlare': {\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\"if( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"precision mediump float;\",\r\n\r\n\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t// pink square\r\n\r\n\t\t\t\t\"if( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\",\r\n\r\n\t\t\t\t// restore\r\n\r\n\t\t\t\t\"} else if( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t// flare\r\n\r\n\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\",\r\n\t\t\t\t\t\t\t\t\t   \"texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\",\r\n\t\t\t\t\t\t\t\t\t   \"texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\",\r\n\t\t\t\t\t\t\t\t\t   \"texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\",\r\n\r\n\t\t\t\t\t\"visibility = ( 1.0 - visibility / 4.0 );\",\r\n\r\n\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\"texture.a *= opacity * visibility;\",\r\n\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t}\r\n\r\n};\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n */\r\n\r\nTHREE.ShaderSprite = {\r\n\r\n\t'sprite': {\r\n\r\n\t\tvertexShader: [\r\n\r\n\t\t\t\"uniform int useScreenCoordinates;\",\r\n\t\t\t\"uniform int sizeAttenuation;\",\r\n\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\"uniform mat4 modelViewMatrix;\",\r\n\t\t\t\"uniform mat4 projectionMatrix;\",\r\n\t\t\t\"uniform float rotation;\",\r\n\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\"uniform vec2 alignment;\",\r\n\t\t\t\"uniform vec2 uvOffset;\",\r\n\t\t\t\"uniform vec2 uvScale;\",\r\n\r\n\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vUV = uvOffset + uv * uvScale;\",\r\n\r\n\t\t\t\t\"vec2 alignedPosition = position + alignment;\",\r\n\r\n\t\t\t\t\"vec2 rotatedPosition;\",\r\n\t\t\t\t\"rotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\",\r\n\t\t\t\t\"rotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\",\r\n\r\n\t\t\t\t\"vec4 finalPosition;\",\r\n\r\n\t\t\t\t\"if( useScreenCoordinates != 0 ) {\",\r\n\r\n\t\t\t\t\t\"finalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\"finalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\",\r\n\t\t\t\t\t\"finalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"gl_Position = finalPosition;\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" ),\r\n\r\n\t\tfragmentShader: [\r\n\r\n\t\t\t\"uniform vec3 color;\",\r\n\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\"uniform float opacity;\",\r\n\r\n\t\t\t\"uniform int fogType;\",\r\n\t\t\t\"uniform vec3 fogColor;\",\r\n\t\t\t\"uniform float fogDensity;\",\r\n\t\t\t\"uniform float fogNear;\",\r\n\t\t\t\"uniform float fogFar;\",\r\n\t\t\t\"uniform float alphaTest;\",\r\n\r\n\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t\"if ( texture.a < alphaTest ) discard;\",\r\n\r\n\t\t\t\t\"gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\",\r\n\r\n\t\t\t\t\"if ( fogType > 0 ) {\",\r\n\r\n\t\t\t\t\t\"float depth = gl_FragCoord.z / gl_FragCoord.w;\",\r\n\t\t\t\t\t\"float fogFactor = 0.0;\",\r\n\r\n\t\t\t\t\t\"if ( fogType == 1 ) {\",\r\n\r\n\t\t\t\t\t\t\"fogFactor = smoothstep( fogNear, fogFar, depth );\",\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"const float LOG2 = 1.442695;\",\r\n\t\t\t\t\t\t\"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\",\r\n\t\t\t\t\t\t\"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\"}\"\r\n\r\n\t\t].join( \"\\n\" )\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Export the THREE object for **Node.js**, with\r\n// backwards-compatibility for the old `require()` API. If we're in\r\n// the browser, add `_` as a global object via a string identifier,\r\n// for Closure Compiler \"advanced\" mode.\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    exports = module.exports = THREE;\r\n  }\r\n  exports.THREE = THREE;\r\n} else {\r\n  this['THREE'] = THREE;\r\n}\r\n","/**\n * @author alteredq / http://alteredqualia.com/\n * @author mr.doob / http://mrdoob.com/\n */\n\nexport default {\n\n\tcanvas : !! window.CanvasRenderingContext2D,\n\twebgl : ( function () { try { return !! window.WebGLRenderingContext && !! document.createElement( 'canvas' ).getContext( 'experimental-webgl' ); } catch( e ) { return false; } } )(),\n\tworkers : !! window.Worker,\n\tfileapi : window.File && window.FileReader && window.FileList && window.Blob,\n\n\tgetWebGLErrorMessage : function () {\n\n\t\tlet domElement = document.createElement( 'div' );\n\n\t\tdomElement.style.fontFamily = 'monospace';\n\t\tdomElement.style.fontSize = '13px';\n\t\tdomElement.style.textAlign = 'center';\n\t\tdomElement.style.background = '#eee';\n\t\tdomElement.style.color = '#000';\n\t\tdomElement.style.padding = '1em';\n\t\tdomElement.style.width = '475px';\n\t\tdomElement.style.margin = '5em auto 0';\n\n\t\tif ( ! this.webgl ) {\n\n\t\t\tdomElement.innerHTML = window.WebGLRenderingContext ? [\n\t\t\t\t'Sorry, your graphics card doesn\\'t support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\">WebGL</a>'\n\t\t\t].join( '\\n' ) : [\n\t\t\t\t'Sorry, your browser doesn\\'t support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\">WebGL</a><br/>',\n\t\t\t\t'Please try with',\n\t\t\t\t'<a href=\"http://www.google.com/chrome\">Chrome 10</a>, ',\n\t\t\t\t'<a href=\"http://www.mozilla.com/en-US/firefox/all-beta.html\">Firefox 4</a> or',\n\t\t\t\t'<a href=\"http://nightly.webkit.org/\">Safari 6</a>'\n\t\t\t].join( '\\n' );\n\n\t\t}\n\n\t\treturn domElement;\n\n\t},\n\n\taddGetWebGLMessage : function ( parameters ) {\n\n\t\tlet parent, id, domElement;\n\n\t\tparameters = parameters || {};\n\n\t\tparent = parameters.parent !== undefined ? parameters.parent : document.body;\n\t\tid = parameters.id !== undefined ? parameters.id : 'oldie';\n\n\t\tdomElement = Detector.getWebGLErrorMessage();\n\t\tdomElement.id = id;\n\n\t\tparent.appendChild( domElement );\n\n\t}\n\n};\n"],"sourceRoot":""}