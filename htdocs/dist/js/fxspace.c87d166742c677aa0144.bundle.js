!function(e){function n(n){for(var i,a,s=n[0],l=n[1],d=n[2],u=0,c=[];u<s.length;u++)a=s[u],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&c.push(o[a][0]),o[a]=0;for(i in l)Object.prototype.hasOwnProperty.call(l,i)&&(e[i]=l[i]);for(f&&f(n);c.length;)c.shift()();return r.push.apply(r,d||[]),t()}function t(){for(var e,n=0;n<r.length;n++){for(var t=r[n],i=!0,s=1;s<t.length;s++){var l=t[s];0!==o[l]&&(i=!1)}i&&(r.splice(n--,1),e=a(a.s=t[0]))}return e}var i={},o={35:0},r=[];function a(n){if(i[n])return i[n].exports;var t=i[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.m=e,a.c=i,a.d=function(e,n,t){a.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,n){if(1&n&&(e=a(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)a.d(t,i,function(n){return e[n]}.bind(null,i));return t},a.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(n,"a",n),n},a.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},a.p="/dist/";var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=n,s=s.slice();for(var d=0;d<s.length;d++)n(s[d]);var f=l;r.push([167,3]),t()}({167:function(e,n,t){"use strict";t.r(n);var i=t(5);try{!function(e){const n=document.createElement("div");Object.assign(n.style,{position:"fixed",left:"0",right:"0",bottom:"0",top:"0",zIndex:"-1"}),document.body.appendChild(n);const t=new i.t;t.domElement.style.width="100%",t.domElement.style.height="100%",n.append(t.domElement),t.autoClearColor=!1;const o=new i.i(-1,1,1,-1,-1,1),r=new i.o,a=new i.k(2,2),s=`\nuniform vec3      iResolution;           // viewport resolution (in pixels)\nuniform float     iTime;                 // shader playback time (in seconds)\n// uniform float     iTimeDelta;            // render time (in seconds)\n// uniform int       iFrame;                // shader playback frame\n// uniform float     iChannelTime[4];       // channel playback time (in seconds)\n// uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)\n// uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click\n// uniform sampler2D iChannel0;\t\t\t// input channel. XX = 2D/Cube\n// uniform sampler2D iChannel1;\n// uniform sampler2D iChannel2;\n// uniform sampler2D iChannel3;\n// uniform vec4      iDate;                 // (year, month, day, time in seconds)\n// uniform float     iSampleRate;           // sound sample rate (i.e., 44100)\n\n${e}\nvoid main() {\n\tmainImage(gl_FragColor, gl_FragCoord.xy);\n}\n  `,l={iTime:{value:0},iResolution:{value:new i.s}},d=new i.p({fragmentShader:s,uniforms:l});r.add(new i.h(a,d)),requestAnimationFrame((function e(n){n*=.001,function(){const e=t.domElement,n=e.clientWidth,i=e.clientHeight,o=e.width!==n||e.height!==i;o&&t.setSize(n,i,!1)}();const i=t.domElement;l.iResolution.value.set(i.width,i.height,1),l.iTime.value=n,t.render(r,o),requestAnimationFrame(e)}))}("\n// Star Nest by Pablo Roman Andrioli\n// https://www.shadertoy.com/view/XlfGRj\n\n// This content is under the MIT License.\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 10\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.005\n\n#define brightness 0.0035\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// get coords and direction\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n\tuv.y *= iResolution.y / iResolution.x;\n\tvec3 dir = vec3(uv * zoom, 1.);\n\tfloat time = iTime * speed + .25;\n\n\tvec3 from = vec3(1., .5, 0.5);\n\tfrom += vec3(time * 2., time, -2.);\n\n\t// volumetric rendering\n\tfloat s = 0.1, fade = 1.;\n\tvec3 v = vec3(0.);\n\tfor (int r = 0; r < volsteps; r++) {\n\t\tvec3 p = from + s * dir * .5;\n\t\tp = abs(vec3(tile) - mod(p, vec3(tile * 2.))); // tiling fold\n\t\tfloat pa, a = pa = 0.;\n\t\tfor (int i = 0; i < iterations; i++) {\n\t\t\tp = abs(p) / dot(p, p) - formuparam; // the magic formula\n\t\t\ta += abs(length(p) - pa); // absolute sum of average change\n\t\t\tpa = length(p);\n\t\t}\n\t\tfloat dm = max(0., darkmatter - a * a * .001); // dark matter\n\t\ta *= a * a; // add contrast\n\t\tif (r > 6) fade *= 1. - dm; // dark matter, don't render near\n\t\t// v+=vec3(dm,dm*.5,0.);\n\t\tv += fade;\n\t\tv += vec3(s, s * s, s * s * s * s) * a * brightness * fade; // coloring based on distance\n\t\tfade *= distfading; // distance fading\n\t\ts += stepsize;\n\t}\n\tv = mix(vec3(length(v)), v, saturation); // color adjust\n\tfragColor = vec4(v * .01, 1.);\n}\n")}catch(e){}}});
//# sourceMappingURL=fxspace.c87d166742c677aa0144.bundle.js.map