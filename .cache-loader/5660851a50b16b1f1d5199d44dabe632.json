{"remainingRequest":"/home/travis/build/csrdelft/csrdelft.nl/node_modules/babel-loader/lib/index.js??ref--1-1!/home/travis/build/csrdelft/csrdelft.nl/resources/assets/js/lib/dataTables.columnGroup.js","dependencies":[{"path":"/home/travis/build/csrdelft/csrdelft.nl/resources/assets/js/lib/dataTables.columnGroup.js","mtime":1545950542032},{"path":"/home/travis/build/csrdelft/csrdelft.nl/node_modules/cache-loader/dist/cjs.js","mtime":1545950603485},{"path":"/home/travis/build/csrdelft/csrdelft.nl/node_modules/babel-loader/lib/index.js","mtime":1545950603465}],"contextDependencies":[],"result":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*! ColumnGroup 1.0.0\n */\n\n/**\n * @summary     ColumnGroup\n * @description Provide the ability to group by a column in a DataTable\n * @version     1.0.0\n * @file        dataTables.columnGroup.js\n * @author      G.J.W. Oolbekkink <g.j.w.oolbekkink@gmail.com\n * @author      P.W.G. Brussee <brussee@live.nl>\n *\n * Alternative implementation of the RowGroup extension for DataTables.\n */\n(function (factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD\n\t\tdefine(['jquery', 'datatables.net'], function ($) {\n\t\t\treturn factory($, window, document);\n\t\t});\n\t} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n\t\t// CommonJS\n\t\tmodule.exports = function (root, $) {\n\t\t\tif (!root) {\n\t\t\t\troot = window;\n\t\t\t}\n\n\t\t\tif (!$ || !$.fn.dataTable) {\n\t\t\t\t$ = require('datatables.net')(root, $).$;\n\t\t\t}\n\n\t\t\treturn factory($, root, root.document);\n\t\t};\n\t} else {\n\t\t// Browser\n\t\tfactory(jQuery, window, document);\n\t}\n})(function ($, window, document, undefined) {\n\t'use strict';\n\n\tvar DataTable = $.fn.dataTable;\n\n\t/**\n  * ColumnGroup allows grouping by column for DataTables\n  * @class ColumnGroup\n  * @constructor\n  * @param {object} settings DataTables settings object\n  * @param {object} config ColumnGroup options\n  */\n\tvar ColumnGroup = function ColumnGroup(settings, config) {\n\t\t// Sanity check - you just know it will happen\n\t\tif (!(this instanceof ColumnGroup)) {\n\t\t\tthrow \"ColumnGroup must be initialised with the 'new' keyword.\";\n\t\t}\n\n\t\tvar dt = new DataTable.Api(settings);\n\n\t\tthis.c = $.extend(true, {}, ColumnGroup.defaults, config);\n\n\t\tthis.s = {\n\t\t\tdt: dt,\n\t\t\tcollapsedGroups: [],\n\t\t\tregrouping: false,\n\t\t\tlastDraw: null\n\t\t};\n\n\t\tvar dtSettings = dt.settings()[0];\n\t\tif (dtSettings._columnGroup) {\n\t\t\tthrow \"ColumnGroup already initialized on table \" + dtSettings.nTable.id;\n\t\t}\n\n\t\tdtSettings._fixedHeader = this;\n\n\t\tthis._fnConstruct();\n\t};\n\n\t$.extend(ColumnGroup.prototype, {\n\t\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Private methods (they are of course public in JS, but recommended as private)\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\t\t\"_fnConstruct\": function _fnConstruct() {\n\t\t\tvar dt = this.s.dt,\n\t\t\t    table = dt.table(),\n\t\t\t    tableNode = $(table.node()),\n\t\t\t    that = this;\n\n\t\t\tDataTable.ext.search.push(function (settings, data, index) {\n\t\t\t\treturn that._fnGroupExpandCollapseDraw(settings, data, index);\n\t\t\t});\n\n\t\t\t// Group by column\n\t\t\ttableNode.find('tbody').on('click', 'tr.group', function (event) {\n\t\t\t\tif (!event.shiftKey && !event.ctrlKey) {\n\t\t\t\t\tthat._fnGroupExpandCollapse($(this));\n\t\t\t\t}\n\t\t\t});\n\t\t\ttableNode.find('thead').on('click', 'th.toggle-group:first', function () {\n\t\t\t\tthat._fnGroupExpandCollapseAll($(this));\n\t\t\t});\n\t\t\ttableNode.on('draw.dt', function (event, settings) {\n\t\t\t\tthat._fnGroupByColumnDraw(event, settings);\n\t\t\t});\n\t\t\ttableNode.find('thead tr th').first().addClass('toggle-group toggle-group-expanded');\n\t\t},\n\n\t\t\"_fnGroupByColumnDraw\": function _fnGroupByColumnDraw(event, settings) {\n\t\t\tvar dt = this.s.dt,\n\t\t\t    table = dt.table(),\n\t\t\t    tableNode = $(table.node());\n\n\t\t\tvar collapsedGroups = this.s.collapsedGroups,\n\t\t\t    lastDraw = this.s.lastDraw;\n\n\t\t\tvar column = this.c.column;\n\n\t\t\tif (lastDraw === Date.now()) {\n\t\t\t\treturn; // workaround childrow\n\t\t\t}\n\n\t\t\tvar collapse = collapsedGroups.slice(); // copy by value\n\t\t\tvar colspan = '';\n\t\t\tvar j = tableNode.find('thead tr th').length - 2;\n\t\t\tfor (var i = 0; i < j; i++) {\n\t\t\t\tcolspan += '<td></td>';\n\t\t\t}\n\t\t\tvar groupRow;\n\t\t\t// Create group rows for visible rows\n\t\t\tvar rows = $(table.rows({ page: 'current' }).nodes());\n\t\t\ttableNode.find('tr.group').remove();\n\t\t\tvar last;\n\t\t\t// Iterate over data in the group by column\n\t\t\ttable.column(column, { page: 'current' }).data().each(function (group, i) {\n\t\t\t\tif (last !== group) {\n\t\t\t\t\t// Create group rows for collapsed groups\n\t\t\t\t\twhile (collapse.length > 0 && collapse[0].localeCompare(group) < 0) {\n\t\t\t\t\t\tgroupRow = $('<tr class=\"group\"><td class=\"toggle-group\"></td><td class=\"group-label\">' + collapse[0] + '</td>' + colspan + '</tr>').data('groupData', collapse[0]);\n\t\t\t\t\t\trows.eq(i).before(groupRow);\n\t\t\t\t\t\tcollapse.shift();\n\t\t\t\t\t}\n\t\t\t\t\tgroupRow = $('<tr class=\"group\"><td class=\"toggle-group toggle-group-expanded\"></td><td class=\"group-label\">' + group + '</td>' + colspan + '</tr>').data('groupData', group);\n\t\t\t\t\trows.eq(i).before(groupRow);\n\t\t\t\t\tlast = group;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Create group rows for collapsed groups\n\t\t\tvar tbody = tableNode.children('tbody:first');\n\t\t\tcollapse.forEach(function (group) {\n\t\t\t\tgroupRow = $('<tr class=\"group\"><td class=\"toggle-group\"></td><td class=\"group-label\">' + group + '</td>' + colspan + '</tr>').data('groupData', group);\n\t\t\t\ttbody.append(groupRow);\n\t\t\t});\n\t\t\tthis.s.lastDraw = Date.now();\n\t\t},\n\n\t\t\"_fnGroupExpandCollapse\": function _fnGroupExpandCollapse($tr) {\n\t\t\tvar dt = this.s.dt,\n\t\t\t    table = dt.table(),\n\t\t\t    tableNode = $(table.node());\n\n\t\t\tvar collapsedGroups = this.s.collapsedGroups;\n\t\t\tvar td = $('td:first', $tr);\n\t\t\ttd.toggleClass('toggle-group-expanded');\n\t\t\tvar group = $tr.data('groupData');\n\t\t\tif (td.hasClass('toggle-group-expanded')) {\n\t\t\t\tcollapsedGroups = $.grep(collapsedGroups, function (value) {\n\t\t\t\t\treturn value !== group;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcollapsedGroups.push(group);\n\t\t\t}\n\t\t\tthis.s.collapsedGroups = collapsedGroups.sort();\n\t\t\tdt.draw(false);\n\t\t\tthis._fnHideEmptyCollapsedAll(tableNode.find('thead tr th:first'));\n\t\t},\n\n\t\t\"_fnHideEmptyCollapsedAll\": function _fnHideEmptyCollapsedAll($th) {\n\t\t\tvar dt = this.s.dt,\n\t\t\t    table = dt.table(),\n\t\t\t    tableNode = $(table.node());\n\n\t\t\tvar collapsedGroups = this.s.collapsedGroups;\n\n\t\t\tif (tableNode.find('tr.group').length === collapsedGroups.length) {\n\t\t\t\ttableNode.find('td.dataTables_empty').parent().remove();\n\t\t\t\t$th.removeClass('toggle-group-expanded');\n\t\t\t} else {\n\t\t\t\t$th.addClass('toggle-group-expanded');\n\t\t\t}\n\t\t},\n\n\t\t\"_fnGroupExpandCollapseAll\": function _fnGroupExpandCollapseAll($th) {\n\t\t\tvar dt = this.s.dt;\n\n\t\t\tvar column = this.c.column;\n\t\t\tvar collapsedGroups = [];\n\n\t\t\tif ($th.hasClass('toggle-group-expanded')) {\n\t\t\t\tvar last;\n\t\t\t\tdt.column(column).data().each(function (group) {\n\t\t\t\t\tif (last !== group) {\n\t\t\t\t\t\tcollapsedGroups.push(group);\n\t\t\t\t\t\tlast = group;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.s.collapsedGroups = collapsedGroups;\n\t\t\tdt.draw(false);\n\t\t\tthis._fnHideEmptyCollapsedAll($th);\n\t\t},\n\n\t\t\"_fnGroupExpandCollapseDraw\": function _fnGroupExpandCollapseDraw(settings, data) {\n\t\t\tvar column = this.c.column,\n\t\t\t    collapsedGroups = this.s.collapsedGroups;\n\n\t\t\tvar group = data[column];\n\n\t\t\treturn $.inArray(group, collapsedGroups) <= -1;\n\t\t}\n\t});\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * Static parameters\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\tColumnGroup.defaults = {\n\t\tcolumn: null\n\t};\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * Constants\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\t/**\n  * ColumnGroup version\n  *  @constant  version\n  *  @type      String\n  *  @default   As code\n  */\n\tColumnGroup.version = \"1.0.0\";\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * DataTables interfaces\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\t// Expose\n\t$.fn.dataTable.ColumnGroup = ColumnGroup;\n\t$.fn.DataTable.ColumnGroup = ColumnGroup;\n\n\t// Attach a listener to the document which listens for DataTables initialisation\n\t// events so we can automatically initialise\n\t$(document).on('preInit.dt.columnGroup', function (e, settings) {\n\t\tif (e.namespace !== 'dt') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar init = settings.oInit.columnGroup;\n\t\tvar defaults = DataTable.defaults.columnGroup;\n\n\t\tif (init || defaults) {\n\t\t\tvar opts = $.extend({}, init, defaults);\n\n\t\t\tif (init !== false) {\n\t\t\t\tnew ColumnGroup(settings, opts);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn ColumnGroup;\n});",{"version":3,"sources":["resources/assets/js/lib/dataTables.columnGroup.js"],"names":["factory","define","amd","$","window","document","exports","module","root","fn","dataTable","require","jQuery","undefined","DataTable","ColumnGroup","settings","config","dt","Api","c","extend","defaults","s","collapsedGroups","regrouping","lastDraw","dtSettings","_columnGroup","nTable","id","_fixedHeader","_fnConstruct","prototype","table","tableNode","node","that","ext","search","push","data","index","_fnGroupExpandCollapseDraw","find","on","event","shiftKey","ctrlKey","_fnGroupExpandCollapse","_fnGroupExpandCollapseAll","_fnGroupByColumnDraw","first","addClass","column","Date","now","collapse","slice","colspan","j","length","i","groupRow","rows","page","nodes","remove","last","each","group","localeCompare","eq","before","shift","tbody","children","forEach","append","$tr","td","toggleClass","hasClass","grep","value","sort","draw","_fnHideEmptyCollapsedAll","$th","parent","removeClass","inArray","version","e","namespace","init","oInit","columnGroup","opts"],"mappings":"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","file":"dataTables.columnGroup.js","sourceRoot":"/home/travis/build/csrdelft/csrdelft.nl","sourcesContent":["/*! ColumnGroup 1.0.0\n */\n\n/**\n * @summary     ColumnGroup\n * @description Provide the ability to group by a column in a DataTable\n * @version     1.0.0\n * @file        dataTables.columnGroup.js\n * @author      G.J.W. Oolbekkink <g.j.w.oolbekkink@gmail.com\n * @author      P.W.G. Brussee <brussee@live.nl>\n *\n * Alternative implementation of the RowGroup extension for DataTables.\n */\n(function (factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD\n\t\tdefine(['jquery', 'datatables.net'], function ($) {\n\t\t\treturn factory($, window, document);\n\t\t});\n\t}\n\telse if (typeof exports === 'object') {\n\t\t// CommonJS\n\t\tmodule.exports = function (root, $) {\n\t\t\tif (!root) {\n\t\t\t\troot = window;\n\t\t\t}\n\n\t\t\tif (!$ || !$.fn.dataTable) {\n\t\t\t\t$ = require('datatables.net')(root, $).$;\n\t\t\t}\n\n\t\t\treturn factory($, root, root.document);\n\t\t};\n\t}\n\telse {\n\t\t// Browser\n\t\tfactory(jQuery, window, document);\n\t}\n}(function ($, window, document, undefined) {\n\t'use strict';\n\tvar DataTable = $.fn.dataTable;\n\n\t/**\n\t * ColumnGroup allows grouping by column for DataTables\n\t * @class ColumnGroup\n\t * @constructor\n\t * @param {object} settings DataTables settings object\n\t * @param {object} config ColumnGroup options\n\t */\n\tvar ColumnGroup = function (settings, config) {\n\t\t// Sanity check - you just know it will happen\n\t\tif (!(this instanceof ColumnGroup)) {\n\t\t\tthrow \"ColumnGroup must be initialised with the 'new' keyword.\";\n\t\t}\n\n\t\tvar dt = new DataTable.Api(settings);\n\n\t\tthis.c = $.extend(true, {}, ColumnGroup.defaults, config);\n\n\t\tthis.s = {\n\t\t\tdt: dt,\n\t\t\tcollapsedGroups: [],\n\t\t\tregrouping: false,\n\t\t\tlastDraw: null\n\t\t};\n\n\t\tvar dtSettings = dt.settings()[0];\n\t\tif (dtSettings._columnGroup) {\n\t\t\tthrow \"ColumnGroup already initialized on table \" + dtSettings.nTable.id;\n\t\t}\n\n\t\tdtSettings._fixedHeader = this;\n\n\t\tthis._fnConstruct();\n\t};\n\n\t$.extend(ColumnGroup.prototype, {\n\t\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t\t * Private methods (they are of course public in JS, but recommended as private)\n\t\t * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\t\t\"_fnConstruct\": function () {\n\t\t\tvar dt = this.s.dt,\n\t\t\t\ttable = dt.table(),\n\t\t\t\ttableNode = $(table.node()),\n\t\t\t\tthat = this;\n\n\t\t\tDataTable.ext.search.push(function (settings, data, index) {\n\t\t\t\treturn that._fnGroupExpandCollapseDraw(settings, data, index)\n\t\t\t});\n\n\t\t\t// Group by column\n\t\t\ttableNode.find('tbody').on('click', 'tr.group', function (event) {\n\t\t\t\tif (!event.shiftKey && !event.ctrlKey) {\n\t\t\t\t\tthat._fnGroupExpandCollapse($(this));\n\t\t\t\t}\n\t\t\t});\n\t\t\ttableNode.find('thead').on('click', 'th.toggle-group:first', function () {\n\t\t\t\tthat._fnGroupExpandCollapseAll($(this));\n\t\t\t});\n\t\t\ttableNode.on('draw.dt', function (event, settings) {\n\t\t\t\tthat._fnGroupByColumnDraw(event, settings);\n\t\t\t});\n\t\t\ttableNode.find('thead tr th').first().addClass('toggle-group toggle-group-expanded');\n\t\t},\n\n\t\t\"_fnGroupByColumnDraw\": function (event, settings) {\n\t\t\tvar dt = this.s.dt,\n\t\t\t\ttable = dt.table(),\n\t\t\t\ttableNode = $(table.node());\n\n\t\t\tvar collapsedGroups = this.s.collapsedGroups,\n\t\t\t\tlastDraw = this.s.lastDraw;\n\n\t\t\tvar column = this.c.column;\n\n\t\t\t\tif (lastDraw === Date.now()) {\n\t\t\t\treturn; // workaround childrow\n\t\t\t}\n\n\t\t\tvar collapse = collapsedGroups.slice(); // copy by value\n\t\t\tvar colspan = '';\n\t\t\tvar j = tableNode.find('thead tr th').length - 2;\n\t\t\tfor (var i = 0; i < j; i++) {\n\t\t\t\tcolspan += '<td></td>';\n\t\t\t}\n\t\t\tvar groupRow;\n\t\t\t// Create group rows for visible rows\n\t\t\tvar rows = $(table.rows({page: 'current'}).nodes());\n\t\t\ttableNode.find('tr.group').remove();\n\t\t\tvar last;\n\t\t\t// Iterate over data in the group by column\n\t\t\ttable.column(column, {page: 'current'}).data().each(function (group, i) {\n\t\t\t\tif (last !== group) {\n\t\t\t\t\t// Create group rows for collapsed groups\n\t\t\t\t\twhile (collapse.length > 0 && collapse[0].localeCompare(group) < 0) {\n\t\t\t\t\t\tgroupRow = $('<tr class=\"group\"><td class=\"toggle-group\"></td><td class=\"group-label\">' + collapse[0] + '</td>' + colspan + '</tr>').data('groupData', collapse[0]);\n\t\t\t\t\t\trows.eq(i).before(groupRow);\n\t\t\t\t\t\tcollapse.shift();\n\t\t\t\t\t}\n\t\t\t\t\tgroupRow = $('<tr class=\"group\"><td class=\"toggle-group toggle-group-expanded\"></td><td class=\"group-label\">' + group + '</td>' + colspan + '</tr>').data('groupData', group);\n\t\t\t\t\trows.eq(i).before(groupRow);\n\t\t\t\t\tlast = group;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Create group rows for collapsed groups\n\t\t\tvar tbody = tableNode.children('tbody:first');\n\t\t\tcollapse.forEach(function (group) {\n\t\t\t\tgroupRow = $('<tr class=\"group\"><td class=\"toggle-group\"></td><td class=\"group-label\">' + group + '</td>' + colspan + '</tr>').data('groupData', group);\n\t\t\t\ttbody.append(groupRow);\n\t\t\t});\n\t\t\tthis.s.lastDraw = Date.now();\n\t\t},\n\n\t\t\"_fnGroupExpandCollapse\": function ($tr) {\n\t\t\tvar dt = this.s.dt,\n\t\t\t\ttable = dt.table(),\n\t\t\t\ttableNode = $(table.node());\n\n\t\t\tvar collapsedGroups = this.s.collapsedGroups;\n\t\t\tvar td = $('td:first', $tr);\n\t\t\ttd.toggleClass('toggle-group-expanded');\n\t\t\tvar group = $tr.data('groupData');\n\t\t\tif (td.hasClass('toggle-group-expanded')) {\n\t\t\t\tcollapsedGroups = $.grep(collapsedGroups, function (value) {\n\t\t\t\t\treturn value !== group;\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcollapsedGroups.push(group);\n\t\t\t}\n\t\t\tthis.s.collapsedGroups = collapsedGroups.sort();\n\t\t\tdt.draw(false);\n\t\t\tthis._fnHideEmptyCollapsedAll(tableNode.find('thead tr th:first'));\n\t\t},\n\n\t\t\"_fnHideEmptyCollapsedAll\": function ($th) {\n\t\t\tvar dt = this.s.dt,\n\t\t\t\ttable = dt.table(),\n\t\t\t\ttableNode = $(table.node());\n\n\t\t\tvar collapsedGroups = this.s.collapsedGroups;\n\n\t\t\tif (tableNode.find('tr.group').length === collapsedGroups.length) {\n\t\t\t\ttableNode.find('td.dataTables_empty').parent().remove();\n\t\t\t\t$th.removeClass('toggle-group-expanded');\n\t\t\t} else {\n\t\t\t\t$th.addClass('toggle-group-expanded');\n\t\t\t}\n\t\t},\n\n\t\t\"_fnGroupExpandCollapseAll\": function ($th) {\n\t\t\tvar dt = this.s.dt;\n\n\t\t\tvar column = this.c.column;\n\t\t\tvar collapsedGroups = [];\n\n\t\t\tif ($th.hasClass('toggle-group-expanded')) {\n\t\t\t\tvar last;\n\t\t\t\tdt.column(column).data().each(function (group) {\n\t\t\t\t\tif (last !== group) {\n\t\t\t\t\t\tcollapsedGroups.push(group);\n\t\t\t\t\t\tlast = group;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.s.collapsedGroups = collapsedGroups;\n\t\t\tdt.draw(false);\n\t\t\tthis._fnHideEmptyCollapsedAll($th);\n\t\t},\n\n\t\t\"_fnGroupExpandCollapseDraw\": function (settings, data) {\n\t\t\tvar column = this.c.column,\n\t\t\t\tcollapsedGroups = this.s.collapsedGroups;\n\n\t\t\tvar group = data[column];\n\n\t\t\treturn $.inArray(group, collapsedGroups) <= -1;\n\t\t}\n\t});\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Static parameters\n\t * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\tColumnGroup.defaults = {\n\t\tcolumn: null\n\t};\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Constants\n\t * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n\t/**\n\t * ColumnGroup version\n\t *  @constant  version\n\t *  @type      String\n\t *  @default   As code\n\t */\n\tColumnGroup.version = \"1.0.0\";\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * DataTables interfaces\n\t * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n// Expose\n\t$.fn.dataTable.ColumnGroup = ColumnGroup;\n\t$.fn.DataTable.ColumnGroup = ColumnGroup;\n\n// Attach a listener to the document which listens for DataTables initialisation\n// events so we can automatically initialise\n\t$(document).on('preInit.dt.columnGroup', function (e, settings) {\n\t\tif (e.namespace !== 'dt') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar init = settings.oInit.columnGroup;\n\t\tvar defaults = DataTable.defaults.columnGroup;\n\n\t\tif (init || defaults) {\n\t\t\tvar opts = $.extend({}, init, defaults);\n\n\t\t\tif (init !== false) {\n\t\t\t\tnew ColumnGroup(settings, opts);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn ColumnGroup;\n}));\n"]}]}